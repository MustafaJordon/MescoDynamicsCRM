//pChargeTypeName.replace(/\s/g, "").replace(/\//g, '').replace(/\\/g, ''); //remove spaces,slashes,backslashes
//pChargeTypeNameWithOnlyCharsAndNos = pChargeTypeName.replace(/[^\w]/g,'');
//pDescriptionOfGoods.replace(/\n/g, "<br/>"); //to show all enters coming from DB i.e. convert \n to <br>
//item.MarksAndNumbers.split(/\r\n|\r|\n/).length //get number of lines

// Global Variables  ************************************************************
//Icons and Styles Variables

//x.replace(/\B(?=(\d{3})+(?!\d))/g, ","); (to add comma every 3 digits)
//x.replace(/[\, ()/*.]/g, ''); remove , / ) ( \ space *
//x.replace(/[\, ]/g, '') //remove '\', ' ', ','
//x.replace(/[^\w]/g, ''); //Keep only characters and numbers

//mytable.getElementsByTagName("tr")[i].getAttribute("class").includes("hide")
//mytable.getElementsByTagName("tr")[i].getElementsByTagName("td")[j].getAttribute("class")

debugger;

var glbVersion = 14; //20200210 2300 ForwPublish w FlexiUpload Fix
var TRCK_WorkingOnDrivers = 1;
var pDefaults;
var pLoggedUser;
var glbFormCalled = 0; //used for forms which use same table for whereClause filtering
var IsAccountingActive = false;

var constNotificationDateOptionETAPOL = 10;
var constNotificationDateOptionATAPOL = 20;
var constNotificationDateOptionETDPOL = 30;
var constNotificationDateOptionATDPOL = 40;
var constNotificationDateOptionETAPOD = 50;
var constNotificationDateOptionATAPOD = 60;

var constTargetTypeByInvoicePerc = 10;
var constTargetTypeByProfitPerc = 20;
var constTargetTypeByInvoiceFixedAmount = 30;
var constTargetTypeByProfitFixedAmount = 40;

var constLengthUnitTypeID = 10;
var constWeightUnitTypeID = 20;
var constAreaUnitTypeID = 30;
var constVolumeUnitTypeID = 40;
var constTemperatureUnitTypeID = 50;

var constAreaUnitTypeIDForM2 = 90;
var constVolumeUnitTypeIDForM3 = 100;

var constReceiveStatusInProgress = 10;
var constReceiveStatusPutaway = 20;
var constReceiveStatusFinalized = 30;

var constReceiveDetailsStatusPending = 10;
var constReceiveDetailsStatusHeld = 20;
var constReceiveDetailsStatusDamaged = 30;
var constReceiveDetailsStatusPutaway = 40;

var constMaxAccountsLevels = 7;
var constMaxCostCentersLevels = 5;
var constMaxSubAccountsLevels = 7;

var constFrmPosting = 10;
var constFrmUnPosting = 20;
var constFrmRestoring = 30;

var constVoucherCashIn = 10;
var constVoucherCashOut = 20;
var constVoucherChequeIn = 30;
var constVoucherChequeOut = 40;

var intChgWtDividorAirConstant = 6000;
var intChgWtDividorOceanConstant = 5000;
var intChgWtDividorInlandConstant = 3300;
var maxMAWBGeneratedTogether = 100;
var glbCallingControl = "";

var constDocsInFilesPath = "/DocsInFiles//";// + getTodaysDateInddMMyyyyFormat().split('/')[2].toString() + "//";
var constProductDocsInFilesPath = "";

/****************GeneralUploadFiles Parameters************************/
var glbGeneralUploadModalName = "";
var glbGeneralUploadTableName = "";
var glbGeneralUploadFolderName = "";
var glbGeneralUploadPath = "";
var glbGeneralUploadRelativePath = "";
var glbGeneralUploadBtnUploadName = "";
var glbTblTHSelectAllTagName = "";


var constPricingOcean = 10;
var constPricingAir = 20;
var constPricingInland = 30;
var constPricingCustomsClearance = 40;
var constPricingGeneral = 50;
var intPricingType = 0;

var constRequest = 10; //PricingRequest
var constReply = 20; //PricingReply

var OceanTransportType = 1;
var AirTransportType = 2;
var InlandTransportType = 3;
var CustomsClearanceTransportType = 70;

var constImportDirectionType = 1;
var constExportDirectionType = 2;
var constDomesticDirectionType = 3;
var constCrossBookingDirectionType = 4;
var constReExportDirectionType = 5;

var constDirectBLType = 1;
var constHouseBLType = 2;
var constMasterBLType = 3;

var glbOperationTransportFilter = 0;
var glbOperationDirectionFilter = 0;
var glbOperationBLTypeFilter = 0;
var glbOperationStageFilter = "";
var glbOperationTxtSearchFilter = "";

var glbQuotationTransportFilter = 0;
var glbQuotationDirectionFilter = 0;
var glbQuotationStageFilter = "";
var glbQuotationTxtSearchFilter = "";

var constFCLShipmentType = 1;
var constLCLShipmentType = 2;
var constFTLShipmentType = 3;
var constLTLShipmentType = 4;
var constConsolidationShipmentType = 5;
var constFlexiShipmentType = 10;
var constTankShipmentType = 20;

var constCustomerPartnerTypeID = 1;
var constAgentPartnerTypeID = 2;
var constShippingAgentPartnerTypeID = 3;
var constCustomsClearanceAgentPartnerTypeID = 4;
var constShippingLinePartnerTypeID = 5;
var constAirlinePartnerTypeID = 6;
var constTruckerPartnerTypeID = 7;
var constSupplierPartnerTypeID = 8;
var constCustodyPartnerTypeID = 20;

var constShipperOperationPartnerTypeID = 1;
var constConsigneeOperationPartnerTypeID = 2;
var constNotify1OperationPartnerTypeID = 4;
var constNotify2OperationPartnerTypeID = 5;
var constAgentOperationPartnerTypeID = 6;
var constShippingAgentOperationPartnerTypeID = 7;
var constCustomsClearanceAgentOperationPartnerTypeID = 8;
var constShippingLineOperationPartnerTypeID = 9;
var constAirineOperationPartnerTypeID = 10;
var constTruckerOperationPartnerTypeID = 11;
var constSupplierOperationPartnerTypeID = 12;
var constCustodyOperationPartnerTypeID = 20;
var constEndUserOperationPartnerTypeID = 30;
var constExporterOperationPartnerTypeID = 160;
var constImporterOperationPartnerTypeID = 170;
var constBookingPartyOperationPartnerTypeID = 180;
var constOwnerOperationPartnerTypeID = 190;
var constClientOperationPartnerTypeID = 200;

var constExlReportTypeID = 1;
var constExlWOFormatReportTypeID = 2;
var constPdfReportTypeID = 3;
var constWordReportTypeID = 4;
var constRTFReportTypeID = 5;

var constPaymentTypeOpenBalance = 0; //PaymentTypeID is null for Open Balance
var constPaymentTypeCash = 10;
var constPaymentTypeCheque = 20;
var constPaymentTypeVisa = 30;
var constPaymentTypeBankDeposit = 40;
var constPaymentTypeCredit = 50;
var constPaymentTypeBankTransfer = 45;
var constCurrentPaymentType = 0;

//may be will be used for DB search for better performance if i want only Payables or only Rec. Logs
//never change those coz used in side controllers
var constOperationLogForPay = 10;
var constOperationLogForRec = 20;

var constOperationsFormID = 29;//OperationsManagement
var constQuotationsFormID = 28;//QuotationsManagement

var DirectIconName = "fa-indent";
var strDirectIconStyleClassName = "direct-icon-style"; //holds the css class name
var HouseIconName = "fa-link";
var strHouseIconStyleClassName = "house-icon-style"; //holds the css class name
var MasterIconName = "fa-book";
var strMasterIconStyleClassName = "master-icon-style"; //holds the css class name

//var OceanIconName = "fa-anchor";
var OceanIconName = "fa-anchor";
var strOceanIconStyleClassName = "ocean-icon-style"; //holds the css class name
var AirIconName = "fa-plane";
var strAirIconStyleClassName = "air-icon-style"; //holds the css class name
var InlandIconName = "fa-truck";
var strInlandIconStyleClassName = "inland-icon-style"; //holds the css class name
var CustomsClearanceIconName = "fa-check-square-o";
var strCustomsClearanceIconStyleClassName = "air-icon-style"; //holds the css class name

var ImportIconName = "fa-arrow-circle-down";
var strImportIconStyleClassName = "import-icon-style"; //holds the css class name
var ExportIconName = "fa-external-link";
var strExportIconStyleClassName = "export-icon-style"; //holds the css class name
var DomesticIconName = "fa-home";
var strDomesticIconStyleClassName = "domestic-icon-style"; //holds the css class name
var CrossbookingIconName = "fa-arrows";
var strCrossbookingIconStyleClassName = "import-icon-style"; //holds the css class name
var ReExportIconName = "fa-repeat";
var strReExportIconStyleClassName = "export-icon-style"; //holds the css class name

//EOF Icons and Styles Variables
//RoutingTypesIDs
var PickupRoutingTypeID = 10;
var PreCarraigeRoutingTypeID = 20;
var MainCarraigeRoutingTypeID = 30;
var OnCarraigeRoutingTypeID = 40;
var DeliveryRoutingTypeID = 50;
var TruckingOrderRoutingTypeID = 60;
var CustomsClearanceRoutingTypeID = 70;
//EOF RoutingTypesIDs
var TruckingOrderDocumentTypeID = 230
//QuoteAndOperStageIDs
var CreatedQuoteAndOperStageID = 1;
var SentQuoteAndOperStageID = 2;
var DraftQuoteAndOperStageID = 3;
var AcceptedQuoteAndOperStageID = 4;
var DeclinedQuoteAndOperStageID = 5;
var OpenQuoteAndOperStageID = 60;
var DepartedQuoteAndOperStageID = 70;
var ArrivedQuoteAndOperStageID = 80;
var DeliveryQuoteAndOperStageID = 90;
var DeliveredQuoteAndOperStageID = 100;
var CancelledQuoteAndOperStageID = 110;
var ClosedQuoteAndOperStageID = 120;
//EOF QuoteAndOperStageIDs
//Roles which can't be deleted
var constAdministratorRoleID = 1;
var constManagementRoleID = 5;
var IsAdminRoleID = false;
//EOF Roles which can't be deleted
//i made those messages as global strings for the case i need translation
var strSorry = "Sorry";
var strPlease = "Please";
var strAreYouSure = "Are you sure?";
var strSelectPortMessage = "Select a port type or uncheck the port property.";
var strDeleteFailMessage = "This command is not completed because of dependencies existance."
var strUniqueFailInsertUpdateMessage = "Uniqueness violated.";
var strUniqueFailInsertUpdateGeneralMessage = "Uniqueness violated.";
var strPasswordsDontMatch = "The Passwords do not match!";
var showDeleteFailMessage = false;
var strNoPermissionMessage = "You Do Not Have Permission.";
var strThreateningMessage = "Don't Do That Again Or Your Username Will Be Saved And Reported!";
var strPOLEqualPODWarning = "POL can not be the same as POD.";
var strDomesticWithDifferentCountriesWarning = "When you choose Domestic, then POL Country must be the same as POD Country.";
var strImportOrExportWithSameCountriesWarning = "When you choose Import or Export, then POL Country must be different from POD Country.";
var strEmptyPortsWarning = "The ports must not be empty.";
var strCheckEntries = "Please, Check the entries.";
var strCheckPrices = "Please, Check the prices.";
var strCheckDates = "Please, Check the dates.";
var strNoRecords = "No records are found.";
var strServerURL = "";
var strLoadWithPagingFunctionName = "";
var strBindTableRowsFunctionName = "";
//var myApp;
var editControlsText = " class='btn btn-xs btn-rounded btn-lightblue float-right hide' title='Edit'> <i class='fa fa-pencil' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + TranslateString("Edit") + "</span>";
var editLogTaxesPercentagesText = " class='btn btn-xs btn-rounded btn-primary float-right' > <i class='fa fa-chain' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + TranslateString("Perc. Log") + "</span>";
var editLogExchangeRatesText = " class='btn btn-xs btn-rounded btn-primary float-right' > <i class='fa fa-chain' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + TranslateString("Rate Log") + "</span>";
var EditedRoleID = 0; //used incase of calling LoadWithPaging() from applypaging 
var EditedUserID = 0; //used incase of calling LoadWithPaging() from applypaging 
var FormID = 0;
var QV = false; var QA = false; var QE = false; var QD = false; var OV = false; var OA = false; var OE = false; var OD = false;
//quotCustsec
var QVGen = false; var QAGen = false; var QEGen = false; var QDGen = false; var QVPar = false; var QAPar = false; var QEPar = false; var QDPar = false;
var QVPac = false; var QAPac = false; var QEPac = false; var QDPac = false; var QVRou = false; var QARou = false; var QERou = false; var QDRou = false;
var QVCha = false; var QACha = false; var QECha = false; var QDCha = false;
//operCustsec
var OVGen = false; var OAGen = false; var OEGen = false; var ODGen = false; var OVPar = false; var OAPar = false; var OEPar = false; var ODPar = false;
var OVPac = false; var OAPac = false; var OEPac = false; var ODPac = false; var OVRou = false; var OARou = false; var OERou = false; var ODRou = false;
var OVPay = false; var OAPay = false; var OEPay = false; var ODPay = false; var OVRec = false; var OARec = false; var OERec = false; var ODRec = false;
var OVInv = false; var OAInv = false; var OEInv = false; var ODInv = false; var OVMas = false; var OAMas = false; var OEMas = false; var ODMas = false;
var OVShi = false; var OAShi = false; var OEShi = false; var ODShi = false;
var OVDocIn = false; var OADocIn = false; var OEDocIn = false; var ODDocIn = false;
var OVNot = false; var OANot = false; var OENot = false; var ODNot = false; //Not: Notes(Credit/Debit)
var OVTra = false; var OATra = false; var OETra = false; var ODTra = false;
var OVPurInv = false; var OAPurInv = false; var OEPurInv = false; var ODPurInv = false;
var OVDraftInv = false; var OADraftInv = false; var OEDraftInv = false; var ODDraftInv = false;
var CustomerAdd = false; var CustomerEdit = false; varAgentAdd = false; var AgentEdit = false;

var constTransactionOpenCreditBalance = 2; //OpenCreditBalance
var constTransactionOpenDebitBalance = 5; //OpenDebitBalance
var constTransactionARPayment = 10; //Credit
var constTransactionAPPayment = 20; //Debit
var constTransactionInvoiceApproval = 30; //Debit
var constTransactionReceivableAllocation = 40; //Debit
var constTransactionCreditTransfer = 50; //CreditTransfer
var constTransactionDebitTransfer = 60; //DebitTransfer
var constTransactionPayableApproval = 70; //Op.Payable (Credit For Supplier)
var constTransactionPayableAllocation = 80; //Credit
var constTransactionPayableAllocatedFromCustody = 85; //Credit
var constTransactionDebitNote = 90; //DebitNote (i.e. Receivables) inv
var constTransactionCreditNote = 100; //CreditNote (i.e. Payables)
var glbTransactionType = 0;

//var constPRTypeOpenBalance = 5;
var constPRTypeReceivable = 10;
var constPRTypePayable = 20;
var glbPRType = 0;

var constReceivedEmail = 10;
var constSentEmail = 20;
// Mohamed Abd Elmougood ************************************************************
var constCashInVoucher = 1;
var constCashOutVoucher = 1;
// EOF Mohamed Abd Elmougood ************************************************************
//EOF Global Variables  ************************************************************

////to prevent backspace from going back
//$(document).on("keydown", function (e) {
//    debugger;
//    if (e.which === 8 && !$(e.target).is("input, textarea")) {
//        e.preventDefault();
//    }
//});
var OptionNameCodeAccount = "";
var varPreventTimeoutAndLoadDefaults;
// GLOBAL FUNCTIONS -------------------------------------------------------------


function LoadDefaults(pServiceFunctionName, pWhereClause , callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) { //DefaultsRow: data[0], hReadySlBranches: data[1], hReadySlCurrencies: data[2], pEmailReceiver:data[5], pUnderCollectCheques: data[6]
            var pEmailReceiver = data[5];
            var pUnderCollectCheques = data[6];
            pDefaults = JSON.parse(data[0]);
            pLoggedUser = JSON.parse(data[8]);


            $("#hDefaultCompanyName").val(pDefaults.CompanyName);
            $("#hDefaultCurrencyID").val(pDefaults.CurrencyID);
            $("#hDefaultCurrencyCode").val(pDefaults.CurrencyCode);
            $("#hDefaultForeignCurrencyID").val(pDefaults.ForeignCurrencyID);
            $("#hDefaultBranchID").val(pDefaults.BranchID);
            $("#hUserBranchID").val(pDefaults.UserBranchID);
            $("#hIsCreditlimitexceptionperiod").val(pDefaults.IsCreditlimitexceptionperiod);

            $("#hDefaultCountryID").val(pDefaults.CountryID);
                $("#headerGraphLocalCurrency").text("Money in " + $("#hDefaultCurrencyCode").val());
                $("#hDefaultImportOceanDays").val(pDefaults.ImportOceanDays);
                $("#hDefaultImportAirDays").val(pDefaults.ImportAirDays);
                $("#hDefaultImportInlandDays").val(pDefaults.ImportInlandDays);
                $("#hDefaultExportOceanDays").val(pDefaults.ExportOceanDays);
                $("#hDefaultExportAirDays").val(pDefaults.ExportAirDays);
                $("#hDefaultExportInlandDays").val(pDefaults.ExportInlandDays);
                $("#hDefaultDomesticOceanDays").val(pDefaults.DomesticOceanDays);
                $("#hDefaultDomesticAirDays").val(pDefaults.DomesticAirDays);
                $("#hDefaultDomesticInlandDays").val(pDefaults.DomesticInlandDays);
                $("#hDefaultUnEditableCompanyName").val(pDefaults.UnEditableCompanyName);

                FillListFromObject(pDefaults.CurrencyID, 3, null/*1st row*/, "hReadySlCurrencies", data[2], null);
                FillListFromObject(pDefaults.UserBranchID, 2/*pCodeOrName*/, null/*1st row*/, "hReadySlBranches", data[1], null);

            //});
            $("#hLoggedUserID").val(data[3]);
            $("#hLoggedUserNameNotLogin").val(data[4]); //not login name

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!  this is LoadDefaults in mainapp.master !", "error");
        }
    });
}

//i call it every fixed interval of time to prevent timeout on host
function PreventTimeoutAndLoadDefaults() {
    debugger;
    LoadDefaults("/api/Defaults/LoadAll", "WHERE 1=1 "); // i am sure i will get just 1 record isa
    //var now = new Date();
    //var outStr = now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds();
    //alert("Prevent fn is called at ." + outStr);
    varPreventTimeoutAndLoadDefaults = setTimeout(PreventTimeoutAndLoadDefaults, 300000); //5minutes (in msecs)
}

function FillAlarms(pAlarmRows) {
    debugger;
    var Anchors = "";
    $.each(pAlarmRows, function (i, item) {
        if (item.QuotationRouteRequestID != 0) { //Request to enter QuotationCharges
            Anchors += ' <a href="#" onclick="AnswerQuotationChargeRequest(' + item.EmailID + "," + item.QuotationRequestID + "," + item.QuotationRouteRequestID + ');" class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">Charges Request for Quot : <span>' + item.QuotationRouteRequestCode + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else
            if (item.QuotationRouteID != 0) { //Request to create operation on quotation
            Anchors += ' <a href="#" onclick="CreateOperationFromAlarm(' + item.EmailID + "," + item.QuotationRouteID + ',' + "'" + item.QuotationCode + "'" +');" class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">Create Operation for Quot : <span>' + item.QuotationCode + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.PricingID != 0) {
            Anchors += ' <a href="#" onclick="LoadViews(' + (item.RequestOrReply ==constReply ? "'PricingRequest'" : "'PricingForm'") + ", " + item.PricingTypeID + ", " + item.PricingID + ');" class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.RequestOrReplyCase +' <span>' + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else { //normal email
            Anchors += ' <a href="#" onclick="LoadViews(' + "'LocalEmails'" + ' , null , ' + item.EmailID + ');" class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject +' <span>' + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
    });
    $("#spanNotificationsCount").text(pAlarmRows.length);
    $("#span1stRowNotifications").text("You have " + (pAlarmRows.length) + " Notification(s).");
    $("#divNotificationAchors").html(Anchors);
}
function CreateOperationFromAlarm(pEmailID, pQuotationRouteID, pQuotationCode) {
    debugger;
    UnLoadOperationsSubMenu();
    Quotations_ClearFilters();
    $("#hl-menu-LocalEmails").parent().siblings().removeClass("active");
    //$("#hl-menu-Dashboard").parent().addClass("active");
    strBindTableRowsFunctionName = "LocalEmails_BindTableRows";
    strLoadWithPagingFunctionName = "/api/LocalEmails/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
    //var pWhereClause = " WHERE IsDeleted=0 AND (ReceiverUserID = " + $("#hLoggedUserID").val() +" OR SenderUserID = " + $("#hLoggedUserID").val() + ")";
    var pWhereClause = " WHERE IsDeleted=0 AND ReceiverUserID = " + $("#hLoggedUserID").val(); //Default is the received mails
    //var pWhereClause = " WHERE Receivers LIKE N'%" + $("#hLoggedUserNameNotLogin").val() + "%' "; //Default is the received mails
    var pOrderBy = "ID DESC";
    var pPageNumber = 1;
    var pPageSize = 10;
    var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy,pIsReceived: true }
    LoadView("/LocalEmails/LocalEmails", "div-content", function () {
        if ($("#hDefaultUnEditableCompanyName").val() == "KDS") {
            //SelectOperationTypeModal
            $("#spanCbIsHouse").text("B/L");
            $("#spanCbIsMaster").text("Full Vessel");
        }
        LoadView("/MasterData/ModalCheckboxesList", "div-content", null, null, null, true);
        $.getScript(strServerURL + '/Scripts/LocalEmails/LocalEmails.js?' + glbVersion, function () {
            LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                , function (pData) {
                    LocalEmails_BindTableRows(JSON.parse(pData[0]));
                    FillListFromObject(null, 2/*pCodeOrName*/, "All Users", "slUser", pData[2], null);
                    Alarm_FillSelectOperationTypeModal(pEmailID, pQuotationRouteID, pQuotationCode);
                });
        });
    });
}
function AnswerQuotationChargeRequest(pEmailID, pQuotationRequestID, pQuotationRouteRequestID) {
    debugger;
    UnLoadOperationsSubMenu();
    Quotations_ClearFilters();
    $("#hl-menu-Quotations").parent().siblings().removeClass("active");
    LoadViews("QuotationsEdit", null, pQuotationRequestID, null/*pWhereClauseOverRiding*/, pQuotationRouteRequestID);
    //Routings_EditByDblClick(20174);
}
function FillAccPaymentAlarms(pAlarmRows) {
    debugger;
    var Anchors = "";
    $.each(pAlarmRows, function (i, item) {
        Anchors += ' <a href="#" onclick="OpenAccPaymentFromAlarm(' + item.ID + "," + item.PRType + ');" class="media list-group-item" style="display: block;">';
        Anchors += '    <span class="media-body block m-b-none">ChequeNo:<span>' + item.ChequeOrVisaNo + ' - DueDate:' + ConvertDateFormat(GetDateWithFormatMDY(item.DueDate)) + '</span><br><small class="text-muted">Partner:' + item.PartnerName + '</small></span>';
        Anchors += ' </a> ';
    });
    $("#spanAccPaymentNotificationsCount").text(pAlarmRows.length);
    $("#spanAccPayment1stRowNotifications").text("You have " + (pAlarmRows.length) + " Cheques Notification(s).");
    $("#divAccPaymentNotificationAchors").html(Anchors);
}
function OpenAccPaymentFromAlarm(pAccPaymentID, pPRType) {
    debugger;
    UnLoadOperationsSubMenu();
    Quotations_ClearFilters();
    $("#hl-menu-OperAcc").parent().siblings().removeClass("active");
    $("#hf_CanEdit").val("1");
    var pControlID = (pPRType == constPRTypeReceivable ? "ARPayments" : "APPayments");
    if (pControlID == "ARPayments") {
        glbTransactionType = constTransactionARPayment;
        glbPRType = constPRTypeReceivable;
    }
    else { //APPayments
        glbTransactionType = constTransactionAPPayment;
        glbPRType = constPRTypePayable;
    }
    strBindTableRowsFunctionName = "Payment_BindTableRows";
    strLoadWithPagingFunctionName = "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
    LoadView("/OperAcc/Payment", "div-content", function () {
        $.getScript(strServerURL + '/Scripts/OperAcc/CommonARAndAP/Payment.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
            var pWhereClause = " WHERE PaymentTypeID IS NOT NULL AND IsDeleted=0 AND IsApproved=0 AND PRType = " + glbPRType + " AND ID=" + pAccPaymentID;
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
            , function (pData) {
                Payment_BindTableRows(JSON.parse(pData[0]));
                FillListFromObject(null, 5/*pCodeOrName*/, "Select Partner", "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                FillListFromObject(null, 2/*pCodeOrName*/, "Select Treasury", "slPaymentTreasury", pData[3], null);
                FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], function () { $("#slPaymentPartnerType").html($("#slPartnerType").html()); });
                FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                FillListFromObject(null, 4/*pNameAndCode*/, "Select Charge", "slPaymentChargeType", pData[7], null);
                //$("#slARFBranch").html($("#hReadySlBranches").html());
                //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                if (pControlID == "ARPayments") {
                    $("#liAccountsPaymentLink").text("Accounts Receivable");
                    $("#liAccountsPaymentLink").attr("onclick", "LoadViews('AccountsReceivable')");
                    $("#liAccountsPaymentLink1").attr("onclick", "LoadViews('AccountsReceivable')");
                    $("#h3Payment").text("A\\R (Receivables)"); $("#h3Payment").addClass("static-text-primary");
                    $("#h3ModalLblPaymentType").html("A\\R (Receivables)" + '&nbsp;<label id="lblPaymentShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                    $("#h3ModalLblPaymentType").addClass("static-text-primary");
                    $("#divWithHoldingTax").removeClass("hide");
                    //$("#divIsGeneralExpense").addClass("hide");
                }
                else { //APPayments
                    $("#liAccountsPaymentLink").text("Accounts Payable");
                    $("#liAccountsPaymentLink").attr("onclick", "LoadViews('AccountsPayable')");
                    $("#liAccountsPaymentLink1").attr("onclick", "LoadViews('AccountsPayable')");
                    $("#h3Payment").text("A\\P (Payables)"); $("#h3Payment").addClass("static-text-danger");
                    $("#h3ModalLblPaymentType").html("A\\P (Payables)" + '&nbsp;<label id="lblPaymentShown" purpose="dynamicLabel" class="static-text-danger"></label>');
                    $("#h3ModalLblPaymentType").addClass("static-text-danger");
                    $("#divWithHoldingTax").addClass("hide");
                    //$("#divIsGeneralExpense").removeClass("hide");
                }
                $("#liAccountPaymentType").text($("#h3Payment").text());
            });
        });
    },
        function () { Payment_ClearAllControls(); }, //i insert a new air reservation form directly
        function () { Payment_DeleteList(); });
}

function FillModules(callback) {
    debugger;
    $.ajax({
        type: "POST",
        url: strServerURL + "/api/Security/ModulesData",
        data: JSON.stringify({ pCutlureID: $("#hf_ChangeLanguage").val().trim(), pWhereClause: " WHERE ParentGroupID IS NULL AND IsInactive<>1 ", pOrderBy: "  GroupOrderNo ", pOperationFormID: constOperationsFormID, pQuotationFormID: constQuotationsFormID }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            QV = data[2]; QA = data[3]; QE = data[4]; QD = data[5]; OV = data[6]; OA = data[7]; OE = data[8]; OD = data[9];

            QVGen = data[10]; QAGen = data[11]; QEGen = data[12]; QDGen = data[13]; QVPar = data[14]; QAPar = data[15]; QEPar = data[16]; QDPar = data[17];
            QVPac = data[18]; QAPac = data[19]; QEPac = data[20]; QDPac = data[21]; QVRou = data[22]; QARou = data[23]; QERou = data[24]; QDRou = data[25];
            QVCha = data[26]; QACha = data[27]; QECha = data[28]; QDCha = data[29];

            OVGen = data[30]; OAGen = data[31]; OEGen = data[32]; ODGen = data[33]; OVPar = data[34]; OAPar = data[35]; OEPar = data[36]; ODPar = data[37];
            OVPac = data[38]; OAPac = data[39]; OEPac = data[40]; ODPac = data[41]; OVRou = data[42]; OARou = data[43]; OERou = data[44]; ODRou = data[45];
            OVPay = data[46]; OAPay = data[47]; OEPay = data[48]; ODPay = data[49]; OVRec = data[50]; OARec = data[51]; OERec = data[52]; ODRec = data[53];
            OVInv = data[54]; OAInv = data[55]; OEInv = data[56]; ODInv = data[57]; OVDoc = data[58]; OADoc = data[59]; OEDoc = data[60]; ODDoc = data[61];
            OVMas = data[62]; OAMas = data[63]; OEMas = data[64]; ODMas = data[65]; OVShi = data[66]; OAShi = data[67]; OEShi = data[68]; ODShi = data[69];
            OVDocIn = data[70]; OADocIn = data[71]; OEDocIn = data[72]; ODDocIn = data[73];
            OVNot = data[74]; OANot = data[75]; OENot = data[76]; ODNot = data[77];
            OVTra = data[78]; OATra = data[79]; OETra = data[80]; ODTra = data[81];
            CustomerAdd = data[82]; CustomerEdit = data[83]; AgentAdd = data[84]; AgentEdit = data[85];
            OVPurInv = data[86]; OAPurInv = data[87]; OEPurInv = data[88]; ODPurInv = data[89];
            OVDraftInv = data[90]; OADraftInv = data[91]; OEDraftInv = data[92]; ODDraftInv = data[93];
            var menuItems = "";
            if ($("#sp-LoginName").text() != "BG EGYPT")
                $.each(JSON.parse(data[0]), function (i, item) {
                    if (item.GroupCode == 'Accounting')
                        IsAccountingActive = true;
                    if (!(item.GroupCode == 'Operations' && !OV) && !(item.GroupCode == 'Quotations' && !QV))
                        menuItems += '<li><a id="hl-menu-' + item.GroupCode + '" class="hl-menu-item" href="javascript:void(0);"><i class="fa ' + item.GroupIconName + ' icon"><b class="bg-primary"></b></i><span>' + item.GroupDecryptedName + '</span></a></li>';
                });
            $("#ulMainMenu").html(menuItems);
            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!  this is FillModules() in mainapp.master !", "error");
        }
    });
}

function FillGroups(pWhereClause, pActiveGroup, callback1, callback2) {
    $.ajax({
        type: "POST",
        url: strServerURL + "/api/Security/ModulesData",
        data: JSON.stringify({ pCutlureID: $("#hf_ChangeLanguage").val().trim(), pWhereClause: pWhereClause, pOrderBy: "  GroupOrderNo ", pOperationFormID: constOperationsFormID, pQuotationFormID: constQuotationsFormID }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var groupItems = "";
            var ParentGroupCode = "";
            var htmlDivContent = "";
            $.each(JSON.parse(data[0]), function (i, item) {
                if (item.GroupCode == "Quotations" || item.GroupCode == "Operations")
                //if (item.GroupCode == "Quotations")
                    groupItems += '<a id="tab' + item.GroupCode + '" name="tabs" tab-name="' + item.GroupCode + '" class="btn btn-s-md btn-primary hide ' + (item.GroupCode == pActiveGroup ? ' btn-warning ' : '') + ' btn-rounded"><i class="fa ' + item.GroupIconName + '"></i>&nbsp;' + item.GroupDecryptedName + '</a>';//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';
                else
                    groupItems += '<a id="tab' + item.GroupCode + '" name="tabs" tab-name="' + item.GroupCode + '" class="btn btn-s-md btn-primary ' + (item.GroupCode == pActiveGroup ? ' btn-warning ' : '') + ' btn-rounded"><i class="fa ' + item.GroupIconName + '"></i>&nbsp;' + item.GroupDecryptedName + '</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';
                ParentGroupCode = item.ParentGroupCode; //all are the same, and i just need 1
            });
            htmlDivContent = ' <div id="div-Data"> ';
            htmlDivContent += '     <ul id="ul-breadcrumb" class="breadcrumb no-border no-radius b-b b-light pull-in"> ';
            htmlDivContent += '         <li><a id="hl-homepage" href="javascript:void(0);"><i class="fa fa-home icon-home"></i><span>' + data[1] + '</span> ';
            htmlDivContent += '         </a></li> ';
            htmlDivContent += '         <li class="active">' + ParentGroupCode;
            htmlDivContent += '     </ul> ';
            htmlDivContent += '     <section class="panel panel-default"> ';
            htmlDivContent += '         <header class="panel-heading"> ';
            htmlDivContent += '             <h3 class="m-b-none"> ' + ParentGroupCode;
            htmlDivContent += '             </h3> ';
            htmlDivContent += '         </header> ';
            htmlDivContent += '         <div class="row text-sm wrapper"> ';
            htmlDivContent += '             <div id="div-main-options" class="col-sm-12 m-b-xs"> ';
            htmlDivContent += '             </div> ';
            htmlDivContent += '         </div> ';
            if (ParentGroupCode == "Quotations" || ParentGroupCode == "Operations")
            //if (ParentGroupCode == "Quotations")
                htmlDivContent += '         <div id="div-Tabs" class="hide"> ';
            else
                htmlDivContent += '         <div id="div-Tabs"> ';
            htmlDivContent += '         </div> ';
            htmlDivContent += '     </section> ';
            htmlDivContent += ' </div> ';
            $("#div-content").html(htmlDivContent);
            $("#div-main-options").html(groupItems);
            $("#hl-homepage").on("click", function () { LoadViews("hl-homepage"); });
            if (callback1 != null && callback1 != undefined)
                callback1();
            if (callback2 != null && callback2 != undefined)
                callback2();
            FillForms(" where 1=1 ", pActiveGroup, function () {
                $("#div-content .hl-menu-item").on("click", function (event) {
                    FormID = $(this).attr("id").split('-')[3];
                    //if (pActiveGroup != "OperationsManagement" && pActiveGroup != "QuotationsManagement")
                    GetPermissions(LoadViews($(this).attr("id").toString().split('-')[2]));
                });
            }, function () {
                $("a[name='tabs']").click(function () {
                    $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning");
                    $(this).addClass("btn-warning");
                });
            }, function () {
                $("#div-Tabs").children().addClass("hide"); $("#sec-" + pActiveGroup).removeClass("hide"); $("#tab" + pActiveGroup).parent().children().removeClass("btn-warning"); $("#tab" + pActiveGroup).addClass("btn-warning");
            }, null //function () { // this function is to open quotations and operations directly
            //    if (pActiveGroup == "Quotations")
            //        $("#hl-menu-QuotationsManagement" + constQuotationsFormID).click();//$("#hl-menu-QuotationsManagement-28").click();
            //    else if (pActiveGroup == "Operations")
            //        $("#hl-menu-OperationsManagement" + constOperationsFormID).click(); //$("#hl-menu-OperationsManagement-29").click();
            //}
            )
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!  this is FillGroups() in mainapp.master !", "error");
        }
    });
}

function GetPermissions(callbackAddNew, callbackDelete) {
    var data = {
        "pFormID": FormID.toString(),
    };
    $.ajax({
        type: "POST",
        url: strServerURL + "/api/UserPrivileges/LoadAll",
        data: JSON.stringify(data),
        dataType: "json",
        //beforeSend: function () { },
        contentType: "application/json; charset=utf-8",
        success: function (data) {
            if (data[1] != -1) { //session is not expired (data[1]: is the UserID)
                $.each(JSON.parse(data[0]), function (i, item) { //I am sure i ve just 1 row isa coz i serach with form id in the controller
                    if (constAdministratorRoleID == item.RoleID)
                        IsAdminRoleID = true;
                    else
                        IsAdminRoleID = false;

                    if (item.CanDelete) {
                        $("#hf_CanDelete").val("1");
                        if (callbackDelete != null && callbackDelete != undefined) {
                            $('#btn-Delete').on("click", function () { callbackDelete(); });
                        }
                    }
                    else
                        $("#hf_CanDelete").val("0");

                    if (item.CanAdd) {
                        $("#hf_CanAdd").val("1");
                        if (callbackAddNew != null && callbackAddNew != undefined) {
                            $('#btn-NewAdd').on("click", function () { callbackAddNew(); });
                        }
                    }
                    else
                        $("#hf_CanAdd").val("0");

                    if (item.CanEdit)
                        $("#hf_CanEdit").val("1");
                    else
                        $("#hf_CanEdit").val("0");
                });
            }
            else {
                $("#anchorLogout")[0].click();
            }
            //    if (callback != null && callback != undefined) { // the callback here is fn LoadViews()
            //        callback();
            //    }

        },
        error: function (jqXHR, exception) {
            alert('Error when trying to call function [' + pFunctionName + ']. GetPermissions fn in mainapp.master.js');
        }
    });
}

//to show and hide Add and Delete Buttons (to be changed for real security)
function ApplyPermissions(callbackAddNew, callbackDelete) {
    //Add
    if ($("#hf_CanAdd").val() == "1") {
        $("#btn-NewAdd").removeClass("hide");
        $("#btnSavePricing").removeClass("hide");
    }
        //No Add Permission
    else {
        $('#btn-NewAdd').prop('onclick', null);
        $('#btn-NewAdd').on("click", function () { swal(strThreateningMessage, strNoPermissionMessage, "error"); });
        $("#btn-NewAdd").addClass("hide");
        $("#btn-NewAdd").removeAttr("data-target");
        $("#btnSavePricing").addClass("hide");
    }

    //Delete
    if ($("#hf_CanDelete").val() == 1) {
        $("#btn-Delete").removeClass("hide");
        $("#btn-PermanentDelete").removeClass("hide");
    }
        //No Delete Permission
    else {
        $('btn-Delete').prop('onclick', null);
        $('#btn-Delete').on("click", function () { swal(strThreateningMessage, strNoPermissionMessage, "error"); });
        $("#btn-Delete").addClass("hide");
        $("#btn-PermanentDelete").addClass("hide");
    }

    //Edit
    if ($("#hf_CanEdit").val() != 1) {
        $("tr").prop('ondblclick', null);
        $('tr').removeAttr('ondblclick');
        //$("tr").on('dblclick', function () { swal(strThreateningMessage, strNoPermissionMessage, "error"); });
    }
    if ($("#hf_CanEdit").val() == 1) {
        $("tr td a").removeClass("hide");
    }
        //No Delete Permission
    else {
        $('tr td:not([class]) a').prop('onclick', null);
        $('tr td:not([class]) a').on("click", function () { swal(strThreateningMessage, strNoPermissionMessage, "error"); });
        $('tr td:not([class]) a').removeAttr('href');
        $('tr td:not([class]) a').removeAttr('data-toggle');
    }
}


function FillForms(pWhereClause, pActiveGroup, callback1, callback2, callback3, callbackToOpenDirectly) {
    $.ajax({
        type: "POST",
        url: strServerURL + "/api/Forms/FormsData",
        data: JSON.stringify({ pCutlureID: $("#hf_ChangeLanguage").val().trim(), pWhereClause: pWhereClause, pActiveGroup: pActiveGroup, pOrderBy: " OrderNo " }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var formItems = "";
            if (data[3] > 0) { // data[3] is _GroupsRowCount
                $.each(JSON.parse(data[2]), function (i, itemGroup) {
                    //if (data[4] == itemGroup.GroupCode && itemGroup.GroupCode != "Quotations" && itemGroup.GroupCode != "Operations" && itemGroup.GroupCode != "QuotationsManagement" && itemGroup.GroupCode != "OperationsManagement")//data[4] holds the pActiveGroup value
                    formItems += ' <section id=sec-' + itemGroup.GroupCode + '> ';
                    //else
                    //    formItems += ' <section id=sec-' + itemGroup.GroupCode + ' class = "hide"> ';
                    if (data[1] > 0) { // data[1] is _FormsRowCount
                        $.each(JSON.parse(data[0]), function (i, itemForm) {
                            if (itemGroup.GroupCode == itemForm.GroupCode) {
                                formItems += ' <div class="col-sm-6' /*+ (itemForm.DecryptedCode == 'Cities' || itemForm.DecryptedCode == 'StatisticsByShippingLines' ? ' hide ' : "")*/ + '" style="padding-right: 5px !important; padding-left: 5px !important;"> ';
                                formItems += '   <a id="hl-menu-' + itemForm.DecryptedCode + '-' + itemForm.FormID + '" class="hl-menu-item" style="cursor: pointer";> ';
                                formItems += '      <section class="panel panel-default"> ';
                                formItems += '          <header class="panel-heading font-bold"> ' + itemForm.DecryptedName + ' </header> ';
                                formItems += '          <div class="panel-body"> ';
                                formItems += '              <i class="fa ' + itemForm.IconName + ' fa-4x"></i> ';
                                //formItems += '              <i class="fa ' + itemForm.IconName + ' "></i> ';
                                formItems += '<b>' + itemForm.DecryptedDescription + '</b>';
                                formItems += '          </div> ';
                                formItems += '      </section> ';
                                formItems += '      </a> ';
                                formItems += ' </div> ';
                            } // of if (itemGroup.GroupCode == itemForm.GroupCode)
                        }); // of inner foreach
                        formItems += ' <div class="row"></div> ';
                    } //of if (data[1] > 0)
                    formItems += " </section> ";
                });// of outer for each
            } //of if (data[3] > 0)
            $("#div-Tabs").html(formItems);
            if (callback1 != null && callback1 != undefined)
                callback1();
            if (callback2 != null && callback2 != undefined)
                callback2();
            if (callback3 != null && callback3 != undefined)
                callback3();
            if (callbackToOpenDirectly != null && callbackToOpenDirectly != undefined && (pActiveGroup == "Quotations" || pActiveGroup == "Operations"))
                callbackToOpenDirectly();
            if ($("[id$='hf_ChangeLanguage']").val() == "ar")
                $(".panel-body").reverseChildren();
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!  this is FillForms() in mainapp.master !", "error");
        }
    });
}

function FadePageCover(pIsIn) {
    if (pIsIn) {
        $("#page-cover-page").css("opacity", 0.6).fadeIn(300);
        $("#page-cover-master").css("opacity", 0.6).fadeIn(300);
    }
    else {
        $("#page-cover-page").fadeOut('slow');
        $("#page-cover-master").fadeOut('slow');
    }
}

function FadePageCover_Customized(pIsIn, TimeInMelliSecond) {
    if (pIsIn) {
        $("#page-cover-page").css("opacity", 0.6).fadeIn(TimeInMelliSecond);
        $("#page-cover-master").css("opacity", 0.6).fadeIn(TimeInMelliSecond);
    }
    else {
        $("#page-cover-page").fadeOut(TimeInMelliSecond);
        $("#page-cover-master").fadeOut(TimeInMelliSecond);
    }
}

function OpenNewTab() {
    //var mywindow = window.open(window.location.href, '_blank');
    window.open(window.location.href);
    //window.location.href = window.location.origin + '/Home';
}
function ChangePassword() {
    debugger;
    if ($("#pwdPassword").val().trim() != $("#pwdConfirmPassword").val().trim())
        swal("Sorry", "Passwords don't match.");
    else if (ValidateForm("form", "ChangePasswordModal")) {
        FadePageCover(true);
        CallPOSTFunctionWithParameters("/api/Users/ChangePassword"
            , { pOldPassword: $("#pwdOldPassword").val().trim(), pNewPassword: $("#pwdPassword").val().trim()}
            , function(pData) {
                debugger;
                if (pData[0])
                {
                    swal("Success", "Saved successfully.");
                    jQuery("#ChangePasswordModal").modal("hide");
                }
                else
                    swal("Sorry", "Incorrect password.");
                FadePageCover(false);
            }
            , null);
    }
}
// ******************************************************************************

// Change Menu Location From Left Two Right
function SetNavMenuLocation() {
    switch ($("[id$='hf_ChangeLanguage']").val().trim()) {
        case "ar":
            {
                $("#content").insertBefore($("#nav"));
                break;
            }
    }
}

// Translate From Language To Another
function TranslateString(pTextToTranslate) {
    var strText = pTextToTranslate;
    switch (pTextToTranslate) {
        case "details": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " الخصائص ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Détails ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Details ";
            break;
        }
        case "Edit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تعديل ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Éditer ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Edit ";
            break;
        }
        case "YouMustInsertCorrectPercentage": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " يجب إدخال النسبه بالطريقة الصحيحة ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " You Must Insert Correct Percentage ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " You Must Insert Correct Percentage ";
            break;
        }
        case "PrintAssetCard": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " طباعة بطاقة الأصل";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Print Asset Card ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Print Asset Card ";
            break;
        }
            
        case "YouMustInsertCorrectIntialAmount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " يجب إدخال القيمة الدفترية بالطريقة الصحيحة ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " You Must Insert Correct Intial Amount ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " You Must Insert Correct Intial Amount ";
            break;
        }
        case "Transfer": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " نقل ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Transfer ";
            break;
        }

        case "Restore": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إسترجاع ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Restore ";
            break;
        }
        case "Copy": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " نسخ ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Copier ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Copy ";
            break;
        }
        case "ReceivablesAllocations": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تحصيل الفواتير ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Receivables Allocations ";
            break;
        }
        case "PayablesAllocations": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " سداد تكاليف ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Payables Allocations ";
            break;
        } 
        case "SelectAccount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إختر الحساب ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Select Account ";
            break;
        }
        case "Periods": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " الفترات ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Periods ";
            break;
        } 
        case "Perc. Log": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " Perc. Log ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Perc. Log "
            break;
        }
        case "Choose file": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إختر الملف ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Choose file ";
            break;
        }
        case "Rate Log": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " Rate Log ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Rate Log "
            break;
        }
        case "MAWBStock": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " MAWB Stock ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " MAWB Stock "
            break;
        }
        case "SelectFromMenu": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "<-- اختر -->";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = ""
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "<--Select-->";
            break;
        }

        case "AUTOGENERATED": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "ينشأ تلقائيا";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = ""
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "AUTO GENERATED";
            break;
        }
        case "CashInVoucher":
        case "CashReceivingVoucher": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إذن استلام نقدى ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Cash Receiving Receipt "
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Cash Receiving Receipt "
            break;
        }
        case "CashOutVoucher":
        case "CashIssueVoucher": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إذن صرف نقدى ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Cash Issue Receipt "
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Cash Issue Receipt "
            break;
        }
        case "ChequeInVoucher":
        case "ChequeReceivingVoucher": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إذن استلام شيكات ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Cheque Receiving Receipt "
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Cheque Receiving Receipt "
            break;
        }
        case "ChequeOutVoucher":
        case "ChequeIssueVoucher": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إذن صرف شيكات ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Cheque Issue Receipt "
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Cheque Issue Receipt "
            break;
        }
        case "PostingVouchers": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " ترحيل المستندات ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " PostingVouchers "
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Posting Vouchers "
            break;
        }
        case "UnpostingVouchers": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " فك ترحيل المستندات ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Unposting Vouchers "
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Unposting Vouchers "
            break;
        }
        case "PostingJVs": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " ترحيل القيود ";
            
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Posting JVs "
            break;
        }
        case "UnPostingJVs": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " فك ترحيل القيود ";

            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " UnPosting JVs "
            break;
        } 
        case "CodeIsNotCorrectNumber": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " الكود غير صحيح يجب ان يكون عدد ";

            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Code Is Not Correct (It Must be number) "
            break;
        } 
            
        case "RestoringJVs": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إسترجاع القيود ";

            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Restoring JVs "
            break;
        }

        case "Print": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " طباعة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Print "
            break;
        }
        case "FA_ErrorBarCode": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " هذا الباركود موجود من قبل يجب إدخال باركود مختلف لنفس الفرع - القسم - الإدارة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " You Must Insert Special BarCode For Same Branch , Department and Devison "
            break;
        }
        case "FA_Asset@Error@IntialAmoun": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تم إدخال القيمة الدفترية بشكل غير صحيح يرجى مراجعتها ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " [Intial Amount] has not Correct value "
            break;
        }
        case "FA_Asset@Error@PurchasingAmount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تم إدخال قيمة الشراء بشكل غير صحيح يرجى مراجعتها ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " [Purchasing Amount] has not Correct value "
            break;
        }
        case "FA_Asset@Error@Qty": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تم إدخال الكمية بشكل غير صحيح يرجى مراجعتها ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " [Qty] has not Correct value "
            break;
        }
        case "FA_Asset@Error@ScrappingAmount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تم إدخال القيمة التخريدية بشكل غير صحيح يرجى مراجعتها ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " [Scrapping Amount] has not Correct value "
            break;
        }
        case "FA_Asset@Error@OpeningDepreciationAmount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تم إدخال قيمة الإهلاك الإبتدائية بشكل غير صحيح يرجى مراجعتها ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " [Opening Depreciation Amount] has not Correct value "
            break;
        }
        case "DateOverlap": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " هناك تداخل في التواريخ يجب ادخال فترات لا تتداخل مع فترة أخرة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Range of Date Is Overlaped "
            break;
        }

        case "tblDetailsError": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " يجب إدخال جميع الحقول في الجدول بالأسفل ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " You Must Insert All Values To Below Table "
            break;
        }
        case "Sorry": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " معذرة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Sorry "
            break;
        }
        case "PurchaseDateMust<StartDepreciationDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تاريخ بداية الاهلاك يجب ان يكون اكبر من او يساوي تاريخ الشراء ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Purshaing Date Must <= Start Depreciation Date "
            break;
        }
            
        case "Done": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تم ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Done "
            break;
        }
        case "Areyousure?": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " هل أنت متأكد ؟ ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Are you sure ? "
            break;
        }
        case "TheTransactionWillBeDeletedPermanently": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " سوف يتم الغاء العملية نهائيا  ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "The Transaction Will Be Deleted Permanently "
            break;
        }
        case "Areyousure?": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " هل أنت متأكد ؟ ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Are you sure ? "
            break;
        }
        case "Yes,delete!": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " نعم .. قم بالمسح ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Yes , delete!"
            break;
        }
        case "DateMust>LastDepreciationDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "التاريخ المدخل يجب ان يكون اكبر من تاريخ آخر إهــلاك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Date Must > Last Depreciation Date"
            break;
        }
        case "YourInsertedAmountCauseNegativeValue_D": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "عند مسح القيمة سوف تؤدى الى السحب بمقدار اكبر من القيمة الدفترية الحالية .....تؤدي الى قيمة سالبة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Deleted Amount Cause Negative Value"
            break;
        }
        case "YourInsertedQtyCauseNegativeValue_D": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "عند مسح الكمية سوف تؤدى الى السحب بمقدار اكبر من الكمية الحالية .....تؤدي الى كمية سالبة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Deleted Qty Cause Negative Value"
            break;
        }


        case "YourInsertedAmountCauseNegativeValue_U": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "هذا التعديل في القيمة سوف تؤدى الى السحب بمقدار اكبر من القيمة الدفترية الحالية .....تؤدي الى قيمة سالبة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Updated Amount Cause Negative Value"
            break;
        }
        case "YourInsertedQtyCauseNegativeValue_U": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "هذا التعديل في  الكمية سوف تؤدى الى السحب بمقدار اكبر من الكمية الحالية .....تؤدي الى كمية سالبة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Updated Qty Cause Negative Value"
            break;
        }
        
        case "YourInsertedAmountCauseNegativeValue_I": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "القيمة سوف تؤدى الى السحب بمقدار اكبر من القيمة الدفترية الحالية .....تؤدي الى قيمة سالبة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Updated Amount Cause Negative Value"
            break;
        }
        case "YourInsertedQtyCauseNegativeValue_I": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الكمية سوف تؤدى الى السحب بمقدار اكبر من الكمية الحالية .....تؤدي الى كمية سالبة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Updated Qty Cause Negative Value"
            break;
        }
        case "ErrorNumeric": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب إدخال رقم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Insert Numeric Value"
            break;
        }
        case "YourTransactionIsInserted": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تم إدخال العملية بنجاح";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Your Transaction Is Inserted"
            break;
        }
        case "YourTransactionIsUpdate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تم تحديث العملية بنجاح";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Your Transaction Is Updated"
            break;
        }
        case "FromDateMust>ToDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الفترة غير صحيحة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "From Date Must > To Date "
            break;
        }
        case "FromDateMUST>ToDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "فترة التاريخ غير صحيحة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "From Date Must > To Date "
            break;
        }
            
        case "YouMustSelectBranches": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب أختيار فرع واحد على الأقل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Select at least one Branche"
            break;
        }
        case "YouMustSelectDepartments": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب أختيار قسم واحد على الأقل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Select at least one Department"
            break;
        }
        case "YouMustSelectDivisions": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب أختيار إدارة واحدة على الأقل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Select at least one Division"
            break;
        }
        case "YouMustSelectGroups": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب أختيار مجموعة واحدة على الأقل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Select at least one Group"
            break;
        }
        case "PrintBarCode": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "طباعة الباركود";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Print Barcode "
            break;
        }
        case "ErrorInExclusionType30": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "لم يتم إهلاك الفترة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "This Asset Is Not Depreciated";
            break;
        }
        case "YouMustInsertBranch": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب اختيار فرع";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Insert Branch";
            break;
        }   
        case "YouMustInsertDivision": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب اختيار إدارة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Insert Division";
            break;
        }
        case "YouMustInsertBranch": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب اختيار قسم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Insert Department";
            break;
        }
        case "Operation": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "العملية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Operation";
            break;
        }
        case "Partner": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الشريك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Partner";
            break;
        }
        case "Inv.No": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم الفاتورة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Inv.No";
            break;
        }
        case "Charge": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "التغيير";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Charge";
            break;
        }
        case "Status": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الحالة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Status";
            break;
        }
        case "Total": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الإجمالي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total";
            break;
        }
        case "Cur": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "العملة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Cur";
            break;
        }
        case "AmountDue": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "م.المستحق";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "AmountDue";
            break;
        }
        case "PaidAmt": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "م.المدفوع";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "PaidAmt";
            break;
        }
        case "Remaining": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "المتبقي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Remaining";
            break;
        }
        case "PayFrom": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مدفوع من";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "PayFrom";
            break;
        }
        case "Ex.Rate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "معدل التغيير";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Ex.Rate";
            break;
        }
        case "AllPartners": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الشركــاء";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "All Partners";
            break;
        }
        case "AllPartnerTypes": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "أنواع الشركــاء";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "All Partner Types";
            break;
        }
        case "CostCenters": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مراكز التكلفة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Cost Centers";
            break;
        }
        case "Inv.Type": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع الفاتورة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Inv.Type";
            break;
        }
        case "ChargeType": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع الشحن";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "ChargeType";
            break;
        }
        case "Quantity": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الكمية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Quantity";
            break;
        }
        case "TaxType": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع الضريبة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "TaxType";
            break;
        }
        case "TaxAmt": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "قيمة الضريبة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "TaxAmt";
            break;
        }
        case "TotalAmount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الإجمالي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "TotalAmount";
            break;
        }
        case "Order": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الطلب";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Order";
            break;
        }
        case "UnitPrice": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "سعر الوحدة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "UnitPrice";
            break;
        }
        case "Auto": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "أوتوماتيك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Auto";
            break;
        }
        case "PrintJV": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "طباعة القيد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Print JV";
            break;
        }
        case "JournalVouchers": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "القيود اليومية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Journal Vouchers";
            break;
        }
        case "JvNo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم القيد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Jv No";
            break;
        }
        case "UserName": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إسم المستخدم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "UserName";
            break;
        }
        case "JVDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تاريخ القيد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "JV Date";
            break;
        }
        case "JournalType": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع اليومية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Journal Type";
            break;
        }
        case "JVType": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع القيد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "JV Type";
            break;
        }
        case "ReceiptNo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم الإيصال";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Receipt No";
            break;
        }
        case "Notes": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الملاحظات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Notes";
            break;
        }
        case "Account": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الحساب";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Account";
            break;
        }
        case "SubAccount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الحساب التحليلي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Sub Account";
            break;
        }
        case "CostCenter": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مركز التكلفة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Cost Center";
            break;
        }
        case "Debit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مدين";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Debit";
            break;
        }
        case "Credit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "دائن";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Credit";
            break;
        }
        case "LocalDebit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مبلغ مدين";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Local Debit";
            break;
        }
        case "LocalCredit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مبلغ دائن";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "LocalCredit";
            break;
        }
        case "Description": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الوصف";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Description";
            break;
        }
        case "Documented": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "موثق";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Documented";
            break;
        }
        case "PreparedBy": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "أُعدت بواسطة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Prepared By";
            break;
        }
        case "ReviewedBy": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تمت المراجعة بواسطة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Reviewed By";
            break;
        }
        case "ApprovedBy": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تم الإعتماد بواسطة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Approved By";
            break;
        }
        case "PrintedOn": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تمت الطباعة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Printed On";
            break;
        }
        case "JournalVouchersTotals": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي القيود اليومية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Journal Vouchers Totals";
            break;
        }

        case "Code": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الكود";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Code";
            break;
        }
        case "VoucherType": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع القيد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Voucher Type";
            break;
        }
        case "AccountName": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الحساب";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Account Name";
            break;
        }
        case "BankName": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إسم البنك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Bank Name";
            break;
        }
        case "DueDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تاريخ الإستحقاق";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Due Date";
            break;
        }
        case "ChequeNo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم الشيك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Cheque No";
            break;
        }
        case "ChequesStatus": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "حالة الشيك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Cheques Status";
            break;
        }
        case "BankAcc": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "حساب البنك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Bank Acc";
            break;
        }
        case "Currency": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "العملة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Currency";
            break;
        }
        case "No": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الرقم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "No.";
            break;
        }
        case "Date": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "التاريخ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Date";
            break;
        }
        case "TransType": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع الحركة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Trans Type";
            break;
        }
        case "ChargedPerson": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "المسلم / المستلم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Charged Person";
            break;
        }
        case "Balance": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الرصيد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Balance";
            break;
        }
        case "Bank": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "البنك :";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Bank :";
            break;
        }
        case "TotalDebitAndCredit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي المدين والدائن :";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total Debit And Credit :";
            break;
        }
        case "EndBalance": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الرصيد الختامي :";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "End Balance :";
            break;
        }
        case "BankJournal": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يومية بنك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Bank Journal";
            break;
        }
        case "Safe": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الخزينة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Safe";
            break;
        }
        case "SafeJournal": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يومية خزينة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Safe Journal";
            break;
        }
        case "BankJournal": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يومية بنك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Bank Journal";
            break;
        }
        case "Receiver": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "المستلم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Receiver";
            break;
        }
        case "Name": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الإسم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Name";
            break;
        }
        case "Signature": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "التوقيع";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Signature";
            break;
        }
        case "TOTALAMOUNTONLY": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي المبلغ فقط : ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "TOTAL AMOUNT ONLY : ";
            break;
        }
            
        case "Amount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "المبلغ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Amount";
            break;
        }
        case "PaymentDetails": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تفاصيل الدفع: ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Payment Details: ";
            break;
        }
        case "OperationCode": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "كود العملية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Operation Code";
            break;
        }
        case "Operations": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "العمليات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Operations";
            break;
        }
        case "Only": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "فقط";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Only";
            break;
        }
        case "TotalAfterTax": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الإجمالي بعد الضريبة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total After Tax";
            break;
        }
        case "ReceiptDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تاريخ الإستلام";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Receipt Date";
            break;
        }
        case "Payment": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الدفع";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Payment";
            break;
        }
        case "SalesItemsTotals": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "أصناف المبيعات (الإجمالي)";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Sales Items (Totals)";
            break;
        }
        case "Item": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الصنف";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Item";
            break;
        }
        case "Qty": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الكمية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Qty";
            break;
        }
        case "AveragePrice": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "متوسط السعر";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Average Price";
            break;
        }
        case "SalesItemsFollowUp": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "متابعة أصناف المبيعات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Sales Items Follow-Up";
            break;
        }
        case "ItemsSalesFollowUp": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "متابعة أصناف المبيعات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Items Sales Follow-Up";
            break;
        }
        case "Customer": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "العميل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Customer";
            break;
        }
        case "Unit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الوحدة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Unit";
            break;
        }
        case "UnitPrice": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "سعر الوحدة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "UnitPrice";
            break;
        }
        case "InvoiceNo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم الفاتورة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Invoice No";
            break;
        }
        case "InvDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تاريخ الفاتورة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Inv.Date";
            break;
        }
        case "SalesInvoicesFollowUpItems": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "متابعة أصناف فواتير المبيعات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Sales Invoices Follow-Up Items";
            break;
        }
        case "InvNo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم الفاتورة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Inv.No";
            break;
        }
        case "TotalItems": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي الأصناف";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total Items";
            break;
        }
        case "TotalServices": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي الخدمات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "TotalServices";
            break;
        }
        case "TotalExpenses": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي المصروفات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total Expenses";
            break;
        }
        case "TotalTaxes": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي الضرائب";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "TotalTaxes";
            break;
        }
        case "TotalDiscount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي الخصم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total Discount";
            break;
        }
        case "TotalGross": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الإجمالي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total Gross";
            break;
        }
        case "DetailsNo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم التفاصيل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Details No";
            break;
        }
        case "ItemName": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إسم الصنف";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Item Name";
            break;
        }
        case "SalesItemsFollowUpTotal": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "متابعة أصناف المبيعات (الإجمالي)";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Sales Items Follow-Up (Total)";
            break;
        }
        case "NET": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الصافي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "NET";
            break;
        }
        case "Taxes": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الضرائب";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Taxes";
            break;

        }
        case "Discount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الخصم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Discount";
            break;
        }
        case "SalesInvoicesFollowUp": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "متابعة فواتير المبيعات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Sales Invoices Follow-Up";
            break;
        }
        case "SupplierName": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إسم المورد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Supplier Name";
            break;
        }
            
    }
    return strText;
}
//
// Load User Controls According to Clicked Link
function LoadViews(pControlID, pRoleID, pUserID, pWhereClauseOverwriting, pQuotationRouteRequestID) {
    debugger;
    HideliChequeAlarm();
    glbCallingControl = pControlID;
    //if (pControlID == "Operations" || pControlID == "Quotatations")
    if (pControlID == "Operations")
        strBindTableRowsFunctionName = pControlID + "Management_BindTableRows";
    else
        strBindTableRowsFunctionName = pControlID + "_BindTableRows";
    $("#div-content").scrollTop(0);
    // Hide The Dashboard DIV Content
    $("#div-main-content").hide();
    switch (pControlID) {
        //// Load Default User Control
        //case "Operations":
        //    LoadView("/Operations/OperationsDemo", "div-content", null);
        //    break;
        case "hl-homepage":
            //{
            //    window.location.href = window.location.origin + '/Home';
            //}
        case "Dashboard": {
            debugger;
            //window.open(window.location.href);
            if ($("#sp-LoginName").text() != "BG EGYPT") {
                UnLoadOperationsSubMenu();
                Operations_ClearFilters();
                Quotations_ClearFilters();
                $("#hl-menu-Dashboard").parent().siblings().removeClass("active");
                //$("#hl-menu-Dashboard").parent().addClass("active");
                LoadView("/Home/Dashboard", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/Dashboard/Dashboard.js?' + glbVersion, function () {
                        Dashboard_FillCharts();
                    });
                });
            }
            break;
        }
        case "LocalEmails": {
            debugger;
            //window.open(window.location.href);
            UnLoadOperationsSubMenu();
            Operations_ClearFilters();
            Quotations_ClearFilters();
            $("#hl-menu-LocalEmails").parent().siblings().removeClass("active");
            //$("#hl-menu-Dashboard").parent().addClass("active");
            strBindTableRowsFunctionName = "LocalEmails_BindTableRows";
            strLoadWithPagingFunctionName = "/api/LocalEmails/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            //var pWhereClause = " WHERE IsDeleted=0 AND (ReceiverUserID = " + $("#hLoggedUserID").val() +" OR SenderUserID = " + $("#hLoggedUserID").val() + ")";
            //var pWhereClause = " WHERE IsDeleted=0 AND ReceiverUserID = " + $("#hLoggedUserID").val(); //Default is the received mails
            var pWhereClause = (pUserID == undefined 
                                ? (" WHERE ReceiverUserID = " + $("#hLoggedUserID").val() + "\n")//(" WHERE Receivers LIKE N'%" + $("#hLoggedUserNameNotLogin").val() + "%' ") //Default is the received mails
                                : (" WHERE ReceiverUserID = " + $("#hLoggedUserID").val() + " AND ID = " + pUserID)
                               );
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy, pIsReceived: true }
            LoadView("/LocalEmails/LocalEmails", "div-content", function () {
                if ($("#hDefaultUnEditableCompanyName").val() == "KDS") {
                    //SelectOperationTypeModal
                    $("#spanCbIsHouse").text("B/L");
                    $("#spanCbIsMaster").text("Full Vessel");
                }
                LoadView("/MasterData/ModalCheckboxesList", "div-content", null, null, null, true);
                $.getScript(strServerURL + '/Scripts/LocalEmails/LocalEmails.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            LocalEmails_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 2/*pCodeOrName*/, "All Users", "slUser", pData[2], null);
                        });
                });
            });
            break;
        }
        case "MasterData": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", "Locations", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });

            });
            break;
        }
        
        case "CustomsClearance": {
            LoadView("/Home/Groups", "div-content", function () {
                    FillGroups(" where ParentGroupID = 2 ", "CustomsClearance", function () {
                });
            });
            break;
        }

        case "WarehousingMasterData":
            {
                LoadView("/Home/Groups", "div-content", function () {
                    FillGroups(" where ParentGroupID = 2 ", "WarehousingMasterData", function () {
                    });
                });
                break;
            }

        case "ContainerTrackingGroup": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 8 ", "ContainerTrackingTab", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "Pricing": //tab
        case "PricingModule": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 10 ", "PricingTab", function () {
                });

            });
            break;
        }
        case "Administration": {
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 7 ", "Security", function () {
                });
            });
            break;
        }
        case "AccountsReceivable":
        case "OperAcc": {
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 9 ", "AccountsReceivable", function () {
                });
            });
            break;
        }
        case "AccountsPayable": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 9 ", "AccountsPayable", function () {
                });
            });
            break;
        }
        case "Approvals": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 9 ", "Approvals", function () {
                });
            });
            break;
        }
        case "OpenBalance": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 9 ", "OpenBalance", function () {
                });
            });
            break;
        }
            //By commenting the next 2 cases i disabled security for Operations and Quotations till i make my the special security for them
            //case "Quotations": { //the same name like in tabs so not repeated in breadcrump region, but in forms its Quotations(plural)
            //    LoadView("/Home/Groups", "div-content", function () {
            //        FillGroups(" where ParentGroupID = 3 ", "Quotations", function () {
            //        });
            //    });
            //    break;
            //}
            //case "Operations": { //the same name like in tabs so not repeated in breadcrump region, but in forms its Operations(plural)
            //    UnLoadOperationsSubMenu();
            //    LoadView("/Home/Groups", "div-content", function () {
            //        FillGroups(" where ParentGroupID = 4 ", "Operations", function () {
            //        });
            //    });
            //    break;
            //}
        case "3PL":
        

        case "Warehousing": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 20 ", "WarehousingTransactions", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "WarehousingTransactions": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 20 ", "WarehousingTransactions", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "WarehousingReports": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 20 ", "WarehousingReports", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "AccountingMasterData":
        case "Accounting": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 11 ", "AccountingMasterData", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });

            });
            break;
        }
        case "AccountingTransactions": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 11 ", "AccountingTransactions", function () {
                });

            });
            break;
        }
        case "AccountingReports": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 11 ", "AccountingReports", function () {
                });

            });
            break;
        }
        case "ReceiptsAndPaymentsGroup": 
        case "ReceiptsAndPaymentsTransactions": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "RecAndPayTransactions", function () {
                });
            });
            break;
        }
        case "ReceiptsAndPaymentsApprovingAndPosting": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "RecAndPayApprovingAndPosting", function () {
                });
            });
            break;
        }
        case "ReceiptsAndPaymentsReports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "RecAndPayReports", function () {
                });
            });
            break;
        }
        case "ShipLink": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "ShipLink", function () {
                });
            });
            break;
        }
        case "Statistics"://its breadcrump, but because its default so i put it here
        case "Reports": { //the same name like in tabs so not repeated in breadcrump region, but in forms its Reports(plural)
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 6 ", "Statistics", function () {
                });
            });
            break;
        }

        case "RealEstate":
        case "RE_MasterData": {
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 51 ", "RE_MasterData", function () {
                });
            });
            break;
        }

        case "RE_Transactions": {
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 51 ", "RE_Transactions", function () {
                });
            });
            break;
        }

        case "RE_Reports": {
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 51 ", "RE_Reports", function () {
                });
            });
            break;
        }


            /* region breadcrump*/
        case "Locations": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", "Locations", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });

            });
            break;
        }
        case "Invoicing": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Invoicing").removeClass("hide"); $("#tabInvoicing").parent().children().removeClass("btn-warning"); $("#tabInvoicing").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", "Invoicing", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "TreasuriesAndBanks": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-TreasuriesAndBanks").removeClass("hide"); $("#tabTreasuriesAndBanks").parent().children().removeClass("btn-warning"); $("#tabTreasuriesAndBanks").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", "TreasuriesAndBanks", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "Partners": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Partners").removeClass("hide"); $("#tabPartners").parent().children().removeClass("btn-warning"); $("#tabPartners").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", "Partners", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "Others": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Others").removeClass("hide"); $("#tabOthers").parent().children().removeClass("btn-warning"); $("#tabOthers").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", "Others", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }

        case "Settings": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Settings").removeClass("hide"); $("#tabSettings").parent().children().removeClass("btn-warning"); $("#tabSettings").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 7 ", "Settings", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "Logs": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Logs").removeClass("hide"); $("#tabLogs").parent().children().removeClass("btn-warning"); $("#tabLogs").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 7 ", "Logs", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "Miscellaneous": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Miscellaneous").removeClass("hide"); $("#tabMiscellaneous").parent().children().removeClass("btn-warning"); $("#tabMiscellaneous").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 7 ", "Miscellaneous", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "AdministrationSecurity":
        case "Security": {
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Security").removeClass("hide"); $("#tabSecurity").parent().children().removeClass("btn-warning"); $("#tabSecurity").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 7 ", "Security", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "Statistics": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 6 ", "Statistics", function () {
                });

            });
            break;
        }
        case "OperAccountingReports": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 6 ", "OperAccountingReports", function () {
                });

            });
            break;
        }
        case "Quotes": {
            Operations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 6 ", "Quotes", function () {
                });

            });
            break;
        }
            /* EOF region breadcrump*/
            //region Locations/Regions
        case "Regions": {

            strLoadWithPagingFunctionName = "/api/Regions/LoadWithPaging";
            LoadView("/MasterData/Regions", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Locations/Regions.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Regions_BindTableRows(pTabelRows); });
                });
            },
                function () { Regions_ClearAllControls(); },
                function () { Regions_DeleteList(); });
            break;
        }
        
            //region Locations/Countries
        case "WarehousingCountry":
        case "Countries": {

            strLoadWithPagingFunctionName = "/api/Countries/LoadWithPaging";

            LoadView("/MasterData/Countries", "div-content", function () {
                
                if (pControlID == "Countries") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Locations')");
                    $("#liTabName").text("Locations");
                    $("#liTabName").attr("onclick", "LoadViews('Locations')");
                    //$("#h3Allocation").text("Receivables Allocations"); $("#h3Allocation").addClass("static-text-primary");
                    //$("#h3ModalLblAllocationType").html("Receivables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                    //$("#h3ModalLblAllocationType").addClass("static-text-primary");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                    //$("#h3Allocation").text("Payables Allocations"); $("#h3Allocation").addClass("static-text-danger");
                    //$("#h3ModalLblAllocationType").html("Payables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-danger"></label>');
                    //$("#h3ModalLblAllocationType").addClass("static-text-danger");
                }
                //$("#liAccountAllocationType").text($("#h3Allocation").text());
                
                $.getScript(strServerURL + '/Scripts/MasterData/Locations/countries.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Countries_BindTableRows(pTabelRows); });
                });
            },
                function () { Countries_ClearAllControls(); },
                function () { Countries_DeleteList(); });
            break;
        }

            //region Locations/Cities
        case "Cities": {

            strLoadWithPagingFunctionName = "/api/Cities/LoadWithPaging";

            LoadView("/MasterData/Cities", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Locations/Cities.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Cities_BindTableRows(pTabelRows); });
                });
            },
                function () { Cities_ClearAllControls(); },
                function () { Cities_DeleteList(); });
            break;
        }

            //region Locations/Ports
        case "WarehousingCity":
        case "Ports": {

            strLoadWithPagingFunctionName = "/api/Ports/LoadWithPaging";

            LoadView("/MasterData/Ports", "div-content", function () {
                
                if (pControlID == "Ports") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Locations')");
                    $("#liTabName").text("Locations");
                    $("#liTabName").attr("onclick", "LoadViews('Locations')");
                    //$("#h3Allocation").text("Receivables Allocations"); $("#h3Allocation").addClass("static-text-primary");
                    //$("#h3ModalLblAllocationType").html("Receivables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                    //$("#h3ModalLblAllocationType").addClass("static-text-primary");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                    //$("#h3Allocation").text("Payables Allocations"); $("#h3Allocation").addClass("static-text-danger");
                    //$("#h3ModalLblAllocationType").html("Payables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-danger"></label>');
                    //$("#h3ModalLblAllocationType").addClass("static-text-danger");
                }
                //$("#liAccountAllocationType").text($("#h3Allocation").text());
                
                $.getScript(strServerURL + '/Scripts/MasterData/Locations/Ports.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Ports_BindTableRows(pTabelRows); });
                });
            },
                function () { Ports_ClearAllControls(); },
                function () { Ports_DeleteList(); });
            break;
        }

            //region Locations/Customers
        case "WarehousingCustomer":
        case "Customers": { // PartnerTypeID = 1

            strLoadWithPagingFunctionName = "/api/Customers/LoadWithPaging";

            LoadView("/MasterData/Customers", "div-content", function () {
                debugger;
                LoadView("/MasterData/ModalCustomers", "div-content"
                    , function () {
                        if (IsAccountingActive)
                            $(".classAccountingOption").removeClass("hide");
                        else
                            $(".classAccountingOption").addClass("hide");
                        $(".classHideOutsidePartners").removeClass("hide");
                        if (pDefaults.UnEditableCompanyName == "SAF") {
                            $("#btn-OperatorTankChargeModal").addClass("hide");
                            $(".classMandatoryForSAF").attr("data-required", "true");
                        }
                        if (pControlID == "Customers") {
                            $("#liGroupName").text("Master Data");
                            $("#liGroupName").attr("onclick", "LoadViews('Partners')");
                            $("#liTabName").text("Partners");
                            $("#liTabName").attr("onclick", "LoadViews('Partners')");
                            //$("#h3Allocation").text("Receivables Allocations"); $("#h3Allocation").addClass("static-text-primary");
                            //$("#h3ModalLblAllocationType").html("Receivables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                            //$("#h3ModalLblAllocationType").addClass("static-text-primary");
                        }
                        else { //Warehousing
                            $("#liGroupName").text("Warehousing");
                            $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                            $("#liTabName").text("Master Data");
                            $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                            //$("#h3Allocation").text("Payables Allocations"); $("#h3Allocation").addClass("static-text-danger");
                            //$("#h3ModalLblAllocationType").html("Payables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-danger"></label>');
                            //$("#h3ModalLblAllocationType").addClass("static-text-danger");
                        }
                        //$("#liAccountAllocationType").text($("#h3Allocation").text());
                        CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                        , { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                        , function (pData) {
                            var pClientGroup = pData[3];
                            var pSupplierGroup = pData[4];
                            var pCreditLimit = pData[7];
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pClientGroup, null);
                            FillListFromObject_ERP(null, 12/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCreditLimit", pCreditLimit, null);
                            $("#slSubAccount").html('<option value=0>' + 'AUTO GENERATED' + '</option>');
                            $("#txtDate").val(getTodaysDateInddMMyyyyFormat());
                        }
                            , null);
                    }
                    , null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalAddresses", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalPartnersBanks", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalContacts", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places

                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Addresses.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/PartnersBanks.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Contacts.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Customers.js?' + glbVersion, function () {
                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10
                        , function (pTabelRows) {
                            Customers_BindTableRows(pTabelRows);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Customers_ClearAllControls(); },
                function () { Customers_DeleteList(); });
            break;
        }

            //region Locations/Agents
        case "Agents": { // PartnerTypeID = 2

            strLoadWithPagingFunctionName = "/api/Agents/LoadWithPaging";

            LoadView("/MasterData/Agents", "div-content", function () {
                debugger;
                LoadView("/MasterData/ModalAgents", "div-content", function () {
                    if (pDefaults.UnEditableCompanyName == "SAF") {
                        $(".classMandatoryForSAF").attr("data-required", "true");
                    }
                    if (IsAccountingActive) $(".classAccountingOption").removeClass("hide"); 
                    else $(".classAccountingOption").addClass("hide");
                    $(".classHideOutsidePartners").removeClass("hide");
                    CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                        , {pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                        , function(pData){
                            var pClientGroup = pData[3];
                            var pSupplierGroup = pData[4];
                            var pClientAndSupplierGroup = pData[5];
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAgentAccount", pData[0], null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAgentCostCenter", pData[2], null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAgentSubAccountGroup", pClientAndSupplierGroup, null);
                            $("#slAgentSubAccount").html('<option value=0>'+'AUTO GENERATED'+'</option>');
                        }
                        , null);
                }
                , null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalAddresses", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalContacts", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places

                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Addresses.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Contacts.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Agents.js?' + glbVersion, function () {
                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10
                        , function (pTabelRows) { 
                            Agents_BindTableRows(pTabelRows); 
                        });
                });
            },
                function () { Agents_ClearAllControls(); },
                function () { Agents_DeleteList(); });
            break;
        }

            //region Locations/ShippingAgents
        case "ShippingAgents": {  // PartnerTypeID = 3

            strLoadWithPagingFunctionName = "/api/ShippingAgents/LoadWithPaging";

            LoadView("/MasterData/ShippingAgents", "div-content", function () {
                debugger;
                LoadView("/MasterData/ModalShippingAgents", "div-content", function(){
                    if (IsAccountingActive) $(".classAccountingOption").removeClass("hide"); 
                    else $(".classAccountingOption").addClass("hide");
                    $(".classHideOutsidePartners").removeClass("hide");
                    CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                        , {pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                        , function(pData){
                            var pClientGroup = pData[3];
                            var pSupplierGroup = pData[4];
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slShippingAgentAccount", pData[0], null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slShippingAgentCostCenter", pData[2], null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slShippingAgentSubAccountGroup", pSupplierGroup, null);
                            $("#slShippingAgentSubAccount").html('<option value=0>'+'AUTO GENERATED'+'</option>');
                        }
                        , null);
                }, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalAddresses", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalContacts", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places

                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Addresses.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Contacts.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/ShippingAgents.js?' + glbVersion, function () {
                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10
                        , function (pTabelRows) { 
                            ShippingAgents_BindTableRows(pTabelRows); 
                        });
                });
            },
                function () { ShippingAgents_ClearAllControls(); },
                function () { ShippingAgents_DeleteList(); });
            break;
        }

            //region Locations/CustomsClearanceAgents
        case "CustomsClearanceAgents": { // PartnerTypeID = 4

            strLoadWithPagingFunctionName = "/api/CustomsClearanceAgents/LoadWithPaging";

            LoadView("/MasterData/CustomsClearanceAgents", "div-content", function () {
                debugger;
                LoadView("/MasterData/ModalCustomsClearanceAgents", "div-content", function(){
                    if (IsAccountingActive) $(".classAccountingOption").removeClass("hide"); 
                    else $(".classAccountingOption").addClass("hide");
                    $(".classHideOutsidePartners").removeClass("hide");
                    CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                        , {pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                        , function(pData){
                            var pClientGroup = pData[3];
                            var pSupplierGroup = pData[4];
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCustomsClearanceAgentAccount", pData[0], null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCustomsClearanceAgentCostCenter", pData[2], null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCustomsClearanceAgentSubAccountGroup", pSupplierGroup, null);
                            $("#slCustomsClearanceAgentSubAccount").html('<option value=0>'+'AUTO GENERATED'+'</option>');
                        }
                       , null);
                }, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalAddresses", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalContacts", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places

                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Addresses.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Contacts.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/CustomsClearanceAgents.js?' + glbVersion, function () {
                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10
                        , function (pTabelRows) { 
                            CustomsClearanceAgents_BindTableRows(pTabelRows); 
                        });
                });
            },
                function () { CustomsClearanceAgents_ClearAllControls(); },
                function () { CustomsClearanceAgents_DeleteList(); });
            break;
        }

            //region Locations/ShippingLines
        case "ShippingLines": { // PartnerTypeID = 5

            strLoadWithPagingFunctionName = "/api/ShippingLines/LoadWithPaging";

            LoadView("/MasterData/ShippingLines", "div-content", function () {
                debugger;
                LoadView("/MasterData/ModalShippingLines", "div-content", function () {
                    if (pDefaults.UnEditableCompanyName == "SAF") {
                        $(".classMandatoryForSAF").attr("data-required", "true");
                    }
                    if (IsAccountingActive) $(".classAccountingOption").removeClass("hide"); 
                    else $(".classAccountingOption").addClass("hide");
                    $(".classHideOutsidePartners").removeClass("hide");
                    CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                        , {pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                        , function(pData){
                            var pClientGroup = pData[3];
                            var pSupplierGroup = pData[4];
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSupplierGroup, null);
                            $("#slSubAccount").html('<option value=0>'+'AUTO GENERATED'+'</option>');
                        }
                           , null);
                }, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalAddresses", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalContacts", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places

                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Addresses.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Contacts.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/ShippingLines.js?' + glbVersion, function () {
                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10
                        , function (pTabelRows) { 
                            ShippingLines_BindTableRows(pTabelRows); 
                        });
                });
            },
                function () { ShippingLines_ClearAllControls(); },
                function () { ShippingLines_DeleteList(); });
            break;
        }

            //region Locations/Airlines
        case "Airlines": { // PartnerTypeID = 6

            strLoadWithPagingFunctionName = "/api/Airlines/LoadWithPaging";

            LoadView("/MasterData/Airlines", "div-content", function () {
                debugger;
                LoadView("/MasterData/ModalAirlines", "div-content", function () {
                    if (pDefaults.UnEditableCompanyName == "SAF") {
                        $(".classMandatoryForSAF").attr("data-required", "true");
                    }
                    if (IsAccountingActive) $(".classAccountingOption").removeClass("hide"); 
                    else $(".classAccountingOption").addClass("hide");
                    $(".classHideOutsidePartners").removeClass("hide");
                    CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                        , {pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                        , function(pData){
                            var pClientGroup = pData[3];
                            var pSupplierGroup = pData[4];
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSupplierGroup, null);
                            $("#slSubAccount").html('<option value=0>'+'AUTO GENERATED'+'</option>');
                        }
                       , null);
                }, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalAddresses", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalContacts", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalMAWBStock", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalSelectCharges", "div-content", function () { $("#slPayableCurrency").html($("#hReadySlCurrencies").html()); $("#slReceivableCurrency").html($("#hReadySlCurrencies").html()); }, null, null, true);//sherif: calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Addresses.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Contacts.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/MAWBStock.js');//sherif: to load the js file of the appended partial view
                //$.getScript(strServerURL + '/Scripts/Operations/Operations/Payables.js');
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Airlines.js?' + glbVersion, function () {
                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10
                        , function (pTabelRows) { 
                            Airlines_BindTableRows(pTabelRows); 
                        });
                });
            },
                function () { Airlines_ClearAllControls(); },
                function () { Airlines_DeleteList(); });
            break;
        }

            //region Locations/Truckers
        case "Truckers": { // PartnerTypeID = 7

            strLoadWithPagingFunctionName = "/api/Truckers/LoadWithPaging";

            LoadView("/MasterData/Truckers", "div-content", function () {
                debugger;
                LoadView("/MasterData/ModalTruckers", "div-content", function () {
                    if (pDefaults.UnEditableCompanyName == "SAF") {
                        $(".classMandatoryForSAF").attr("data-required", "true");
                    }
                    if (IsAccountingActive) $(".classAccountingOption").removeClass("hide"); 
                    else $(".classAccountingOption").addClass("hide");
                    $(".classHideOutsidePartners").removeClass("hide");
                    CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                        , {pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                        , function(pData){
                            var pClientGroup = pData[3];
                            var pSupplierGroup = pData[4];
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSupplierGroup, null);
                            $("#slSubAccount").html('<option value=0>'+'AUTO GENERATED'+'</option>');
                        }
                       , null);
                }, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalAddresses", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalContacts", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places

                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Addresses.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Contacts.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Truckers.js?' + glbVersion, function () {
                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10
                        , function (pTabelRows) { 
                            Truckers_BindTableRows(pTabelRows); 
                        });
                });
            },
                function () { Truckers_ClearAllControls(); },
                function () { Truckers_DeleteList(); });
            break;
        }

            //region Locations/Suppliers
        case "Suppliers": { // PartnerTypeID = 8

            strLoadWithPagingFunctionName = "/api/Suppliers/LoadWithPaging";

            LoadView("/MasterData/Suppliers", "div-content", function () {
                debugger;
                LoadView("/MasterData/ModalSuppliers", "div-content", function(){
                    if (IsAccountingActive) $(".classAccountingOption").removeClass("hide"); 
                    else $(".classAccountingOption").addClass("hide");
                    $(".classHideOutsidePartners").removeClass("hide");
                    CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                        , {pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                        , function(pData){
                            var pClientGroup = pData[3];
                            var pSupplierGroup = pData[4];
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSupplierAccount", pData[0], null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSupplierCostCenter", pData[2], null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSupplierSubAccountGroup", pSupplierGroup, null);
                            $("#slSupplierSubAccount").html('<option value=0>'+'AUTO GENERATED'+'</option>');
                        }
                       , null);}, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalAddresses", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalPartnersBanks", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalContacts", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places

                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Addresses.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/PartnersBanks.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Contacts.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Suppliers.js?' + glbVersion, function () {
                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { 
                        Suppliers_BindTableRows(pTabelRows); 
                    });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Suppliers_ClearAllControls(); },
                function () { Suppliers_DeleteList(); });
            break;
        }

            //region Invoicing/CreditCardTypes
        case "CreditCardTypes": {

            strLoadWithPagingFunctionName = "/api/CreditCardTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/CreditCardTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/CreditCardTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CreditCardTypes_BindTableRows(pTabelRows); });
                });
            },
                function () { CreditCardTypes_ClearAllControls(); },
                function () { CreditCardTypes_DeleteList(); });
            break;
        }
        //region Invoicing/CustomerCreditLimit
        case "CustomerCreditLimit": {

            strLoadWithPagingFunctionName = "/api/CustomerCreditLimit/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/CustomerCreditLimit", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/CustomerCreditLimit.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CustomerCreditLimit_BindTableRows(pTabelRows); });
                });
            },
                function () { CustomerCreditLimit_ClearAllControls(); },
                function () { CustomerCreditLimit_DeleteList(); });
            break;
        }
            //region Invoicing/PaymentTerms
        case "PaymentTerms": {

            strLoadWithPagingFunctionName = "/api/PaymentTerms/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/PaymentTerms", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/PaymentTerms.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { PaymentTerms_BindTableRows(pTabelRows); });
                });
            },
                function () { PaymentTerms_ClearAllControls(); },
                function () { PaymentTerms_DeleteList(); });
            break;
        }

            //region Invoicing/PurchaseItem
        case "WarehousingProduct":
        case "PurchaseItem": {
            strBindTableRowsFunctionName = "PurchaseItem_BindTableRows";
            strLoadWithPagingFunctionName = "/api/PurchaseItem/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/PurchaseItem", "div-content", function () {
                
                if (pControlID == "PurchaseItem") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Invoicing')");
                    $("#liTabName").text("Invoicing");
                    $("#liTabName").attr("onclick", "LoadViews('Invoicing')");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                }
                    
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/PurchaseItem.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    $("#slCurrency").html($("#hReadySlCurrencies").html());
                    LoadWithPagingWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10
                        , function (pData) {
                            var pLengthUnit = pData[2];
                            var pWeightUnit = pData[3];
                            var pVolumeUnit = pData[4];
                            var pCommodity = pData[5];
                            var pPackageType = pData[6];
                            var pIMOClass = pData[7];
                            var pWH_Area = pData[8];

                            // For ERP
                            var ItemsType = pData[9];
                            var ItemsGroup = pData[10];

                            Fill_SelectInputAfterLoadData(ItemsType, "ID", "Name", "Select Item Type", "#slItemType", '');
                            Fill_SelectInputAfterLoadData(ItemsGroup, "ID", "Name", "Select Item Group", "#slItemGroup", '');


                            PurchaseItem_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(pDefaults.LengthUnitID, 1, null/*pStrFirstRow*/, "slLengthUnit", pLengthUnit, null);
                            FillListFromObject(pDefaults.WeightUnitID, 1, null/*pStrFirstRow*/, "slWeightUnit", pWeightUnit, null);
                            FillListFromObject(pDefaults.VolumeUnitID, 1, null/*pStrFirstRow*/, "slVolumeUnit", pVolumeUnit, null);
                            FillListFromObject(null, 2, "<--Select-->", "slCommodity", pCommodity, null);
                            FillListFromObject(null, 2, "<--Select-->", "slPackageType", pPackageType
                            , function() {$("#slPackageTypeBarCode").html($("#slPackageType").html());$("#slToPackageType").html($("#slPackageType").html());$("#slFromPackageType").html($("#slPackageType").html());});
                            FillListFromObject(null, 9, "<--Select-->", "slIMOClass", pIMOClass, null);
                            FillListFromObject(null, 2, "<--Select-->", "slPreferredArea", pWH_Area, null);
                            
                        });
                });
            },
                function () { PurchaseItem_ClearAllControls(); },
                function () { PurchaseItem_DeleteList(); });
            break;
        }

            //region Invoicing/InvoiceTypes
        case "InvoiceTypes": {
            strLoadWithPagingFunctionName = "/api/InvoiceTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/InvoiceTypes", "div-content", function () {
                LoadView("/MasterData/ModalCheckboxesList", "div-content", null, null, null, true);
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/InvoiceTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { InvoiceTypes_BindTableRows(pTabelRows); });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { InvoiceTypes_ClearAllControls(); },
                function () { InvoiceTypes_DeleteList(); });
            break;
        }

            //region Invoicing/Incoterms
        case "Incoterms": {

            strLoadWithPagingFunctionName = "/api/Incoterms/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/Incoterms", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/Incoterms.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Incoterms_BindTableRows(pTabelRows); });
                });
            },
                function () { Incoterms_ClearAllControls(); },
                function () { Incoterms_DeleteList(); });
            break;
        }
            //    //region Invoicing/Currencies
            //case "Currencies": {

            //    strLoadWithPagingFunctionName = "/api/Currencies/LoadWithPaging";
            //    //the first parameter in the LoadView() fn. is the route in the RouteConfig
            //    LoadView("/MasterData/Currencies", "div-content", function () {
            //        $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/Currencies.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
            //            LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Currencies_BindTableRows(pTabelRows); });
            //        });
            //    },
            //        function () { Currencies_ClearAllControls(); },
            //        function () { Currencies_DeleteList(); });
            //    break;
            //}
        case "WarehousingCurrency":
        case "Currencies": {
            $("#hl-menu-MasterData").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Currencies_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Currencies/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Code";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/MasterData/Currencies", "div-content", function () {
                
                if (pControlID == "Currencies") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Invoicing')");
                    $("#liTabName").text("Invoicing");
                    $("#liTabName").attr("onclick", "LoadViews('Invoicing')");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                }
                //$("#liAccountAllocationType").text($("#h3Allocation").text());
                
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/Currencies.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            Currencies_BindTableRows(JSON.parse(pData[0]));
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Currencies_ClearAllControls(); },
                function () { Currencies_DeleteList(); });
            break;
        }
        case "TaxeTypes": {
            $("#hl-menu-MasterData").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "TaxeTypes_BindTableRows";
            strLoadWithPagingFunctionName = "/api/TaxeTypes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Code";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/MasterData/TaxeTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/TaxeTypes.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) 
                        { 
                            var pAccounts = pData[2];
                            TaxeTypes_BindTableRows(JSON.parse(pData[0])); 
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, "<--Select-->", "slAccount", pAccounts, null);
                            $("#slSubAccount").html('<option value=0>'+TranslateString("SelectFromMenu")+'</option>');
                            if (IsAccountingActive) {
                                $(".classAccountingOption").removeClass("hide");
                                //$("#slAccount").attr("data-required", "true");
                            }
                            else {
                                $(".classAccountingOption").addClass("hide");
                                //$("#slAccount").attr("data-required", "false");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { TaxeTypes_ClearAllControls(); },
                function () { TaxeTypes_DeleteList(); });
            break;
        }
            //region Invoicing/ChargeTypes
        case "WarehousingChargeType":
        case "ChargeTypes": {

            strLoadWithPagingFunctionName = "/api/ChargeTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/ChargeTypes", "div-content", function () {

                if (pDefaults.IsTaxOnItems)
                    $(".classShowForTaxOnItems").removeClass("hide");

                if (pControlID == "ChargeTypes") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Invoicing')");
                    $("#liTabName").text("Invoicing");
                    $("#liTabName").attr("onclick", "LoadViews('Invoicing')");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                }
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/ChargeTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { ChargeTypes_BindTableRows(pTabelRows); });
                });
                if (IsAccountingActive)
                    $(".classAccountingOption").removeClass("hide");
                else
                    $(".classAccountingOption").addClass("hide");
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE IsMain=0", pOrderBy: "Name,Code" }
                    , function (pData) {
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slRevenueAccount", pData[0]
                            , function () { $("#slExpenseAccount").html($("#slRevenueAccount").html()) });
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slRevenueCostCenter", pData[2]
                            , function () { $("#slExpenseCostCenter").html($("#slRevenueCostCenter").html()) });
                        $("#slRevenueSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                        $("#slExpenseSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                    }
                    , null);
            },
                function () { ChargeTypes_ClearAllControls(); },
                function () { ChargeTypes_DeleteList(); });
            break;
        }

            //case "Treasuries": {
            //    debugger;
            //    strLoadWithPagingFunctionName = "/api/Treasury/LoadWithPaging";
            //    LoadView("/MasterData/Treasury", "div-content", function () {
            //        $.getScript(strServerURL + '/Scripts/MasterData/BanksAccountsAndTreasuries/Treasury.js?' + glbVersion, function () {
            //            LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Treasury_BindTableRows(pTabelRows); });
            //        });
            //    },
            //        function () { Treasury_ClearAllControls(); },
            //        function () { Treasury_DeleteList(); });
            //    break;
            //}
        case "Treasuries": {
            $("#hl-menu-MasterData").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Treasury_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Treasury/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/MasterData/Treasury", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/BanksAccountsAndTreasuries/Treasury.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) 
                        { 
                            var pAccounts = pData[2];
                            var pJournalTypes = pData[3];
                            Treasury_BindTableRows(JSON.parse(pData[0])); 
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slBranch").html($("#hReadySlBranches").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccounts
                                , null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slInJournalType", pJournalTypes
                                , function () {
                                    $("#slOutJournalType").html($("#slInJournalType").html());
                                });
                            if (IsAccountingActive)
                                $(".classAccountingOption").removeClass("hide");
                            else
                                $(".classAccountingOption").addClass("hide");
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Treasury_ClearAllControls(); },
                function () { Treasury_DeleteList(); });
            break;
        }
        case "BanksAccounts": {
            $("#hl-menu-MasterData").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "BankAccount_BindTableRows";
            strLoadWithPagingFunctionName = "/api/BankAccount/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/MasterData/BankAccount", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/BanksAccountsAndTreasuries/BankAccount.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) 
                        { 
                            var pAccounts = pData[2];
                            var pJournalTypes = pData[3];
                            BankAccount_BindTableRows(JSON.parse(pData[0])); 
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccounts
                                , function () {
                                    $("#slNotesPayable").html($("#slAccount").html());
                                    $("#slNotesPayableUnderCollection").html($("#slAccount").html());
                                    $("#slNotesReceivable").html($("#slAccount").html());
                                    $("#slNotesReceivableUnderCollection").html($("#slAccount").html());
                                    $("#slCollectionExpenses").html($("#slAccount").html());
                                });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slInJournalType", pJournalTypes
                                , function () {
                                    $("#slOutJournalType").html($("#slInJournalType").html());
                                });
                            if (IsAccountingActive)
                                $(".classAccountingOption").removeClass("hide");
                            else
                                $(".classAccountingOption").addClass("hide");
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { BankAccount_ClearAllControls(); },
                function () { BankAccount_DeleteList(); });
            break;
        }
        case "BankTemplates": {
            strBindTableRowsFunctionName = "BankTemplate_BindTableRows";
            strLoadWithPagingFunctionName = "/api/BankTemplate/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/BankTemplate", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/BanksAccountsAndTreasuries/BankTemplate.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { BankTemplate_BindTableRows(pTabelRows); });
                });
            },
                function () { BankTemplate_ClearAllControls(); },
                function () { BankTemplate_DeleteList(); });
            break;
        }
        case "Custodies": {
            debugger;
            strBindTableRowsFunctionName = "Custody_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Custody/LoadWithPaging";
            LoadView("/MasterData/Custody", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/BanksAccountsAndTreasuries/Custody.js?' + glbVersion, function () {
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Custody_BindTableRows(pTabelRows); });               
                });
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , {pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                    , function(pData){
                        var pClientGroup = pData[3];
                        var pSupplierGroup = pData[4];
                        var pClientAndSupplierGroup = pData[5];
                        var pEmployeeGroup = pData[6];
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pEmployeeGroup, null);
                        $("#slSubAccount").html('<option value=0>' + TranslateString("AUTOGENERATED") + '</option>');
                    }
                    , null);
                if (IsAccountingActive)
                    $(".classAccountingOption").removeClass("hide");
                else
                    $(".classAccountingOption").addClass("hide");
            },
                function () { Custody_ClearAllControls(); },
                function () { Custody_DeleteList(); });
            break;
        }
            //region Invoicing/ContainerTypes
        case "ContainerTypes": {

            strLoadWithPagingFunctionName = "/api/ContainerTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/ContainerTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Others/ContainerTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { ContainerTypes_BindTableRows(pTabelRows); });
                });
            },
                function () { ContainerTypes_ClearAllControls(); },
                function () { ContainerTypes_DeleteList(); });
            break;
        }

            //region Invoicing/PackageTypes
        case "WarehousingPackageType": 
        case "PackageTypes": {

            strLoadWithPagingFunctionName = "/api/PackageTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/PackageTypes", "div-content", function () {
                
                if (pControlID == "PackageTypes") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Others')");
                    $("#liTabName").text("Others");
                    $("#liTabName").attr("onclick", "LoadViews('Others')");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                }
                    
                $.getScript(strServerURL + '/Scripts/MasterData/Others/PackageTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { PackageTypes_BindTableRows(pTabelRows); });
                });
            },
                function () { PackageTypes_ClearAllControls(); },
                function () { PackageTypes_DeleteList(); });
            break;
        }

            //region Invoicing/Commodities
        case "WarehousingCommodity":
        case "Commodities": {

            strLoadWithPagingFunctionName = "/api/Commodities/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/Commodities", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                
                if (pControlID == "Commodities") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Others')");
                    $("#liTabName").text("Others");
                    $("#liTabName").attr("onclick", "LoadViews('Others')");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                }
                $.getScript(strServerURL + '/Scripts/MasterData/Others/Commodities.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Commodities_BindTableRows(pTabelRows); });
                });
            },
                function () { Commodities_ClearAllControls(); },
                function () { Commodities_DeleteList(); });
            break;
        }

            //region Invoicing/MoveTypes
        case "MoveTypes":
        case "ServiceDepartmentBinding" : {

            strLoadWithPagingFunctionName = "/api/MoveTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/MoveTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Others/MoveTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { MoveTypes_BindTableRows(pTabelRows); });
                    CallGETFunctionWithParameters("/api/NoAccessDepartments/LoadAll", { pWhereClause: "ORDER BY Name" }
                    , function (pData) {
                        _Departments = pData[0];
                        FillListFromObject(null, 2, "<--Select-->", "slDetailsDepartment", _Departments, null);
            }
            , null);
                });
                if (pControlID == "MoveTypes") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Others')");
                    $("#liTabName").text("Others");
                    $("#liTabName").attr("onclick", "LoadViews('Others')");
                    $("#liFormName").text("Service Scope");
                    $("#h3Label").text("Service Scope");
                    $(".classHideForMoveTypes").addClass("hide");
                    //$("#stepsFollowups").attr("style", "display:none;");
                }
                else { //CRM_Clients (i.e. SalesLeadsFollowup)
                    $("#liGroupName").text("Administration");
                    $("#liGroupName").attr("onclick", "LoadViews('Settings')");
                    $("#liTabName").text("Settings");
                    $("#liTabName").attr("onclick", "LoadViews('Settings')");
                    $("#liFormName").text("Binding Services to Departments");
                    $("#h3Label").text("Binding Services to Departments");
                    $(".classHideForMoveTypes").removeClass("hide");
                }
            },
                function () { MoveTypes_ClearAllControls(); },
                function () { MoveTypes_DeleteList(); });
            break;
        }

            //region Invoicing/Vessels
        case "Vessels": {

            strLoadWithPagingFunctionName = "/api/Vessels/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/Vessels", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/Others/Vessels.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Vessels_BindTableRows(pTabelRows); });
                });
            },
                function () { Vessels_ClearAllControls(); },
                function () { Vessels_DeleteList(); });
            break;
        }

            //region Invoicing/DocumentTypes
        case "DocumentTypes": {

            strLoadWithPagingFunctionName = "/api/DocumentTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/DocumentTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Others/DocumentTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { DocumentTypes_BindTableRows(pTabelRows); });
                });
            },
                function () { DocumentTypes_ClearAllControls(); },
                function () { DocumentTypes_DeleteList(); });
            break;
        }

            //region Invoicing/Template
        case "Templates": {
            strBindTableRowsFunctionName = "Template_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Template/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/Template", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/Others/Template.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Template_BindTableRows(pTabelRows); });
                });
            },
                function () { Template_ClearAllControls(); },
                function () { Template_DeleteList(); });
            break;
        }
            //region Invoicing/TrackingStage
        case "TrackingStages": {

            strLoadWithPagingFunctionName = "/api/TrackingStage/LoadWithPaging";
            strBindTableRowsFunctionName = "TrackingStage_BindTableRows";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/TrackingStage", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/Others/TrackingStage.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { TrackingStage_BindTableRows(pTabelRows); });
                });
            },
                function () { TrackingStage_ClearAllControls(); },
                function () { TrackingStage_DeleteList(); });
            break;
        }
            //------------Trucking By Nour-------------------------------------
        case "Trucking": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Others").removeClass("hide"); $("#tabOthers").parent().children().removeClass("btn-warning"); $("#tabOthers").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", "Trucking", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }

        case "TRCK_EquipmentModel": {
            debugger;
            strLoadWithPagingFunctionName = "/api/TRCK_EquipmentModel/LoadWithPaging";
            LoadView("/MasterData/TRCK_EquipmentModel", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Trucking/TRCK_EquipmentModel.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { TRCK_EquipmentModel_BindTableRows(pTabelRows); });
                });
            },
                function () { TRCK_EquipmentModel_ClearAllControls(); },
                function () { TRCK_EquipmentModel_DeleteList(); });
            break;
        }

        case "TRCK_Drivers": {
            debugger;
            TRCK_WorkingOnDrivers = 1;
            strLoadWithPagingFunctionName = "/api/TRCK_Drivers/LoadWithPagingWithWhereClause";

            LoadView("/MasterData/TRCK_Drivers", "div-content", function () {
                debugger;
  
                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                    , function (pData) {
                        var pClientGroup = pData[3];
                        var pSupplierGroup = pData[4];
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3 /*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3 /*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSupplierGroup, null);
                        $("#slSubAccount").html('<option value=0>' + 'AUTO GENERATED' + '</option>');
                    }
                   , null);
               

                $.getScript(strServerURL + '/Scripts/MasterData/Trucking/TRCK_Drivers.js?' + glbVersion, function () {
                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar")
                        $(".Drivers_or_DriverAssistant").html("سائقين")
                    else
                        $(".Drivers_or_DriverAssistant").html("Drivers")
                    LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, " Where IsDriver = 1 ", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { TRCK_Drivers_BindTableRows(pTabelRows); TRCK_Drivers_ClearAllControls(); });
                    // LoadWithPaging               ("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName,                                           , 0                                 , 10                                 , function (pTabelRows) { TRCK_Drivers_BindTableRows(pTabelRows); });
                });
            },
                function () { TRCK_Drivers_ClearAllControls(); },
                function () { TRCK_Drivers_DeleteList(); });
            break;
        }
        case "TRCK_DriverAssistant": {
            debugger;
            TRCK_WorkingOnDrivers = 0;
            strLoadWithPagingFunctionName = "/api/TRCK_Drivers/LoadWithPagingWithWhereClause";

            LoadView("/MasterData/TRCK_Drivers", "div-content", function () {
                debugger;

                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                    , function (pData) {
                        var pClientGroup = pData[3];
                        var pSupplierGroup = pData[4];
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSupplierGroup, null);
                        $("#slSubAccount").html('<option value=0>' + 'AUTO GENERATED' + '</option>');
                    }
                   , null);


                $.getScript(strServerURL + '/Scripts/MasterData/Trucking/TRCK_Drivers.js?' + glbVersion, function () {
                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar")
                        $(".Drivers_or_DriverAssistant").html("مساعد سائق")
                    else
                        $(".Drivers_or_DriverAssistant").html("Driver Assistant")
                    LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, " Where IsDriver = 0 ", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { TRCK_Drivers_BindTableRows(pTabelRows); TRCK_Drivers_ClearAllControls(); });
                    // LoadWithPaging               ("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName,                                           , 0                                 , 10                                 , function (pTabelRows) { TRCK_Drivers_BindTableRows(pTabelRows); });
                });
            },
                function () { TRCK_Drivers_ClearAllControls(); },
                function () { TRCK_Drivers_DeleteList(); });
            break;
        }

        case "TRCK_Trailers": {
            debugger;

            strLoadWithPagingFunctionName = "/api/TRCK_Trailers/LoadWithPagingWithWhereClause";

            LoadView("/MasterData/TRCK_Trailers", "div-content", function () {
                debugger;

                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                    , function (pData) {
                        var pClientGroup = pData[3];
                        var pSupplierGroup = pData[4];
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSupplierGroup, null);
                        $("#slSubAccount").html('<option value=0>' + 'AUTO GENERATED' + '</option>');

                    }
                   , null);

                $.getScript(strServerURL + '/Scripts/MasterData/Trucking/TRCK_Trailers.js?' + glbVersion, function () {

                    GetListWithName(null, "/api/TRCK_EquipmentModel/LoadAll", "Select Model", "slEquipmentModel");
                    GetListWithName(null, "/api/Countries/LoadAll", "Select Country", "slOriginCountry");
                    GetListWithNameAndWhereClause(null, "/api/Suppliers/LoadAll", "Select Insurance Company", "slInsuranceCompany", " WHERE IsInactive = 0 ORDER BY Name ", function () { });
                    GetListWithNameAndWhereClause(null, "/api/Suppliers/LoadAll", "Select Service Center", "slServiceCenter", " WHERE IsInactive = 0 ORDER BY Name ", function () { });

                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { TRCK_Trailers_BindTableRows(pTabelRows); TRCK_Trailers_ClearAllControls(); });
                   
                });
            },
                function () { TRCK_Trailers_ClearAllControls(); },
                function () { TRCK_Trailers_DeleteList(); });
            break;
        }

        case "TRCK_Equipments": {
            debugger;

            strLoadWithPagingFunctionName = "/api/TRCK_Equipments/LoadWithPagingWithWhereClause";

            LoadView("/MasterData/TRCK_Equipments", "div-content", function () {
                debugger;

                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                    , function (pData) {
                        var pClientGroup = pData[3];
                        var pSupplierGroup = pData[4];
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSupplierGroup, null);
                        $("#slSubAccount").html('<option value=0>' + 'AUTO GENERATED' + '</option>');
                    }
                   , null);

                $.getScript(strServerURL + '/Scripts/MasterData/Trucking/TRCK_Equipments.js?' + glbVersion, function () {

                    GetListWithName(null, "/api/TRCK_EquipmentModel/LoadAll", "Select Model", "slEquipmentModel");
                    GetListWithName(null, "/api/Countries/LoadAll", "Select Country", "slOriginCountry");
                    GetListWithNameAndWhereClause(null, "/api/Suppliers/LoadAll", "Select Insurance Company", "slInsuranceCompany", " WHERE IsInactive = 0 ORDER BY Name ", function () { });
                    GetListWithNameAndWhereClause(null, "/api/Suppliers/LoadAll", "Select Service Center", "slServiceCenter", " WHERE IsInactive = 0 ORDER BY Name ", function () { });
                    GetListWithName(null, "/api/TRCK_Trailers/LoadAll", "Select Trailer", "slTrailers");

                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { TRCK_Equipments_BindTableRows(pTabelRows); TRCK_Equipments_ClearAllControls(); });

                });
            },
                function () { TRCK_Equipments_ClearAllControls(); },
                function () { TRCK_Equipments_DeleteList(); });
            break;
        }
            //------------End Trucking By Nour-------------------------------------
            //kk
        case "CustomsItems": {
            debugger;
            strLoadWithPagingFunctionName = "/api/CustomsItems/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/CustomsItems", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/CustomsClearance/CustomsItems.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10,
                        function (pTabelRows) {
                            debugger;
                            CustomsItems_BindTableRows(pTabelRows);
                        });
                });
            },
                function () { CustomsItems_ClearAllControls(); },
                function () { CustomsItems_DeleteList(); });
            break;
        }
        case "Authorizations": 
		{
            debugger;
            strLoadWithPagingFunctionName = "/api/Authorizations/LoadWithPaging";
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize,pSearchKey:""};// pWhereClause: pWhereClause, pOrderBy: pOrderBy };
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/Authorizations", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/CustomsClearance/Authorizations.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total",
                        strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters,
                        function (pTabelRows) {
                            debugger;
                            FillListFromObject(null, 2, "Select Customer"/*"Select Equip."*/, "slCustomers", pTabelRows[2], null);
                            Authorizations_BindTableRows(JSON.parse(pTabelRows[0]));
                            LoadDates();
                        });
                });
            },
                function () { Authorizations_ClearAllControls(); },
                function () { Authorizations_DeleteList(); });
            break;
        }
            //region Invoicing/Network
        case "Network": {

            strLoadWithPagingFunctionName = "/api/Network/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/Network", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/Others/Network.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Network_BindTableRows(pTabelRows); });
                });
            },
                function () { Network_ClearAllControls(); },
                function () { Network_DeleteList(); });
            break;
        }
        
            //region Pricing/Pricing
        case "PricingRequest":
        case "PricingForm": {
            debugger;
            UnLoadOperationsSubMenu();
            Operations_ClearFilters();
            Quotations_ClearFilters();
            if (pUserID != undefined && pUserID != null) { //to give permissions for case of opened from alarm
                $("#hf_CanAdd").val(1);
                $("#hf_CanDelete").val(1);
                $("#hf_CanEdit").val(1);
            }
            glbCallingControl = pControlID;
            if (pRoleID != null && pRoleID != undefined)
                intPricingType = pRoleID;
            else
                intPricingType = constPricingOcean;
            strBindTableRowsFunctionName = "Pricing_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Pricing/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            
            LoadView("/Pricing/Pricing", "div-content", function () {
                //LoadView("/MasterData/ModalCheckboxesList", "div-content", null, null, null, true);
                //LoadView("/Pricing/Pricing", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                $("#div-main-options").width($("#mainForm").width() - 185);
                $("#divTblPricing").height($("#mainForm").height() - 360);
                $.getScript(strServerURL + '/Scripts/PricingModule/PricingTab/Pricing.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    if (glbCallingControl == "PricingRequest") {
                        $("#liPricingForm").text("Pricing Request");
                        $("#h3Pricing").text("Pricing Request");
                        $("#btn-Delete").attr("id", "btn-Delete-hide");
                    }
                    else {
                        $("#liPricingForm").text("Pricing");
                        $("#h3Pricing").text("Pricing");
                    }

                    if (intPricingType == constPricingOcean) {
                        $("#aPricingOcean").parent().siblings().children().removeClass("text-ul");
                        $("#aPricingOcean").addClass("text-ul");
                        $("#lblPricingShown").text("(OCEAN)");
                    }
                    else if (intPricingType == constPricingAir) {
                        $("#aPricingAir").parent().siblings().children().removeClass("text-ul");
                        $("#aPricingAir").addClass("text-ul");
                        $("#lblPricingShown").text("(AIR)");
                    }
                    else if (intPricingType == constPricingInland) {
                        $("#aPricingInland").parent().siblings().children().removeClass("text-ul");
                        $("#aPricingInland").addClass("text-ul");
                        $("#lblPricingShown").text("(TRUCKING)");
                    }
                    else if (intPricingType == constPricingCustomsClearance) {
                        $("#aPricingCustomsClearance").parent().siblings().children().removeClass("text-ul");
                        $("#aPricingCustomsClearance").addClass("text-ul");
                        $("#lblPricingShown").text("(Customs Clearance)");
                    }
                    else if (intPricingType == constPricingGeneral) {
                        $("#aPricingGeneral").parent().siblings().children().removeClass("text-ul");
                        $("#aPricingGeneral").addClass("text-ul");
                        $("#lblPricingShown").text("(GENERAL)");
                    }
                    $("#slPricingType").val(intPricingType);
                    var pWhereClause = (pUserID != undefined && pUserID != null) ? (" WHERE ID= " + pUserID) : " WHERE PricingTypeID=10 ";
                    var pOrderBy = "SupplierName, ID DESC"; //"TransportTypeID, LineName, POLName, PODName";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsReturnObjectArray: true, pPricingTypeID: intPricingType, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy };
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pPricing = pData[0];
                            var pContainerType = pData[2];
                            var pCommodity = pData[3];
                            var pCountry = pData[4];
                            var pSupplier = pData[5]; //The supplier is one of (ShippingLine,Airline,Trucker or CCA)
                            var pPricingSettings = pData[6];
                            var pPricingCharge = pData[7];
                            var pSalesLead = pData[8];
                            var pPackageType = pData[9];
                            $("#slPricingType").val(intPricingType);
                            FillListFromObject(null, 1, "<--Select-->"/*"Select Equip."*/, "slEquipment", pContainerType, null);
                            FillListFromObject(null, 2, "<--Select-->"/*"Select Commodity"*/, "slCommodity", pCommodity, null);
                            FillListFromObject(null, 2, "<--Select-->"/*"Select Country"*/, "slPOLCountry", pCountry, function () { $("#slPODCountry").html($("#slPOLCountry").html()); });
                            FillListFromObject(null, 2, "<--Select-->"/*"Select Supplier"*/, "slSupplier", pSupplier, null);
                            FillListFromObject(null, 10, null, "slPricingSettings", pPricingSettings, null);
                            FillListFromObject(null, 2, "<--Select-->", "slSalesLead", pSalesLead, null);
                            FillListFromObject(null, 2, "<--Select-->", "slPackageType", pPackageType, null);
                            $("#slCustomer").html($("#hReadySlCustomers").html());
                            Pricing_BindTableRows(JSON.parse(pPricing), JSON.parse(pPricingCharge));
                            ApplyPermissions();
                        });
                });
            },
                function () { Pricing_NewRow(); /*Pricing_ClearAllControls();*/ },
                function () { Pricing_DeleteList(); });
            break;
        }

            //region Pricing/PricingSettings
        case "PricingSettings": {
            intPricingType = constPricingOcean;
            strBindTableRowsFunctionName = "PricingSettings_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Pricing/PricingSettings_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            LoadView("/Pricing/PricingSettings", "div-content", function () {
                //LoadView("/Pricing/PricingSettings", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/PricingModule/PricingTab/PricingSettings.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE PricingTypeID=" + intPricingType;
                    var pOrderBy = "ChargeTypeName";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsReturnObjectArrayForPricingSettings: true, pPricingTypeID: intPricingType, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pPricingSettings = pData[0];
                            var pChargeType = pData[2];
                            $("#slPricingType").val(intPricingType);
                            FillListFromObject(null, 2, "<--Select-->"/*"Select ChargeType"*/, "slChargeType", pChargeType, null);
                            PricingSettings_BindTableRows(JSON.parse(pPricingSettings));
                        });
                });
            },
                function () { PricingSettings_ClearAllControls(); },
                function () { PricingSettings_DeleteList(); });
            break;
        }

            //region Settings/Branches
        case "Branches": {

            strLoadWithPagingFunctionName = "/api/Branches/LoadWithPaging";

            LoadView("/Administration/Branches", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/Branches.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Branches_BindTableRows(pTabelRows); });
                });
            },
                function () { Branches_ClearAllControls(); },
                function () { Branches_DeleteList(); });
            break;
        }
        case "FA_Departments": {

            strLoadWithPagingFunctionName = "/api/FA_Departments/LoadWithPaging";

            LoadView("/Administration/FA_Departments", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/FA_Departments.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_Departments_BindTableRows(pTabelRows); });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { FA_Departments_ClearAllControls(); },
                function () { FA_Departments_DeleteList(); });
            break;
        }
        case "FA_Devisons": {

            strLoadWithPagingFunctionName = "/api/FA_Devisons/LoadWithPaging";

            LoadView("/Administration/FA_Devisons", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/FA_Devisons.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_Devisons_BindTableRows(pTabelRows); });
                });
            },
                function () { FA_Devisons_ClearAllControls(); },
                function () { FA_Devisons_DeleteList(); });
            break;
        }
            //region Settings/Defaults
        case "Defaults": {

            strLoadWithPagingFunctionName = "/api/Defaults/LoadAll"; // I am sure i ve just one row isa

            LoadView("/Administration/Defaults", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/Defaults.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadAll(strLoadWithPagingFunctionName, " WHERE 1=1 ", function (pTabelRows) { Defaults_BindTableRows(pTabelRows); });
                });
            },
                function () { Defaults_ClearAllControls(); },
                function () { Defaults_DeleteList(); });
            break;
        }

        case "NoAccessDepartments":
        case "DepartmentChargeBinding": {

            strLoadWithPagingFunctionName = "/api/NoAccessDepartments/LoadAll"; // I am sure i ve just one row isa

            LoadView("/Administration/NoAccessDepartments", "div-content", function () {
                if (pControlID == "NoAccessDepartments") {
                    $("#liGroupName").text("Administration");
                    $("#liGroupName").attr("onclick", "LoadViews('Settings');");
                    $("#liTabName").text("Settings");
                    $("#liTabName").attr("onclick", "LoadViews('Settings');");
                    $("#liFormName").text("Departments");
                    $("#h3Label").text("Departments");
                    $(".classHideForDepartments").addClass("hide");
                    //$("#stepsFollowups").attr("style", "display:none;");
                }
                else { 
                    $("#liGroupName").text("Administration");
                    $("#liGroupName").attr("onclick", "LoadViews('Settings');");
                    $("#liTabName").text("Settings");
                    $("#liTabName").attr("onclick", "LoadViews('Settings');");
                    $("#liFormName").text("Departments Charges Binding");
                    $("#h3Label").text("Departments Charges Binding");
                    $(".classHideForDepartments").removeClass("hide");
                }
                $.getScript(strServerURL + '/Scripts/Administration/Settings/NoAccessDepartments.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    //LoadAll(strLoadWithPagingFunctionName, "ORDER BY Name, LocalName", function (pTabelRows) { NoAccessDepartments_BindTableRows(pTabelRows); });
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { NoAccessDepartments_BindTableRows(pTabelRows); });
                });
                GetListAsCheckboxesWithVariousParameters("/api/ChargeTypes/LoadAllWithMinimalColumns", { pWhereClauseWithMinimalColumns: "WHERE 1=1" }, "divCheckboxesList", "cbAddedItemID", null/*function () { FadePageCover(false); }*/, (pDefaults.IsRepeatChargeTypeName ? 3 : 1), "col-sm-3");
            },
                function () { NoAccessDepartments_ClearAllControls(); },
                function () { NoAccessDepartments_DeleteList(); });
            break;
        }

        case "MergeDuplicate": {
            //  strLoadWithPagingFunctionName = "/api/MergeDuplicate/LoadWithPaging";
            LoadView("/Administration/MergeDuplicate", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/MergeDuplicate.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CRM_Sources_BindTableRows(pTabelRows); });
                    // Fill_Items();
                });
            },
                function () { /*Fill_Items();*/ },
                function () {/* Fill_Items();*/ });
            break;
        }
            //region Security/Roles
        case "Roles": {

            strLoadWithPagingFunctionName = "/api/Roles/LoadWithPaging";

            LoadView("/Administration/Roles", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Security/Roles.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Roles_BindTableRows(pTabelRows); });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Roles_ClearAllControls(); },
                function () { Roles_DeleteList(); });
            break;
        }
            //region Logs/OperationChargeLog
        case "OperationsChargesLogs": {

            FadePageCover(true);
            LoadView("/Administration/OperationChargeLog", "div-content", function () {
                CallGETFunctionWithParameters("/api/OperationChargeLog/GetOperationChargeLogFilters", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 1, null, "slOperation", data[0], null);
                        $("#txtFromOpenDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToOpenDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); });
                $.getScript(strServerURL + '/Scripts/Administration/Logs/OperationChargeLog.js');
                $("#hl-homepage").on("click", function () { LoadViews("hl-homepage"); });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            });
            
            break;
        }
            //region Miscellaneous/DeletedInvoices
        case "DeletedInvoices": {

            strLoadWithPagingFunctionName = "/api/Invoices/LoadAll";

            LoadView("/Administration/DeletedInvoices", "div-content", function () {
                CallGETFunctionWithParameters("/api/Operations/LoadOperationsToRestoreInvoices"
                    , { pPageSize: 99999, pWhereClauseToGetOperationsToRestoreInvoices: "WHERE BLType <> 2 AND OperationStageID NOT IN (" + ClosedQuoteAndOperStageID + "," + CancelledQuoteAndOperStageID + ") AND CreationDate > DATEADD(mm,DATEDIFF(mm,0,GETDATE())-12,0)", pOrderBy: "ID DESC" }
                    , function (pData) {
                        FillListFromObject(null, 13, null, "slOperation", pData[0], function () { FadePageCover(false); });
                    }
                    , null);
                $.getScript(strServerURL + '/Scripts/Administration/Miscellaneous/DeletedInvoices.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    //LoadWithPagingWithWhereClauseAndOrderBy("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, " WHERE IsDeleted = 1 ", " InvoiceNumber, InvoiceTypeName, OperationCode ", 0, 10, function (data) { DeletedInvoices_BindTableRows(JSON.parse(data[0])); });
                    DeletedInvoices_LoadWithPagingWithWhereClauseAndOrderBy();
                });
            },
                null, //function () { DeletedInvoices_ClearAllControls(); },
                null); //function () { DeletedInvoices_DeleteList(); });
            break;
        }
        case "Creditlimitexceptionperiod": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Creditlimitexceptionperiod_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Creditlimitexceptionperiod/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "customerName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Administration/Creditlimitexceptionperiod", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Miscellaneous/Creditlimitexceptionperiod.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            Creditlimitexceptionperiod_BindTableRows(JSON.parse(pData[0]));
                            $("#txtDate").val(getTodaysDateInddMMyyyyFormat());
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { SystemOptions_ClearAllControls(); },
                function () { JVTypes_DeleteList(); });
            break;
        }
        case "ContainerTracking": {
            $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ContainerTracking_BindTableRows";
            strLoadWithPagingFunctionName = "/api/OperationContainersAndPackages/ContainerTracking_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = "WHERE IsTracked=1";
            var pOrderBy = "OperationID DESC, ContainerNumber DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ContainerTrackingGroup/ContainerTrackingTab/ContainerTracking", "div-content", function () {
                /***************************Ahmed Mohamed*****************************/
                $('#BtnGnrtSrIn').click(function () {
                    //alert('ok');
                    debugger;
                    CallGETFunctionWithParameters("/api/OperationContainersAndPackages/getEirSerial", null
                    , function (pData) {
                        if (pData[0]) {
                            //PaymentDetails_BindTableRows(JSON.parse(pData[3])); //pTblPaymentDetails: pData[3]
                            //Payment_BindTableRows(JSON.parse(pData[4])); //pTblPayment: pData[4]

                            if ($("#txtYardEIRNumber").val() == "") {
                                $("#txtYardEIRNumber").val(pData[0]);
                            }
                        }
                        else {

                            swal("Sorry", "Connection failed, please try again.");
                        }
                    }
                    , null);
                });
                $('#BtnGnrtSrOut').click(function () {
                    //alert('ok');
                    CallGETFunctionWithParameters("/api/OperationContainersAndPackages/getEirSerial", null
                    , function (pData) {
                        if (pData[0]) {
                            //PaymentDetails_BindTableRows(JSON.parse(pData[3])); //pTblPaymentDetails: pData[3]
                            //Payment_BindTableRows(JSON.parse(pData[4])); //pTblPayment: pData[4]
                            if ($("#txtYardEIRNumberOut").val() == "") {
                                $("#txtYardEIRNumberOut").val(pData[0]);
                            }
                        }
                        else {
                            swal("Sorry", "Connection failed, please try again.");
                        }
                    }
                    , null);
                });
                $('input[type=radio][name=optionsRadios2]').change(function () {
                    RadChange(this.value);
                });

                $.getScript(strServerURL + '/Scripts/ContainerTrackingGroup/ContainerTracking/ContainerTracking.js?' + glbVersion, function () {
                    LoadView("/MasterData/ModalSelectCharges", "div-content", function(){$("#slPayableBillTo").parent().addClass("hide"); $("#btn-SetDefaultNote").parent().addClass("hide");}, null, null, true);//sherif: calling a partial view with only modal called from different places
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pOperations = pData[2];
                            var pPorts = pData[3];
                            var pTrailer = pData[4];
                            var pDriver = pData[5];
                            var pDriverAssistant = pData[6];
                            var pWH_RowLocation = pData[7];
                            $("#slBookingPartySearch").html($("#hReadySlCustomers").html());
                            ContainerTracking_BindTableRows(JSON.parse(pData[0]));
                            //var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject(null, 1, TranslateString("SelectFromMenu"), "slOperationSearch", pOperations, function(){$("#slOperation").html($("#slOperationSearch").html());});
                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slGateOutPort", pPorts, function(){$("#slGateInPort").html($("#slGateOutPort").html());});
                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTrailer", pTrailer, null);
                            FillListFromObject(null, 2, "<--Select-->", "slDriver", pDriver, null);
                            FillListFromObject(null, 2, "<--Select-->", "slDriverAssistant", pDriverAssistant, null);
                            FillListFromObject(null, 1, "<--Select-->", "slYardLocationID", pWH_RowLocation, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ContainerTracking_ClearAllControls(); },
                function () { ContainerTracking_DeleteList(); });
            break;
        }

        case "DepotReports": {
            $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "DepotReports_BindTableRows";
            strLoadWithPagingFunctionName = "/api/DepotReports/DepotReports_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            //var pWhereClause = "WHERE IsTracked=1";
            //var pOrderBy = "OperationID DESC, ContainerNumber DESC";
            //var pPageNumber = 1;
            //var pPageSize = 10;
            //var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ContainerTrackingGroup/ContainerTrackingTab/DepotReports", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ContainerTrackingGroup/ContainerTracking/DepotReports.js?' + glbVersion, function () {
                    //LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    //    , function (pData) {
                    //    });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null, //function () { DepotReports_ClearAllControls(); },
                null //function () { DepotReports_DeleteList(); }
                );
            break;
        }

            //region Quotations/QuotationsManagement
        case "Quotations":
        case "QuotationsManagement": {
            Operations_ClearFilters();
            FormID = constQuotationsFormID; //to get privilage of quotations form for get permissions
            strLoadWithPagingFunctionName = "/api/Quotations/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/Quotations/Quotations", "div-content", function () {

                LoadView("/Quotations/ModalQuotations", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places

                LoadView("/MasterData/ModalCustomers", "div-content"
                    , function () {
                        if (pDefaults.UnEditableCompanyName == "SAF") {
                            $("#btn-OperatorTankChargeModal").addClass("hide");
                            $(".classMandatoryForSAF").attr("data-required", "true");
                        }
                    }, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalAgents", "div-content", function () {
                    if (pDefaults.UnEditableCompanyName == "SAF") {
                        $(".classMandatoryForSAF").attr("data-required", "true");
                    }
                }, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalAddresses", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalContacts", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places

                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Customers.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Agents.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Addresses.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Contacts.js');//sherif: to load the js file of the appended partial view

                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //GetListWithNameAndWhereClause(null, "/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STAGES", "slFilterQuotationStages", " WHERE IsQuotationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");

                $.getScript(strServerURL + '/Scripts/Quotations/Quotations/Quotations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    //Quotations_ReloadFilters();
                    LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, Quotations_GetFilterWhereClause(), 0, 10, function (pData) {
                        Quotations_BindTableRows(JSON.parse(pData[0]));
                        var pUsers = pData[2];
                        var _Salesmentemp = JSON.parse(pUsers);
                        var pSalesmen = jQuery.grep(_Salesmentemp, function (_Salesmentemp) {
                            return _Salesmentemp.IsSalesman == true;
                        });
                        var pCountry = pData[3];
                        //FillListFromObject(null, 2, "<--Select-->", "slFilterAgent", pAgents, null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slFilterCreator", pUsers, null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slFilterSalesman", JSON.stringify(pSalesmen), function () { $("#slOperationSalesman").html($("#slFilterSalesman").html()); });
                        $("#slFilterBranch").html("<option value=''><--Select--></option>");
                        $("#slFilterBranch").append($("#hReadySlBranches").html());
                        $("#slFilterBranch").val("");
                        //FillListFromObject(null, 2, "<--All-->", "slFilterShipper", pCustomers, function(){ $("#slFilterConsignee").html($("#slFilterShipper").html());$("#slFilterNotify").html($("#slFilterShipper").html());});
                        if ($("#hDefaultUnEditableCompanyName").val() == "EGL") { //has alot of customers so i dont search with them with combo not to load them
                            $("#slFilterShipper").html('<option value=""><--Select--></option>');
                            $("#slFilterConsignee").html('<option value=""><--Select--></option>');
                            $(".classHideForEGL").addClass("hide");
                            $(".classShowForEGL").removeClass("hide");
                            //$("#slFilterNotify").html('<option value=""><--Select--></option>');
                        }
                        else {
                            $("#slFilterShipper").html($("#hReadySlCustomers").html());
                            $("#slFilterConsignee").html($("#hReadySlCustomers").html());
                            $(".classHideForEGL").removeClass("hide");
                            $(".classShowForEGL").addClass("hide");
                            //$("#slFilterNotify").html($("#hReadySlCustomers").html());
                        }
                        FillListFromObject(null, 2, "<--Select-->", "slFilterPOLCountry", pCountry, function () { $("#slFilterPODCountry").html($("#slFilterPOLCountry").html()); });
                        $("#slFilterPOLCountry").attr("onchange"
                            , 'FilterListByAnotherListID(null, "/api/Ports/LoadAll", "<--Select-->", "slFilterPOL", "slFilterPOLCountry", "CountryID");');
                        $("#slFilterPODCountry").attr("onchange"
                            , 'FilterListByAnotherListID(null, "/api/Ports/LoadAll", "<--Select-->", "slFilterPOD", "slFilterPODCountry", "CountryID");');
                        if (pDefaults.UnEditableCompanyName == "NIL")
                            $(".classShowForNIL").removeClass("hide");
                        //if ($("#hDefaultUnEditableCompanyName").val() == "VEN") {
                        //    $("#slPOD").siblings().text("Airport Of Destination");
                        //    $(".hideForAWB").addClass("hide");
                        //    $(".hideThForAWB").addClass("hide");
                        //    $("#thClient").text("Shipper");
                        //    $("#thAWB").removeClass("hide");
                        //}
                        //else {
                        //    $("#slPOD").siblings().text("POD");
                        //    $("#thAWB").addClass("hide");
                        //}
                    });
                });
            },
                function () { Quotations_ClearAllControls(); },
                function () { Quotations_DeleteList(); });
            break;
        }
            //region Quotations/QuotationsEdit
        case "QuotationsEdit": {
            FadePageCover(true);
            glbFormCalled = pControlID;
            //strLoadWithPagingFunctionName = "/api/Quotations/LoadWithWhereClause";
            strLoadWithPagingFunctionName = "/api/Quotations/LoadWithWhereClauseAndReturnObject";
            LoadView("/Quotations/QuotationsEdit", "div-content", function () {
                if ($("#hDefaultUnEditableCompanyName").val() == "KDS") {
                    //SelectOperationTypeModal
                    $("#spanCbIsHouse").text("B/L");
                    $("#spanCbIsMaster").text("Full Vessel");
                }
                LoadView("/MasterData/ModalSelectCharges", "div-content", function () {
                    if (pDefaults.IsTaxOnItems)
                        $(".classShowForTaxOnItems").removeClass("hide");
                    else
                        $(".classShowForTaxOnHeader").removeClass("hide");
                    $("#slPayableBillTo").parent().addClass("hide"); $("#btn-SetDefaultNote").parent().addClass("hide");
                    if (pDefaults.UnEditableCompanyName == "FRE" || pDefaults.UnEditableCompanyName == "WAV") {
                        $("#btnAddNewCharge").removeClass("hide");
                    }
                }, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalCustomers", "div-content"
                    , function () {
                        if (pDefaults.UnEditableCompanyName == "SAF") {
                            $("#btn-OperatorTankChargeModal").addClass("hide");
                            $(".classMandatoryForSAF").attr("data-required", "true");
                        }
                    }, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalAgents", "div-content", function () {
                    if (pDefaults.UnEditableCompanyName == "SAF") {
                        $(".classMandatoryForSAF").attr("data-required", "true");
                    }
                }, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalAddresses", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalContacts", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalCheckboxesList", "div-content", null, null, null, true);
                //LoadView("/Operations/ModalSelectContainersAndPackages", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places

                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Customers.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Agents.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Addresses.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/MasterData/Partners/Contacts.js');//sherif: to load the js file of the appended partial view
                //$.getScript(strServerURL + '/Scripts/Quotations/Quotations/QuotationContainersAndPackages.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/Quotations/Quotations/QuotationCharges.js');//sherif: to load the js file of the appended partial view

                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "SET AS", "ulQuotationStages", " WHERE IsQuotationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");

                $.getScript(strServerURL + '/Scripts/Quotations/Quotations/Quotations.js?' + glbVersion, function () {//sherif:pUserID here holds the QuotationID
                    //// i am calling here FillControls and not BindTableRows coz i ll ve just one row by ID
                    //LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, " where ID = " + pUserID/*here it holds the QuotationID*/, 0, 10, function (pData) { Quotations_FillControls(pData); });
                    CallGETFunctionWithParameters(strLoadWithPagingFunctionName
                        , { pEditedQuotationID: pUserID/*pUserID holds the QuotationID here*/ }
                        , function (pData) {
                            Quotations_FillControls(pData, function () {
                                if (pQuotationRouteRequestID != null && pQuotationRouteRequestID != undefined)
                                    Routings_EditByDblClick(pQuotationRouteRequestID, true);
                                else
                                    FadePageCover(false);
                            });
                        }
                        , null);
                });
            }
            , null//function () { QuotationsEdit_ClearAllControls(); }
            , null//function () { QuotationsEdit_DeleteList(); }
                );
            break;
        }
            //region Operations/OperationsManagement
        //case "Operations": {
        //    debugger;
        //    Operations_ClearFilters();
        //    Quotations_ClearFilters();
        //    LoadView("/Home/Groups", "div-content", function () {
        //        //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
        //        //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
        //        FillGroups(" where ParentGroupID = 4 ", "Operations", function () {
        //            //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
        //        });

        //    });
        //    break;
        //}
        case "Operations":
        case "OperationsManagement":
        case "BLDocuments": {
            //SetAsideSearchControls(1);
            Quotations_ClearFilters();
            FormID = constOperationsFormID; //to get privilage of operations form for get permissions
            glbCallingControl = pControlID;
            strLoadWithPagingFunctionName = "/api/Operations/LoadWithWhereClause";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/Operations/Operations", "div-content", function () {
                $("#div-main-options").width($("#mainForm").width() - 185);
                //$("#divTblOperations").height($("#mainForm").height() - 360);
                if (pDefaults.UnEditableCompanyName == "FRE" || pDefaults.UnEditableCompanyName == "WAV") {
                    $(".classShowForFRE").removeClass("hide");
                }
                else if (pDefaults.UnEditableCompanyName == "TRL") {
                    $(".classShowForTRL").removeClass("hide");
                }
                else if (pDefaults.UnEditableCompanyName == "STR") {
                    $(".classShowForSTR").removeClass("hide");
                }
                else if (pDefaults.UnEditableCompanyName == "SAF") {
                    $(".classShowForSAF").removeClass("hide");
                }
                else if (pDefaults.UnEditableCompanyName == "NIL")
                    $(".classShowForNIL").removeClass("hide");
                if ($("#hDefaultUnEditableCompanyName").val() == "KDS") {
                    $("#spanCbBLType").text("Type");
                    $("#spanLblContainerType").text("Vessel Type");
                    $("#spanLblContainerType2").text("Cargo");
                    $("#spanLblContainerType3").text("Cargo");
                    $("#spanLblSlLines").text("Operator");

                    $("#spanCbIsHouse").text("B/L");
                    $("#spanCbIsMaster").text("Full Vessel");
                    $("#spanCbIsConsolidation").text("General Cargo");
                    //SelectOperationTypeModal
                    $("#spanCbIsHouseFromQuotation").text("B/L");
                    $("#spanCbIsMasterFromQuotation").text("Full Vessel");
                }
                if (OA && (pControlID == "OperationsManagement" || pControlID == "Operations")) {
                    LoadView("/MasterData/ModalAgents", "div-content", function () {
                        if (pDefaults.UnEditableCompanyName == "SAF") {
                            $(".classMandatoryForSAF").attr("data-required", "true");
                        }
                    }, null, null, true);//sherif: calling a partial view with only modal called from different places
                    LoadView("/MasterData/ModalCustomers", "div-content"
                        , function () {
                            //$(".classHideOutsidePartners").addClass("hide");
                            if (pDefaults.UnEditableCompanyName == "SAF") {
                                $("#btn-OperatorTankChargeModal").addClass("hide");
                                $(".classMandatoryForSAF").attr("data-required", "true");
                            }
                        }, null, null, true);//sherif: calling a partial view with only modal called from different places
                    LoadView("/MasterData/ModalAddresses", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                    LoadView("/MasterData/ModalContacts", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places

                    $.getScript(strServerURL + '/Scripts/MasterData/Partners/Agents.js');//sherif: to load the js file of the appended partial view
                    $.getScript(strServerURL + '/Scripts/MasterData/Partners/Customers.js');//sherif: to load the js file of the appended partial view
                    $.getScript(strServerURL + '/Scripts/MasterData/Partners/Addresses.js');//sherif: to load the js file of the appended partial view
                    $.getScript(strServerURL + '/Scripts/MasterData/Partners/Contacts.js');//sherif: to load the js file of the appended partial view
                }
                if (pControlID == "OperationsManagement" || pControlID == "Operations") {
                    OperationsManagement_BLDocuments_BindTableRows = "OperationsManagement_BindTableRows";
                    $("#hl-menu-Operations").parent().siblings().removeClass("active");
                    $(".classShowForOperationsManagement").removeClass("hide");
                }
                else if (pControlID == "BLDocuments") {
                    OperationsManagement_BLDocuments_BindTableRows = "BLDocuments_BindTableRows";
                    $("#h3Operations").text("Houses");
                    $("#hl-menu-Reports").parent().siblings().removeClass("active");
                    $("#hl-menu-Reports").parent().addClass("active");
                    $(".classShowForBLDocuments").removeClass("hide");
                }
                $.getScript(strServerURL + '/Scripts/Operations/Operations/Operations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    Operations_ReloadFilters();
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: ((pWhereClauseOverwriting != null && pWhereClauseOverwriting != undefined) ? pWhereClauseOverwriting : Operations_GetFilterWhereClause()) };
                    //LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, Operations_GetFilterWhereClause(), 1, 10
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, "ID DESC", 1, 10, pControllerParameters
                        , function (pData) {
                            if (pControlID == "OperationsManagement" || pControlID == "Operations") {
                                OperationsManagement_BindTableRows(JSON.parse(pData[0]));
                            }
                            else if (pControlID == "BLDocuments") {
                                BLDocuments_BindTableRows(JSON.parse(pData[0]));
                            }
                            var pCustomers = pData[2]; var pAgents = pData[3]; var pVessels = pData[4]; var pContainerTypes = pData[5]; var pCountry = pData[6]; var pMoveTypes = pData[7]; var pShippingLines = pData[8];
                            var pTruckers = pData[9]; var pUsers = pData[10]; var pCommodity = pData[11]; var pTypeOfStock = pData[12]; var pCCA = pData[13]; var pAirlines = pData[14];

                            //var _Salesmentemp = JSON.parse(pUsers);
                            //var pSalesmen = jQuery.grep(_Salesmentemp, function (_Salesmentemp) {
                            //    return _Salesmentemp.IsSalesman == true;
                            //});

                            $("#slFilterBranch").html("<option value=''><--Select--></option>");
                            $("#slFilterBranch").append($("#hReadySlBranches").html());
                            $("#slFilterBranch").val("");
                            ////FillListFromObject(null, 2, "<--All-->", "slFilterShipper", pCustomers, function(){ $("#slFilterConsignee").html($("#slFilterShipper").html());$("#slFilterNotify").html($("#slFilterShipper").html());});
                            if ($("#hDefaultUnEditableCompanyName").val() == "EGL") { //has alot of customers so i dont search with them with combo not to load them
                                $("#slFilterShipper").html('<option value=""><--Select--></option>');
                                $("#slFilterConsignee").html('<option value=""><--Select--></option>');
                                $("#slFilterBookingParty").html('<option value=""><--Select--></option>');
                                $(".classHideForEGL").addClass("hide");
                                if (pControlID == "OperationsManagement" || pControlID == "Operations")
                                    $(".classShowForEGL").removeClass("hide");
                                //$("#slFilterNotify").html('<option value=""><--Select--></option>');
                            }
                            else {
                                $("#slFilterShipper").html($("#hReadySlCustomers").html());
                                $("#slFilterConsignee").html($("#hReadySlCustomers").html());
                                $("#slFilterBookingParty").html($("#hReadySlCustomers").html());
                                if (pControlID == "OperationsManagement" || pControlID == "Operations")
                                    $(".classHideForEGL").removeClass("hide");
                                $(".classShowForEGL").addClass("hide");
                                //$("#slFilterNotify").html($("#hReadySlCustomers").html());
                            }
                            GetListWithNameAndWhereClause((glbOperationStageFilter == "" ? null : glbOperationStageFilter), "/api/NoAccessQuoteAndOperStages/LoadAll", "<--Select-->", "ulOperationStages", " WHERE IsOperationStage = 1  AND IsInActive = 0 ORDER BY ViewOrder ");
                            //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slOperationMoveTypes", pMoveTypes, null);
                            //$("#asideSearch").removeClass("hide");
                        });
                });
                $.getScript(strServerURL + '/Scripts/Operations/Operations/DocsOut.js');
                CallGETFunctionWithParameters("/api/Operations/LoadFilters", { pDummyParameter: 0 }
                , function (pData) {
                    pAgents = pData[0]; var pVessels = pData[1]; var pContainerTypes = pData[2]; var pCountry = pData[3]; var pMoveTypes = pData[4]; var pShippingLines = pData[5];
                    var pTruckers = pData[6]; var pUsers = pData[7]; var pCommodity = pData[8]; var pTypeOfStock = pData[9]; var pCCA = pData[10]; var pAirlines = pData[11];

                    var _Salesmentemp = JSON.parse(pUsers);
                    var pSalesmen = jQuery.grep(_Salesmentemp, function (_Salesmentemp) {
                        return _Salesmentemp.IsSalesman == true;
                    });

                    FillListFromObject(null, 2, "<--Select-->", "slFilterPOLCountry", pCountry, function () { $("#slFilterPODCountry").html($("#slFilterPOLCountry").html()); });
                    FillListFromObject(null, 2, "<--Select-->", "slFilterAgent", pAgents, null);
                    FillListFromObject(null, 2, "<--Select-->", "slFilterMoveType", pMoveTypes, null);
                    $("#slFilterPOLCountry").attr("onchange"
                        , 'FilterListByAnotherListID(null, "/api/Ports/LoadAll", "<--Select-->", "slFilterPOL", "slFilterPOLCountry", "CountryID");');
                    $("#slFilterPODCountry").attr("onchange"
                        , 'FilterListByAnotherListID(null, "/api/Ports/LoadAll", "<--Select-->", "slFilterPOD", "slFilterPODCountry", "CountryID");');
                    FillListFromObject(null, 2, "<--Select-->", "slOperationVessels", pVessels, function () { $("#slFilterVessel").html($("#slOperationVessels").html()); });
                    FillListFromObject(null, 1, "<--Select-->", "slOperationContainerType", pContainerTypes, function () { $("#slOperationContainerType2").html($("#slOperationContainerType").html()); $("#slOperationContainerType3").html($("#slOperationContainerType").html()); });
                    FillListFromObject(null, 2, "<--Select-->", "slFilterShippingLine", pShippingLines, null);
                    FillListFromObject(null, 2, "<--Select-->", "slFilterAirline", pAirlines, null);
                    FillListFromObject(null, 2, "<--Select-->", "slFilterTrucker", pTruckers, null);
                    FillListFromObject(null, 2, "<--Select-->", "slFilterCCA", pCCA, function () { $("#slOperationCCA").html($("#slFilterCCA").html()) });
                    FillListFromObject(null, 2, "<--Select-->", "slCommodity", pCommodity, null);
                    FillListFromObject(null, 2, "<--Select-->", "slTypeOfStock", pTypeOfStock, null);
                    FillListFromObject(null, 2, "<--Select-->", "slFilterCreator", pUsers, null);
                    FillListFromObject(null, 2, "<--Select-->", "slFilterSalesman", JSON.stringify(pSalesmen), function () { $("#slOperationSalesman").html($("#slFilterSalesman").html()); });
                }
                , null);
            },
                function () { Operations_ClearAllControls(); },
                function () { Operations_DeleteList(); });
            break;
        }
        case "OperationsEdit": {
            $("#asideSearch").addClass("hide");
            Quotations_ClearFilters();
            glbCallingControl = pControlID;
            FadePageCover(true);
            strLoadWithPagingFunctionName = "/api/Operations/LoadOperationWithDetails";//"/api/Operations/LoadWithWhereClause";

            LoadView("/Operations/OperationsEdit", "div-content", function () {
                $("title").text("Operation");
                if (pDefaults.UnEditableCompanyName == "KDM") {
                    $("#txtOperationReleaseNumber").attr("disabled", "disabled");
                    $("#lblKDMReferenceOrILSComInvNo").text("KDM Reference");
                }
                else if ($("#hDefaultUnEditableCompanyName").val() == "KDS") {
                    $("#spanCbBLType").text("Type");
                    $("#spanLblContainerType").text("Vessel Type");
                    $("#spanLblContainerType2").text("Cargo");
                    $("#spanLblContainerType3").text("Cargo");
                    $("#spanLblSlLines").text("Operator");
                    $("#spanLine").text("Operator");
                    $("#spanClient").text("Owner");
                    $("#spanAgent").text("Owner");
                    $("#txtOperationCutOffDate").siblings().text("ETC/ETS");

                    $("#lblCustomerReference").text("Kadmar Serial No.");
                    $("#lblCustomerReference").siblings().attr("placeholder", "Kadmar Serial No.");
                    $(".classHideForKDS").addClass("hide");
                    $("#spanCbIsHouse").text("B/L");
                    $("#spanCbIsMaster").text("Full Vessel");
                    $("#spanCbIsConsolidation").text("General Cargo");
                    //OperationTracking
                    $("#btn-AddTracking").text('Add Vessel Position');
                    $("#h3TrackingStage").text('Daily Vessel Position');
                    $("#lblTrackingStage").text('Vessel Position');
                }
                else if (pDefaults.UnEditableCompanyName == "SAF") {
                    $(".classShowForSAF").removeClass("hide");
                }
                else {
                    $(".classHideForKDS").removeClass("hide");
                    if ($("#hDefaultUnEditableCompanyName").val() == "DGL")
                        $("#menu1_PrintOptions").removeClass("hide");
                }
                //if (OVShi) LoadView("/Operations/ModalShipments", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalCustomers", "div-content"
                    , function () {
                        if (pDefaults.UnEditableCompanyName == "SAF") {
                            $("#btn-OperatorTankChargeModal").addClass("hide");
                            $(".classMandatoryForSAF").attr("data-required", "true");
                        }
                    }, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalAgents", "div-content", function () {
                    if (pDefaults.UnEditableCompanyName == "SAF") {
                        $(".classMandatoryForSAF").attr("data-required", "true");
                    }
                }, null, null, true);//sherif: calling a partial view with only modal called from different places
                if (OVPac || OVShi) LoadView("/Operations/ModalSelectOperationsContainersAndPackages", "div-content", function () { GetListWithNameAndWhereClause(null, "/api/PackageTypes/LoadAll", "<--Select-->", "slPackageTypes", "ORDER BY Name", null); }
                    , null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalShippingAgents", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalCustomsClearanceAgents", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/MasterData/ModalSuppliers", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                if (OVRou) LoadView("/Operations/ModalRoutings", "div-content"
                    , function () {
                        GetListWithCodeAndNameAndWhereClause(null, "/api/Ports/LoadAll", "<--Select-->", "slTruckingOrderGateInPort"
                            , "WHERE CountryID=" + $("#hDefaultCountryID").val()
                        , function () {
                            $("#slTruckingOrderGateOutPort").html($("#slTruckingOrderGateInPort").html());
                            $("#slTruckingOrderGateInPortTruckingOrder").html($("#slTruckingOrderGateInPort").html());
                            $("#slTruckingOrderGateOutPortTruckingOrder").html($("#slTruckingOrderGateInPort").html());
                            if ($("#hDefaultUnEditableCompanyName").val() == "OAO")
                                $("#lblStuffingDate").text("Stuffing Date - تاريخ التحميل ");
                        });
                    }, null, null, true);//sherif: calling a partial view with only modal called from different places
                //if (OVPac) LoadView("/Operations/ModalRebuildConsolidation", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                if (OVInv || OVDraftInv || OVNot || OVPurInv) LoadView("/Operations/ModalInvoices", "div-content"
                    , function () {
                        if (pDefaults.IsTaxOnItems)
                            $(".classShowForTaxOnItems").removeClass("hide");
                        else
                            $(".classShowForTaxOnHeader").removeClass("hide");
                        if (pDefaults.UnEditableCompanyName == "ELI")
                            $(".classShowForELI").removeClass("hide");
                        $("#slInvoiceCurrency").html($("#hReadySlCurrencies").html());
                        $("#slEditInvoiceCurrency").html($("#hReadySlCurrencies").html());
                        $("#slAccNoteCurrency").html($("#hReadySlCurrencies").html());
                        $("#slEditAccNoteCurrency").html($("#hReadySlCurrencies").html());
                        $("#slPurchaseInvoiceCurrency").html($("#hReadySlCurrencies").html());
                        if ($("#hDefaultUnEditableCompanyName").val() == "IST" || $("#hDefaultUnEditableCompanyName").val() == "KML" || $("#hDefaultUnEditableCompanyName").val() == "KDS") {
                            $("#slInvoiceAddressTypes").attr("data-required", "false");
                            $("#slEditInvoiceAddressTypes").attr("data-required", "false");
                        }
                        else {
                            $("#slInvoiceAddressTypes").attr("data-required", "true");
                            $("#slEditInvoiceAddressTypes").attr("data-required", "true");
                        }
                        GetListWithNameAndWhereClause(null, "/api/BankTemplate/LoadAll", "<--Select Bank Template-->", "slBankTemplate", "ORDER BY Name", null);
                    }, null, null, true);//sherif: calling a partial view with only modal called from different places
                //if (OVPac) LoadView("/Operations/ModalMapHouseToContainer", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                //if (OVPar) LoadView("/MasterData/ModalPartners", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                //if (OVPar) LoadView("/MasterData/ModalAddresses", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                //if (OVPar) LoadView("/MasterData/ModalContacts", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                if (OVPay || OVRec || OVInv || OVDraftInv || OVNot) LoadView("/MasterData/ModalSelectCharges", "div-content"
                    , function () {
                        $(".classHideForOperations").addClass("hide");
                        if (pDefaults.IsTaxOnItems)
                            $(".classShowForTaxOnItems").removeClass("hide");
                        else
                            $(".classShowForTaxOnHeader").removeClass("hide");
                        if (pDefaults.UnEditableCompanyName == "SAF")
                            $("#txtPayableSupplierInvoiceNo").attr("data-required", "true");
                        else
                            $("#txtPayableSupplierInvoiceNo").attr("data-required", "false");
                        $("#slPayableCurrency").html($("#hReadySlCurrencies").html());
                        $("#slReceivableCurrency").html($("#hReadySlCurrencies").html());
                    }, null, null, true);//sherif: calling a partial view with only modal called from different places
                //if (OVRou && OERou) LoadView("/MasterData/ModalMAWBStockSelect", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                //if (OVPar && OERou) LoadView("/MasterData/ModalMAWBStock", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                //if (OVPay || OVRec || OVPac) LoadView("/MasterData/ModalCheckboxesList", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places

                if (OVPar) $.getScript(strServerURL + '/Scripts/MasterData/Partners/Customers.js');//sherif: to load the js file of the appended partial view
                if (OVPar) $.getScript(strServerURL + '/Scripts/MasterData/Partners/Agents.js');//sherif: to load the js file of the appended partial view
                if (OVPar) $.getScript(strServerURL + '/Scripts/MasterData/Partners/ShippingAgents.js');//sherif: to load the js file of the appended partial view
                if (OVPar) $.getScript(strServerURL + '/Scripts/MasterData/Partners/CustomsClearanceAgents.js');//sherif: to load the js file of the appended partial view
                if (OVPar) $.getScript(strServerURL + '/Scripts/MasterData/Partners/Suppliers.js');//sherif: to load the js file of the appended partial view
                if (OVPac || OVShi) $.getScript(strServerURL + '/Scripts/Operations/Operations/OperationContainersAndPackages.js');//sherif: to load the js file of the appended partial view
                //$.getScript(strServerURL + '/Scripts/Operations/Operations/OperationCharges.js');//sherif: to load the js file of the appended partial view
                if (OVPar) $.getScript(strServerURL + '/Scripts/Operations/Operations/OperationPartners.js');//sherif: to load the js file of the appended partial view
                if (OVRou) $.getScript(strServerURL + '/Scripts/Operations/Operations/Routings.js');//sherif: to load the js file of the appended partial view
                if (OVPac && OEPac) $.getScript(strServerURL + '/Scripts/Operations/Operations/RebuildConsolidation.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/Operations/Operations/Invoices.js');//sherif: to load the js file of the appended partial view
                if (OVDocIn) $.getScript(strServerURL + '/Scripts/Operations/Operations/DocsIn.js');//sherif: to load the js file of the appended partial view
                if (OVDoc) $.getScript(strServerURL + '/Scripts/Operations/Operations/DocsOut.js');//sherif: to load the js file of the appended partial view
                if (OVPar) $.getScript(strServerURL + '/Scripts/MasterData/Partners/Addresses.js');//sherif: to load the js file of the appended partial view
                if (OVPar) $.getScript(strServerURL + '/Scripts/MasterData/Partners/Contacts.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/Operations/Operations/Payables.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/Operations/Operations/Receivables.js');//sherif: to load the js file of the appended partial view
                if (OVMas) $.getScript(strServerURL + '/Scripts/Operations/Operations/Master.js');//sherif: to load the js file of the appended partial view
                if (OVShi || OVPac) $.getScript(strServerURL + '/Scripts/Operations/Operations/Shipments.js');//sherif: to load the js file of the appended partial view
                if (OVRou && OERou) $.getScript(strServerURL + '/Scripts/MasterData/Partners/MAWBStockSelect.js');//sherif: to load the js file of the appended partial view
                if (OVRou && OERou) $.getScript(strServerURL + '/Scripts/MasterData/Partners/MAWBStock.js');//sherif: to load the js file of the appended partial view

                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "SET AS", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////GetListWithNameAndWhereClause(3, "/api/NoAccessReportTypes/LoadAll", "Select Report Type", "slDocsOutReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulDocsOutReportTypes", " ORDER BY ViewOrder ");
                ////GetListReportTypes("/api/NoAccessQuoteAndOperStages/LoadAll", "SET AS", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");

                $.getScript(strServerURL + '/Scripts/Operations/Operations/Operations.js?' + glbVersion, function () {//sherif:pUserID here holds the OperationID
                    //// i am calling here FillControls and not BindTableRows coz i ll ve just one row by ID
                    //LoadOperationWithDetails("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, " where ID = " + pUserID/*here it holds the OperationID*/, 0, 10, pUserID/*holds the operationID*/
                    //    , function (pTabelRows, pOperationPartners, pOperationContainersAndPackages, pRouting, pPayables, pReceivables, pInvoices, pDocsOut, pMasterOperation, pHouseOperations, pMasterAndHouses, pIsOperationClosed, pDocsInFileNames, pOperationStages, pBranches, pSalesmen, pIncoterms, pPOrC, pMoveTypes, pCommodities, pInvoiceTypes, pAccNotes, pTracking, pNetwork, pPurchaseInvoice) {
                    //        Operations_FillControls(pTabelRows, pOperationPartners, pOperationContainersAndPackages, pRouting, pPayables, pReceivables, pInvoices, pDocsOut, pMasterOperation, pHouseOperations, pMasterAndHouses, pIsOperationClosed, pDocsInFileNames, pOperationStages, pBranches, pSalesmen, pIncoterms, pPOrC, pMoveTypes, pCommodities, pInvoiceTypes, pAccNotes, pTracking, pNetwork, pPurchaseInvoice);
                    //    });
                    CallGETFunctionWithParameters(strLoadWithPagingFunctionName, { pPageNumber: 1, pPageSize: 1, pWhereClause1: " where ID = " + pUserID, pOperationID: pUserID, pOperationFormID: constOperationsFormID }
                        , function (data) {
                            $("#cb-CheckAll").prop('checked', false);
                            Operations_FillControls(JSON.parse(data[0])/*Operation(just 1)*/, JSON.parse(data[2])/*OperationPartners*/, JSON.parse(data[3])/*pOperationContainersAndPackages*/
                                , JSON.parse(data[4])/*pRouting*/, JSON.parse(data[5])/*pPayables*/, JSON.parse(data[6])/*pReceivables*/, JSON.parse(data[7])/*pInvoices*/
                                , JSON.parse(data[8])/*pDocsOut*/, JSON.parse(data[9])/*pMasterOperation*/, JSON.parse(data[10])/*pHouseOperations*/, JSON.parse(data[11])/*pMasterAndHouses*/
                                , data[12]/*pIsOperationClosed*/, JSON.parse(data[13])/*pDocsInFileNames*/, data[14]/*pOperationStages*/, data[15]/*pBranches*/, data[16]/*pUsers*/
                                , data[17]/*pIncoterms*/, data[18]/*pPOrC*/, data[19]/*pMoveTypes*/, data[20]/*pCommodities*/, data[21]/*pInvoiceTypes*/, JSON.parse(data[22])/*pAccNotes*/
                                , JSON.parse(data[23])/*pTracking*/, data[24]/*pNetwork*/, JSON.parse(data[25])/*pPurchaseInvoice*/, (data[26])/*pSuppliers*/);
                            FadePageCover(false);
                        }
                        , null);
                    //LoadOperationWithDetails("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, " where ID = " + pUserID/*here it holds the OperationID*/, 0, 10, pUserID/*holds the operationID*/
                    //    , function (pTabelRows, pOperationPartners, pOperationContainersAndPackages, pRouting, pPayables, pReceivables, pInvoices, pDocsOut, pMasterOperation, pHouseOperations, pMasterAndHouses, pIsOperationClosed, pDocsInFileNames, pOperationStages, pBranches, pSalesmen, pIncoterms, pPOrC, pMoveTypes, pCommodities, pInvoiceTypes, pAccNotes, pTracking, pNetwork, pPurchaseInvoice) {
                    //        Operations_FillControls(pTabelRows, pOperationPartners, pOperationContainersAndPackages, pRouting, pPayables, pReceivables, pInvoices, pDocsOut, pMasterOperation, pHouseOperations, pMasterAndHouses, pIsOperationClosed, pDocsInFileNames, pOperationStages, pBranches, pSalesmen, pIncoterms, pPOrC, pMoveTypes, pCommodities, pInvoiceTypes, pAccNotes, pTracking, pNetwork, pPurchaseInvoice);
                    //    });
                });
            }
                , null//function () { OperationsEdit_ClearAllControls(); }
                , null//function () { OperationsEdit_DeleteList(); }
                );
            //LoadOperationsSubMenu();
            break;
        }

            //region Security/RolePrivileges
        case "RolePrivileges": {

            strLoadWithPagingFunctionName = "/api/RolePrivileges/LoadWithPaging";

            LoadView("/Administration/RolePrivileges", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Security/RolePrivileges.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { RolePrivileges_BindTableRows(pTabelRows); }, pRoleID);
                });
            },
                function () { RolePrivileges_ClearAllControls(); },
                function () { RolePrivileges_DeleteList(); });
            break;
        }
            //region Security/Users
        case "Users": {

            strLoadWithPagingFunctionName = "/api/Users/LoadWithPaging";

            LoadView("/Administration/Users", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Security/Users.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Users_BindTableRows(pTabelRows); });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Users_ClearAllControls(); },
                function () { Users_DeleteList(); });
            break;
        }
            //region Security/UserPrivileges
        case "UserPrivileges": {

            strLoadWithPagingFunctionName = "/api/UserPrivileges/LoadWithPaging";

            LoadView("/Administration/UserPrivileges", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Security/UserPrivileges.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { UserPrivileges_BindTableRows(pTabelRows); }, null, pUserID);
                });
            },
                function () { UserPrivileges_ClearAllControls(); },
                function () { UserPrivileges_DeleteList(); });
            break;
        }

            //region Quotes/ProfitStatistics
        case "ProfitStatistics": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/ProfitStatistics", "div-content", function () {
                if (pDefaults.UnEditableCompanyName == "ELI")
                    $(".classShowForELI").removeClass("hide");
                CallGETFunctionWithParameters("/api/ProfitStatistics/GetStatisticsFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "<--All-->", "slSalesman", data[0], null);
                        FillListFromObject(null, 2, "<--All-->", "slBranch", data[1], null);
                        //FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        $("#slCustomer").html($("#hReadySlCustomers").html());
                        //FillListFromObject(null, 2, "All Booking Parties", "slBookingParty", data[2], null);
                        $("#slBookingParty").html($("#hReadySlCustomers").html());
                        FillListFromObject(null, 1, "<--All-->", "slCurrency", data[3], null);
                        FillListFromObject(null, 2, "<--All-->", "slOperationStages", data[4], null);
                        //FillListFromObject(null, 1, "All Operations", "slOperation", data[5], null);
                        FillListFromObject(null, 2, "<--All-->", "slMoveType", data[6], null);
                        FillListFromObject(null, 2, "<--All-->", "slChargeType", data[7], null);
                        FillListFromObject(null, 2, "<--All-->", "slInvoiceType", data[8], null);
                        FillListFromObject(null, 2, "<--All-->", "slAgent", data[9], null);
                        FillListFromObject(null, 2, "<--All-->", "slCountryPOL", data[10]
                            , function () { $("#slCountryPOD").html($("#slCountryPOL").html()); });
                        $("#txtFromOpenDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToOpenDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtFromInvoiceDate").val("01/01/2000");
                        $("#txtToInvoiceDate").val("01/01/2030");
                        $("#txtFromCloseDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToCloseDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtFromDateSelectOperations").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDateSelectOperations").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/ProfitStatistics.js');
            });
            break;
        }
        case "BusinessVolume": {
            debugger;
            $("#hl-menu-Reports").parent().addClass("active");
            strBindTableRowsFunctionName = "CommissionTarget_BindTableRows";
            strLoadWithPagingFunctionName = "/api/BusinessVolume/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "TargetYear DESC, SalesmanName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Reports/BusinessVolume", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/BusinessVolume.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var TodaysDate = new Date();
                            var CurrentYear = TodaysDate.getUTCFullYear();
                            var pSalesman = pData[2];
                            var pTargetType = pData[3];
                            FillListFromObject(null, 2, "<--Select-->", "slFilterSalesman", pSalesman, null);
                            FillListFromObject(constTargetTypeByInvoiceFixedAmount, 2, "<--Select-->", "slFilterTargetType", pTargetType, null);
                            GetListYears(CurrentYear, null, "slFilterTargetYear", null
                                , function () { $("#slFilterTargetYear").html($("#slTargetYear").html()); $("#slFilterTargetYear").prepend("<option value=''><--Select--></option>"); $("#slFilterTargetYear").val(""); }
                                , parseInt(CurrentYear + 1));
                            //$("#slTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            $("#slFilterFromTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            $("#slFilterToTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            CommissionTarget_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { CommissionTarget_ClearAllControls(); },
                function () { CommissionTarget_DeleteList(); });
            break;
        }
            //region Quotes/ProfitabilityReport
        case "ProfitabilityReport": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/ProfitabilityReport", "div-content", function () {
                CallGETFunctionWithParameters("/api/ProfitabilityReport/GetStatisticsFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        //FillListFromObject(null, 2, "All Salesmen", "slSalesman", data[0], null);
                        FillListFromObject(null, 2, "All Branches", "slBranch", data[0], null);
                        FillListFromObject(null, 2, "All ChargeTypes", "slChargeType", data[1], null);
                        //FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        //$("#slCustomer").html($("#hReadySlCustomers").html());
                        //FillListFromObject(null, 2, "All Booking Parties", "slBookingParty", data[2], null);
                        //$("#slBookingParty").html($("#hReadySlCustomers").html());
                        //FillListFromObject(null, 1, "All Currencies", "slCurrency", data[3], null);
                        //FillListFromObject(null, 2, "All States", "slOperationStages", data[4], null);
                        //FillListFromObject(null, 1, "All Operations", "slOperation", data[5], null);
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/ProfitabilityReport.js');
            });
            break;
        }
        //region Quotes/TrailerProfitability
        case "TrailerProfitability": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/TrailerProfitability", "div-content", function () {
                CallGETFunctionWithParameters("/api/TrailerProfitability/GetStatisticsFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        //FillListFromObject(null, 2, "All Salesmen", "slSalesman", data[0], null);
                        FillListFromObject(null, 2, "<--Select-->", "slTrailer", data[0], null);
                        FillListFromObject(null, 2, "<--Select-->", "slChargeType", data[1], null);
                        //FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        //$("#slCustomer").html($("#hReadySlCustomers").html());
                        //FillListFromObject(null, 2, "All Booking Parties", "slBookingParty", data[2], null);
                        //$("#slBookingParty").html($("#hReadySlCustomers").html());
                        //FillListFromObject(null, 1, "All Currencies", "slCurrency", data[3], null);
                        //FillListFromObject(null, 2, "All States", "slOperationStages", data[4], null);
                        //FillListFromObject(null, 1, "All Operations", "slOperation", data[5], null);
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/TrailerProfitability.js');
            });
            break;
        }

            //region Reports/DailyShipmentsReport
        case "DailyShipmentsReport": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/DailyShipments", "div-content", function () {
                CallGETFunctionWithParameters("/api/DailyShipments/GetDailyShipmentsFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "All Salesmen", "slSalesman", data[0], null);
                        FillListFromObject(null, 2, "All Branches", "slBranch", data[1], null);
                        //FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        $("#slCustomer").html($("#hReadySlCustomers").html());
                        FillListFromObject(null, 1, "All Currencies", "slCurrency", data[3], null);
                        FillListFromObject(null, 2, "All Operation States", "slOperationStages", data[4], null);
                        $("#txtFromOpenDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToOpenDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/DailyShipments.js');
            });
            break;
        }

        case "BLStatistics":
        case "OperationsStatistics": {
            debugger;
            FadePageCover(true);
            glbCallingControl = pControlID;
            LoadView("/Reports/OperationsStatistics", "div-content", function () {
                if (pControlID == "OperationsStatistics") {
                    $("#liFormName").text("Operations Statistics");
                    //$("#liTabName").attr("onclick", "LoadViews('Invoicing')");
                    $(".classShowForOperationsStatistics").removeClass("hide");
                    if (pDefaults.UnEditableCompanyName == "NIL") //to show Courier(i.e. MainRoute Notes) if not NIL
                        $(".classShowForNIL").removeClass("hide");
                }
                else { //BLStatistics
                    $("#liFormName").text("HBLs Statistics");
                    //$("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                    $(".classShowForBLStatistics").removeClass("hide");
                }
                CallGETFunctionWithParameters("/api/OperationsStatistics/GetOperationsStatisticsFilter", null
                    , function (data) {
                        //data[0]:Users //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)

                        var _Salesmentemp = JSON.parse(data[0]);
                        var pSalesmen = jQuery.grep(_Salesmentemp, function (_Salesmentemp) {
                            return _Salesmentemp.IsSalesman == true;
                        });

                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slSalesman", JSON.stringify(pSalesmen), null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCreator", data[0], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[1], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCountryPOL", data[12]
                            , function () { $("#slCountryPOD").html($("#slCountryPOL").html()); });
                        //FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        $("#slCustomer").html($("#hReadySlCustomers").html());
                        //FillListFromObject(null, 2, "All Booking Parties", "slBookingParty", data[2], null);
                        $("#slBookingParty").html($("#hReadySlCustomers").html());
                        //GetListYears(null, null, "slYearsOperationStatistics", null,null);
                        FillListFromObject(null, 1, "All Currencies", "slCurrency", data[3], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slOperationStages", data[4], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slShippingLine", data[5], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slVessel", data[6], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTrackingStage", data[7], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCommodity", data[8], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slAgent", data[9], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slNetwork", data[10], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slMoveType", data[11], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCustomsClearanceAgent", data[13], null);
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtFromCloseDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToCloseDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtFromDateSelectOperations").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDateSelectOperations").val(getTodaysDateInddMMyyyyFormat());

                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); }
                    );
                if (pDefaults.UnEditableCompanyName == "KDM")
                    $("#spanKDMReference").text("Ref.No.");
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/OperationsStatistics.js');
            });
            break;
        }
        
            //region Reports/ContainerTrackingReport
        case "ContainerTrackingReport": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/ContainerTrackingReport", "div-content", function () {
                CallGETFunctionWithParameters("/api/ContainerTrackingReport/GetContainerTrackingReportFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        var pPorts = data[0];
                        var pShippingLine = data[1];
                        debugger;
                        ////FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slSalesman", data[0], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCreator", data[0], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[1], null);
                        ////FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        $("#slCustomer").html($("#hReadySlCustomers").html());
                        $("#slBookingParty").html($("#hReadySlCustomers").html());
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slPOL", pPorts, null);
                        ////FillListFromObject(null, 2, "All Booking Parties", "slBookingParty", data[2], null);
                        //$("#slBookingParty").html($("#hReadySlCustomers").html());
                        //FillListFromObject(null, 1, "All Currencies", "slCurrency", data[3], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slOperationStages", data[4], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slShippingLine", pShippingLine, null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slVessel", data[6], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTrackingStage", data[7], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCommodity", data[8], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slAgent", data[9], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slNetwork", data[10], null);
                        //$("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtFromDateSelectOperations").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDateSelectOperations").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/ContainerTrackingReport.js');
                //GetListAsCheckboxesWithVariousParameters("/api/Operations/LoadAll", {pWhereClause:"WHERE DirectionType<>1 AND TransportType<>2 AND ShipmentType<>2 AND BLType<>2"}, "divCheckboxesList", "cbAddedItemID", null, 2, "col-sm-2");
            });
            break;
        }


            //region Reports/QuotationsStatistics
        case "QuotationsStatistics": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/QuotationsStatistics", "div-content", function () {
                CallGETFunctionWithParameters("/api/QuotationsStatistics/GetQuotationsStatisticsFilter", null
                    , function (data) {
                        //data[0]:Users //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;

                        var _Salesmentemp = JSON.parse(data[0]);
                        var pSalesmen = jQuery.grep(_Salesmentemp, function (_Salesmentemp) {
                            return _Salesmentemp.IsSalesman == true;
                        });

                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "All Salesmen", "slSalesman", JSON.stringify(pSalesmen), null);
                        FillListFromObject(null, 2, "All Users", "slCreator", data[0], null);
                        FillListFromObject(null, 2, "All Branches", "slBranch", data[1], null);
                        //FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        $("#slCustomer").html($("#hReadySlCustomers").html());
                        FillListFromObject(null, 2, "All Agents", "slAgent", data[5], null);
                        FillListFromObject(null, 1, "All Currencies", "slCurrency", data[3], null);
                        FillListFromObject(null, 2, "All Quotation States", "slQuotationStages", data[4], null);
                        $("#txtFromCreationDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToCreationDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulQuotationStages", " WHERE IsQuotationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/QuotationsStatistics.js');
            });
            break;
        }

            //region Reports/TEUsStatisticss
        case "TEUsStatistics": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/TEUsStatistics", "div-content", function () {
                CallGETFunctionWithParameters("/api/TeusStatistics/GetStatisticsFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "All Salesmen", "slSalesman", data[0], null);
                        FillListFromObject(null, 2, "All Branches", "slBranch", data[1], null);
                        //FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        $("#slCustomer").html($("#hReadySlCustomers").html());
                        FillListFromObject(null, 1, "All Currencies", "slCurrency", data[3], null);
                        FillListFromObject(null, 2, "All Operation States", "slOperationStages", data[4], null);
                        FillListFromObject(null, 2, "All Agents", "slAgent", data[5], null);
                        FillListFromObject(null, 2, "All ShippingLines", "slShippingLine", data[6], null);
                        FillListFromObject(null, 2, "All Airlines", "slAirline", data[7], null);
                        FillListFromObject(null, 2, "All Truckers", "slTrucker", data[8], null);
                        FillListFromObject(null, 2, "All Countries", "slPOLCountry", data[9], null);
                        $("#slPOL").html("<option value=''>All Ports</option>");
                        FillListFromObject(null, 2, "All Countries", "slPODCountry", data[9], null);
                        $("#slPOD").html("<option value=''>All Ports</option>");
                        $("#txtFromOpenDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToOpenDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/TEUsStatistics.js');
            });
            break;
        }
        //region Reports/FlexiTankStatus
        case "FlexiTankStatus": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/FlexiTankStatus", "div-content", function () {
                CallGETFunctionWithParameters("/api/FlexiTankStatus/GetFlexiTankStatusFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slSalesman", data[0], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCreator", data[0], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[1], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCountryPOL", data[12]
                        //    , function(){ $("#slCountryPOD").html($("#slCountryPOL").html());});
                        ////FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        //$("#slCustomer").html($("#hReadySlCustomers").html());
                        ////FillListFromObject(null, 2, "All Booking Parties", "slBookingParty", data[2], null);
                        //$("#slBookingParty").html($("#hReadySlCustomers").html());
                        ////GetListYears(null, null, "slYearsOperationStatistics", null,null);
                        //FillListFromObject(null, 1, "All Currencies", "slCurrency", data[3], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slOperationStages", data[4], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slShippingLine", data[5], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slVessel", data[6], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTrackingStage", data[7], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCommodity", data[8], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slAgent", data[9], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slNetwork", data[10], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slMoveType", data[11], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCustomsClearanceAgent", data[13], null);
                        $("#txtGuranteeLetterFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtGuranteeLetterToDate").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtFromCloseDate").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtToCloseDate").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtFromDateSelectOperations").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtToDateSelectOperations").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/FlexiTankStatus.js');
            });
            break;
        }
        
        case "InvoicesReports": {
            debugger;
            FadePageCover(true)
            LoadView("/Reports/InvoicesReports", "div-content", function () {
                if (!pDefaults.IsTaxOnItems)
                    $(".classShowForTaxOnHeader").removeClass("hide");
                CallGETFunctionWithParameters("/api/InvoicesReports/FillFilter", null
                    , function (data) {
                        //data[0]:Branches //data[1]:Partners //data[2]:TaxTypes //data[3]:DiscountTypes
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[0], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slPartner", data[1], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slVATType", data[2], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slDiscountType", data[3], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slInvoiceType", data[4], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu")/*"Select Pay. Type"*/, "slPartnerType", data[5], null);
                        $("#slCurrency").html("<option value=''>" + TranslateString("SelectFromMenu") + "</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        //FillListFromObject(null, 5/*pCodeOrName*/, "Select Partner", "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtFromDueDate").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtToDueDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/InvoicesReports.js');
            });
            break;
        }
            //region OperAccountingReports/PayablesReports
        case "PayablesReports": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/PayablesReports", "div-content", function () {
                CallGETFunctionWithParameters("/api/PayablesReports/FillFilter", null
                    , function (data) {
                        //data[0]:Branches //data[1]:Partners //data[2]:TaxTypes //data[3]:DiscountTypes
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[0], null);
                        FillListFromObject(null, 5, TranslateString("SelectFromMenu"), "slPartner", data[1], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slVATType", data[2], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slDiscountType", data[3], null);
                        FillListFromObject(null, 4, TranslateString("SelectFromMenu"), "slChargeType", data[4], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu")/*"Select Pay. Type"*/, "slPartnerType", data[5], null);
                        $("#slCurrency").html("<option value=''>"+TranslateString("SelectFromMenu")+"</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        //FillListFromObject(null, 5/*pCodeOrName*/, "Select Partner", "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                        $("#txtFromDate").val("01/01/2000");
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtFromIssueDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToIssueDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/PayablesReports.js');
            });
            break;
        }
            //region OperAccountingReports/AccNotesReports
        case "AccNotesReports": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/AccNotesReports", "div-content", function () {
                CallGETFunctionWithParameters("/api/AccNotesReports/FillFilter", null
                    , function (data) {
                        //data[0]:Branches //data[1]:Partners //data[2]:TaxTypes //data[3]:DiscountTypes
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[0], null);
                        FillListFromObject(null, 5, TranslateString("SelectFromMenu"), "slPartner", data[1], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slVATType", data[2], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slDiscountType", data[3], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu")/*"Select Pay. Type"*/, "slPartnerType", data[4], null);
                        $("#slCurrency").html("<option value=''>"+TranslateString("SelectFromMenu")+"</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        //FillListFromObject(null, 5/*pCodeOrName*/, "Select Partner", "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/AccNotesReports.js');
            });
            break;
        }
            //region OperAccountingReports/ChequesReports
        case "ChequesReports": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/ChequesReports", "div-content", function () {
                CallGETFunctionWithParameters("/api/ChequesReports/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "All", "slBranch", data[0], null);
                        FillListFromObject(null, 5, "All", "slPartner", data[1], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, "All", "slPartnerType", data[2], null);
                        FillListFromObject(null, 7, "All", "slBankAccount", data[3], null);
                        $("#slCurrency").html("<option value=''>All</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/ChequesReports.js');
            });
            break;
        }
            //region OperAccountingReports/AgingReports
        case "AgingReports": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/AgingReports", "div-content", function () {
                CallGETFunctionWithParameters("/api/AgingReports/FillFilter", null
                    , function (data) { //if i need filters then Re-Enable what i need
                        ////data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        //debugger;
                        ////FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        //FillListFromObject(null, 2, "All", "slBranch", data[0], null);
                        //FillListFromObject(null, 5, "All", "slPartner", data[1], null);
                        //FillListFromObject(null, 1/*pCodeOrName*/, "All", "slPartnerType", data[2], null);
                        //FillListFromObject(null, 7, "All", "slBankAccount", data[3], null);
                        //$("#slCurrency").html("<option value=''>All</option>");
                        //$("#slCurrency").append($("#hReadySlCurrencies").html());
                        //$("#slCurrency").val($("").html());
                        //$("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/AgingReports.js');
            });
            break;
        }
            //region OperAccountingReports/PartnersStatements
        case "PartnersStatements": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/PartnersStatements", "div-content", function () {
                CallGETFunctionWithParameters("/api/PartnersStatements/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "<--All Branches-->", "slBranch", data[0], null);
                        FillListFromObject(null, 5, "<--Select Partner-->", "slPartner", data[1], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", data[2], null);
                        $("#slCurrency").html("<option value=''>All Currencies</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/PartnersStatements.js');
            });
            break;
        }
            //region OperAccountingReports/CustodyStatement
        case "CustodyStatement": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/CustodyStatement", "div-content", function () {
                CallGETFunctionWithParameters("/api/CustodyStatement/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "<--All Branches-->", "slBranch", data[0], null);
                        FillListFromObject(null, 5, "<--Select Partner-->", "slPartner", data[1], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, null/*"All PartnerTypes"*//*"Select Pay. Type"*/, "slPartnerType", data[2], null);
                        $("#slCurrency").html("<option value=''>All Currencies</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/CustodyStatement.js');
            });
            break;
        }
            //region OperAccountingReports/AllocationStatement
        case "AllocationStatement": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/AllocationStatement", "div-content", function () {
                CallGETFunctionWithParameters("/api/AllocationStatement/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "<--All Branches-->", "slBranch", data[0], null);
                        FillListFromObject(null, 5, "<--Select Partner-->", "slPartner", data[1], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", data[2], null);
                        $("#slCurrency").html("<option value=''>All Currencies</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/AllocationStatement.js');
            });
            break;
        }
            //region OperAccountingReports/BanksStatements
        case "BanksStatements": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/BanksStatements", "div-content", function () {
                CallGETFunctionWithParameters("/api/BanksStatements/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[0], null);
                        FillListFromObject(null, 5, TranslateString("SelectFromMenu"), "slPartner", data[1], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slPartnerType", data[2], null);
                        FillListFromObject(null, 7, TranslateString("SelectFromMenu"), "slBankAccount", data[3], null);
                        $("#slCurrency").html("<option value=''>All Currencies</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/BanksStatements.js');
            });
            break;
        }
            //region OperAccountingReports/TreasuriesStatements
        case "TreasuriesStatements": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/TreasuriesStatements", "div-content", function () {
                CallGETFunctionWithParameters("/api/TreasuriesStatements/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[0], null);
                        FillListFromObject(null, 5, TranslateString("SelectFromMenu"), "slPartner", data[1], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu")/*"Select Pay. Type"*/, "slPartnerType", data[2], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTreasury", data[3], null);
                        $("#slCurrency").html("<option value=''>All Currencies</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/TreasuriesStatements.js');
            });
            break;
        }
            //region AccountsReceivable/ARPayment and APPayment
        case "APPayments":
        case "ARPayments": {
            debugger;
            ShowliChequeAlarm();
            if (pControlID == "ARPayments") {
                glbTransactionType = constTransactionARPayment;
                glbPRType = constPRTypeReceivable;
            }
            else { //APPayments
                glbTransactionType = constTransactionAPPayment;
                glbPRType = constPRTypePayable;
            }
            strBindTableRowsFunctionName = "Payment_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/Payment", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/CommonARAndAP/Payment.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE PaymentTypeID IS NOT NULL AND IsDeleted=0 AND IsApproved=0 AND PRType = " + glbPRType;
                    var pOrderBy = "ID DESC";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    , function (pData) {
                        Payment_BindTableRows(JSON.parse(pData[0]));
                        FillListFromObject(null, 5/*pCodeOrName*/, "Select Partner", "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                        FillListFromObject(null, 2/*pCodeOrName*/, "Select Treasury", "slPaymentTreasury", pData[3], null);
                        FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], function () { $("#slPaymentPartnerType").html($("#slPartnerType").html()); });
                        FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                        FillListFromObject(null, 4/*pNameAndCode*/, "Select Charge", "slPaymentChargeType", pData[7], null);
                        //$("#slARFBranch").html($("#hReadySlBranches").html());
                        //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                        $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                        //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                        if (pControlID == "ARPayments") {
                            $("#liAccountsPaymentLink").text("Accounts Receivable");
                            $("#liAccountsPaymentLink").attr("onclick", "LoadViews('AccountsReceivable')");
                            $("#liAccountsPaymentLink1").attr("onclick", "LoadViews('AccountsReceivable')");
                            $("#h3Payment").text("A\\R (Receivables)"); $("#h3Payment").addClass("static-text-primary");
                            $("#h3ModalLblPaymentType").html("A\\R (Receivables)" + '&nbsp;<label id="lblPaymentShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                            $("#h3ModalLblPaymentType").addClass("static-text-primary");
                            $("#divWithHoldingTax").removeClass("hide");
                            //$("#divIsGeneralExpense").addClass("hide");
                        }
                        else { //APPayments
                            $("#liAccountsPaymentLink").text("Accounts Payable");
                            $("#liAccountsPaymentLink").attr("onclick", "LoadViews('AccountsPayable')");
                            $("#liAccountsPaymentLink1").attr("onclick", "LoadViews('AccountsPayable')");
                            $("#h3Payment").text("A\\P (Payables)");$("#h3Payment").addClass("static-text-danger");
                            $("#h3ModalLblPaymentType").html("A\\P (Payables)" + '&nbsp;<label id="lblPaymentShown" purpose="dynamicLabel" class="static-text-danger"></label>');
                            $("#h3ModalLblPaymentType").addClass("static-text-danger");
                            $("#divWithHoldingTax").addClass("hide");
                            //$("#divIsGeneralExpense").removeClass("hide");
                        }
                        $("#liAccountPaymentType").text($("#h3Payment").text());
                    });
                });
            },
                function () { Payment_ClearAllControls(); }, //i insert a new air reservation form directly
                function () { Payment_DeleteList(); });
            break;
        }
            //region OpenBalance/PartnerOpenBalance
        case "PartnerOpenBalance": {
            debugger;
            strBindTableRowsFunctionName = "PartnerOpenBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payment/PartnerOpenBalance_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/PartnerOpenBalance", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/OpenBalance/PartnerOpenBalance.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE TransactionType IN(" + constTransactionOpenCreditBalance + "," + constTransactionOpenDebitBalance+")";
                    var pOrderBy = "PartnerTypeCode,PartnerName";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjectsForPartnerOpenBalance: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    , function (pData) {
                        PartnerOpenBalance_BindTableRows(JSON.parse(pData[0]));
                        FillListFromObject(null, 5/*pCodeOrName*/, "Select Partner", "slPartner", pData[2], function () { /*$("#slPaymentPartner").html($("#slPartner").html());*/ }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                        FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[3], null);
                        $("#slCurrency").html($("#hReadySlCurrencies").html());
                        $("#slAccPartnerBalanceCurrency").html($("#hReadySlCurrencies").html());
                        $("#slCurrency").prepend("<option value='' selected>Select Currency</option>");
                    });
                });
            },
                function () { PartnerOpenBalance_FillModal(0); }, //i insert a new air reservation form directly
                function () { PartnerOpenBalance_DeleteList(); });
            break;
        }
            //region OpenBalance/BankOpenBalance
        case "BankOpenBalance": {
            debugger;
            strBindTableRowsFunctionName = "BankOpenBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payment/BankOpenBalance_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/BankOpenBalance", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/OpenBalance/BankOpenBalance.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE PaymentTypeID IS NULL AND BankAccountID IS NOT NULL";
                    var pOrderBy = "AccountName";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjectsForBankOpenBalance: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    , function (pData) {
                        BankOpenBalance_BindTableRows(JSON.parse(pData[0]));
                        FillListFromObject(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slBank", pData[2], function () { /*$("#slPaymentPartner").html($("#slPartner").html());*/ }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                        $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                        //    FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[3], null);
                        //    FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                        //    FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], function () { $("#slPaymentPartnerType").html($("#slPartnerType").html()); });
                        //    FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                        //    FillListFromObject(null, 4/*pNameAndCode*/, "Select Charge", "slPaymentChargeType", pData[7], null);
                        //    //$("#slARFBranch").html($("#hReadySlBranches").html());
                        //    //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                        //    $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                    });
                });
            },
                function () { BankOpenBalance_FillModal(0); }, //i insert a new air reservation form directly
                function () { BankOpenBalance_DeleteList(); });
            break;
        }
            //region OpenBalance/TreasuryOpenBalance
        case "TreasuryOpenBalance": {
            debugger;
            strBindTableRowsFunctionName = "TreasuryOpenBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payment/TreasuryOpenBalance_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/TreasuryOpenBalance", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/OpenBalance/TreasuryOpenBalance.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE PaymentTypeID IS NULL AND TreasuryID IS NOT NULL";
                    var pOrderBy = "TreasuryName";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjectsForTreasuryOpenBalance: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    , function (pData) {
                        TreasuryOpenBalance_BindTableRows(JSON.parse(pData[0]));
                        FillListFromObject(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTreasury", pData[2], function () { /*$("#slPaymentPartner").html($("#slPartner").html());*/ }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                        $("#slCurrency").html($("#hReadySlCurrencies").html());
                        $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                        $("#slCurrency").prepend("<option value='' selected>Select Currency</option>");
                        //    FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[3], null);
                        //    FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                        //    FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], function () { $("#slPaymentPartnerType").html($("#slPartnerType").html()); });
                        //    FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                        //    FillListFromObject(null, 4/*pNameAndCode*/, "Select Charge", "slPaymentChargeType", pData[7], null);
                        //    //$("#slARFBranch").html($("#hReadySlBranches").html());
                        //    //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                        //    $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                    });
                });
            },
                function () { TreasuryOpenBalance_FillModal(0); }, //i insert a new air reservation form directly
                function () { TreasuryOpenBalance_DeleteList(); });
            break;
        }
        
            //region AccountsReceivable/Allocation
        case "ReceivablesAllocations": 
        case "PayablesAllocations": {
            debugger;
            var pWhereClause = "";
            if (pControlID == "ReceivablesAllocations") {
                glbTransactionType = constTransactionReceivableAllocation;
                pWhereClause = " WHERE UnAllocatedReceivables IS NOT NULL AND PartnerTypeID=" +constCustomerPartnerTypeID;
            }
            else {
                glbTransactionType = constTransactionPayableAllocation;
                pWhereClause = " WHERE (UnAllocatedPayables IS NOT NULL OR PartnerTypeID=" + constCustodyPartnerTypeID + ") AND PartnerTypeID=" + constSupplierPartnerTypeID + ")";
            }
            strBindTableRowsFunctionName = "ARAllocation_Partners_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payment/ARAllocation_Partners_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/ARAllocation", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/AccountsReceivable/ARAllocation.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pOrderBy = " PartnerTypeID, Name ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseAllocation_Partners: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    , function (pData) {
                        if (pControlID == "ReceivablesAllocations") {
                            ARAllocation_Partners_BindTableRows(JSON.parse(pData[0]));
                        }
                        else if (pControlID == "A_PayablesAllocations") {
                            ARAllocation_Partners_BindTableRows(JSON.parse(pData[4]));
                        }
                        FillListFromObject(null, 5/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                        FillListFromObject(pControlID == "ReceivablesAllocations" ? constCustomerPartnerTypeID : constSupplierPartnerTypeID, 1/*pCodeOrName*/, null/*"Select Partner Type"*/, "slPartnerType", pData[3], null);
                        //FillListFromObject(null, 2/*pCodeOrName*/, "Select Treasury", "slPaymentTreasury", pData[3], null);
                        //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                        ////$("#slARFBranch").html($("#hReadySlBranches").html());
                        //$("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                        if (pControlID == "ReceivablesAllocations") {
                            $("#liAccountsAllocationLink").text(TranslateString("Accounts Receivable"));
                            $("#liAccountsAllocationLink").attr("onclick", "LoadViews('AccountsReceivable')");
                            $("#liAccountsAllocationLink1").attr("onclick", "LoadViews('AccountsReceivable')");
                            $("#h3Allocation").text(TranslateString("ReceivablesAllocations")); $("#h3Allocation").addClass("static-text-primary");
                            $("#h3ModalLblAllocationType").html("Receivables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                            $("#h3ModalLblAllocationType").addClass("static-text-primary");
                        }
                        else { //APPayments
                            $("#liAccountsAllocationLink").text("Accounts Payable");
                            $("#liAccountsAllocationLink").attr("onclick", "LoadViews('AccountsPayable')");
                            $("#liAccountsAllocationLink1").attr("onclick", "LoadViews('AccountsPayable')");
                            $("#h3Allocation").text(TranslateString("PayablesAllocations")); $("#h3Allocation").addClass("static-text-danger");
                            $("#h3ModalLblAllocationType").html("Payables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-danger"></label>');
                            $("#h3ModalLblAllocationType").addClass("static-text-danger");
                        }
                        $("#liAccountAllocationType").text($("#h3Allocation").text());
                    });
                });
            },
                function () { ARAllocation_ClearAllControls(); }, //i insert a new air reservation form directly
                function () { ARAllocation_DeleteList(); });
            break;
        }

            //region Approvals/PaymentsApprovals
        case "PaymentsApprovals": {
            debugger;
            strBindTableRowsFunctionName = "PaymentApproval_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/PaymentApproval", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/Approval/PaymentApproval.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE IsDeleted=0 AND IsApproved=0  AND IsRefused=0 ";
                    var pOrderBy = " ID DESC ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    , function (pData) {
                        PaymentApproval_BindTableRows(JSON.parse(pData[0]));
                        FillListFromObject(null, 5/*pCodeOrName*/, "All Partners", "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                        FillListFromObject(null, 2/*pCodeOrName*/, "Select Treasury", "slPaymentTreasury", pData[3], null);
                        FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], null);
                        FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                        FillListFromObject(null, 4/*pNameAndCode*/, "Select Expense", "slPaymentChargeType", pData[7], null);
                        //$("#slARFBranch").html($("#hReadySlBranches").html());
                        //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                        $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                        //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                    });
                });
            },
                function () { Approval_ClearAllControls(); }, //i insert a new air reservation form directly
                function () { Approval_DeleteList(); });
            break;
        }
        case "AccountingOperationsPayablesApprovals":
        case "OperationsPayablesApprovals": {
            debugger;
            strBindTableRowsFunctionName = "OperationPayableApproval_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payables/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/OperationPayableApproval", "div-content", function () {
                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                $.getScript(strServerURL + '/Scripts/OperAcc/Approval/OperationPayableApproval.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE IsDeleted=0 AND IsApproved=0  AND AccNoteID IS NULL ";
                    var pOrderBy = " OperationID DESC, PartnerSupplierName ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    , function (pData) {
                        OperationPayableApproval_BindTableRows(JSON.parse(pData[0]));
                        FillListFromObject(null, 5/*pCodeOrName*/, "All Partners", "slPartner", pData[2], null/*function () { $("#slPaymentPartner").html($("#slPartner").html()); }*/); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                        FillListFromObject(null, 5/*pCodeOrName*/, "Select Custody", "slSelectCustody", pData[2]
                            , function () {
                                $("#slSelectCustody option[PartnerTypeID!=" + constCustodyPartnerTypeID + "][value!=''" + "]").addClass("hide");
                            });
                        //FillListFromObject(null, 1/*pCodeOrName*/, "All Oper.s", "slOperation", pData[3], null);
                        FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center-->", "slCostCenter", pData[6], null);
                        //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], null);
                        FillListFromObject_ERP(null, 2, "<--Select Safe-->", "slSafes", pData[7], null);
                        FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Bank-->", "slBanks", pData[8], null);
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectAccount"), "slAccount", pData[9], null);
                        //FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                        //$("#slARFBranch").html($("#hReadySlBranches").html());
                        //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                        $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                        $("#slSubAccount" ).html('<option> Select Sub Account </option>');
                        //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                        if (pControlID == "AccountingOperationsPayablesApprovals") {
                            $("#liOperAcc").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            $("#liApprovals").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                        }
                        else {
                            $("#liOperAcc").attr("onclick", "LoadViews('Approvals');");
                            $("#liApprovals").attr("onclick", "LoadViews('Approvals');");
                        }
                    });
                });
            },
                function () { Approval_ClearAllControls(); },
                function () { Approval_DeleteList(); });
            break;
        }

        case "AccountingInvoicesApprovals":
        case "FirstStepDraftInvoiceApproval":
        case "DraftInvoicesApprovals":
        case "InvoicesApprovals": {
            debugger;
            glbCallingControl = pControlID;
            strBindTableRowsFunctionName = "InvoiceApproval_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Invoices/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/InvoiceApproval", "div-content", function () {
                if (pDefaults.UnEditableCompanyName == "ELI")
                    $(".classShowForELI").removeClass("hide");
                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                if ($("#hDefaultUnEditableCompanyName").val() == "IST" || $("#hDefaultUnEditableCompanyName").val() == "KML" || $("#hDefaultUnEditableCompanyName").val() == "KDS") {
                    $("#slEditInvoiceAddressTypes").attr("data-required", "false");
                }
                else {
                    $("#slEditInvoiceAddressTypes").attr("data-required", "true");
                }
                if (pDefaults.IsTaxOnItems)
                    $(".classShowForTaxOnItems").removeClass("hide");
                else
                    $(".classShowForTaxOnHeader").removeClass("hide");
                $.getScript(strServerURL + '/Scripts/OperAcc/Approval/InvoiceApproval.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = (glbCallingControl == "FirstStepDraftInvoiceApproval"
                                        ? (" WHERE " + (" InvoiceTypeCode='DRAFT' ") + " AND IsDeleted=0 AND IsApproved=0 AND ChildInvoiceID IS NULL AND IsDraftApproved=0 AND OperationStageID NOT IN (" + ClosedQuoteAndOperStageID + "," + CancelledQuoteAndOperStageID + ")")
                                        : (" WHERE " + (glbCallingControl == "DraftInvoicesApprovals" ? " InvoiceTypeCode='DRAFT' AND IsDraftApproved=1 " : " InvoiceTypeCode<>'DRAFT' ") + " AND IsDeleted=0 AND IsApproved=0 AND OperationStageID NOT IN (" + ClosedQuoteAndOperStageID + "," + CancelledQuoteAndOperStageID + ")")
                                        );
                    //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
                    var pOrderBy = " ID DESC ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    , function (pData) {
                        GetListWithNameAndWhereClause(null, "/api/BankTemplate/LoadAll", "<--Select Bank Template-->", "slBankTemplate", "ORDER BY Name", null);
                        InvoiceApproval_BindTableRows(JSON.parse(pData[0]));
                        FillListFromObject(null, 5/*pCodeOrName*/, TranslateString("AllPartners"), "slPartner", pData[2]
                            , null/*function () { $("#slPaymentPartner").html($("#slPartner").html()); }*/); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/

                        //FillListFromObject(null, 1/*pCodeOrName*/, "All Oper.s", "slOperation", pData[3], null);
                        //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, TranslateString("AllPartnerTypes")/*"Select Pay. Type"*/, "slPartnerType", pData[5], null);
                        FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("CostCenters"), "slCostCenter", pData[6], null);
                        FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("Inv.Type"), "slInvoiceType", pData[7], function () { $("#slNewInvoiceTypeForDraft").html($("#slInvoiceType").html()); });
                        //FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                        $("#slBranch").append($("#hReadySlBranches").html()); $("#slBranch").val("");
                        //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                        $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                        //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                        if (pControlID == "FirstStepDraftInvoiceApproval") {
                            $("#slInvoiceType").parent().addClass("hide");
                            $("#h3InvoiceApproval").text("Approve Draft Invoices");
                            $("#liOperAcc").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            $("#liApprovals").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                        }
                        else if (pControlID == "DraftInvoicesApprovals") {
                            $("#btn-ApproveAllSelected").text("Transfer Selected");
                            $("#slNewInvoiceTypeForDraft").removeClass("hide");
                            $("#slInvoiceType").parent().addClass("hide");
                            $("#h3InvoiceApproval").text("Transfer Draft Invoices");
                            $("#liOperAcc").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            $("#liApprovals").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                        }
                        else if (pControlID == "AccountingInvoicesApprovals") {
                            $("#slInvoiceType").parent().removeClass("hide");
                            $("#liOperAcc").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            $("#liApprovals").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                        }
                        else {
                            $("#slInvoiceType").parent().removeClass("hide");
                            $("#liOperAcc").attr("onclick", "LoadViews('Approvals');");
                            $("#liApprovals").attr("onclick", "LoadViews('Approvals');");
                        }
                        
                    });
                });
            },
                function () { Approval_ClearAllControls(); },
                function () { Approval_DeleteList(); });
            break;
        }

        case "TraOperationTanks": {
            debugger;
           
            LoadView("/OperAcc/TankPayablesAndReceivables", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/Approval/TankPayablesAndReceivables.js?', function () {//sherif:loadwithpaging fn is callback in $.getscript
                  
                });
            },
                function () {  },
                function () {  });
            break;
        }

        case "AccountingPurchaseInvoicesApprovals":{
            debugger;
            strBindTableRowsFunctionName = "PurchaseInvoiceApproval_BindTableRows";
            strLoadWithPagingFunctionName = "/api/PurchaseInvoice/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/PurchaseInvoiceApproval", "div-content", function () {
                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide"); 
                else $(".classAccountingOption").addClass("hide");
                //if ($("#hDefaultUnEditableCompanyName").val() == "IST" || $("#hDefaultUnEditableCompanyName").val() == "KML" || $("#hDefaultUnEditableCompanyName").val() == "KDS") {
                //    $("#slEditInvoiceAddressTypes").attr("data-required", "false");
                //}
                //else {
                //    $("#slEditInvoiceAddressTypes").attr("data-required", "true");
                //}
                $.getScript(strServerURL + '/Scripts/OperAcc/Approval/PurchaseInvoiceApproval.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    //var pWhereClause = " WHERE IsDeleted=0 AND IsApproved=0 AND OperationStageID NOT IN (" + ClosedQuoteAndOperStageID + "," + CancelledQuoteAndOperStageID + ")";
                    var pWhereClause = " WHERE IsDeleted=0 AND IsApproved=0 ";
                    //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
                    var pOrderBy = "ID";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    , function (pData) {
                        GetListWithNameAndWhereClause(null, "/api/BankTemplate/LoadAll", "<--Select Bank Template-->", "slBankTemplate", "ORDER BY Name", null);
                        PurchaseInvoiceApproval_BindTableRows(JSON.parse(pData[0]));
                        FillListFromObject(null, 5/*pCodeOrName*/, "<--All Clients-->", "slPartnerClients", pData[2]
                            , null/*function () { $("#slPaymentPartner").html($("#slPartner").html()); }*/); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                        FillListFromObject(null, 5/*pCodeOrName*/, "<--All Suppliers-->", "slPartnerSuppliers", pData[2]
                                                    , null/*function () { $("#slPaymentPartner").html($("#slPartner").html()); }*/); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/

                        //FillListFromObject(null, 1/*pCodeOrName*/, "All Oper.s", "slOperation", pData[3], null);
                        //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, "<--Select Client Type-->"/*"Select Pay. Type"*/, "slPartnerTypeClients", pData[3], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, "<--Select Supplier Type-->"/*"Select Pay. Type"*/, "slPartnerTypeSuppliers", pData[3], null);
                        FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center-->", "slCostCenter", pData[4], null);
                        //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Inv.Type-->", "slInvoiceType", pData[7], null);
                        //FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                        $("#slBranch").append($("#hReadySlBranches").html());$("#slBranch").val("");
                        $("#slPurchaseInvoiceCurrency").html($("#hReadySlCurrencies").html()); 
                        //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                        if (pControlID == "AccountingPurchaseInvoicesApprovals") {
                            $("#liOperAcc").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            $("#liApprovals").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                        }
                        else {
                            $("#liOperAcc").attr("onclick", "LoadViews('Approvals');");
                            $("#liApprovals").attr("onclick", "LoadViews('Approvals');");
                        }
                    });
                });
            },
                function () { Approval_ClearAllControls(); },
                function () { Approval_DeleteList(); });
            break;
        }

        case "AccountingAccNotesApprovals":
        case "AccNotesApprovals": {
            debugger;
            strBindTableRowsFunctionName = "AccNoteApproval_BindTableRows";
            strLoadWithPagingFunctionName = "/api/AccNote/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/AccNoteApproval", "div-content", function () {
                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide"); 
                else $(".classAccountingOption").addClass("hide");
                $.getScript(strServerURL + '/Scripts/OperAcc/Approval/AccNoteApproval.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE IsDeleted=0 AND IsApproved=0 ";
                    //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
                    var pOrderBy = " ID DESC ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    , function (pData) {
                        AccNoteApproval_BindTableRows(JSON.parse(pData[0]));
                        FillListFromObject(null, 5/*pCodeOrName*/, "All Partners", "slPartner", pData[2]
                            , null/*function () { $("#slPaymentPartner").html($("#slPartner").html()); }*/); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/

                        //FillListFromObject(null, 1/*pCodeOrName*/, "All Oper.s", "slOperation", pData[3], null);
                        //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], null);
                        FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center-->", "slCostCenter", pData[6], null);
                        GetListWithNameAndWhereClause(null, "/api/BankTemplate/LoadAll", "<--Select Bank Template-->", "slBankTemplate", "ORDER BY Name", null);
                        //FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                        //$("#slARFBranch").html($("#hReadySlBranches").html());
                        //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                        $("#slEditAccNoteCurrency").html($("#hReadySlCurrencies").html());
                        //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                        if (pControlID == "AccountingAccNotesApprovals") {
                            $("#liOperAcc").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            $("#liApprovals").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                        }
                        else {
                            $("#liOperAcc").attr("onclick", "LoadViews('Approvals');");
                            $("#liApprovals").attr("onclick", "LoadViews('Approvals');");
                        }
                    });
                });
            },
                function () { Approval_ClearAllControls(); },
                function () { Approval_DeleteList(); });
            break;
        }

        //region Accounting/MasterData
        case "ChartOfAccounts": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ChartOfAccounts_AppendToTree";
            strLoadWithPagingFunctionName = "/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE AccLevel=1";
            var pOrderBy = "Account_Number";
            var pPageNumber = 1;
            var pPageSize = 9999;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/ChartOfAccounts", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/ChartOfAccounts.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            ChartOfAccounts_AppendToTree("0", JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ChartOfAccounts_FillModal(1, 0); },
                function () { ChartOfAccounts_DeleteList(); });
            break;
        }
            //region Accounting/MasterData
        case "ChartOfLinkingAccounts": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ChartOfLinkingAccounts_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ChartOfLinkingAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE SubAccLevel=1";
            var pOrderBy = "SubAccount_Number";
            var pPageNumber = 1;
            var pPageSize = 9999;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/ChartOfLinkingAccounts", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/ChartOfLinkingAccounts.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            ChartOfLinkingAccounts_AppendToTree("0", JSON.parse(pData[0]));
                            FillDivWithCheckboxes("divCbAccounts", pData[2], "classCbAllAccounts", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                            //FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        });
                });
                //if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                //    //$("#divCbShowSelectedItemsOnly").addClass("float-right"); //it causes txtName in EnCulture to act as readlyonly!!!!!
                //    $(".swapChildrenClass:not(.reversed)").reverseChildren();
                //}
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ChartOfLinkingAccounts_FillModal(1, 0); },
                function () { ChartOfLinkingAccounts_DeleteList(); });
            break;
        }
            //region Accounting/MasterData
        case "CostCenters": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CostCenters_AppendToTree";
            strLoadWithPagingFunctionName = "/api/CostCenters/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE CCLevel=1";
            var pOrderBy = "CostCenterNumber";
            var pPageNumber = 1;
            var pPageSize = 9999;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/CostCenters", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/CostCenters.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            CostCenters_AppendToTree("0", JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { CostCenters_FillModal(1, 0); },
                function () { CostCenters_DeleteList(); });
            break;
        }
        case "JVTypes": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "JVTypes_BindTableRows";
            strLoadWithPagingFunctionName = "/api/JVTypes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/JVTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/JVTypes.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            JVTypes_BindTableRows(JSON.parse(pData[0]));
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { JVTypes_ClearAllControls(); },
                function () { JVTypes_DeleteList(); });
            break;
        }
        case "JournalTypes": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "JournalTypes_BindTableRows";
            strLoadWithPagingFunctionName = "/api/JournalTypes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/JournalTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/JournalTypes.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            JournalTypes_BindTableRows(JSON.parse(pData[0]));
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { JournalTypes_ClearAllControls(); },
                function () { JournalTypes_DeleteList(); });
            break;
        }
        case "ExchangeRates": {
            debugger;
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strLoadWithPagingFunctionName = "/api/DailyExchangeRate/LoadWithPaging";
            strBindTableRowsFunctionName = "DailyExchangeRate_BindTableRows";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/Accounting/MasterData/DailyExchangeRate", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/DailyExchangeRate.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 1, 10, function (pTabelRows) { DailyExchangeRate_BindTableRows(pTabelRows); });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { DailyExchangeRate_ClearAllControls(); },
                function () { DailyExchangeRate_DeleteList(); });
            break;
        }
        case "OpnJVNo": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "OpnJVNo_BindTableRows";
            strLoadWithPagingFunctionName = "/api/OpnJVNo/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/OpnJVNo", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/OpnJVNo.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            OpnJVNo_BindTableRows(JSON.parse(pData[0]));
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { OpnJVNo_ClearAllControls(); },
                function () { OpnJVNo_DeleteList(); });
            break;
        }

        //region Accounting/MasterData -----------------------------------------------------------------------------------------------------------------
        case "JVDefaults": {

            strLoadWithPagingFunctionName = "/api/JVDefaults/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1 ";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 50;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/JVDefaults", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/JVDefaults.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                       , function (pData)
                       {
                           var pTabelRows = JSON.parse(pData[0]);
                           var pJVTypes = pData[2];
                           var pJournalTypes = pData[3];
                   
                           JVDefaults_BindTableRows(pTabelRows);

                           FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slJournalType",pJournalTypes ,null);
                           FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slJVType",pJVTypes  ,null );
                       });
                });
            },
                function () { JVDefaults_ClearAllControls(); },
                function () { JVDefaults_DeleteList(); });
            break;
        }
        case "Budgets":
            {
                strLoadWithPagingFunctionName = "/api/Budgets/LoadWithPaging";
                LoadView("/Accounting/MasterData/Budgets", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/Accounting/MasterData/Budgets.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Budgets_BindTableRows(pTabelRows); });

                        //$.ajax({
                        //    type: "GET",
                        //    url: strServerURL + "api/Budgets/IntializeData",
                        //    data: { pID: null },
                        //    contentType: "application/json; charset=utf-8",
                        //    dataType: "json",
                        //    success: function (d) {
                        //        Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#slAccountID', '');
                        //        // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#slSubAccountID', '');
                        //        // Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#hidden_slAccountID', '');
                        //        // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#hidden_slSubAccountID', '');
                        //        FadePageCover(false);
                        //    },
                        //    error: function (jqXHR, exception) {
                        //        debugger;
                        //        swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                        //        FadePageCover(false);
                        //    }
                        //});
                    });
                },
                    function () { Budgets_ClearAllControls(); },
                    function () { Budgets_DeleteList(); });
                break;

            }
        case "Sec_UserSafes": {

            strLoadWithPagingFunctionName = "/api/Sec_UserSafes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1 ";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 50;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Administration/Sec_UserSafes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/Sec_UserSafes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                       , function (pData) {
                           var pTabelRows = JSON.parse(pData[0]);
                           var pSafes = pData[2];
                           var pUseres = pData[3];

                           Sec_UserSafes_BindTableRows(pTabelRows);

                           FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slSafes", pSafes, null);
                           FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slUsers", pUseres, null);
                       });
                });
            },
                function () { Sec_UserSafes_ClearAllControls(); },
                function () { Sec_UserSafes_DeleteList(); });
            break;
        }

        case "SystemOptions": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "SystemOptions_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SystemOptions/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "OptionArName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Administration/SystemOptions", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/SystemOptions.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            SystemOptions_BindTableRows(JSON.parse(pData[0]));
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { SystemOptions_ClearAllControls(); },
                function () { JVTypes_DeleteList(); });
            break;
        }
        case "FA_UserBranches": {

            strLoadWithPagingFunctionName = "/api/FA_UserBranches/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1 ";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 50;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Administration/FA_UserBranches", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/FA_UserBranches.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pTabelRows = JSON.parse(pData[0]);
                            var pBranches = pData[2];
                            var pUseres = pData[3];

                            FA_UserBranches_BindTableRows(pTabelRows);

                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slBranches", pBranches, null);
                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slUsers", pUseres, null);
                        });
                });
            },
                function () { FA_UserBranches_ClearAllControls(); },
                function () { FA_UserBranches_DeleteList(); });
            break;
        }
            //"Accounting/MasterData/A_Fiscal_Year"
        case "FiscalYears": {
            strLoadWithPagingFunctionName = "/api/A_Fiscal_Year/LoadWithPaging";
            LoadView("/Accounting/MasterData/A_Fiscal_Year", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/A_Fiscal_Year.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { A_Fiscal_Year_BindTableRows(pTabelRows); });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*CRM_Sources_ClearAllControls();*/ },
                function () { /*CRM_Sources_DeleteList();*/ });
            break;
        }
        case "CashFlow": {
            $("#hl-menu-MasterData").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CashFlow_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CashFlow/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/CashFlow", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/CashFlow.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            CashFlow_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select CashFlow-->", "slCashFlow", pData[2], null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[3], null);

                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { CashFlow_ClearAllControls(); },
                function () { CashFlow_DeleteList(); });
            break;
        }
            //region Accounting/Transactions
        case "JournalVouchers": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "JournalVouchers_BindTableRows";
            strLoadWithPagingFunctionName = "/api/JournalVouchers/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE Deleted=0 ";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/Transactions/JournalVouchers", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Transactions/JournalVouchers.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pJournalTypes = pData[3];
                            var pJVTypes = pData[4];
                            var pCostCenters = pData[5];
                            JournalVouchers_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchJVType", pJVTypes, function () {
                                $("#slJVType").html($("#slSearchJVType").html());
                                $("#slSearchJVTypePrint").html($("#slSearchJVType").html());
                            });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchJournalType", pJournalTypes, function () {
                                $("#slJournalType").html($("#slSearchJournalType").html());
                                $("#slSearchJournalTypePrint").html($("#slSearchJournalType").html());
                            });



                            FillListFromObject_ERP(null,OptionNameCodeAccount =="true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenters, null);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { JournalVouchers_ClearAllControls(); },
                function () { JournalVouchers_DeleteList('F'); }); //the parameter 'F':NotPermanentDelete, 'D':PermanentDelete
            break;
        }
        case "OpenCloseFiscalYear":
            {
                LoadView("/Accounting/Transactions/OpenCloseFiscalYear", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/Accounting/Transactions/OpenCloseFiscalYear.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { },
                    function () { });
                break;
            }

        case "PostingJVs":
        case "UnPostingJVs":
        case "RestoringJVs": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Post_Restore_Unpost_JVs_BindTableRows";
            strLoadWithPagingFunctionName = "/api/JournalVouchers/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = "";
            if (pControlID == "PostingJVs") {
                glbFormCalled = constFrmPosting;
                pWhereClause = "WHERE Deleted=0 AND Posted=0 AND IsSysJv=0";
            }
            else if (pControlID == "UnPostingJVs") {
                glbFormCalled = constFrmUnPosting;
                pWhereClause = "WHERE Posted=1 and Deleted=0 AND IsSysJv=0";
            }
            else if (pControlID == "RestoringJVs") {
                glbFormCalled = constFrmRestoring;
                pWhereClause = "WHERE Deleted=1 and IsSysJv = 0";
            }

            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/Transactions/Post_Restore_Unpost_JVs", "div-content", function () {
                $("#liPost_Restore_Unpost_JVs").text(TranslateString(pControlID));
                $("#h3Post_Restore_Unpost_JVs").text($("#liPost_Restore_Unpost_JVs").text());
                $.getScript(strServerURL + '/Scripts/Accounting/Transactions/Post_Restore_Unpost_JVs.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pJournalTypes = pData[3];
                            var pJVTypes = pData[4];
                            Post_Restore_Unpost_JVs_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchJVType", pJVTypes, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchJournalType", pJournalTypes, null);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            if (glbFormCalled == constFrmPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-Post").removeClass("hide");
                            }
                            else if (glbFormCalled == constFrmUnPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-UnPost").removeClass("hide");
                            }
                            else if (glbFormCalled == constFrmRestoring) {
                                if ($("#hf_CanEdit").val() == "1")
                                    $("#btn-Restore").removeClass("hide");
                                if ($("#hf_CanDelete").val() == "1")
                                    $("#btn-PermanentDelete-MaunalShow").removeClass("hide");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Post_Restore_Unpost_JVs_ClearAllControls();*/ },
                function () { /*Post_Restore_Unpost_JVs_DeleteList();*/ });
            break;
        }
        case "A_AccountLink":
            {
                strBindTableRowsFunctionName = "A_AccountLink_BindTableRows";
                strLoadWithPagingFunctionName = "/api/A_AccountLink/LoadRows";
                LoadView("/Accounting/Transactions/A_AccountLink", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/Accounting/Transactions/A_AccountLink.js'
                        , function () {
                            CallGETFunctionWithParameters("/api/A_AccountLink/IntializeData"
                                , {}
                                , function (pData) {
                                    Fill_SelectInputAfterLoadData(pData[0], "ID", "Account_Name", TranslateString("SelectFromMenu"), "#hslExpensesAccountID", null);
                                    Fill_SelectInputAfterLoadData(pData[1], "ID", "Account_Name", TranslateString("SelectFromMenu"), "#hslRevenueAccountID", null);
                                    Fill_SelectInputAfterLoadData(pData[0], "ID", "Account_Name", TranslateString("SelectFromMenu"), "#slExpensesAccountID", null);
                                    Fill_SelectInputAfterLoadData(pData[1], "ID", "Account_Name", TranslateString("SelectFromMenu"), "#slRevenueAccountID", null);
                                    setTimeout(function () {
                                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { A_AccountLink_BindTableRows(pTabelRows); });
                                    }, 30);
                                    FadePageCover(false);
                                }
                                , null);
                        });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { A_AccountLink_ClearAllControls(); },
                    function () { A_AccountLinkDeleteList(); });
                break;
            }
        case "SystemAccount":
            {
                strBindTableRowsFunctionName = "SystemAccount_BindTableRows";
                strLoadWithPagingFunctionName = "/api/SystemAccount/LoadAll";
                LoadView("/Accounting/Transactions/SystemAccount", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/Accounting/Transactions/SystemAccount.js'
                        , function () {
                            CallGETFunctionWithParameters("/api/SystemAccount/IntializeData"
                                , {}
                                , function (pData) {
                                    Fill_SelectInputAfterLoadData(pData[0], "ID", "Account_Name", TranslateString("SelectAccount"), "#hslSystemAccountID", null);
                                    setTimeout(function () {
                                        LoadAll(strLoadWithPagingFunctionName, "where 1=1", function (pTabelRows) { SystemAccount_BindTableRows(pTabelRows); });
                                    }, 30);
                                    FadePageCover(false);
                                }
                                , null);
                        });
                },
                    function () { SystemAccount_ClearAllControls(); },
                    function () { SystemAccountDeleteList(); });
                break;
            }
        case "BudgetsFiscal":
            {
                strLoadWithPagingFunctionName = "/api/BudgetsFiscal/LoadWithPaging";
                LoadView("/Accounting/Transactions/BudgetsFiscal", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/Accounting/Transactions/BudgetsFiscal.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { BudgetsFiscal_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/BudgetsFiscal/IntializeData",
                            data: { pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Account -->', '#hidden_slAccount', '');
                                // Fill_SelectInputAfterLoadData(d[1], 'ID', 'Fiscal_Year_Name', '<-- select Fiscal Year -->', '#slFiscalYearID', '');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- select Budgets -->', '#slBudgetID', '');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { BudgetsFiscal_ClearAllControls(); },
                    function () { BudgetsFiscal_DeleteList(); });
                break;

            }
            //region Accounting/Reports
        case "AccountLedger": {
            debugger;
            strBindTableRowsFunctionName = "AccountLedger_BindTableRows";
            strLoadWithPagingFunctionName = "/api/AccountLedger/LoadRows";
            LoadView("/Accounting/Reports/AccountLedger", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/AccountLedger.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/AccountLedger/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pAccount = pData[0];
                                var pJournalType = pData[1];
                                var pCostCenter = pData[2];
                                var pAccountGroups = pData[3]

                                FillDivWithCheckboxes("divCbAccount", pAccount, "nameCbAccount", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                FillDivWithCheckboxes("divCbJournalType", pJournalType, "nameCbJournalType", 5, null);
                                Fill_SelectInputAfterLoadData(pAccountGroups, "RealAccountCode", "Account_Name", TranslateString("SelectFromMenu"), "#slAccountsGroups", null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                if ($("#hDefaultUnEditableCompanyName").val() == "ONE")
                                    $("#secJournalType").removeClass("hide");
                                else {
                                    $("#cbCheckAllJournalTypes").prop("checked", true);
                                    $("#secJournalType").addClass("hide");
                                }
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "AccountLedgerByCurrency": {
            debugger;
            strBindTableRowsFunctionName = "AccountLedgerByCurrency_BindTableRows";
            strLoadWithPagingFunctionName = "/api/AccountLedgerByCurrency/LoadRows";
            LoadView("/Accounting/Reports/AccountLedgerByCurrency", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/AccountLedgerByCurrency.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/AccountLedgerByCurrency/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");

                                var pCurrency = pData[0];
                                var pAccount = pData[1];

                                FillDivWithCheckboxes("divCbAccount", pAccount, "nameCbAccount", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                                // FillDivWithCheckboxes("divCbCurrency", pCurrency, "nameCbCurrency", 5, null);
                                FillListFromObject(null, 1, "All Currencies", "slCurrency", pCurrency, null);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);

                                //if ($("#hDefaultUnEditableCompanyName").val() == "ONE")
                                //    $("#secJournalType").removeClass("hide");
                                //else {
                                //    $("#cbCheckAllJournalTypes").prop("checked", true);
                                //    $("#secJournalType").addClass("hide");
                                //}
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SubAccountBalanceByCurrency": {
            debugger;
            strBindTableRowsFunctionName = "SubAccountBalanceByCurrency_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SubAccountBalanceByCurrency/LoadRows";
            LoadView("/Accounting/Reports/SubAccountBalanceByCurrency", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/SubAccountBalanceByCurrency.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SubAccountBalanceByCurrency/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pSubAccount = pData[0];
                                var pCostCenter = pData[1];
                                var pSubAccountGroup = pData[2];
                                FillDivWithCheckboxes("divCbSubAccount", pSubAccount, "nameCbSubAccount", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSubAccountGroup, null);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }

        case "SubAccountLedger": {
            debugger;
            glbCallingControl = "SubAccountLedger";
            strBindTableRowsFunctionName = "SubAccountLedger_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SubAccountLedger/LoadRows";
            LoadView("/Accounting/Reports/SubAccountLedger", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/SubAccountLedger.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SubAccountLedger/FillSearchControls"
                            , { glbCallingControl: glbCallingControl }
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pSubAccount = pData[0];
                                var pCostCenter = pData[1];
                                var pSubAccountGroup = pData[2];
                                var pCurrency = pData[3];

                                FillDivWithCheckboxes("divCbSubAccount", pSubAccount, "nameCbSubAccount", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSubAccountGroup, null);
                                FillListFromObject(null, 1, TranslateString("SelectFromMenu"), "slCurrency", pCurrency, null);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "AccountStatement": {
            debugger;
            glbCallingControl = "AccountStatement";
            strBindTableRowsFunctionName = "SubAccountLedger_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SubAccountLedger/LoadRows";
            LoadView("/Reports/AccountStatement", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/SubAccountLedger.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SubAccountLedger/FillSearchControls"
                            , { glbCallingControl: glbCallingControl }
                            , function (pData) {
                                $("#hl-menu-Reports").parent().addClass("active");
                                $("#hl-menu-Reports").parent().siblings().removeClass("active");
                                var pSubAccount = pData[0];
                                var pCostCenter = pData[1];
                                var pSubAccountGroup = pData[2];
                                var pCurrency = pData[3];

                                FillDivWithCheckboxes("divCbSubAccount", pSubAccount, "nameCbSubAccount", 4/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSubAccountGroup, null);
                                //FillListFromObject(null, 1, "All Currencies", "slCurrency", pCurrency, null);
                                $("#slCurrency").html($("#hReadySlCurrencies").html());

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }

        case "TrialBalance": {
            debugger;
            strBindTableRowsFunctionName = "TrialBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/TrialBalance/LoadRows";
            LoadView("/Accounting/Reports/TrialBalance", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/TrialBalance.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/TrialBalance/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                var pAccount = pData[0];
                                var pCostCenter = pData[1];
                                var pGroups = pData[2];
                                FillDivWithCheckboxes("divCbAccount", pAccount, "nameCbAccount", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                Fill_SelectInputAfterLoadData(pGroups, "ID", "Account_Name", TranslateString("SelectFromMenu"), "#slAccountsGroups", null);
                                FadePageCover(false);

                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SubAccountTrialBalance": {
            debugger;
            strBindTableRowsFunctionName = "SubAccountTrialBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SubAccountTrialBalance/LoadRows";
            LoadView("/Accounting/Reports/SubAccountTrialBalance", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/SubAccountTrialBalance.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SubAccountTrialBalance/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                var pSubAccount = pData[0];
                                var pSubAccountGroup = pData[1];
                                FillDivWithCheckboxes("divCbSubAccount", pSubAccount, "nameCbSubAccount", 4/*NameAndCode*/, null);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSubAccountGroup, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "BalanceSheet": {
            debugger;
            strBindTableRowsFunctionName = "BalanceSheet_BindTableRows";
            strLoadWithPagingFunctionName = "/api/BalanceSheet/LoadRows";
            LoadView("/Accounting/Reports/BalanceSheet", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/BalanceSheet.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/BalanceSheet/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pAccountLevels = pData[0];
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                //$("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FillListFromObject_ERP(null, 2/*pName*/, TranslateString("SelectFromMenu"), "slAccountLevel", pAccountLevels, null);
                                FillListFromObject(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCurrency", pData[1], null);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "IncomeStatement": {
            debugger;
            strBindTableRowsFunctionName = "IncomeStatement_BindTableRows";
            strLoadWithPagingFunctionName = "/api/IncomeStatement/LoadRows";
            LoadView("/Accounting/Reports/IncomeStatement", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/IncomeStatement.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/IncomeStatement/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pActivityIncome = pData[0];
                                var pActivityExpense = pData[1];
                                var pCostCenter = pData[2];
                                FillDivWithCheckboxes("divCbActivityIncome", pActivityIncome, "nameCbActivityIncome", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbActivityExpense", pActivityExpense, "nameCbActivityExpense", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                //FillDivWithCheckboxes("divCbJournalType", pJournalType, "nameCbJournalType", 5, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FillListFromObject(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCurrency", pData[3], null);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "Rep_A_MonthlyAnalysis": {
            debugger;
            strBindTableRowsFunctionName = "Rep_A_MonthlyAnalysis_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Rep_A_MonthlyAnalysis/LoadRows";
            LoadView("/Accounting/Reports/Rep_A_MonthlyAnalysis", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/Rep_A_MonthlyAnalysis.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/Rep_A_MonthlyAnalysis/FillSearchControls"
                            , { WhereCondition: "WHERE IsMain=1" }
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pAccount = pData[0];

                                // var pJournalType = pData[1];
                                // var pCostCenter = pData[2];
                                //  FillDivWithCheckboxes("divCbAccount", pAccount, "nameCbAccount", 4/*NameAndCode*/, null);
                                // FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                //  FillDivWithCheckboxes("divCbJournalType", pJournalType, "nameCbJournalType", 5, null);

                                Fill_SelectInputAfterLoadData(pAccount, "RealAccountCode", "Account_Name", TranslateString("SelectFromMenu"), "#slAccountsGroups", null);

                                var nowY = new Date().getFullYear(), options = "";

                                for (var Y = nowY; Y >= 2016; Y--) {
                                    options += "<option>" + Y + "</option>";
                                }

                                $("#slFirstYear").append(options);
                                $("#slSecondYear").append(options);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                if ($("#hDefaultUnEditableCompanyName").val() == "ONE")
                                    $("#secJournalType").removeClass("hide");
                                else {
                                    $("#cbCheckAllJournalTypes").prop("checked", true);
                                    $("#secJournalType").addClass("hide");
                                }
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "BudgetDetailsReport": {
            debugger;
            LoadView("/Accounting/Reports/BudgetDetailsReport", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/BudgetDetailsReport.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/BudgetDetailsReport/IntializeData"
                            , {}
                            , function (pData) {
                                $("#hl-menu-BudgetDetailsReport").parent().addClass("active");
                                // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var FiscalYears = pData[0];
                                var Budgets = pData[1];
                                Fill_SelectInputAfterLoadData(FiscalYears, 'ID', 'Fiscal_Year_Name', TranslateString("SelectFromMenu"), '#slFiscalYearID', '');
                                Fill_SelectInputAfterLoadData(Budgets, 'ID', 'Name', TranslateString("SelectFromMenu"), '#slBudgetsID', '');
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "CashFlowReport": {
            debugger;
            strBindTableRowsFunctionName = "BalanceSheet_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CashFlowReport/LoadRows";
            LoadView("/Accounting/Reports/CashFlow", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/CashFlow.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/CashFlowReport/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pAccountLevels = pData[0];
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FillListFromObject_ERP(null, 2/*pName*/, null/*TranslateString("SelectFromMenu")*/, "slAccountLevel", pAccountLevels, null);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
            //region ReceiptsAndPayments/Transactions
        case "CashReceivingVoucher":
        case "CashIssueVoucher": {
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Voucher_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            if (pControlID == "CashReceivingVoucher") {
                glbFormCalled = constVoucherCashIn;
            }
            else if (pControlID == "CashIssueVoucher") {
                glbFormCalled = constVoucherCashOut;
            }
            var pWhereClause = "WHERE VoucherType=" + glbFormCalled;
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/Transactions/CashVoucher", "div-content", function () {
                $("#li_InOrOut").text(TranslateString(pControlID));
                $("#h3_InOrOut").text($("#li_InOrOut").text());
                $("#h3Modal").html('<span>' + $("#li_InOrOut").text() + '</span><label id="lblShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Transactions/CashVoucher.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccount = pData[2];
                            var pSafe = pData[3];
                            var pTax = pData[4];
                            var pCostCenter = pData[5];
                            Voucher_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, function () { $("#slSafe").html($("#slSearchSafe").html()); });
                            FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenter, null);
                            $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            if (glbFormCalled == constVoucherCashIn) {
                                $("#thIsCash").addClass("hide");
                                $(".showForCashIssue").addClass("hide");
                                $(".hideForCashIssue").removeClass("hide");
                                $(".hideForCashReceiving").addClass("hide");
                                //in details
                                $("#thInvoiceNumber").removeClass("hide");
                                $("#lblVoucherDate").html('Receipt Date');
                                if ($("#hDefaultUnEditableCompanyName").val() == "SAF") {
                                    //$("#txtChargedPerson").removeAttr("data-required");
                                    // $("#txtChargedPerson").prop("disabled", "disabled");
                                    $("#btn-AddDetailsNew").html(' <i class="fa fa-plus"></i><b>&nbsp;Paid in advance&nbsp;</b>');
                                }
                            }
                            else if (glbFormCalled == constVoucherCashOut) {

                                $(".hideForCashReceiving").removeClass("hide");
                                $("#thIsCash").removeClass("hide");
                                $(".showForCashIssue").removeClass("hide");
                                //$(".hideForCashIssue").addClass("hide");
                                $(".hideForCashIssue").removeClass("hide");
                                //in details
                                $("#thInvoiceNumber").addClass("hide");

                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Voucher_ClearAllControls(); },
                function () { Voucher_DeleteList(); });
            break;
        }

        case "ChequeReceivingVoucher":
        case "ChequeIssueVoucher": {
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Voucher_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            if (pControlID == "ChequeReceivingVoucher") {
                glbFormCalled = constVoucherChequeIn;
            }
            else if (pControlID == "ChequeIssueVoucher") {
                glbFormCalled = constVoucherChequeOut;
            }
            var pWhereClause = "WHERE VoucherType=" + glbFormCalled;
            var pOrderBy = $("#hDefaultUnEditableCompanyName").val() == "KDS" ? " ISNUMERIC(code) DESC,Try_Parse(code AS numeric) DESC,ID  DESC" : "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/Transactions/ChequeVoucher", "div-content", function () {
                $("#li_InOrOut").text(TranslateString(pControlID));
                $("#h3_InOrOut").text($("#li_InOrOut").text());
                $("#h3Modal").html('<span>' + $("#li_InOrOut").text() + '</span><label id="lblShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Transactions/ChequeVoucher.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccount = pData[2];
                            var pSafe = pData[3];
                            var pTax = pData[4];
                            var pCostCenter = pData[5];
                            var pBank = pData[6];
                            Voucher_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();

                            var SelectSafe = TranslateString("SelectFromMenu");
                            if ($('#hReadySlOptions option[value="55"]').attr("OptionValue") == "true")
                                SelectSafe = "";

                            if ($("#hDefaultUnEditableCompanyName").val() != "SAF")
                            {
                                SelectSafe = TranslateString("SelectFromMenu");
                            }

                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);

                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchBank", pBank, function () { $("#slBank").html($("#slSearchBank").html()); });
                            FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenter, null);
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, SelectSafe, "slSearchSafe", pSafe, function () { $("#slSafe").html($("#slSearchSafe").html()); });


                            $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            if (glbFormCalled == constVoucherChequeIn) {
                                $(".showForChequeIssue").addClass("hide");
                                $(".hideForChequeIssue").removeClass("hide");
                                $(".hideForChequeReceiving").addClass("hide");
                            }
                            else if (glbFormCalled == constVoucherChequeOut) {
                                $(".showForChequeIssue").removeClass("hide");
                                //$(".hideForChequeIssue").addClass("hide");
                                $(".hideForChequeIssue").removeClass("hide");
                                $(".hideForChequeReceiving").removeClass("hide");
                                if ($("#hDefaultUnEditableCompanyName").val() == "SAF")
                                {
                                    $('#bDeposit').html('');
                                    $('#bPO').html('Transfer');
                                    var option = "";
                                    option += '<option value="' + 0 + '" selected >' + '<--Select-->' + '</option>';
                                    option += '<option value="' + 10 + '"  >' + 'Cheque' + '</option>';
                                    option += '<option value="' + 20 + '"  >' + 'Deposit' + '</option>';
                                    option += '<option value="' + 30 + '"  >' + 'Transfer' + '</option>';
                                    $("#slSearchChequeOrDepositOrPO").html(option);
                                }
                               
                            }
                            $(".hideForReciprocalBank").addClass("hide");
                            if ($("#hDefaultUnEditableCompanyName").val() != "SAF")
                            $(".showForIsCheque").removeClass("hide");
                            
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Voucher_ClearAllControls(); },
                function () { Voucher_DeleteList(); });
            break;
        }

        case "OperationsPayablesAndReceivables": {
            FadePageCover(true);
            glbFormCalled = pControlID;
            strLoadWithPagingFunctionName = "/api/Operations/LoadAllForCombo";
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            LoadView("/ReceiptsAndPayments/Transactions/OperationsPayablesAndReceivables", "div-content", function () {
                LoadView("/MasterData/ModalSelectCharges", "div-content", function () { $("#slPayableBillTo").parent().addClass("hide"); $("#btn-SetDefaultNote").parent().addClass("hide"); }, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/Quotations/QuotationsEdit", "divHidden", function () { $("#divHidden").children().addClass("hide"); }, null, null, true);

                //$.getScript(strServerURL + '/Scripts/Quotations/Quotations/QuotationCharges.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/Quotations/Quotations/Quotations.js?' + glbVersion, function () {//sherif:pUserID here holds the QuotationID
                    CallGETFunctionWithParameters(strLoadWithPagingFunctionName
                        , { pPageSize: 5000, pWhereClauseForCombo: "WHERE BLType<>" + constHouseBLType, pOrderBy: "ID DESC" }
                        , function (pData) {
                            var _Operation = pData[0];
                            FillListFromObject(null, 1, "<--Select-->", "slFilterOperation", _Operation, null);
                            FadePageCover(false);
                        }
                        , null);
                });
            }
            , null//function () { QuotationsEdit_ClearAllControls(); }
            , null//function () { QuotationsEdit_DeleteList(); }
                );
            break;
        }

        case "PostingVouchers":
        case "UnpostingVouchers": {
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Post_Unpost_Voucher_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = "";
            if (pControlID == "PostingVouchers") {
                glbFormCalled = constFrmPosting;
                pWhereClause = "WHERE Posted=0 AND VoucherType=" + constVoucherCashIn;
            }
            else if (pControlID == "UnpostingVouchers") {
                glbFormCalled = constFrmUnPosting;
                pWhereClause = "WHERE Posted=1 AND VoucherType=" + constVoucherCashIn;
            }
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ApprovingAndPosting/Post_Unpost_Voucher", "div-content", function () {
                $("#liPost_Unpost_Voucher").text(TranslateString(pControlID));
                $("#h3Post_Unpost_Voucher").text($("#liPost_Unpost_Voucher").text());
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ApprovingAndPosting/Post_Unpost_Voucher.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccount = pData[2];
                            var pSafe = pData[3];
                            var pTax = pData[4];
                            var pCostCenter = pData[5];
                            Post_Unpost_Voucher_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, function () { $("#slSafe").html($("#slSearchSafe").html()); });
                            FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenter, null);
                            $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            $("#txtJVDate").val(pFormattedTodaysDate);
                            if (glbFormCalled == constFrmPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-Post").removeClass("hide");
                                $(".showForPosting").removeClass("hide");
                                $(".hideForPosting").addClass("hide");
                            }
                            else if (glbFormCalled == constFrmUnPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-UnPost").removeClass("hide");
                                $(".showForPosting").addClass("hide");
                                $(".hideForPosting").removeClass("hide");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Post_Unpost_Voucher_ClearAllControls();*/ },
                function () { /*Post_Unpost_Voucher_DeleteList();*/ });
            break;
        }

        case "PostingReceivablePayableNotes": {
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "PostingReceivablePayableNotes_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Voucher/ChequeStatus_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = "WHERE Posted=1 AND UnderCollection=0 AND Collected=0  AND Returned=0";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseChequeStatus: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ApprovingAndPosting/PostingReceivablePayableNotes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ApprovingAndPosting/PostingReceivablePayableNotes.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pSafe = pData[2];
                            var pBank = pData[3];
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchBank", pBank, function () { $("#slBank").html($("#slSearchBank").html()); });
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, null);
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            PostingReceivablePayableNotes_BindTableRows(JSON.parse(pData[0]));
                            if ($("#hf_CanEdit").val() == "1") {
                                $("#btn-Approve").removeClass("hide");
                            }
                            else if ($("#hf_CanEdit").val() == "1") {
                                $("#btn-Approve").removeClass("hide");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Post_Unpost_Voucher_ClearAllControls();*/ },
                function () { /*Post_Unpost_Voucher_DeleteList();*/ });
            break;
        }
        case "PostingUnderCollectNotes": {
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "PostingUnderCollectNotes_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Voucher/ChequeStatus_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = "WHERE Posted=1 AND UnderCollection=1 AND Collected=0 AND ToSafe=0 AND Returned=0";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseChequeStatus: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ApprovingAndPosting/PostingUnderCollectNotes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ApprovingAndPosting/PostingUnderCollectNotes.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pSafe = pData[2];
                            var pBank = pData[3];
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 5/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchBank", pBank, null);
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, null);
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            PostingUnderCollectNotes_BindTableRows(JSON.parse(pData[0]));
                            if ($("#hf_CanEdit").val() == "1") {
                                $("#btn-Approve").removeClass("hide");
                                $("#btn-Return").removeClass("hide");
                            }
                            else if ($("#hf_CanEdit").val() == "1") {
                                $("#btn-Approve").removeClass("hide");
                                $("#btn-Return").removeClass("hide");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Post_Unpost_Voucher_ClearAllControls();*/ },
                function () { /*Post_Unpost_Voucher_DeleteList();*/ });
            break;
        }
            //region ReceiptsAndPayments/Reports
        case "BanksJournal": {
            debugger;
            strBindTableRowsFunctionName = "BanksJournal_BindTableRows";
            strLoadWithPagingFunctionName = "/api/BanksJournal/LoadRows";
            LoadView("/ReceiptsAndPayments/Reports/BanksJournal", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Reports/BanksJournal.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/BanksJournal/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-ReceiptsAndPaymentsGroup").parent().addClass("active");
                                $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
                                var pBank = pData[0];
                                var pCurrency = pData[1];
                                FillDivWithCheckboxes("divCbBank", pBank, "nameCbBank", 5/*Name*/, null);
                                FillDivWithCheckboxes("divCbCurrency", pCurrency, "nameCbCurrency", 1/*Code*/, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SafesJournal": {
            debugger;
            strBindTableRowsFunctionName = "SafesJournal_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SafesJournal/LoadRows";
            LoadView("/ReceiptsAndPayments/Reports/SafesJournal", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Reports/SafesJournal.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SafesJournal/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-ReceiptsAndPaymentsGroup").parent().addClass("active");
                                $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
                                var pSafe = pData[0];
                                var pCurrency = pData[1];
                                FillDivWithCheckboxes("divCbSafe", pSafe, "nameCbSafe", 5/*Name*/, null);
                                FillDivWithCheckboxes("divCbCurrency", pCurrency, "nameCbCurrency", 1/*Code*/, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "ChequesStatusReports": {
            debugger;
            FadePageCover(true);
            LoadView("/ReceiptsAndPayments/Reports/ChequesStatueReports", "div-content", function () {
                CallGETFunctionWithParameters("/api/ChequesStatueReports/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "All", "slBranch", data[0], null);
                        //  FillListFromObject(null, 5, "All", "slPartner", data[1], null);
                        //   FillListFromObject(null, 1/*pCodeOrName*/, "All", "slPartnerType", data[2], null);
                        FillListFromObject(null, 2, "All", "slBankAccount", data[1], null);
                        $("#slCurrency").html("<option value=''>All</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Reports/ChequesReports.js');
            });
            break;
        }
        case "CashPosition": {
            debugger;
            FadePageCover(true);
            LoadView("/ReceiptsAndPayments/Reports/CashPosition", "div-content", function () {
                CallGETFunctionWithParameters("/api/CashPosition/FillFilter", null
                    , function (data) {
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "All", "slBranch", data[0], null);
                        //  FillListFromObject(null, 5, "All", "slPartner", data[1], null);
                        //   FillListFromObject(null, 1/*pCodeOrName*/, "All", "slPartnerType", data[2], null);
                        FillListFromObject(null, 2, "All", "slBankAccount", data[1], null);
                        $("#slCurrency").html("<option value=''>All</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Reports/CashPosition.js');
            });
            break;
        }
            //region ShipLink/MasterData
        case "ShipLinkClients": {
            debugger;
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkClients_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkClients/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name, ArName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkClients", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkClients.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pClientsGroups = pData[2];
                            ShipLinkClients_BindTableRows(JSON.parse(pData[0]));
                            //$("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slClientGroup", pClientsGroups, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkClients_Save(); },
                function () { ShipLinkClients_DeleteList(); });
            break;
        }
        case "ShipLinkCurrencyClientLinking": {
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkCurrencyClientLinking_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkCurrencyClientLinking/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "CurrencyCode";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkCurrencyClientLinking", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkCurrencyClientLinking.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            ShipLinkCurrencyClientLinking_BindTableRows(JSON.parse(pData[0]));
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, "<--Select-->", "slAccount", pAccounts, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkCurrencyClientLinking_ClearAllControls(); },
                function () { ShipLinkCurrencyClientLinking_DeleteList(); });
            break;
        }
        case "ShipLinkRevenueItems": { //LoadAll not paging (pagesize is replaced by 9999 in controller)
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkRevenueItems_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkRevenueItems/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkRevenueItems", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkRevenueItems.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pSubAccounts = pData[3];
                            var pCostCenters = pData[4];
                            var pRevenueItems = pData[5];
                            var pVoyageAccountID = pData[6];
                            FillListFromObject_ERP(pVoyageAccountID, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slVoyageAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slVoyageSubAccount", pSubAccounts, null);
                            //FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slCostCenter", pCostCenters, null);
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slRevenueItem", pRevenueItems, null);
                            if ($("#hf_CanEdit").val() == 1)
                                $("#btn-Save").removeClass("hide");
                            ShipLinkRevenueItems_BindTableRows(JSON.parse(pData[0]));
                            debugger;
                            if ($("#hDefaultUnEditableCompanyName").val() == "ONE" || $("#hDefaultUnEditableCompanyName").val() == "KDS") {
                                $(".classVoyageAccount").removeClass("hide");
                                $("#slVoyageAccount").attr("data-required", "true");
                                $("#thVoyageSubAccountID").removeClass("hide");
                                $("#thRevenueSubAccountID20").addClass("hide");
                                $("#thRevenueSubAccountID40").addClass("hide");
                                $("#thLine").addClass("hide");
                            }
                            else {
                                $(".classVoyageAccount").addClass("hide");
                                $("#slVoyageAccount").attr("data-required", "false");
                                $("#thVoyageSubAccountID").addClass("hide");
                                $("#thRevenueSubAccountID20").removeClass("hide");
                                $("#thRevenueSubAccountID40").removeClass("hide");
                                $("#thLine").removeClass("hide");

                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                //function () { ShipLinkRevenueItems_ClearAllControls(); },
                function () { ShipLinkRevenueItems_NewRow(); },
                function () { ShipLinkRevenueItems_DeleteList(); });
            break;
        }
        case "ShipLinkInvoicePosting": {
            debugger;
            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkInvoicePosting_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkInvoicePosting/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            //if ($("#hDefaultUnEditableCompanyName").val() != "ONE")
            if ($("#hDefaultUnEditableCompanyName").val() != "KDS")

                var pWhereClause = " WHERE IssueDate >= GetDateWithFormatyyyyMMdd(pFormattedTodaysDate) AND IssueDate<='" + GetDateWithFormatyyyyMMdd(pFormattedTodaysDate) + " 23:59:59'";
            else
                var pWhereClause = " WHERE IssueDate >= '2000/01/01' AND IssueDate<='" + GetDateWithFormatyyyyMMdd(pFormattedTodaysDate) + " 23:59:59'";

            //pWhereClause += " AND ID NOT IN (SELECT Shipping_InvoiceID from SL_InvoiceJvs WHERE JVID2 IS NULL)";
            pWhereClause += " AND JVID2 IS NULL";
            pWhereClause += " AND 1=0"; //I don't want to retrieve data at the begining
            pWhereClause += ($("#hDefaultUnEditableCompanyName").val() != "ONE" ? " AND IsAudited=1 " : "");
            var pOrderBy = "IssueDate,PaymentDate";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkInvoicePosting", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkInvoicePosting.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pInvoiceType = pData[3];
                            var pSafe = pData[4];
                            var pVessel = pData[5];
                            ShipLinkInvoicePosting_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slVoyageAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slInvoiceType", pInvoiceType, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slSafe", pSafe, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slVessel", pVessel, null);
                            if ($("#hf_CanEdit").val() == 1)
                                $("#btn-Post").removeClass("hide");
                            if ($("#hDefaultUnEditableCompanyName").val() == "ONE" || $("#hDefaultUnEditableCompanyName").val() == "KDS") {
                                $("#btn-Post").attr("onclick", "ShipLinkInvoicePosting_LinkRevenueItems();");
                            }
                            else {
                                $("#btn-Post").attr("onclick", "ShipLinkInvoicePosting_Post(false);");
                            }
                        });
                });
                if ($("#hDefaultUnEditableCompanyName").val() != "ONE")
                    $("#txtSearchFrom").val(pFormattedTodaysDate);
                else
                    $("#txtSearchFrom").val(pFormattedTodaysDate);
                // $("#txtSearchFrom").val("01/01/2000");


                $("#txtSearchTo").val(pFormattedTodaysDate);
                $("#txtJVDate").val(pFormattedTodaysDate);
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkInvoicePosting_Save(); },
                function () { ShipLinkInvoicePosting_DeleteList(); });
            break;
        }
        case "ShipLinkInvoiceUnposting": {
            debugger;
            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkInvoiceUnposting_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkInvoiceUnposting/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE JVDate >= '2000/01/01' AND JVDate<='" + GetDateWithFormatyyyyMMdd(pFormattedTodaysDate) + " 23:59:59'";
            var pOrderBy = "ID";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkInvoiceUnposting", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkInvoiceUnposting.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pInvoiceType = pData[2];
                            ShipLinkInvoiceUnposting_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, 2, TranslateString("<--Select-->"), "slInvoiceType", pInvoiceType, null);
                            if ($("#hf_CanEdit").val() == 1)
                                $("#btn-Unpost").removeClass("hide");
                        });
                });
                $("#txtSearchFrom").val("01/01/2000");
                $("#txtSearchTo").val(pFormattedTodaysDate);
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkInvoiceUnposting_Save(); },
                function () { ShipLinkInvoiceUnposting_DeleteList(); });
            break;
        }

        case "ShipLinkInvoiceTypeToJournal": {
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkInvoiceTypeToJournal_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkInvoiceTypeToJournal/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "InvoiceTypeName, JournalTypeName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkInvoiceTypeToJournal", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkInvoiceTypeToJournal.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pJournalTypes = pData[3];
                            var pJVTypes = pData[4];
                            var pInvoiceTypes = pData[5];
                            var pLines = pData[6];


                            ShipLinkInvoiceTypeToJournal_BindTableRows(JSON.parse(pData[0]));
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, "<--Select-->", "slAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slJournalType", pJournalTypes, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slJVType", pJVTypes, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slInvoiceType", pInvoiceTypes, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slLine", pLines, null);


                            if ($("#hDefaultUnEditableCompanyName").val() == "ONE" || $("#hDefaultUnEditableCompanyName").val() == "KDS") {
                                $("#thLine").addClass("hide");
                                $("#thSubAccount").addClass("hide");
                                $("#slSubAccount").addClass("hide");
                                $("#slLine").addClass("hide");
                                $("#lblLine").addClass("hide");
                                $("#lblSubAccount").addClass("hide");
                                $('#slLine').attr("data-required", "false");

                                $("#thJournalType").removeClass("hide");
                                $("#JournalTypeName").removeClass("hide")
                                $("#slJournalType").removeClass("hide")
                                $('#lblJournalType').attr("data-required", "true");

                                $("#thJVType").removeClass("hide");
                                $("#JournalTypeName").removeClass("hide");
                                $("#slJVType").removeClass("hide");
                                $('#lblJVType').attr("data-required", "true");

                            }
                            else {
                                $("#thLine").removeClass("hide");
                                $("#thSubAccount").removeClass("hide");
                                $("#slLine").removeClass("hide");
                                $("#slSubAccount").removeClass("hide");
                                $("#lblLine").removeClass("hide")
                                $("#lblSubAccount").removeClass("hide")
                                $('#slLine').attr("data-required", "true");

                                $("#thJournalType").addClass("hide");
                                $("#JournalTypeName").addClass("hide");
                                $("#slJournalType").addClass("hide");
                                $('#slJournalType').attr("data-required", "false");
                                $("#lblJournalType").addClass("hide");

                                $("#thJVType").addClass("hide");
                                $("#JournalTypeName").addClass("hide");
                                $("#slJVType").addClass("hide");
                                $('#slJVType').attr("data-required", "false");
                                $("#lblJVType").addClass("hide");
                            }


                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkInvoiceTypeToJournal_ClearAllControls(); },
                function () { ShipLinkInvoiceTypeToJournal_DeleteList(); });


            break;
        }
        case "ShipLinkInvoiceTypeToJournalPayment": {
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkInvoiceTypeToJournal_Payment_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkInvoiceTypeToJournal_Payment/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "InvoiceTypeName, JournalTypeName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkInvoiceTypeToJournal_Payment", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkInvoiceTypeToJournal_Payment.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pJournalTypes = pData[3];
                            var pJVTypes = pData[4];
                            var pInvoiceTypes = pData[5];
                            ShipLinkInvoiceTypeToJournal_Payment_BindTableRows(JSON.parse(pData[0]));
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, "<--Select-->", "slAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slJournalType", pJournalTypes, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slJVType", pJVTypes, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slInvoiceType", pInvoiceTypes, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkInvoiceTypeToJournal_Payment_ClearAllControls(); },
                function () { ShipLinkInvoiceTypeToJournal_Payment_DeleteList(); });
            break;
        }
        case "Warehouse":
        //    {
        //    $("#hl-menu-Warehousing").parent().siblings().removeClass("active");
        //    strBindTableRowsFunctionName = "Warehouse_BindTableRows";
        //    strLoadWithPagingFunctionName = "/api/Warehouse/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

        //    var pWhereClause = " WHERE 1=1";
        //    var pOrderBy = "Name";
        //    var pPageNumber = 1;
        //    var pPageSize = 10;
        //    var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        //    LoadView("/Warehousing/MasterData/Warehouse", "div-content", function () {
        //        $.getScript(strServerURL + '/Scripts/Warehousing/MasterData/Warehouse.js?' + glbVersion, function () {
        //            LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
        //                , function (pData) {
        //                    Warehouse_BindTableRows(JSON.parse(pData[0]));
        //                });
        //        });
        //        if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
        //    },
        //        function () { Warehouse_ClearAllControls(); },
        //        function () { Warehouse_DeleteList(); });
        //    break;
            //}

            {
                $("#hl-menu-Warehousing").parent().siblings().removeClass("active");
                strBindTableRowsFunctionName = "Warehouse_BindTableRows";
                strLoadWithPagingFunctionName = "/api/Warehouse/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

                var pWhereClause = " WHERE 1=1";
                var pOrderBy = "Name";
                var pPageNumber = 1;
                var pPageSize = 10;
                var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                LoadView("/Warehousing/MasterData/Warehouse", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/Warehousing/MasterData/Warehouse.js?' + glbVersion, function () {
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                var pMainWarehouse = pData[2];
                                Warehouse_BindTableRows(JSON.parse(pData[0]));
                                FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slMainWarehouse", pMainWarehouse, null);
                            });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { Warehouse_ClearAllControls(); },
                    function () { Warehouse_DeleteList(); });
                break;
            }
        
        case "MainWarehouse": {
            $("#hl-menu-Warehousing").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "MainWarehouse_BindTableRows";
            strLoadWithPagingFunctionName = "/api/MainWarehouse/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Warehousing/MasterData/MainWarehouse", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Warehousing/MasterData/MainWarehouse.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            MainWarehouse_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { MainWarehouse_ClearAllControls(); },
                function () { MainWarehouse_DeleteList(); });
            break;
        }

        case "WarehouseNotes": {
            $("#hl-menu-Warehousing").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "WarehouseNotes_BindTableRows";
            strLoadWithPagingFunctionName = "/api/WarehouseNotes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Warehousing/MasterData/WarehouseNotes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Warehousing/MasterData/WarehouseNotes.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            WarehouseNotes_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { WarehouseNotes_ClearAllControls(); },
                function () { WarehouseNotes_DeleteList(); });
            break;
        }
        case "WarehousingChargeTypes": {

            strLoadWithPagingFunctionName = "/api/WarehousingChargeTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/Warehousing/MasterData/WarehousingChargeTypes", "div-content", function () {

                $.getScript(strServerURL + '/Scripts/Warehousing/MasterData/WarehousingChargeTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { WarehousingChargeTypes_BindTableRows(pTabelRows); });
                });
                if (IsAccountingActive)
                    $(".classAccountingOption").removeClass("hide");
                else
                    $(".classAccountingOption").addClass("hide");
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE IsMain=0", pOrderBy: "Name,Code" }
                    , function (pData) {
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slRevenueAccount", pData[0]
                            , function () { $("#slExpenseAccount").html($("#slRevenueAccount").html()) });
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slRevenueCostCenter", pData[2]
                            , function () { $("#slExpenseCostCenter").html($("#slRevenueCostCenter").html()) });
                        $("#slRevenueSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                        $("#slExpenseSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                    }
                    , null);
            },
                function () { WarehousingChargeTypes_ClearAllControls(); },
                function () { WarehousingChargeTypes_DeleteList(); });
            break;
        }

        case "Area": {
            $("#hl-menu-Warehousing").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Area_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Area/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Warehousing/MasterData/Area", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Warehousing/MasterData/Area.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pWarehouse = pData[2];
                            var pWeightUnit = pData[3];
                            var pVolumeUnit = pData[4];
                            Area_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 2, null/*pStrFirstRow*/, "slWarehouse", pWarehouse, null);
                            FillListFromObject(pDefaults.WeightUnitID, 1, null/*pStrFirstRow*/, "slWeightUnit", pWeightUnit, null);
                            FillListFromObject(pDefaults.VolumeUnitID, 1, null/*pStrFirstRow*/, "slVolumeUnit", pVolumeUnit, null);
                            });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Area_ClearAllControls(); },
                function () { Area_DeleteList(); });
            break;
        }
        
        case "Row": {
            $("#hl-menu-Warehousing").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Row_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Row/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Warehousing/MasterData/Row", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Warehousing/MasterData/Row.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pWarehouse = pData[2];
                            var pWeightUnit = pData[3];
                            var pVolumeUnit = pData[4];
                            var pLocationStatus = pData[5];
                            var pLocationPickupMethod = pData[6];
                            var pArea = pData[7];
                            Row_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 2, null/*pStrFirstRow*/, "slWarehouse", pWarehouse, null);
                            FillListFromObject(pDefaults.WeightUnitID, 1, null/*pStrFirstRow*/, "slWeightUnit", pWeightUnit
                                , function() { $("#slRowLocationWeightUnit").html($("#slWeightUnit").html()); });
                            FillListFromObject(pDefaults.VolumeUnitID, 1, null/*pStrFirstRow*/, "slVolumeUnit", pVolumeUnit
                                , function() { $("#slRowLocationVolumeUnit").html($("#slVolumeUnit").html()); });
                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slLocationStatus", pLocationStatus
                                , function() { $("#slRowLocationStatus").html($("#slLocationStatus").html()); });
                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slPickupMethod", pLocationPickupMethod
                                , function() { $("#slRowLocationPickupMethod").html($("#slPickupMethod").html()); });
                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slArea", pArea, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Row_ClearAllControls(); },
                function () { Row_DeleteList(); });
            break;
        }
        
        case "WarehousingContract": {
            $("#hl-menu-Warehousing").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Contract_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Contract/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Warehousing/Transactions/Contract", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Warehousing/Transactions/Contract.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pStorageUnit = pData[2];
                            var pWarehouse = pData[3];
                            var pChargeType=pData[4];
                            var pContractDetailsQuantityUnit=pData[5];
                            var pContractDetailsType=pData[6];
                            Contract_BindTableRows(JSON.parse(pData[0]));
                            $("#slCustomer").html($("#hReadySlCustomers").html());
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject(null, 1, "<--Select-->", "slStorageUnit", pStorageUnit, null);
                            FillListFromObject(null, 2, null/*pStrFirstRow*/, "slWarehouse", pWarehouse, null);
                            FillListFromObject(null, 2, null/*pStrFirstRow*/, "slContractDetailsChargeType", pChargeType, null);
                            FillListFromObject(null, 2, null/*pStrFirstRow*/, "slContractDetailsQuantityUnit", pContractDetailsQuantityUnit, null);
                            FillListFromObject(null, 2, null/*pStrFirstRow*/, "slContractDetailsType", pContractDetailsType, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Contract_ClearAllControls(); },
                function () { Contract_DeleteList(); });
            break;
        }
            
        case "ReceiveProduct": {
            $("#hl-menu-Warehousing").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Receive_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Receive/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Warehousing/Transactions/Receive", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Warehousing/Transactions/Receive.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pWarehouse = pData[2];
                            var pPurchaseItem = pData[3];
                            var pReceiveDetailsStatus = pData[4];
                            FillListFromObject(null, 2, null/*pStrFirstRow*/, "slWarehouse", pWarehouse, null);
                            FillListFromObject(null, 9, "<--Select-->", "slReceiveDetailsPurchaseItem", pPurchaseItem, null);
                            FillListFromObject(null, 2, null/*pStrFirstRow*/, "slReceiveDetailsStatus", pReceiveDetailsStatus, null);
                            $("#slCustomer").html($("#hReadySlCustomers").html());
                            Receive_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                //if (pDefaults.UnEditableCompanyName == "IST")
                //    $(".classShowForIST").removeClass("hide");
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Receive_ClearAllControls(); },
                function () { Receive_DeleteList(); });
            break;
        }
        
        case "WarehousingPickup": {
            $("#hl-menu-Warehousing").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Pickup_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Pickup/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Warehousing/Transactions/Pickup", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Warehousing/Transactions/Pickup.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pWarehouse = pData[2];
                            var pCustomer = pData[3];
                            var pOperation = pData[4];
                            FillListFromObject(null, 2, null/*pStrFirstRow*/, "slWarehouse", pWarehouse, null);
                            //FillListFromObject(null, 9, "<--Select-->", "slPickupDetailsPurchaseItem", pPurchaseItem, null);
                            FillListFromObject(null, 2, "<--Select-->", "slCustomer", pCustomer, function(){$("#slCustomerForClearWithItems").html($("#slCustomer").html());});
                            FillListFromObject(null, 1, "<--Select-->"/*pStrFirstRow*/, "slOperation", pOperation, null);
                            //$("#slCustomer").html($("#hReadySlCustomers").html());
                            $("#slBillTo").html($("#hReadySlCustomers").html());
                            $("#slEndUser").html($("#hReadySlCustomers").html());
                            Pickup_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Pickup_ClearAllControls(); },
                function () { Pickup_DeleteList(); });
            break;
        }
        
        case "WarehousingInvoice": {
            $("#hl-menu-Warehousing").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "WHInvoice_BindTableRows";
            strLoadWithPagingFunctionName = "/api/WHInvoice/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            //var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Warehousing/Transactions/WHInvoice", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Warehousing/Transactions/WHInvoice.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pWarehouse = pData[2];
                            var pCustomer = pData[3];
                            var pChargeType = pData[4];
                            FillListFromObject(null, 2, null/*pStrFirstRow*/, "slWarehouse", pWarehouse, function () { $("#slFilterWarehouse").html($("#slWarehouse").html()); });
                            FillListFromObject(null, 2, "<--Select-->", "slCustomer", pCustomer, function () { $("#slFilterCustomer").html($("#slCustomer").html()); });
                            FillListFromObject(null, 2, "<--Select-->"/*pStrFirstRow*/, "slWHInvoiceDetailsChargeType", pChargeType, null);
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            //$("#txtFilterFromInvoiceDate").val("01/01/2000");
                            //$("#txtFilterToInvoiceDate").val(pFormattedTodaysDate);
                            //$("#slCustomer").html($("#hReadySlCustomers").html());
                            WHInvoice_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { WHInvoice_ClearAllControls(); },
                function () { WHInvoice_DeleteList(); });
            break;
        }
        
        case "Inventory": {
            $("#hl-menu-Warehousing").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Inventory_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Inventory/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = "WHERE AvailableQuantity IS NOT NULL AND AvailableQuantity>0";
            var pOrderBy = pDefaults.UnEditableCompanyName == "DGL" ? "PurchaseItemCode" : "LocationCode,PurchaseItemCode";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Warehousing/Reports/Inventory", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Warehousing/Reports/Inventory.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pWarehouse = pData[2];
                            var pPurchaseItem = pData[3];
                            var pLocation = pData[4];
                            var pCustomer = pData[5];
                            FillListFromObject(null, 2, null/*pStrFirstRow*/, "slFilterWarehouse", pWarehouse, null);
                            FillListFromObject(null, 9, "<--Select-->", "slFilterPurchaseItem", pPurchaseItem, null);
                            FillListFromObject(null, 1, "<--Select-->", "slFilterLocation", pLocation, null);
                            FillListFromObject(null, 2, "<--Select-->", "slFilterCustomer", pCustomer, null);
                            //$("#slFilterCustomer").html($("#hReadySlCustomers").html());
                            Inventory_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Inventory_ClearAllControls(); },
                function () { Inventory_DeleteList(); });
            break;
        }

        case "ProductLog": {
            $("#hl-menu-Warehousing").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ProductLog_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ProductLog/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = "WHERE IsFinalized=1";
            //var pWhereClause = " WHERE 1=1";
            var pOrderBy = "PurchaseItemCode,FinalizeDate";;
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Warehousing/Reports/ProductLog", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Warehousing/Reports/ProductLog.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pWarehouse = pData[2];
                            var pPurchaseItem = pData[3];
                            var pLocation = pData[4];
                            var pCustomer = pData[5];
                            FillListFromObject(null, 2, null/*pStrFirstRow*/, "slFilterWarehouse", pWarehouse, null);
                            FillListFromObject(null, 9, "<--Select-->", "slFilterPurchaseItem", pPurchaseItem, null);
                            FillListFromObject(null, 1, "<--Select-->", "slFilterLocation", pLocation, null);
                            FillListFromObject(null, 2, "<--Select-->", "slFilterCustomer", pCustomer, null);
                            //$("#slFilterCustomer").html($("#hReadySlCustomers").html());
                            ProductLog_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ProductLog_ClearAllControls(); },
                function () { ProductLog_DeleteList(); });
            break;
        }        
        case "StockLedger": {
            debugger;
            FadePageCover(true);
            LoadView("/Warehousing/Reports/StockLedger", "div-content", function () {
                CallGETFunctionWithParameters("/api/StockLedger/GetStockLedgerFilter", null
                    , function (pData) {
                        debugger;
                        var pPurchaseItem = pData[0];
                        ////FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        $("#slCustomer").html($("#hReadySlCustomers").html());
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slNetwork", data[10], null);
                        FillListFromObject(null, 9, TranslateString("SelectFromMenu"), "slPurchaseItem", pPurchaseItem, null);
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Warehousing").parent().addClass("active"); });
                $.getScript(strServerURL + '/Scripts/Warehousing/Reports/StockLedger.js');
            });
            break;
        }

        case "CRM": {
            debugger;  
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 15 ", "CRMBasicData", function () {
                 
                });

            });
            break;
        }
        case "CRMSalesmen": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 15 ", "CRMSalesmen", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        
        case "CRMBasicData": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 15 ", "CRMBasicData", function () {

                });

            });
            break;
        }
        case "CRMClientGroup": {
            debugger;

            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 15 ", "CRMClientGroup", function () {

                });

            });
            break;
        }
        case "CRM_Actions": {

            strLoadWithPagingFunctionName = "/api/CRM_Actions/LoadWithPaging";

            LoadView("/CRM/CRM_Actions", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMBasicData/CRM_Actions.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CRM_Actions_BindTableRows(pTabelRows); });
                });
            },
                function () { CRM_Actions_ClearAllControls(); },
                function () { CRM_Actions_DeleteList(); });
            break;
        }
       
        case "CRM_Sources": {
            strLoadWithPagingFunctionName = "/api/CRM_Sources/LoadWithPaging";
            LoadView("/CRM/CRM_Sources", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMBasicData/CRM_Sources.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CRM_Sources_BindTableRows(pTabelRows); });
                });
            },
                function () { CRM_Sources_ClearAllControls(); },
                function () { CRM_Sources_DeleteList(); });
            break;
        }
        case "CRM_Clients": //(i.e. SalesLeadsFollowup)
        case "CRMSalesLeadsForm":
            {
                glbCallingControl = pControlID;
                strLoadWithPagingFunctionName = "/api/CRM_Clients/LoadWithPaging";
                strBindTableRowsFunctionName = "CRM_Clients_BindTableRows";
                LoadView("/CRM/CRM_Clients", "div-content", function () {
                    CallGETFunctionWithParameters("/api/CRM_Clients/LoadModalData", { pLoadDataDummyParameter: "Dummy"}
                        , function (pData) {
                            debugger;
                            var pCommodity = pData[0];
                            var pContainerType = pData[1];
                            var pActivity = pData[2];
                            var pPaymentTerm = pData[3];
                            var pPipeLineStage = pData[4];
                            var pUser = pData[5];
                            var pCountries = pData[6];
                            FillListFromObject(null, 2, "<--Select-->", "slCommodity", pCommodity, null);
                            FillListFromObject(null, 1, "<--Select-->", "slContainerType", pContainerType, null);
                            FillListFromObject(null, 2, "<--Select-->", "slActivity", pActivity, null);
                            FillListFromObject(null, 19, "<--Select-->", "slPipeLineStage", pPipeLineStage, null);
                            FillListFromObject(null, 19, "<--Select-->", "slPipeLineStageProfitValue", pPipeLineStage, null);
                            
                            FillListFromObject(null, 2, "<--Select-->", "slPaymentTerm", pPaymentTerm, null);
                            FillListFromObject(null, 2, "<--Select-->", "slPorts", pData[7], null);
                            FillListFromObject(null, 2, "<--Select-->", "slFollowUpSalesRep", pUser, function () { $("#slFollowUpSalesRep2").html($("#slFollowUpSalesRep").html()) });
                            FillListFromObject(null, 2, "<--Select-->", "slFromCountry", pCountries, function () { $("#slToCountry").html($("#slFromCountry").html());  $("#slCountryServices").html($("#slFromCountry").html())  });
                            FillListFromObject(null, 1, "<--Select-->", "slCurrencyProfitValue", pData[8], null);
                            FillListFromObject(null, 2, "<--Select-->", "slPaymentTermProfitValue", pPaymentTerm, null);
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slCurrency").val($("#hDefaultCurrencyID").val());
                            $("#txtStartingDate").val(getTodaysDateInddMMyyyyFormat());
                            $("#txtClosingExpectedDate").val(getTodaysDateInddMMyyyyFormat());
                        } 
                        , null);
                    LoadView("/MasterData/ModalCheckboxesList", "div-content", null, null, null, true);
                    if (pControlID == "CRMSalesLeadsForm") {
                        $("#liGroupName").text("Basic Data");
                        $("#liGroupName").attr("onclick", "LoadViews('CRM')");
                        $("#liTabName").text("Sales Leads");
                        $("#liTabName").attr("onclick", "LoadViews('CRM')");
                        $("#liFormName").text("Sales Leads");
                        $("#h3Label").text("Sales Leads");
                        $("#stepsFollowups").attr("style", "display:none;");
                    }
                    else { //CRM_Clients (i.e. SalesLeadsFollowup)
                        $("#liGroupName").text("CRM");
                        $("#liGroupName").attr("onclick", "LoadViews('CRMClientGroup')");
                        $("#liTabName").text("Follow-up");
                        $("#liTabName").attr("onclick", "LoadViews('CRMClientGroup')");
                        $("#liFormName").text("Sales leads follow up");
                        $("#h3Label").text("Follow-up Sales Leads");
                    }
                    $.getScript(strServerURL + '/Scripts/CRM/CRMClientGroup/CRM_Clients.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        //LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CRM_Clients_BindTableRows(pTabelRows); });


                        var pWhereClause = 'Where 1 = 1';
                        var pOrderBy = " ID DESC ";
                        var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: pWhereClause }
                        LoadWithPagingWithWhereClauseAndOrderBy("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "api/vwCRM_Clients/LoadWithPagingWithWhereClause", pWhereClause, 'Name', 1, 10
                            , function (pData) {
                                //  console.log(pData[0]);
                                CRM_Clients_BindTableRows(JSON.parse(pData[0]));

                            });


                    });
                },
                    function () { CRM_Clients_ClearAllControls(); },
                    function () { CRM_Clients_DeleteList(); });
                break;
            }
        case "SetubSalesLead": {
            $("#hl-menu-SetubSalesLeads").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "SetubSalesLead_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CRM_Clients/Complaint_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            debugger;
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/CRM_SetubSalesLead", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMBasicData/CRM_SetubSalesLead.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                          
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { SetubSalesLead_ClearAllControls(); },
                function () { SetubSalesLead_DeleteList(); });
            break;
        }
        case "Complaints": {
            $("#hl-menu-Complaints").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Complaint_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CRM_Clients/Complaint_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            debugger;
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/CRM_Complaint", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMClientGroup/CRM_Complaint.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pUserList = pData[2];
                            FillListFromObject(null, 2, "<--Select-->", "slComplaintDetailsSalesRep", pUserList, function () { $("#slComplaintDetailsSalesRep2").html($("#slComplaintDetailsSalesRep").html()) });
                            Complaint_BindTableRows(JSON.parse(pData[0]));
                            $("#slCustomer").html($("#hReadySlCustomers").html());
                            Fill_SelectInputAfterLoadData(pData[3], 'ID', 'Name', 'select status', '#slStatus', '');
                            Fill_SelectInputAfterLoadData(pData[3], 'ID', 'Name', 'select status', '#slStatusDetails', '');

                            $("#slComplaintDetailsSalesRep2").html($("#slComplaintDetailsSalesRep").html());
                            //FillListFromObject(null, 1, "<--Select-->", "slCustomer", pCustomerList, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Complaint_ClearAllControls(); },
                function () { Complaint_DeleteList(); });
            break;
        }
        case "CRMprivilege": {
            $("#hl-menu-Complaints").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CRMprivilege_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CRMprivilege/IntializeData";
            debugger;
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/CRMprivilege", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMClientGroup/CRMprivilege.js?' + glbVersion, function () {
                    CallGETFunctionWithParameters("/api/CRMprivilege/LoadAll", { pWhereClause:" Where 1=1"}
                  , function (pData) { //if i need filters then Re-Enable what i need
                      CRMprivilege_BindTableRows(JSON.parse(pData[0]));
                      BindUsers();
                  }
                  , function () { FadePageCover(false); $("#hl-menu-CRM").parent().addClass("active"); });

                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { },
                function () { });
            break;
        }
        case "CRM_PipeLineStage": {
            debugger;
            $("#hl-menu-Complaints").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CRM_PipeLineStage_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CRM_PipeLineStage/IntializeData";
            debugger;
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/CRM_PipeLineStage", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMClientGroup/CRM_PipeLineStage.js?' + glbVersion, function () {

                    strLoadWithPagingFunctionName = "/api/CRM_PipeLineStage/LoadWithPaging";
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 1, 10,
                        function (pTabelRows)
                        {
                            CRM_PipeLineStage_BindTableRows(pTabelRows);
                        });

                    CallGETFunctionWithParameters("/api/CRM_PipeLineStage/LoadAll", { pWhereClause: " Where 1=1" }
                  , function (pData) { //if i need filters then Re-Enable what i need
                      //CRM_PipeLineStage_BindTableRows(JSON.parse(pData[0]));
                      //BindUsers();
                  }
                  , function () { FadePageCover(false); $("#hl-menu-CRM").parent().addClass("active"); });

                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { },
                function () { });
            break;
        }
        case "CRM_activitiesLog": {
            debugger;
            $("#hl-menu-Complaints").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CRM_activitiesLog_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CRM_activitiesLog/IntializeData";
            debugger;
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/CRM_activitiesLog", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMClientGroup/CRM_activitiesLog.js?' + glbVersion, function () {

                    strLoadWithPagingFunctionName = "/api/CRM_activitiesLog/LoadWithPaging";
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 1, 10,
                        function (pTabelRows) {
                            CRM_activitiesLog_BindTableRows(pTabelRows);
                        });

                    CallGETFunctionWithParameters("/api/CRM_activitiesLog/LoadAll", { pWhereClause: " Where 1=1" }
                  , function (pData) { //if i need filters then Re-Enable what i need
                      //CRM_activitiesLog_BindTableRows(JSON.parse(pData[0]));
                      //BindUsers();
                  }
                  , function () { FadePageCover(false); $("#hl-menu-CRM").parent().addClass("active"); });

                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { },
                function () { });
            break;
        }
        case "CRMSalesMen": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 15 ", "CRMSalesMen", function () {
                });
            });
            break;
        }
            //  CRM / CRMSalesMen / CRM_SalesMenTarget
        case "CRM_SalesMenTarget": {
            strLoadWithPagingFunctionName = "/api/vwCRM_SalesMenTarget/LoadWithPaging";
            LoadView("/CRM/CRM_SalesMenTarget", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMSalesMen/CRM_SalesMenTarget.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    //LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CRM_Clients_BindTableRows(pTabelRows); });
                    var pWhereClause = "Where 1=1";
                    var pOrderBy = "ID DESC";
                    var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: pWhereClause }
                    LoadWithPagingWithWhereClauseAndOrderBy("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "api/vwCRM_SalesMenTarget/LoadWithPagingWithWhereClause", pWhereClause, 'ID', 1, 10
                        , function (pData) {
                            //  console.log(pData[0]);
                            CRM_SalesMenTarget_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 2, "Select Action", "hidden_slActions", pData[2], null);
                        });
                });
            },
                function () { CRM_SalesMenTarget_ClearAllControls(); },
                function () { CRM_SalesMenTarget_DeleteList(); });
            break;
        }
             
        case "SalesmenTargets":
        case "CommissionTarget": {
            $("#hl-menu-CRM").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CommissionTarget_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CommissionTarget/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "TargetYear DESC, SalesmanName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/CommissionTarget", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMSalesMen/CommissionTarget.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var TodaysDate = new Date();
                            var CurrentYear = TodaysDate.getUTCFullYear();
                            var pSalesman = pData[2];
                            var pTargetType = pData[3];
                            FillListFromObject(null, 2, "<--Select-->", "slSalesman", pSalesman, function () { $("#slFilterSalesman").html($("#slSalesman").html()); });
                            FillListFromObject(constTargetTypeByInvoiceFixedAmount, 2, null/*first row*/, "slTargetType", pTargetType, function () { $("#slFilterTargetType").html($("#slTargetType").html()); $("#slFilterTargetType").prepend("<option value=''><--Select--></option>"); $("#slFilterTargetType").val(""); });
                            GetListYears(CurrentYear, null, "slTargetYear", null
                                , function () { $("#slFilterTargetYear").html($("#slTargetYear").html()); $("#slFilterTargetYear").prepend("<option value=''><--Select--></option>"); $("#slFilterTargetYear").val(""); }
                                , parseInt(CurrentYear + 1));
                            //$("#slTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            $("#slFilterFromTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            $("#slFilterToTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            CommissionTarget_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { CommissionTarget_ClearAllControls(); },
                function () { CommissionTarget_DeleteList(); });
            break;
        }

        case "SalesmenCommissions": {
            $("#hl-menu-CRM").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CommissionTarget_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CommissionTarget/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "TargetYear DESC, SalesmanName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/SalesmenCommissions", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMSalesMen/CommissionTarget.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var TodaysDate = new Date();
                            var CurrentYear = TodaysDate.getUTCFullYear();
                            var pSalesman = pData[2];
                            var pTargetType = pData[3];
                            FillListFromObject(null, 2, "<--Select-->", "slFilterSalesman", pSalesman, null);
                            FillListFromObject(constTargetTypeByInvoiceFixedAmount, 2, null/*first row*/, "slFilterTargetType", pTargetType, null);
                            GetListYears(CurrentYear, null, "slFilterTargetYear", null
                                , null
                                , parseInt(CurrentYear + 1));
                            //$("#slTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            $("#slFilterFromTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            $("#slFilterToTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            //CommissionTarget_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            }
            , null //function () { CommissionTarget_ClearAllControls(); }
            , null //function () { CommissionTarget_DeleteList(); }
            );
            break;
        }
        case "CRMReports": {
            debugger;

            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 15 ", "CRMReports", function () {

                });

            });
            break;
        }
        case "ClientFollowUpReport": {
            debugger;
            FadePageCover(true);
            LoadView("/CRM/vwCRM_ClientsFollowReport", "div-content", function () {
                CallGETFunctionWithParameters("/api/vwCRM_ClientsFollowReport/FillFilter", null
                    , function (d) { //if i need filters then Re-Enable what i need
                        Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- All -->', '#slActionType_Search', '');
                        Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- All -->', '#slSource_search', '');
                        Fill_SelectInputAfterLoadData(d[1], 'ID', 'Username', '<-- All -->', '#slSalesRep_search', '');
                        Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', '<-- All -->', '#slCOEnName_search', '');
                    }
                    , function () { FadePageCover(false); $("#hl-menu-CRM").parent().addClass("active"); });
                $.getScript(strServerURL + '/Scripts/CRM/CRMReports/vwCRM_ClientsFollowReport.js');
            });
            break;
        }
        case "ClientFollowUpDashboard": {
            debugger;
            FadePageCover(true);
            LoadView("/CRM/ClientFollowUpDashboard", "div-content", function () {
                CallGETFunctionWithParameters("/api/vwCRM_ClientsFollowUpDashboard/FillFilter", null
                    , function (d) { //if i need filters then Re-Enable what i need
                        Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- All -->', '#slActionType_Search', '');
                        Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- All -->', '#slSource_search', '');
                        Fill_SelectInputAfterLoadData(d[1], 'ID', 'Username', '<-- All -->', '#slSalesRep_search', '');
                        Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', '<-- All -->', '#slCOEnName_search', '');
                        ShowDashboard();
                        if (d[4] == 0)
                        {
                            $('#btn-ShowDashboard').prop('disabled', true);
                            $('#slSalesRep_search').prop('disabled', true);
                        }
                            
                        else
                        {
                            $('#slSalesRep_search').prop('disabled', false);
                            $('#btn-ShowDashboard').prop('disabled', false);
                        }
                            
                    }
                    , function () { FadePageCover(false); $("#hl-menu-CRM").parent().addClass("active"); });
                $.getScript(strServerURL + '/Scripts/CRM/CRMReports/vwCRM_ClientsFollowUpDashboard.js');
            });
            break;
        }
        case "SC": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 16 ", "SC_MasterData", function () {

                });

            });
            break;
        }

        case "SC_MasterData": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 16 ", "SC_MasterData", function () {

                });

            });
            break;
        }
        case "I_ItemsGroups": {
            strBindTableRowsFunctionName = "PurchaseItem_BindTableRows";
            strLoadWithPagingFunctionName = "/api/I_ItemsGroups/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/SC/I_ItemsGroups", "div-content", function () {

                if (pControlID == "PurchaseItem") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Invoicing')");
                    $("#liTabName").text("Invoicing");
                    $("#liTabName").attr("onclick", "LoadViews('Invoicing')");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                }

                $.getScript(strServerURL + '/Scripts/SC/SC_MasterData/I_ItemsGroups.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    $("#slCurrency").html($("#hReadySlCurrencies").html());
                    LoadWithPagingWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 1, 2000
                        , function (pData) {
                            var pLengthUnit = pData[2];
                            var pWeightUnit = pData[3];
                            var pVolumeUnit = pData[4];
                            var pCommodity = pData[5];
                            var pPackageType = pData[6];
                            var pIMOClass = pData[7];
                            var pWH_Area = pData[8];
                            var ItemsType = pData[9];
                            var ItemsGroup = pData[10];

                            Fill_SelectInputAfterLoadData(ItemsType, "ID", "Name", "Select Item Type", "#slItemType", '');
                            Fill_SelectInputAfterLoadData(ItemsGroup, "ID", "Name", "Select Item Group", "#slItemGroup", '');

                            FillListFromObject(pDefaults.LengthUnitID, 1, null/*pStrFirstRow*/, "slLengthUnit", pLengthUnit, null);
                            FillListFromObject(pDefaults.WeightUnitID, 1, null/*pStrFirstRow*/, "slWeightUnit", pWeightUnit, null);
                            FillListFromObject(pDefaults.VolumeUnitID, 1, null/*pStrFirstRow*/, "slVolumeUnit", pVolumeUnit, null);
                            FillListFromObject(null, 2, "<--Select-->", "slCommodity", pCommodity, null);
                            FillListFromObject(null, 2, "<--Select-->", "slPackageType", pPackageType
                                , function () { $("#slPackageTypeBarCode").html($("#slPackageType").html()); $("#slToPackageType").html($("#slPackageType").html()); $("#slFromPackageType").html($("#slPackageType").html()); });
                            FillListFromObject(null, 9, "<--Select-->", "slIMOClass", pIMOClass, null);
                            FillListFromObject(null, 2, "<--Select-->", "slPreferredArea", pWH_Area, null);
                            console.log(JSON.parse(pData[0]))
                            console.log(ConvertDataToTree(JSON.parse(pData[0])))
                            DrawTree(JSON.parse(pData[0]))
                           
                            //************************* Tree ****************************
                            //var FT = $.ui.fancytree;

                            //// attach to instance 1 and 3
                            //$("#tree1, #tree3").fancytree({
                            //    checkbox: true,
                            //    selectMode: 1,
                            //    activate: function (event, data) {
                            //        var node = data.node;
                            //        FT.debug("activate: event=", event, ", data=", data);
                            //        if (!$.isEmptyObject(node.data)) {
                            //            alert("custom node data: " + JSON.stringify(node.data));
                            //        }
                            //    },
                            //    lazyLoad: function (event, data) {
                            //        // we can't `return` values from an event handler, so we
                            //        // pass the result as `data.result` attribute:
                            //        data.result = { url: "ajax-sub2.json" };
                            //    }
                            //    // }).on("fancytreeactivate", function(event, data){
                            //    //   $.ui.fancytree.debug("fancytreeactivate: event=", event, ", data=", data);
                            //    //   return false;
                            //});
                         
                            //**********************************************************************

                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { PurchaseItem_ClearAllControls(); },
                function () { PurchaseItem_DeleteList(); });
            break;
        }
        case "StoresAccounts":
            {
                strLoadWithPagingFunctionName = "/api/SC_Stores/LoadWithPaging";
                LoadView("/SC/StoresAccounts", "div-content", function () {
                 
                    $.getScript(strServerURL + '/Scripts/SC/SC_MasterData/StoresAccounts.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Stores/IntializeData",
                            data: { pStoresNamesOnly: "false" },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#slStoreAccountID', '');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Sales Account -->', '#slSalesAccountID', '');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select operation Account -->', '#slOperationAccountID', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'CostCenterName', '<-- select cost center -->', '#slCostCenterID', '');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'StoreName', '<-- select store name -->', '#hidden_slstoresnames', '');

                                //hidden_slstoresnames

                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Stores_ClearAllControls(); },
                    function () { SC_Stores_DeleteList(); });
                break;
              
            }

        case "SC_Transactions": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 16 ", "SC_Transactions", function () {

                });

            });
            break;
        }


        case "GoodReceiptNotes":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/GoodReceiptNotes", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/GoodReceiptNotes.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 10 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Transactions/FillInvoicesAndRelatedData",
                            data: { pTransactionTypeID: "10", pID: null, IsForwarding_Invoice: false },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                //IntializeData()
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '');
                                Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNo', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- SELECT UNIT -->', '#hidden_slUnits', '');
                                //Fill_SelectInputAfterLoadData(d[2], 'ID', 'StoreName', '<-- select store name -->', '#hidden_slstoresnames', '');
                                // $('#txtFromDate_Filter').val(getTodaysDateInddMMyyyyFormat());
                                // $('#txtToDate_Filter').val(getTodaysDateInddMMyyyyFormat());

                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "MaterialIssueVouchers":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/MaterialIssueVouchers", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/MaterialIssueVouchers.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 20 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "20", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'InvoiceNo', '<-- select Sales Invoice -->', '#slInvoices', '');
                                //Fill_SelectInputAfterLoadData(d[2], 'ID', 'StoreName', '<-- select store name -->', '#hidden_slstoresnames', '');
                                // $('#txtFromDate_Filter').val(getTodaysDateInddMMyyyyFormat());
                                // $('#txtToDate_Filter').val(getTodaysDateInddMMyyyyFormat());
                                Fill_SelectInputAfterLoadData(d[5], 'ID', 'Name', '<-- SELECT UNIT -->', '#hidden_slUnits', '');
                                Fill_SelectInputAfterLoadData(d[7], 'ID', 'CostCenterName', '<-- SELECT Cost Center -->', '#slCostCenter', '');
                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "SC_ItemCard": {
            debugger;
          
            LoadView("/SC/SC_ItemCard", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SC/SC_Reports/SC_ItemCard.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SC_Reports/FillFilter"
                            , {}
                            , function (pData) {
                                $("#hl-menu-SC").parent().addClass("active");
                               // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pStores = pData[0];
                                var pItems = pData[1];
                               // var pCostCenter = pData[2];
                                FillDivWithCheckboxes_DynamicFiled("divCbStores", pStores, "nameCbStores","StoreName", null);
                                FillDivWithCheckboxes_DynamicFiled("divCbItems", pItems, "nameCbItems", "Name", null);
                             //   FillDivWithCheckboxes("divCbJournalType", pJournalType, "nameCbJournalType", 5, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                //if ($("#hDefaultUnEditableCompanyName").val() == "ONE")
                                //    $("#secJournalType").removeClass("hide");
                                //else {
                                //    $("#cbCheckAllJournalTypes").prop("checked", true);
                                //    $("#secJournalType").addClass("hide");
                                //}
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }



        case "SC_ItemsCardQty": {
            debugger;

            LoadView("/SC/SC_ItemsCardQty", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SC/SC_Reports/SC_ItemCardQty.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SC_Reports/FillFilter"
                            , {}
                            , function (pData) {
                                $("#hl-menu-SC").parent().addClass("active");
                                // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pStores = pData[0];
                                var pItems = pData[1];
                                // var pCostCenter = pData[2];
                                FillDivWithCheckboxes_DynamicFiled("divCbStores", pStores, "nameCbStores", "StoreName", null);
                                FillDivWithCheckboxes_DynamicFiled("divCbItems", pItems, "nameCbItems", "Name", null);
                                //   FillDivWithCheckboxes("divCbJournalType", pJournalType, "nameCbJournalType", 5, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                //if ($("#hDefaultUnEditableCompanyName").val() == "ONE")
                                //    $("#secJournalType").removeClass("hide");
                                //else {
                                //    $("#cbCheckAllJournalTypes").prop("checked", true);
                                //    $("#secJournalType").addClass("hide");
                                //}
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }

        case "SC_GoodsReceiptNotesFollowUp": {
            debugger;

            LoadView("/SC/SC_GoodsReceiptNotesFollowUp", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SC/SC_Reports/SC_GoodsReceiptNotesFollowUp.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SC_Reports/FillFilter"
                            , {}
                            , function (pData) {
                                $("#hl-menu-SC").parent().addClass("active");
                                // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pStores = pData[0];
                                var pItems = pData[1];
                              //  var pCostCenters = pData[2]; // CostCenterName
                              //  var pCustomers = pData[3];
                                var pSuppliers = pData[4];
                                // var pCostCenter = pData[2];
                                FillDivWithCheckboxes_DynamicFiled("divCbStores", pStores, "nameCbStores", "StoreName", null);
                                FillDivWithCheckboxes_DynamicFiled("divCbItems", pItems, "nameCbItems", "Name", null);
                                FillDivWithCheckboxes_DynamicFiled("divCbSuppliers", pSuppliers, "nameCbSuppliers", "Name", null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //}
                                FadePageCover(false);
                            }
                            , null);
                    });
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }


        case "SC_StockBalance": {
            debugger;
        
            LoadView("/SC/SC_StockBalance", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SC/SC_Reports/SC_StockBalance.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SC_Reports/FillFilter"
                            , {}
                            , function (pData)
                            {
                                $("#hl-menu-SC").parent().addClass("active");
                                // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pStores = pData[0];
                                var pItems = pData[1];
                                // var pCostCenter = pData[2];
                                FillDivWithCheckboxes_DynamicFiled("divCbStores", pStores, "nameCbStores", "StoreName", null);
                                FillDivWithCheckboxes_DynamicFiled("divCbItems", pItems, "nameCbItems", "Name", null);
                                //   FillDivWithCheckboxes("divCbJournalType", pJournalType, "nameCbJournalType", 5, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                //if ($("#hDefaultUnEditableCompanyName").val() == "ONE")
                                //    $("#secJournalType").removeClass("hide");
                                //else {
                                //    $("#cbCheckAllJournalTypes").prop("checked", true);
                                //    $("#secJournalType").addClass("hide");
                                //}
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SC_Approving": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 16 ", "SC_Approving", function () {

                });

            });
            break;
        }


        case "SC_ApproveTransaction":
            {
                strLoadWithPagingFunctionName = "/api/SC_Approving/LoadWithWhereClause";
                LoadView("/SC/SC_ApproveTransaction", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Approving/SC_ApproveTransaction.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where isnull(JV_ID,0) <> 1   AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_ApproveTransaction_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                // Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- select Items -->', '#slItems', '');
                                Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'Name', '<-- select Trans. Types -->', '#slTransactionsTypes', '', false);
                                Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                //  Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () {/* SC_Transactions_DeleteList();*/ });
                break;

            }
        case "SC_UnApproveTransaction":
            {
                strLoadWithPagingFunctionName = "/api/SC_Approving/LoadWithWhereClause";
                LoadView("/SC/SC_UnApproveTransaction", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Approving/SC_UnApproveTransaction.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where isnull(JV_ID,0) <> 1   AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_ApproveTransaction_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                //  Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- select Items -->', '#slItems', '');
                                Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'Name', '<-- select Trans. Types -->', '#slTransactionsTypes', '', false);
                                Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                // Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () {/* SC_Transactions_DeleteList();*/ });
                break;
            }


        case "SC_Inventory":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_Inventory", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_Inventory.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 100 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "20", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                               // Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '' );
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                Fill_SelectInputAfterLoadData(d[5], 'ID', 'Name', '<-- SELECT UNIT -->', '#hidden_slUnits', '');
                                Fill_SelectInputAfterLoadData(d[7], 'ID', 'CostCenterName', '<-- SELECT Cost Center -->', '#slCostCenter', '');
                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });


                        $("#txtDate").datepicker().on('changeDate'
                            , function () {
                                $(this).datepicker('hide');
                                CalcQtyAndAveragePrice(false);

                            });
                        $("#txtDate").datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });


                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }

        case "SC_Settlement":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_Settlement", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_Settlement.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 110 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "20", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                             //   Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '');
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                Fill_SelectInputAfterLoadData(d[5], 'ID', 'Name', '<-- SELECT UNIT -->', '#hidden_slUnits', '');
                                Fill_SelectInputAfterLoadData(d[7], 'ID', 'CostCenterName', '<-- SELECT Cost Center -->', '#slCostCenter', '');
                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });


                        $("#txtDate").datepicker().on('changeDate'
                            , function () {
                                $(this).datepicker('hide');
                                CalcQtyAndAveragePrice(false);

                            });
                        $("#txtDate").datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });


                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }

        case "PS_Reports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 30 ", "PS_Reports", function () {
                });
            });
            break;
        }
        case "PS_SupplierAccountStatementReport": {
            debugger;
            strBindTableRowsFunctionName = "TrialBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/PS_SupplierAccountStatementReport/LoadRows";
            LoadView("/Purchasing/PS_SupplierAccountStatementReport", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/PS/PS_Reports/PS_SupplierAccountStatementReport.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/PS_SupplierAccountStatementReport/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                var pAccount = pData[0];
                                var pMainAccount = pData[1];
                                var pCurrency = pData[2];

                                FillDivWithCheckboxes("divCbAccount", pAccount, "nameCbAccount", 5/*NameAndCode*/, null);
                                //FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                //  FillDivWithCheckboxesJob("divCbJob", pJob, "nameCbJob", 6, null);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccountsGroup", pMainAccount, null);
                                Fill_SelectInputAfterLoadData(pCurrency, 'ID', 'Code', TranslateString("SelectFromMenu"), '#slCurrency', '');
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SC_Reports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 16 ", "SC_Reports", function () {
                });
            });
            break;
        }

        case "SC_TransactionsGroup":
            {
                debugger;
                LoadView("/Home/Groups", "div-content", function () {
                    FillGroups(" where ParentGroupID = 16 ", "SC_TransactionsGroup", function () {
                    });
                });
                break;
            }            
        case "SL_Reports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 25 ", "SL_Reports", function () {
                });
            });
            break;
        }
        case "PS_Approving": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 30 ", "PS_Approving", function () {
                });
            });
            break;
        }
        case "SL_Approving": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 25 ", "SL_Approving", function () {
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            });
            break;
        }

        case "SC_OpeningBalance":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_OpeningBalance", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_OpeningBalance.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 30 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "30", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                
                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');
                                //hidden_slUnits
                                // Fill_SelectInputAfterLoadData(d[4], 'ID', 'InvoiceNo', '<-- select Sales Invoice -->', '#slInvoices', '');
                                //Fill_SelectInputAfterLoadData(d[2], 'ID', 'StoreName', '<-- select store name -->', '#hidden_slstoresnames', '');
                                // $('#txtFromDate_Filter').val(getTodaysDateInddMMyyyyFormat());
                                // $('#txtToDate_Filter').val(getTodaysDateInddMMyyyyFormat());

                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "SC_ExminationOrders":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_ExminationOrders", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_ExminationOrders.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 60 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "60", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                // Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');
                                //hidden_slUnits
                                // Fill_SelectInputAfterLoadData(d[4], 'ID', 'InvoiceNo', '<-- select Sales Invoice -->', '#slInvoices', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', '<-- select supplier -->', '#slSuppliers', '');
                                // $('#txtFromDate_Filter').val(getTodaysDateInddMMyyyyFormat());
                                // $('#txtToDate_Filter').val(getTodaysDateInddMMyyyyFormat());

                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "SC_ClientReturnsVoucher":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_ClientReturnsVoucher", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_ClientReturnsVoucher.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 40 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "40", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', '<-- select Customer -->', '#slCustomers', '');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');

                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "SC_SupplierReturnsVoucher":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_SupplierReturnsVoucher", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_SupplierReturnsVoucher.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 50 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "50", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', '<-- select Supplier -->', '#slSuppliers', '');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');

                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;
            }
        case "SC_StoresTransferVoucher":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_StoresTransferVoucher", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_StoresTransferVoucher.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 80 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "80", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'StoreName', '<-- select Store -->', '#slFromStore', '', 'IsBrokenStore,CostCenterID');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'StoreName', '<-- select Store -->', '#slToStore', '', 'IsBrokenStore,CostCenterID');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "SC_MaterialIssueRequest":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_MaterialIssueRequest", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_MaterialIssueRequest.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 70 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "70", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slFromStore', '');
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slToStore', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');
                                //hidden_slUnits
                                // Fill_SelectInputAfterLoadData(d[4], 'ID', 'InvoiceNo', '<-- select Sales Invoice -->', '#slInvoices', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', '<-- select Customer -->', '#slCustomers', '');
                                // $('#txtFromDate_Filter').val(getTodaysDateInddMMyyyyFormat());
                                // $('#txtToDate_Filter').val(getTodaysDateInddMMyyyyFormat());

                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }


        case "PR": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 35 ", "PR_MasterData", function () {

                });

            });
            break;
        }
        case "PR_MasterData": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 35 ", "PR_MasterData", function () {

                });

            });
            break;
        }
        case "PR_Stages":
            {
                strLoadWithPagingFunctionName = "/api/PR_Stages/LoadWithPaging";
                LoadView("/PR/PR_Stages", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PR/PR_MasterData/PR_Stages.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { PR_Stages_BindTableRows(pTabelRows); });

                        //$.ajax({
                        //    type: "GET",
                        //    url: strServerURL + "api/SC_Stores/IntializeData",
                        //    data: { pStoresNamesOnly: "false" },
                        //    contentType: "application/json; charset=utf-8",
                        //    dataType: "json",
                        //    success: function (d) {
                        //        Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#slStoreAccountID', '');
                        //        Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Sales Account -->', '#slSalesAccountID', '');
                        //        Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select operation Account -->', '#slOperationAccountID', '');
                        //        Fill_SelectInputAfterLoadData(d[1], 'ID', 'CostCenterName', '<-- select cost center -->', '#slCostCenterID', '');
                        //        Fill_SelectInputAfterLoadData(d[2], 'ID', 'StoreName', '<-- select store name -->', '#hidden_slstoresnames', '');

                        //        //hidden_slstoresnames

                        //        FadePageCover(false);
                        //    },
                        //    error: function (jqXHR, exception) {
                        //        debugger;
                        //        swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                        //        FadePageCover(false);
                        //    }
                        //});
                    });
                },
                    function () { PR_Stages_ClearAllControls(); },
                    function () { PR_Stages_DeleteList(); });
                break;

            }
        case "PR_ProductStages":
            {
                strLoadWithPagingFunctionName = "/api/PR_ProductStages/LoadWithPaging";
                LoadView("/PR/PR_ProductStages", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PR/PR_MasterData/PR_ProductStages.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { PR_ProductStages_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/PR_ProductStages/IntializeData",
                            data: { pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits,Volume');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'StoreName', '<-- select Store -->', '#hidden_slStores', '');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', '<-- select Stages -->', '#hidden_slStages', '');
                                FadePageCover(false);

                                $('#slProductID').css({ 'width': '100%' }).select2();
                                $('#slProductID').trigger("change");
                                $("div[tabindex='-1']").removeAttr('tabindex');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { PR_ProductStages_ClearAllControls(); },
                    function () { PR_ProductStages_DeleteList(); });
                break;

            }
        case "Batches":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/PR/Batches", "div-content", function () {
                    FadePageCover(true);
                    $.getScript(strServerURL + '/Scripts/PR/PR_Transactions/Batches.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        FadePageCover(true);
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 90 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });
                        FadePageCover(true);
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "90", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits,Volume');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'StoreName', '<-- select Store -->', '#slFromStore', '', 'IsBrokenStore,IsRawStore,IsUnderOperationStore,IsFinalProductStore');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'StoreName', '<-- select Store -->', '#slToStore', '', 'IsBrokenStore,IsRawStore,IsUnderOperationStore,IsFinalProductStore');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', '<-- select Line -->', '#slLines', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#slFinalProduct', '', 'ItemUnits');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- select Stage -->', '#hidden_slStages', '');

                                FadePageCover(false);



                                $('#slFinalProduct').css({ 'width': '100%' }).select2();
                                $('#slFinalProduct').trigger("change");
                                $('#slFinalProduct').addClass('IsAutoSelect');
                                $("div[tabindex='-1']").removeAttr('tabindex');
                                    
                               // 
                               // });


                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "PR_Approving": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 35 ", "PR_Approving", function () {

                });

            });
            break;
        }

            //case "SL_MasterData": {
            //    debugger;
            //    LoadView("/Home/Groups", "div-content", function () {
            //        FillGroups(" where ParentGroupID = 25 ", "SL_MasterData", function () {

            //        });

            //    });
            //    break;
            //}
        case "PR_ApproveTransaction":
            {
                strLoadWithPagingFunctionName = "/api/PR_Approving/LoadWithWhereClause";
                LoadView("/PR/PR_ApproveTransaction", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PR/PR_Approving/PR_ApproveTransaction.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where isnull(JV_ID,0) <> 1   AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_ApproveTransaction_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                // Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- select Items -->', '#slItems', '');
                                Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'Name', '<-- select Trans. Types -->', '#slTransactionsTypes', '90', false);
                                Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                //  Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');

                                $('#slPSInvoices').addClass("hide");
                                $('#slTransactionsTypes').prop("disabled", true)
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () {/* SC_Transactions_DeleteList();*/ });
                break;

            }
        case "PR_UnApproveTransaction":
            {
                strLoadWithPagingFunctionName = "/api/PR_Approving/LoadWithWhereClause";
                LoadView("/PR/PR_UnApproveTransaction", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PR/PR_Approving/PR_UnApproveTransaction.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where isnull(JV_ID,0) <> 1   AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_ApproveTransaction_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SC_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                //  Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- select Items -->', '#slItems', '');
                                Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'Name', '<-- select Trans. Types -->', '#slTransactionsTypes', '90', false);
                                Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                // Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                $('#slPSInvoices').addClass("hide");
                                $('#slTransactionsTypes').prop("disabled", true)
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () {/* SC_Transactions_DeleteList();*/ });
                break;
            }
        case "I_PriceList":
            {
                strLoadWithPagingFunctionName = "/api/I_PriceList/LoadWithPaging";
                LoadView("/SL_MasterData/I_PriceList", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SL/SL_MasterData/I_PriceList.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { I_PriceList_BindTableRows(pTabelRows); });

                        //$.ajax({
                        //    type: "GET",
                        //    url: strServerURL + "api/I_PriceList/IntializeData",
                        //    data: { pID: null },
                        //    contentType: "application/json; charset=utf-8",
                        //    dataType: "json",
                        //    success: function (d) {
                        //        Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '' , 'Name');
                        //        Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', '<-- select SubAccount -->', '#hidden_slPriceList', '' , 'Name');
                        //        Fill_SelectInputAfterLoadData_WithMultiAttr(d[2], 'ID', 'Name', '<-- select Store Account -->', '#hidden_slPriceListItems', '', 'PriceListID,ItemID');
                        //        // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#hidden_slSubAccountID', '');

                        //        //hidden_slItems
                        //        //hidden_slPriceList
                        //        //hidden_slPriceListItems

                        //        FadePageCover(false);
                        //    },
                        //    error: function (jqXHR, exception) {
                        //        debugger;
                        //        swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                        //        FadePageCover(false);
                        //    }
                        //});
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { I_PriceList_ClearAllControls(); },
                    function () { I_PriceList_DeleteList(); });
                break;

            }
        case "SC_OpenCloseMaterialIssueRequest":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_OpenCloseMaterialIssueRequest", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_OpenCloseMaterialIssueRequest.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 70 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "70", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slFromStore', '');
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slToStore', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');
                                //hidden_slUnits
                                // Fill_SelectInputAfterLoadData(d[4], 'ID', 'InvoiceNo', '<-- select Sales Invoice -->', '#slInvoices', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', '<-- select Customer -->', '#slCustomers', '');
                                // $('#txtFromDate_Filter').val(getTodaysDateInddMMyyyyFormat());
                                // $('#txtToDate_Filter').val(getTodaysDateInddMMyyyyFormat());

                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }
        case "SL": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 25 ", "SL_MasterData", function () {

                });

            });
            break;
        }
        case "PS": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 30 ", "PS_Transactions", function () {

                });

            });
            break;
        }
        case "SL_MasterData": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 25 ", "SL_MasterData", function () {

                });

            });
            break;
        }
        case "SL_Transactions": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 25 ", "SL_Transactions", function () {

                });

            });
            break;
        }
        case "PS_Transactions": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 30 ", "PS_Transactions", function () {

                });

            });
            break;
        }
        case "Services":
            {
                strLoadWithPagingFunctionName = "/api/Services/LoadWithPaging";
                LoadView("/MasterData/Services", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/Services.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Services_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/Services/IntializeData",
                            data: { pID : null},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#slAccountID', '');
                                // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#slSubAccountID', '');
                                // Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#hidden_slAccountID', '');
                                // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#hidden_slSubAccountID', '');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () {Services_ClearAllControls(); },
                    function () { Services_DeleteList(); });
                break;

            }
        case "Expenses":
            {
                strLoadWithPagingFunctionName = "/api/Expenses/LoadWithPaging";
                LoadView("/MasterData/Expenses", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/Expenses.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Expenses_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/Expenses/IntializeData",
                            data: { pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#slAccountID', '');
                                // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#slSubAccountID', '');
                                // Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#hidden_slAccountID', '');
                                // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#hidden_slSubAccountID', '');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { Expenses_ClearAllControls(); },
                    function () { Expenses_DeleteList(); });
                break;

            }
        case "SL_Invoices":
            {

                strLoadWithPagingFunctionName = "/api/SL_Invoices/LoadWithPaging";
                LoadView("/SL/SL_Invoices", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SL/SL_Transactions/SL_Invoices.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Invoices/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SL_Invoices_BindTableRows(pTabelRows); SL_Invoices_ClearAllControls(); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SL_Invoices/IntializeData",
                            data: { pDate: ConvertDateFormat(getTodaysDateInddMMyyyyFormat()), pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                //[0] clients , //[1] currencies ,//[2] paymentmethod ,//[3] stores ,//[4] costecenter ,
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL CUSTOMERS -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- SELECT CUSTOMER -->', '#slClientID', '', 'LockingUserID');
                                //-------
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[1], 'ID', 'Code', null, '#slCurrencyID', '', 'ExchangeRate');
                                //-------
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                //------
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- SELECT STORE -->', '#slStores', '');
                                //------
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'CostCenterName', '<-- SELECT CostCenter  -->', '#slCostCenter_ID', '');
                                //------
                                //  Fill_SelectInputAfterLoadData_WithAttr(d[5], 'ID', 'Name', '<----------- ITEMS ---------->', '#hidden_slItems', '' , 'Price');
                                //  Fill_SelectInputAfterLoadData_WithAttr(d[6], 'ID', 'Name', '<-- SELECT TAXES  -->', '#hidden_slTaxes', '', 'CurrentPercentage');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[5], 'ID', 'Name', '<----------- ITEMS ---------->', '#hidden_slItems', '', 'Price,ItemUnits');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[6], 'ID', 'Name', '<-- SELECT TAXES  -->', '#hidden_slTaxes', '', 'CurrentPercentage,IsDebitAccount');


                                Fill_SelectInputAfterLoadData(d[7], 'ID', 'Name', '<---------- SERVICES -------->', '#hidden_slServices', '');
                                Fill_SelectInputAfterLoadData(d[8], 'ID', 'Name', '<-- SELECT EXPENSES  -->', '#hidden_slExpenses', '');

                                Fill_SelectInputAfterLoadData(d[9], 'ID', 'Name', '<-- SELECT UNIT -->', '#hidden_slUnits', '');
                                $('#txtInvoiceDate').val(getTodaysDateInddMMyyyyFormat());

                                Fill_SelectInputAfterLoadData_WithMultiAttrWithoutOptionText(d[10], 'ID', 'xxxxxxxxxx', '#hidden_slPriceListItems', '', 'PriceListID,ItemID,Price');
                                $("#txtInvoiceDate").datepicker().on('changeDate'
                                    , function () {
                                        $(this).datepicker('hide');
                                        RecalculateExchangeRate();

                                    });
                                $("#txtInvoiceDate").datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });

                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);


                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SL_Invoices_ClearAllControls(); },
                    function () { SL_Invoices_DeleteList(); });
                break;

            }

        

        case "SL_ApproveInvoice":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/SL_Invoices/LoadWithPaging";
                LoadView("/SL/SL_ApproveInvoice", "div-content", function () {
                    
                    $.getScript(strServerURL + '/Scripts/SL/SL_Approving/SL_ApproveInvoice.js?' + glbVersion, function () {
                        var WhereClause = "Where ISNULL(IsDeleted , 0) = 0 and isnull(IsApproved , 0 ) = 0";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Approving/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SL_ApproveInvoice_BindTableRows(pTabelRows); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SL_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                console.log('approving data');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL CUSTOMERS -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SL_ApproveInvoice_ClearAllControls(); },
                    function () { SL_ApproveInvoice_DeleteList(); });
                break;

            }

        case "SL_UnApproveInvoice":
            {
                strLoadWithPagingFunctionName = "/api/SL_Approving/LoadWithPaging";
                LoadView("/SL/SL_UnApproveInvoice", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SL/SL_Approving/SL_UnApproveInvoice.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1 and isnull(IsApproved , 0 ) = 1";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Approving/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SL_UnApproveInvoice_BindTableRows(pTabelRows); SL_UnApproveInvoice_ClearAllControls(); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SL_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL CUSTOMERS -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SL_UnApproveInvoice_ClearAllControls(); },
                    function () { SL_UnApproveInvoice_DeleteList(); });
                break;

            }

        case "PS_ApproveInvoice":
            {
                strLoadWithPagingFunctionName = "/api/PS_Approving/LoadWithPaging";
                LoadView("/PS/PS_ApproveInvoice", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Approving/SL_ApproveInvoice.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1 and isnull(IsApproved , 0 ) = 0";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_Approving/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { PS_ApproveInvoice_BindTableRows(pTabelRows); PS_ApproveInvoice_ClearAllControls(); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/PS_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL CUSTOMERS -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_ApproveInvoice_ClearAllControls(); },
                    function () { PS_ApproveInvoice_DeleteList(); });
                break;

            }
        case "PS_UnApproveInvoice":
            {
                strLoadWithPagingFunctionName = "/api/PS_Approving/LoadWithPaging";
                LoadView("/PS/PS_UnApproveInvoice", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Approving/PS_UnApproveInvoice.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1 and isnull(IsApproved , 0 ) = 1";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_Approving/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { PS_UnApproveInvoice_BindTableRows(pTabelRows); PS_UnApproveInvoice_ClearAllControls(); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/PS_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL CUSTOMERS -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_UnApproveInvoice_ClearAllControls(); },
                    function () { PS_UnApproveInvoice_DeleteList(); });
                break;

            }
        case "PS_Invoices":
            {
                strLoadWithPagingFunctionName = "/api/PS_Invoices/LoadWithPaging";
                LoadView("/PS/PS_Invoices", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Transactions/PS_Invoices.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = " Where ISNULL(vwPS_Invoices.IsDeleted , 0) = 0";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_Invoices/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { PS_Invoices_BindTableRows(pTabelRows); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/PS_Invoices/IntializeData",
                            data: { pDate: ConvertDateFormat(getTodaysDateInddMMyyyyFormat()), pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                //[0] clients , //[1] currencies ,//[2] paymentmethod ,//[3] stores ,//[4] costecenter ,
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL Supplier -->', '#slSupplier_Filter', '');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- SELECT Supplier -->', '#slSupplierID', '');
                                //-------
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[1], 'ID', 'Code', null, '#slCurrencyID', '', 'ExchangeRate');
                                //-------
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                //------
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- SELECT STORE -->', '#slStores', '');
                                //------
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'CostCenterName', '<-- SELECT CostCenter  -->', '#slCostCenter_ID', '');
                                //------
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[5], 'ID', 'Name', '<----------- ITEMS ---------->', '#hidden_slItems', '', 'Price,ItemUnits');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[6], 'ID', 'Name', '<-- SELECT TAXES  -->', '#hidden_slTaxes', '', 'CurrentPercentage,IsDebitAccount');
                                Fill_SelectInputAfterLoadData(d[7], 'ID', 'Name', '<---------- SERVICES -------->', '#hidden_slServices', '');
                                Fill_SelectInputAfterLoadData(d[8], 'ID', 'Name', '<-- SELECT EXPENSES  -->', '#hidden_slExpenses', '');

                                Fill_SelectInputAfterLoadData(d[9], 'ID', 'Name', '<-- SELECT UNIT -->', '#hidden_slUnits', '');
                                //*******





                                $('#txtInvoiceDate').val(getTodaysDateInddMMyyyyFormat());

                                //$("#txtInvoiceDate").datepicker({
                                //    onSelect: function (dateText) {
                                //         console.log("Selected date: " + dateText + "; input's current value: " + this.value);

                                //    }
                                //});


                                $("#txtInvoiceDate").datepicker().on('changeDate'
                                    , function () {
                                        $(this).datepicker('hide');
                                        RecalculateExchangeRate();

                                    });
                                $("#txtInvoiceDate").datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });





                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_Invoices_ClearAllControls(); },
                    function () { PS_Invoices_DeleteList(); });
                break;

            }
        case "SL_ServicesReports": {
            debugger;
            LoadView("/SL/SL_ServicesReports", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SL/SL_Reports/SL_ServicesReports.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SL_Reports/IntializeData"
                            , {}
                            , function (pData) {
                                $("#hl-menu-SL").parent().addClass("active");
                                // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var Clients = pData[0];
                                FillDivWithCheckboxes_DynamicFiled("divCbCustomers", Clients , "nameCbCustomers", "Name", null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SL_ItemsReports":
            {
                debugger;
                LoadView("/SL/SL_ItemsReports", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/SL/SL_Reports/SL_ItemsReports.js'
                        , function () {
                            FadePageCover(true);
                            CallGETFunctionWithParameters("/api/SL_Reports/IntializeData"
                                , {}
                                , function (pData) {
                                    $("#hl-menu-SL").parent().addClass("active");
                                    // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                    var Clients = pData[0];
                                    FillDivWithCheckboxes_DynamicFiled("divCbCustomers", Clients, "nameCbCustomers", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbItems", pData[1], "nameCbItems", "Name", null);
                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    $("#txtFromDate").val(pFormattedTodaysDate);
                                    $("#txtToDate").val(pFormattedTodaysDate);
                                    FadePageCover(false);
                                }
                                , null);
                        });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                    null/*function () { PrintArrivalNotification_DeleteList(); }*/);
                break;
            }
        case "SL_SalesReports":
            {
                debugger;
                LoadView("/SL/SL_SalesReports", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/SL/SL_Reports/SL_SalesReports.js'
                        , function () {
                            FadePageCover(true);
                            CallGETFunctionWithParameters("/api/SL_Reports/IntializeData"
                                , {} 
                                , function (pData) {
                                    $("#hl-menu-SL").parent().addClass("active");
                                    // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                    var Clients = pData[0];
                                    FillDivWithCheckboxes_DynamicFiled("divCbCustomers", Clients, "nameCbCustomers", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbItems", pData[1], "nameCbItems", "Name", null);
                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    $("#txtFromDate").val(pFormattedTodaysDate);
                                    $("#txtToDate").val(pFormattedTodaysDate);
                                    FadePageCover(false);
                                }
                                , null);
                        });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                    null/*function () { PrintArrivalNotification_DeleteList(); }*/);
                break;
            }

        case "PS_ServicesReports": {
            debugger;
            LoadView("/PS/PS_ServicesReports", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/PS/PS_Reports/PS_ServicesReports.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/PS_Reports/IntializeData"
                            , {}
                            , function (pData) {
                                $("#hl-menu-PS").parent().addClass("active");
                                // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var Suppliers = pData[0];
                                FillDivWithCheckboxes_DynamicFiled("divCbSuppliers", Suppliers, "nameCbSuppliers", "Name", null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "PS_ItemsReports":
            {
                debugger;
                LoadView("/PS/PS_ItemsReports", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/PS/PS_Reports/PS_ItemsReports.js'
                        , function () {
                            FadePageCover(true);
                            CallGETFunctionWithParameters("/api/PS_Reports/IntializeData"
                                , {}
                                , function (pData) {
                                    $("#hl-menu-PS").parent().addClass("active");
                                    // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                    var Suppliers = pData[0];
                                    FillDivWithCheckboxes_DynamicFiled("divCbSuppliers", Suppliers, "nameCbSuppliers", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbItems", pData[1], "nameCbItems", "Name", null);
                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    $("#txtFromDate").val(pFormattedTodaysDate);
                                    $("#txtToDate").val(pFormattedTodaysDate);
                                    FadePageCover(false);
                                }
                                , null);
                        });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                    null/*function () { PrintArrivalNotification_DeleteList(); }*/);
                break;
            }
        case "PS_PurchasingReports":
            {
                debugger;
                LoadView("/PS/PS_PurchasingReports", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/PS/PS_Reports/PS_PurchasingReports.js'
                        , function () {
                            FadePageCover(true);
                            CallGETFunctionWithParameters("/api/PS_Reports/IntializeData"
                                , {}
                                , function (pData) {
                                    $("#hl-menu-PS").parent().addClass("active");
                                    // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                    var Suppliers = pData[0];
                                    FillDivWithCheckboxes_DynamicFiled("divCbSuppliers", Suppliers, "nameCbSuppliers", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbItems", pData[1], "nameCbItems", "Name", null);
                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    $("#txtFromDate").val(pFormattedTodaysDate);
                                    $("#txtToDate").val(pFormattedTodaysDate);
                                    FadePageCover(false);
                                }
                                , null);
                        });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                    null/*function () { PrintArrivalNotification_DeleteList(); }*/);
                break;
            }

        case "UnapprovingAllocations":
            {
                // strLoadWithPagingFunctionName = "/api/OperAcc/DeleteAllocations";
                //Approvals
                //OperAcc
                LoadView("/Accounting/UnapprovingAllocations", "div-content", function () {
 
                    $.getScript(strServerURL + '/Scripts/Accounting/Transactions/UnapprovingAllocations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        //  LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 20 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/A_ARAllocation/UnapprovingAllocations_IntializeData",
                            data: { 'PartenertTypeID' : "-1"},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<--  Partener Type -->', '#slPartnerType', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<--  Currency -->', '#hiddenslCurrecies', '');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                // Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                //Fill_SelectInputAfterLoadData(d[2], 'ID', 'StoreName', '<-- select store name -->', '#hidden_slstoresnames', '');
                                // $('#txtFromDate_Filter').val(getTodaysDateInddMMyyyyFormat());
                                // $('#txtToDate_Filter').val(getTodaysDateInddMMyyyyFormat());

                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function ()
                    {
                        //$.each($('#slPartnerType option'), function (i, option)
                        //{
                        //    console.log($(option).val())
                             

                        //});
                    },
                    function () { });
                break;

            }

        case "UnapprovingPayableAllocations":
            {
                debugger;
                LoadView("/Accounting/UnapprovingPayableAllocations", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/Accounting/Transactions/UnapprovingPayableAllocations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/A_ARAllocation/UnapprovingAllocations_IntializeData",
                            data: { 'PartenertTypeID': "-1" },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<--  Partener Type -->', '#slPartnerType', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<--  Currency -->', '#hiddenslCurrecies', '');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () {},
                    function () {});
                break;

            }

        case "ClientDbtCrdtNotes":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/ClientDbtCrdtNotes/LoadWithPaging";
                LoadView("/SL/ClientDbtCrdtNotes", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SL/SL_Transactions/ClientDbtCrdtNotes.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where 1=1";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/ClientDbtCrdtNotes/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SL_ClientDbtCrdtNotes_BindTableRows(pTabelRows); SL_ClientDbtCrdtNotes_ClearAllControls(); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/ClientDbtCrdtNotes/IntializeData",
                            data: { pDate: ConvertDateFormat(getTodaysDateInddMMyyyyFormat()), pOnlyCurrency: false },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                //[0] clients , //[1] currencies ,//[2] paymentmethod ,//[3] stores ,//[4] costecenter ,
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL CUSTOMERS -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', 'Select Client', '#slClientID', '');
                                //-------
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[1], 'ID', 'Code', null, '#slCurrencyID', '', 'ExchangeRate');
                                //-------
                                // Fill_SelectInputAfterLoadData_WithAttr(d[2], 'InvoiceTypeID', 'InvoiceTypeName', null, '#slPaymentMethodID', '', 'InvoiceTypeName');
                                //Fill_SelectInputAfterLoadData_WithAttr(d[11], 'ID', 'InvoiceNo', 'Select Invoice', '#slInvoice', '');
                                //------
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- SELECT STORE -->', '#slStores', '');
                                //------
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'CostCenterName', '<-- SELECT CostCenter  -->', '#slCostCenter_ID', '');
                                //------
                                Fill_SelectInputAfterLoadData_WithAttr(d[5], 'ID', 'Name', '<----------- ITEMS ---------->', '#hidden_slItems', '', 'Price');
                                Fill_SelectInputAfterLoadData_WithAttr(d[6], 'ID', 'Name', '<-- SELECT TAXES  -->', '#hidden_slTaxes', '', 'CurrentPercentage');
                                Fill_SelectInputAfterLoadData(d[7], 'ID', 'Name', '<---------- SERVICES -------->', '#hidden_slServices', '');
                                Fill_SelectInputAfterLoadData(d[8], 'ID', 'Name', '<-- SELECT EXPENSES  -->', '#hidden_slExpenses', '');
                                //  Fill_SelectInputAfterLoadData(d[9], 'DisbursementJob_ID', 'JobNumber', '<-- SELECT JobNumber  -->', '#slDisbursementJobs', '');
                                Fill_SelectInputAfterLoadData(d[9], 'BankID', 'BankNameEn', 'Select Bank', '#slBank', '');
                                console.log(d[11].length);
                                Fill_SelectInputAfterLoadData(d[11], 'ID', 'Account_EnName', 'SELECT Account', '#hidden_slAccounts', '');
                                $('#wasata').hide()

                                $('#txtInvoiceDate').val(getTodaysDateInddMMyyyyFormat());


                                $("#txtInvoiceDate").datepicker().on('changeDate'
                                    , function () {
                                        $(this).datepicker('hide');
                                        RecalculateExchangeRate();

                                    });
                                $("#txtInvoiceDate").datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });

                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SL_ClientDbtCrdtNotes_ClearAllControls(); },
                    function () { SL_ClientDbtCrdtNotes_DeleteList(); });
                break;

            }

        case "SL_Payments":
            {
                debugger;
                $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
                //$("#hl-menu-SL").parent().addClass("active");
                strBindTableRowsFunctionName = "Payments_BindTableRows";

                var pWhereClause = "Where 1=1";

                debugger;
                LoadView("/SL/SL_Payments", "div-content", function () {
                    debugger;
                    strLoadWithPagingFunctionName = "/api/SL_Payments/LoadWithPaging";
                    //$.getScript(strServerURL + '/Scripts/SL/SL_Transactions/SL_Payments.js', function () {
                    //    LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, 0, 10, function (pTableRows) {
                    //        $("#txtsearchPaymentDate").val(getTodaysDateInddMMyyyyFormat());
                    //        Payments_BindTableRows(pTableRows);
                    //        if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();

                    //    });
                    //});
                    $.getScript(strServerURL + '/Scripts/SL/SL_Transactions/SL_Payments.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where 1=1";
                        //LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim()
                        //    , function (pTabelRows)
                        //    {
                        //        $("#txtsearchPaymentDate").val(getTodaysDateInddMMyyyyFormat());
                        //        Payments_BindTableRows(pTableRows);
                        //        if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        //    });
                    });
                },
                    function () { Payments_ClearAllControls(); },
                    function () { Payments_DeleteList(); });
                break;
            }
        case "SL_ClientAccountStatementReport": {
            debugger;
            strBindTableRowsFunctionName = "TrialBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SL_ClientAccountStatementReport/LoadRows";
            LoadView("/SL/SL_ClientAccountStatementReport", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SL/SL_Reports/SL_ClientAccountStatementReport.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SL_ClientAccountStatementReport/FillSearchControls"
                            , {}
                            , function (pData) { 
                                $("#hl-menu-SL").parent().addClass("active");
                                var pAccount = pData[0];
                                var pMainAccount = pData[1];
                                var pCurrency = pData[2];

                                FillDivWithCheckboxes("divCbAccount", pAccount, "nameCbAccount", 5/*NameAndCode*/, null);
                                //FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                //  FillDivWithCheckboxesJob("divCbJob", pJob, "nameCbJob", 6, null);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccountsGroup", pMainAccount, null);
                                Fill_SelectInputAfterLoadData(pCurrency, 'ID', 'Code', TranslateString("SelectFromMenu"), '#slCurrency', '');
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SL_ApproveSL_DbtCrdtNotes":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/SL_Invoices/LoadWithPaging";
                LoadView("/SL/SL_ApproveSL_DbtCrdtNotes", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SL/SL_Approving/SL_ApproveSL_DbtCrdtNotes.js?' + glbVersion, function () {
                        //var WhereClause = "Where ISNULL(IsDeleted , 0) = 0 and isnull(IsApproved , 0 ) = 0";
                        var WhereClause = "Where  isnull(IsApproved , 0 ) = 0";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_ApprovingClientDbtCrdtNotes/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SL_ApproveInvoice_BindTableRows(pTabelRows); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SL_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                console.log('approving data');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL CUSTOMERS -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SL_ApproveInvoice_ClearAllControls(); },
                    function () { SL_ApproveInvoice_DeleteList(); });
                break;

            }
        case "SL_UnApproveSL_DbtCrdtNotes":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/SL_Invoices/LoadWithPaging";
                LoadView("/SL/SL_UnApproveSL_DbtCrdtNotes", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SL/SL_Approving/SL_UnApproveSL_DbtCrdtNotes.js?' + glbVersion, function () {
                        //var WhereClause = "Where ISNULL(IsDeleted , 0) = 0 and isnull(IsApproved , 0 ) = 0";
                        var WhereClause = "Where isnull(IsApproved , 0 ) = 1";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_ApprovingClientDbtCrdtNotes/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SL_UnApproveInvoice_BindTableRows(pTabelRows); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "api/SL_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                console.log('approving data');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL CUSTOMERS -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SL_ApproveInvoice_ClearAllControls(); },
                    function () { SL_ApproveInvoice_DeleteList(); });
                break;

            }
        case "A_ReceivablesAllocations":
        case "A_PayablesAllocations": {
            debugger;
            var pWhereClause = "";
            if (pControlID == "A_ReceivablesAllocations") {
                glbTransactionType = constTransactionReceivableAllocation;
                pWhereClause = " WHERE UnAllocatedReceivables IS NOT NULL";
                console.log(pWhereClause);
            }
            else {
                glbTransactionType = constTransactionPayableAllocation;
                pWhereClause = " WHERE UnAllocatedPayables IS NOT NULL ";//OR PartnerTypeID=" + constCustodyPartnerTypeID + " OR PartnerTypeID = " + constSupplierPartnerTypeID;
                console.log(pWhereClause);
            }
            strBindTableRowsFunctionName = "A_ARAllocation_Partners_BindTableRows";
            strLoadWithPagingFunctionName = "/api/A_ARAllocation/ARAllocation_Partners_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/Accounting/A_ARAllocation", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Transactions/A_ARAllocation.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pOrderBy = " PartnerTypeID, Name ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseAllocation_Partners: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            A_ARAllocation_Partners_BindTableRows(JSON.parse(pData[0]));
                            //if (pControlID == "ReceivablesAllocations") {
                            //    A_ARAllocation_Partners_BindTableRows(JSON.parse(pData[0]));
                            //}
                            //else {
                            //    A_ARAllocation_Partners_BindTableRows(JSON.parse(pData[4]));
                            //}
                             
                            FillListFromObject(null, 5/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                            FillListFromObject(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu")/*"Select Pay. Type"*/, "slPartnerType", pData[3], null);
                            //FillListFromObject(null, 2/*pCodeOrName*/, "Select Treasury", "slPaymentTreasury", pData[3], null);
                            //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            ////$("#slARFBranch").html($("#hReadySlBranches").html());
                            //$("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                            ////if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                            if (pControlID == "A_ReceivablesAllocations") {
                                $("#liAccountsAllocationLink").text("Accounts Receivable");
                                $("#txtbreadcrumb").text(TranslateString("ReceivablesAllocations"));
                                // $("#liAccountsAllocationLink").attr("onclick", "LoadViews('AccountsReceivable')");
                                //  $("#liAccountsAllocationLink1").attr("onclick", "LoadViews('AccountsReceivable')");
                                $("#h3Allocation").text(TranslateString("ReceivablesAllocations")); $("#h3Allocation").addClass("static-text-primary");
                                $("#h3ModalLblAllocationType").html(TranslateString("ReceivablesAllocations") + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                                $("#h3ModalLblAllocationType").addClass("static-text-primary");
                            }
                            else { //APPayments
                                $("#liAccountsAllocationLink").text("Accounts Payable");
                                $("#txtbreadcrumb").text(TranslateString("PayablesAllocations"));
                                //  $("#liAccountsAllocationLink").attr("onclick", "LoadViews('AccountsPayable')");
                                //  $("#liAccountsAllocationLink1").attr("onclick", "LoadViews('AccountsPayable')");
                                $("#h3Allocation").text(TranslateString("PayablesAllocations")); $("#h3Allocation").addClass("static-text-danger");
                                $("#h3ModalLblAllocationType").html(TranslateString("PayablesAllocations") + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-danger"></label>');
                                $("#h3ModalLblAllocationType").addClass("static-text-danger");
                            }
                            $("#liAccountAllocationType").text($("#h3Allocation").text());
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ARAllocation_ClearAllControls(); }, //i insert a new air reservation form directly
                function () { ARAllocation_DeleteList(); });
            break;
        }
        case "ForeignCurrencyRevaluation": {
            LoadView("/Accounting/Transactions/ForeignCurrencyRevaluation", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Transactions/ForeignCurrencyRevaluation.js?' + glbVersion, function () {
                    Fill_Accounts();
                    $("#slCurrency").html($("#hReadySlCurrencies").html());
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Fill_Accounts();*/ },
                function () {/* Fill_Items();*/ });
            break;
        }

        case "RS_Projects": {
            $("#hl-menu-MasterData").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "RS_Projects_BindTableRows";
            strLoadWithPagingFunctionName = "/api/RS_Projects/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Code";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/RealEstate/RS_Projects", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/RealEstate/MasterData/RS_Projects.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pCostCenter = pData[3];
                            var pProjectType = pData[4];
                            var pCustomer = pData[5];

                            RS_Projects_BindTableRows(JSON.parse(pData[0]));
                            //$("#slCurrency").html($("#hReadySlCurrencies").html());
                            //$("#slBranch").html($("#hReadySlBranches").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, "<--Select-->", "slAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slCostCenter", pCostCenter, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slProjectType", pProjectType, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slClient", pCustomer, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "hidden_slClient", pCustomer, null);

                            //if (IsAccountingActive)
                            //    $(".classAccountingOption").removeClass("hide");
                            //else
                            //    $(".classAccountingOption").addClass("hide");
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { RS_Projects_ClearAllControls(); },
                function () { RS_Projects_DeleteList(); });
            break;
        }

        //#region----------------Container Freight Station CFS        -------------------------------
        case "ContainerFreightStation": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 40 ", "ContainerFreightStationTariff", function () { });
            });
            break;
        }
        case "ContainerFreightStationTariff": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Others").removeClass("hide"); $("#tabOthers").parent().children().removeClass("btn-warning"); $("#tabOthers").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 40 ", "ContainerFreightStationTariff", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }

        case "WH_FCL_Tariff":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_FCL_Tariff_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_FCL_Tariffs/WH_FCL_Tariffs_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerFreightStation/WH_FCL_Tariffs", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Tariff/WH_FCL_Tariff.js', function () {
                        var pWhereClause = "WHERE 1=1";
                        var pOrderBy = "ID DESC";
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                WH_FCL_Tariff_Inti(pData);
                                WH_FCL_Tariff_Details_Inti(pData)
                            });
                    });
                },
                    function () { WH_FCL_Tariff_ClearAllControls(); });
                break;
            }


        case "WH_CSL_Tariff":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_CSL_Tariff_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_CSL_Tariffs/WH_CSL_Tariffs_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerFreightStation/WH_CSL_Tariffs", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Tariff/WH_CSL_Tariff.js', function () {
                        var pWhereClause = "WHERE 1=1";
                        var pOrderBy = "ID DESC";
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                WH_CSL_Tariff_Inti(pData);
                                WH_CSL_Tariff_Details_Inti(pData)
                            });
                    });
                },
                    function () { WH_CSL_Tariff_ClearAllControls(); });
                break;
            }

        case "ContainerFreightStationTransactions": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 40 ", "ContainerFreightStationTransactions", function () {
                  });
            });
            break;
        }

        case "WH_CFS_GateIn":
            {
                debugger;
                LoadView("/ContainerFreightStation/Transactions/WH_CFS_GateIn", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Transactions/WH_CFS_GateIn.js',
                        function () {
                            WH_CFS_GateInInit();
                        });
                },
                    function () { },
                    function () { });
                break;
            }

        case "WH_CFS_GateInInventory":
            {
                debugger;
                LoadView("/ContainerFreightStation/Transactions/WH_CFS_GateInInventory", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Transactions/WH_CFS_GateInInventory.js',
                        function () {
                            WH_CFS_GateInInventoryInit();
                        });
                },
                    function () { },
                    function () { });
                break;
            }

        case "WH_CFS_Invoices":
            {
                debugger;
                LoadView("/ContainerFreightStation/Transactions/WH_CFS_Invoices", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Transactions/WH_CFS_Invoices.js',
                        function () {
                            WH_CFS_InvoicesInit();
                        });
                },
                    function () { },
                    function () { });
                break;
            }

        case "WH_CFS_ReleaseOrders":
            {
                debugger;
                LoadView("/ContainerFreightStation/Transactions/WH_CFS_ReleaseOrders", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Transactions/WH_CFS_ReleaseOrders.js',
                        function () {
                            WH_CFS_ReleaseOrdersInit();
                        });
                },
                    function () { },
                    function () { });
                break;
            }

        case "ContainerFreightStationReports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 40 ", "ContainerFreightStationReports", function () {
                });
            });
            break;
        }

        case "WH_ManifestReport":
            {
                debugger;
                LoadView("/ContainerFreightStation/Reports/WH_ManifestReport", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Reports/WH_ManifestReport.js',
                        function () {
                            WH_ManifestReportInit();
                        });
                },
                    function () { },
                    function () { });
                break;
            }

        case "WH_CFS_WarehouseStatistics":
            {
                debugger;
                LoadView("/ContainerFreightStation/Reports/WH_WarehouseStatistics", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Reports/WH_WarehouseStatistics.js',
                        function () {
                            WH_WarehouseStatisticsInit();
                        });
                },
                    function () { },
                    function () { });
                break;
            }

        //#endregion----------------End OF Container Freight Station CFS -------------------------------

        //#region----------------Container Yard CY        -------------------------------
        case "ContainerYard": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 50 ", "ContainerYardTariff", function () { });
            });
            break;
        }

        case "ContainerYardTariff": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Others").removeClass("hide"); $("#tabOthers").parent().children().removeClass("btn-warning"); $("#tabOthers").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 50 ", "ContainerYardTariff", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }


        case "WH_MTY_Tariff":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_MTY_Tariff_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_MTY_Tariffs/WH_MTY_Tariffs_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerYard/WH_MTY_Tariffs", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerYard/Tariff/WH_MTY_Tariff.js', function () {
                        var pWhereClause = "WHERE 1=1";
                        var pOrderBy = "ID DESC";
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                WH_MTY_Tariff_Inti(pData);
                                WH_MTY_Tariff_Details_Inti(pData)
                            });
                    });
                },
                    function () { WH_MTY_Tariff_ClearAllControls(); });
                break;
            }

        case "ContainerYardTransactions": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Others").removeClass("hide"); $("#tabOthers").parent().children().removeClass("btn-warning"); $("#tabOthers").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 50 ", "ContainerYardTransactions", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }

                    case "WH_CntrStock":
                        {
                            debugger;
                            // //
                            /////alert('HELLOOOOO');
                            //glbDirectionType = "";
                            //function name to bind table in js
                            strBindTableRowsFunctionName = "WH_CntrStock_BindTableRows";
                            //path/controllername/action
                            strLoadWithPagingFunctionName = "/api/WH_CntrStocks/WH_CntrStocks_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                            // view url in route
                            LoadView("/ContainerYard/WH_CntrStocks", "div-content", function () {
                                // form js path
                                $.getScript(strServerURL + '/Scripts/ContainerYard/Transactions/WH_CntrStock.js', function () {
                                    var pPageNumber = 1;
                                    var pPageSize = 10;
                                    var pWhereClause = "WHERE 1=1 and isOwn=1 and id not in (select  WH_CntrStockID from WH_Hire where ishire=1 and (select count(*) from WH_Hire wh where wh.ishire=0 and wh.id>WH_Hire.id)=0) ";
                                    var pOrderBy = "ID DESC";
                                    //var pSearchKey = null;
                                    var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                                        , function (pData) {
                                            WH_CntrStock_Inti(pData);
                                            WH_Hire_Inti(pData);
                                        });
                                });
                            },
                                function () { WH_CntrStock_ClearAllControls(); });
                            break;
                        }

        case "WH_MTY_GateIn":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_MTY_GateIn_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_MTY_GateIn/WH_MTY_GateIn_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerYard/WH_MTY_GateIn", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerYard/Transactions/WH_MTY_GateIn.js', function () {
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        var pWhereClause = "WHERE 1=1 and StorageEndDate is null and OperationID is null";
                        var pOrderBy = "ID DESC";
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                WH_MTY_GateIn_Inti(pData);
                            });
                    });
                },
                    function () { WH_MTY_GateIn_ClearAllControls(); });
                break;
            }

        case "WH_MTY_Inventory":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_MTY_Inventory_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_MTY_Inventory/WH_MTY_Inventory_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerYard/WH_MTY_Inventory", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerYard/Transactions/WH_MTY_Inventory.js', function () {
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        var pWhereClause = "WHERE 1=1 and StorageEndDate is null and OperationID is null";
                        var pOrderBy = "ID DESC";
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                WH_MTY_Inventory_Inti(pData);
                            });
                    });
                },
                    function () { WH_MTY_Inventory_ClearAllControls(); });
                break;
            }

        case "WH_MTY_GateOut":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_MTY_GateOut_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_MTY_GateOut/WH_MTY_GateOut_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerYard/WH_MTY_GateOut", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerYard/Transactions/WH_MTY_GateOut.js', function () {
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        var pWhereClause = "WHERE 1=1 and StorageEndDate is not null and OperationID is null";
                        var pOrderBy = "StorageEndDate DESC";
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                WH_MTY_GateOut_Inti(pData);
                            });
                    });
                },
                    function () { WH_MTY_GateOut_ClearAllControls(); });
                break;
            }

        case "ContainerYardReports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Others").removeClass("hide"); $("#tabOthers").parent().children().removeClass("btn-warning"); $("#tabOthers").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 50 ", "ContainerYardReports", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "WH_MTY_Reports":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_MTY_Reports_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_MTY_Reports/WH_MTY_ReportsCbo_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerYard/WH_MTY_Reports", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerYard/Reports/WH_MTY_Reports.js', function () {
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        var pWhereClause = "WHERE 1=1";
                        var pOrderBy = "ID DESC";
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                //WH_MTY_Reports(pData);
                            });
                    });
                },
                    function () { WH_MTY_Reports_ClearAllControls(); });
                break;
            }
        //case "WH_MTY_GateIn":
        //    {
        //        debugger;
        //        LoadView("/ContainerYard/WH_MTY_GateIn", "div-content", function () {
        //            $.getScript(strServerURL + '/Scripts/ContainerYard/Transactions/WH_MTY_GateIn.js',
        //                function () {
        //                    WH_MTY_GateIn_Inti();
        //                });
        //        },
        //            function () { },
        //            function () { });
        //        break;
        //    }

        //#endregion----------------End OF Container Yard CY -------------------------------


        case "FA": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 52 ", "FA_MasterData", function () {

                });

            });
            break;
        }

        case "FA_MasterData": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 52 ", "FA_MasterData", function () {

                });

            });
            break;
        }
        case "FA_Transactions": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 52 ", "FA_Transactions", function () {

                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                    $(".swapChildrenClass:not(.reversed)").reverseChildren();

                }
            });
            break;
        }
        case "FA_Reports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 52 ", "FA_Reports", function () {

                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                    $(".swapChildrenClass:not(.reversed)").reverseChildren();

                }
            });
            break;
        }
        case "FA_Approving": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 52 ", "FA_Approving", function () {

                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                    $(".swapChildrenClass:not(.reversed)").reverseChildren();

                }
            });
            break;
        }
        case "FA_AssetsGroups":
            {
                strLoadWithPagingFunctionName = "/api/FA_AssetsGroups/LoadWithPaging";
                LoadView("/FA/MasterData/FA_AssetsGroups", "div-content", function () {
                   
                    $.getScript(strServerURL + '/Scripts/FA/MasterData/FA_AssetsGroups.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_AssetsGroups_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_AssetsGroups/IntializeData",
                            data: { pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'SubAccount_EnName', TranslateString("SelectFromMenu"), '#slSubAccountID', '' , 'Parent_ID');
                                // Fill_SelectInputAfterLoadData(d[1], 'ID', 'Fiscal_Year_Name', '<-- select Fiscal Year -->', '#slFiscalYearID', '');
                                //Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- select Budgets -->', '#slBudgetID', '');
                                FadePageCover(false);
                              
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                        $(".swapChildrenClass:not(.reversed)").reverseChildren();

                    }
                },
                    function () { /*FA_AssetsGroups_ClearAllControls(); */},
                    function () { /*FA_AssetsGroups_DeleteList();*/ });
                break;

            }


        case "FA_Exclusion":
            {
                strLoadWithPagingFunctionName = "/api/FA_Transactions/LoadWithWhereClause";
                LoadView("/FA/FA_Transactions/FA_Exclusion", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Transactions/FA_Exclusion.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where (TransactionTypeID = 30 or TransactionTypeID = 60 )  AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { FA_Transactions_BindTableRows(pTabelRows); });
                        FadePageCover(true)
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_Transactions/IntializeData",
                            data: { pTransactionTypeID: "30", pID: null , pIsAsset : false},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d)
                            {
                                FadePageCover(false)
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'NameBarCode', TranslateString("SelectFromMenu"), '#slAssetID', '', 'BarCode,BarCodeType,LastDepreciationDate,LastAmount,LastQty,BranchID,IsExcluded,IntialAmount,DepreciationTotal');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slBranchID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', null, '#slExludedTypeID', '');
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', null, '#slTransactionTypeID', '');
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slTransactionTypeID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDepartmentID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[5], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDevisonID_Filter', '');


                                $('#slAssetID').trigger("change");
                                $('#slAssetID').css({ 'width': '100%' }).select2();
                                $("div[tabindex='-1']").removeAttr('tabindex');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { FA_Transactions_ClearAllControls(); },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }
        case "FA_Addition":
            {
                strLoadWithPagingFunctionName = "/api/FA_Transactions/LoadWithWhereClause";
                LoadView("/FA/FA_Transactions/FA_Addition", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Transactions/FA_Addition.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where (TransactionTypeID = 20  )  AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { FA_Transactions_BindTableRows(pTabelRows); });
                        FadePageCover(true)
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_Transactions/IntializeData",
                            data: { pTransactionTypeID: "20", pID: null, pIsAsset: false },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                FadePageCover(false)
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'NameBarCode', TranslateString("SelectFromMenu"), '#slAssetID', '', 'BarCode,BarCodeType,LastDepreciationDate,LastAmount,LastQty,BranchID,IsExcluded');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slBranchID_Filter', '');
                               // Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', null, '#slExludedTypeID', '');
                               // Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', null, '#slTransactionTypeID', '');
                              //  Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', '<-- select From Menue -->', '#slTransactionTypeID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDepartmentID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[5], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDevisonID_Filter', '');


                                $('#slAssetID').trigger("change");
                                $('#slAssetID').css({ 'width': '100%' }).select2();
                                $("div[tabindex='-1']").removeAttr('tabindex');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () { FA_Transactions_ClearAllControls(); },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }

        case "FA_Depreciation":
            {
                strLoadWithPagingFunctionName = "/api/FA_Depreciations/LoadWithWhereClause";
                LoadView("/FA/FA_Transactions/FA_Depreciation", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Transactions/FA_Depreciations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where  ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { FA_Depreciations_BindTableRows(pTabelRows); });
                        FadePageCover(true)
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_Depreciations/IntializeData",
                            data: { pTransactionTypeID: "40", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                FadePageCover(false)
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', null, '#slBranchID_Filter', '', 'FA_LastDepreciationDate');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', null, '#slBranchID', '', 'FA_LastDepreciationDate');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () { FA_Depreciations_ClearAllControls(); },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }
        case "FA_DepreciationsByAssets":
            {
                strLoadWithPagingFunctionName = "/api/FA_DepreciationsByAssets/LoadWithWhereClause";
                LoadView("/FA/FA_Transactions/FA_DepreciationsByAssets", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Transactions/FA_DepreciationsByAssets.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where  ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { FA_DepreciationsByAssets_BindTableRows(pTabelRows); });
                        FadePageCover(true)
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_DepreciationsByAssets/IntializeData",
                            data: { pTransactionTypeID: "40", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d)
                            {
                                FadePageCover(false)
                              //  Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'NameBarCode', null, '#slAssets_Filter', '', 'LastAmount,LastDepreciationDate');
                              //  Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'NameBarCode', null, '#slAssets', '', 'LastAmount,LastDepreciationDate');
                              ////  Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', null, '#slBranchID_Filter', '', 'FA_LastDepreciationDate');
                              ////  Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', null, '#slBranchID', '', 'FA_LastDepreciationDate');

                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'NameBarCode', TranslateString("SelectFromMenu"), '#slAssets_Filter', '', 'LastAmount,LastDepreciationDate');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'NameBarCode', TranslateString("SelectFromMenu"), '#slAssets', '', 'LastAmount,LastDepreciationDate');


                                $("#slAssets").css({ 'width': '100%' }).select2();
                                $("#slAssets").trigger("change");

                                $("#slAssets_Filter").css({ 'width': '100%' }).select2();
                                $("#slAssets_Filter").trigger("change");
                                $("div[tabindex='-1']").removeAttr('tabindex');




                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () { FA_DepreciationsByAssets_ClearAllControls(); },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }
        case "FA_StopDepreciations":
            {
                strLoadWithPagingFunctionName = "/api/FA_Depreciations/LoadWithWhereClause";
                LoadView("/FA/FA_Transactions/FA_StopDepreciations", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Transactions/FA_StopDepreciations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, " Where(IsDeleted = 0 or IsDeleted IS NULL) ", 0, 10, function (pTabelRows) { FA_Depreciations_BindTableRows(pTabelRows); });
                        FadePageCover(true)
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_Depreciations/IntializeData",
                            data: { pTransactionTypeID: "40", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                FadePageCover(false)
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', null, '#slBranchID_Filter', '', 'FA_LastDepreciationDate');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', null, '#slBranchID', '', 'FA_LastDepreciationDate');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () { FA_Depreciations_ClearAllControls(); },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }

        case "FA_DestructionsStopsPeriod":
            {
                strLoadWithPagingFunctionName = "/api/FA_Assets/LoadWithPaging";
                LoadView("/FA/MasterData/FA_DestructionsStopsPeriod", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/MasterData/FA_DestructionsStopsPeriod.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_Assets_BindTableRows(pTabelRows); });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                        //$.ajax({
                        //    type: "GET",
                        //    url: strServerURL + "api/FA_Assets/IntializeData",
                        //    data: { pID: null, pDate: ConvertDateFormat(getTodaysDateInddMMyyyyFormat()), IsCurrency: "false" },
                        //    contentType: "application/json; charset=utf-8",
                        //    dataType: "json",
                        //    success: function (d) {

                        //        Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'Name', '<-- select Group-->', '#slGroupID', '', "SubAccountID,ParentSubAccountID");
                        //        Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', '<-- select Branches -->', '#slBranchID', '');
                        //        Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- select Department -->', '#slDepartmentID', '');
                        //        Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', '<-- select Devison -->', '#slDevisonID', '');
                        //        Fill_SelectInputAfterLoadData_WithAttr(d[4], 'ID', 'Code', null, '#slCurrencyID', '', 'ExchangeRate');



                        //        $('#txtPurchasingDate').val(getTodaysDateInddMMyyyyFormat());

                        //        $("#txtPurchasingDate").datepicker().on('changeDate'
                        //            , function () {
                        //                $(this).datepicker('hide');
                        //                RecalculateExchangeRate();

                        //            });
                        //        $("#txtPurchasingDate").datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });

                        //        FadePageCover(false);
                        //    },
                        //    error: function (jqXHR, exception) {
                        //        debugger;
                        //        swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                        //        FadePageCover(false);
                        //    }
                        //});
                    });
                },
                    function () { /*FA_AssetsGroups_ClearAllControls(); */ },
                    function () { /*FA_AssetsGroups_DeleteList();*/ });
                break;

            }


            
        case "FA_Assets":
            {
                strLoadWithPagingFunctionName = "/api/FA_Assets/LoadWithPaging";
                LoadView("/FA/MasterData/FA_Assets", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/MasterData/FA_Assets.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_Assets_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_Assets/IntializeData",
                            data: { pID: null, pDate: ConvertDateFormat(getTodaysDateInddMMyyyyFormat()), IsCurrency:"false" },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'GroupID', 'FullName', TranslateString("SelectFromMenu"), '#slGroupID', '', "SubAccountID,ParentSubAccountID,Percentage,ActualPercentage,Code");
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slBranchID', '' , "Code");
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[2], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDepartmentID', '', "Code" );
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[3], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDevisonID', '', "Code" );
                                Fill_SelectInputAfterLoadData_WithAttr(d[4], 'ID', 'Code', null, '#slCurrencyID', '', 'ExchangeRate');



                                $('#txtPurchasingDate').val(getTodaysDateInddMMyyyyFormat());
                                
                                $("#txtPurchasingDate").datepicker().off('changeDate').on('changeDate'
                                    , function () {
                                        $('#txtStartDepreciationDate').val($("#txtPurchasingDate").val())
                                        $(this).datepicker('hide');

                                        setTimeout(function () {
                                            $('#txtStartDepreciationDate').val($("#txtPurchasingDate").val())
                                            RecalculateExchangeRate();
                                        }, 30);

                                      

                                       

                                    });
                                $("#txtPurchasingDate").datepicker().off('keydown').on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });



                                $('#txtStartDepreciationDate').val(getTodaysDateInddMMyyyyFormat());

                                $("#txtStartDepreciationDate").datepicker().off('changeDate').on('changeDate'
                                    , function () {
                                        $(this).datepicker('hide');
                                        CalculateDistructions(false);

                                    });
                                $("#txtStartDepreciationDate").datepicker().off('keydown').on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });




                                
                                if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                                    $(".swapChildrenClass:not(.reversed)").reverseChildren();

                                }
                                   
                                FadePageCover(false);
                                 $('#FA_AssetsModal input[type="text"]').on('keypress', function (e) {
                                    if (e.keyCode === 13) {
                                        e.preventDefault();
                                       // $(this).trigger('submit');
                                    }
                                });

                               
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { /*FA_AssetsGroups_ClearAllControls(); */ },
                    function () { /*FA_AssetsGroups_DeleteList();*/ });
                break;

            }





        case "FA_AssetsApproving":
            {
                strLoadWithPagingFunctionName = "/api/FA_AssetsApproving/LoadWithPaging";
                LoadView("/FA/FA_Approving/FA_AssetsApproving", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Approving/FA_AssetsApproving.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_AssetsApproving_BindTableRows(pTabelRows); });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () { /*FA_AssetsGroups_ClearAllControls(); */ },
                    function () { /*FA_AssetsGroups_DeleteList();*/ });
                break;

            }



        case "FA_AssetsUnApproving":
            {
                strLoadWithPagingFunctionName = "/api/FA_AssetsUnApproving/LoadWithPaging";
                LoadView("/FA/FA_Approving/FA_AssetsUnApproving", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Approving/FA_AssetsUnApproving.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_AssetsUnApproving_BindTableRows(pTabelRows); });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () { /*FA_AssetsGroups_ClearAllControls(); */ },
                    function () { /*FA_AssetsGroups_DeleteList();*/ });
                break;

            }


        case "FA_AssetsReports":
            {
                debugger;
                LoadView("/FA/FA_AssetsReports", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/FA/FA_Reports/FA_AssetsReports.js'
                        , function () {
                            FadePageCover(true);
                            CallGETFunctionWithParameters("/api/FA_Reports/IntializeData"
                                , {}
                                , function (pData) {
                                    $("#hl-menu-FA").parent().addClass("active");
                                    FillDivWithCheckboxes_DynamicFiled("divCbBranches", pData[0], "nameCbBranches", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbDepartments", pData[1], "nameCbDepartments", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbDevisions", pData[2], "nameCbDevisions", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiledWithIDName("divCbGroups", pData[3], "nameCbGroups", "FullName", 'GroupID' , null);

                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    $("#txtFromDate").val(pFormattedTodaysDate);
                                    $("#txtToDate").val(pFormattedTodaysDate);
                                    FadePageCover(false);

                                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                                        $(".swapChildrenClass:not(.reversed)").reverseChildren();

                                    }
                                }
                                , null);
                        });
                },
                    null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                    null/*function () { PrintArrivalNotification_DeleteList(); }*/);
                break;
            }

        case "FA_TransactionsReports":
            {
                debugger;
                LoadView("/FA/FA_TransactionsReports", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/FA/FA_Reports/FA_TransactionsReports.js'
                        , function () {
                            FadePageCover(true);
                            CallGETFunctionWithParameters("/api/FA_Reports/IntializeData"
                                , {}
                                , function (pData) {
                                    $("#hl-menu-FA").parent().addClass("active");
                                    FillDivWithCheckboxes_DynamicFiled("divCbBranches", pData[0], "nameCbBranches", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbDepartments", pData[1], "nameCbDepartments", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbDevisions", pData[2], "nameCbDevisions", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiledWithIDName("divCbGroups", pData[3], "nameCbGroups", "FullName", 'GroupID', null);
                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    $("#txtFromDate").val(pFormattedTodaysDate);
                                    $("#txtToDate").val(pFormattedTodaysDate);
                                    FadePageCover(false);

                                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                                        $(".swapChildrenClass:not(.reversed)").reverseChildren();

                                    }
                                }
                                , null);
                        });
                },
                    null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                    null/*function () { PrintArrivalNotification_DeleteList(); }*/);
                break;
            }
        case "FA_AssetsInventory":
            {
                strLoadWithPagingFunctionName = "/api/FA_AssetsInventory/LoadWithWhereClause";
                LoadView("/FA/FA_Transactions/FA_AssetsInventory", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Transactions/FA_AssetsInventory.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where  ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { FA_AssetsInventory_BindTableRows(pTabelRows); });
                        FadePageCover(true)
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_AssetsInventory/IntializeData",
                            data: {  pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                FadePageCover(false)
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slBranchID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDevisonID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDepartmentID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slBranchID', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDevisonID', '');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDepartmentID', '');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[3], 'ID', 'NameBarCode', TranslateString("SelectFromMenu"), '#slAssets', '', "BranchID,DepartmentID,DevisonID");

                               // $('#slAssets').trigger("change");
                                $('#slAssets').css({ 'width': '100%' }).select2();
                                $("div[tabindex='-1']").removeAttr('tabindex');

                                $('#txtDate').val(getTodaysDateInddMMyyyyFormat());

                                $("#txtDate").datepicker().on('changeDate'
                                    , function () {
                                        $(this).datepicker('hide');
                                        GetActualQtyOfAllAssets();

                                    });
                                $("#txtDate").datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () {/* FA_AssetsInventory_ClearAllControls();*/ },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }

        default: {
            //swal("Oops!", "Please, contact your system administrator! this is LoadViews() in mainapp.master !", "warning");
            swal(strSorry, "This page is under construction. Please, refresh the application and if the problem persists contact IST. This is LoadViews function.");
            break;
        }

    }
}
function LoadOperationsSubMenu(pIsAWB, pCallback) {
    //if (OVGen) always true isa
    if (!pIsAWB) {
        $("#ulOperationsSubMenu").html('<li class="active"><a id="hl-submenu-General" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-table icon"><b class="bg-primary"></b></i><span>General</span></a></li>');
        if (OVPar) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Partners" onclick="OperationPartners_SubmenuTabClicked();" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-users icon"><b class="bg-primary"></b></i><span>Partners</span></a></li>');
        if (OVPac) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-ContainersAndPackages" onclick="OperationContainersAndPackages_SubmenuTabClicked();" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-archive icon"><b class="bg-primary"></b></i><span>Packages</span></a></li>');
        if (OVRou) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Routing" onclick="Routings_SubmenuTabClicked();" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-arrows-alt icon"><b class="bg-primary"></b></i><span>Route&Serv.</span></a></li>');
        if (OVPay) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Payables" onclick="Payables_SubmenuTabClicked();" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-ticket icon"><b class="bg-primary"></b></i><span>Payables</span></a></li>');
        if (OVRec) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Receivables" onclick="Receivables_SubmenuTabClicked();" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-money icon"><b class="bg-primary"></b></i><span>Receivables</span></a></li>');
        if (OVDraftInv) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-DraftInvoice" onclick="Invoices_SubmenuTabClicked();" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-dollar icon"><b class="bg-primary"></b></i><span>Draft Inv.</span></a></li>');
        if (OVInv) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Invoices" onclick="Invoices_SubmenuTabClicked();" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-dollar icon"><b class="bg-primary"></b></i><span>Invoices</span></a></li>');
        if (OVNot) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-AccNotes" onclick="AccNotes_SubmenuTabClicked();" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-paperclip icon"><b class="bg-primary"></b></i><span>C/D Notes</span></a></li>');
        if (OVPurInv) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-PurchaseInvoice" onclick="PurchaseInvoice_SubmenuTabClicked();" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-file-text-o icon"><b class="bg-primary"></b></i><span id="spanFlexiLabel">Loading..</span></a></li>');
        if (pDefaults.UnEditableCompanyName !="FFI" && OVDocIn) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-DocsIn" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-long-arrow-down icon"><b class="bg-primary"></b></i><span>Archiving</span></a></li>');
        if (OVDoc) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-DocsOut" onclick="DocsOut_SubmenuTabClicked();" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-long-arrow-up icon"><b class="bg-primary"></b></i><span>Docs Out</span></a></li>');
        if ($("#hDefaultUnEditableCompanyName").val() == "KDS") {
            if (OVTra) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Tracking" class="hl-submenu-item" onclick="Tracking_SubmenuTabClicked();" href="javascript:void(0);"><i class="fa fa-list-ol icon"><b class="bg-primary"></b></i><span>Vessel Daily Postition</span></a></li>');
            if (OVMas) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Master" class="hl-submenu-item hide" href="javascript:void(0);"><i class="fa fa-book icon"><b class="bg-primary"></b></i><span>Full Vessel</span></a></li>');
            if (OVShi) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Shipments" onclick="Shipments_SubmenuTabClicked();" class="hl-submenu-item hide" href="javascript:void(0);"><i class="fa fa-link icon"><b class="bg-primary"></b></i><span>B/Ls</span></a></li>');
        }
            //else {
            //    if (OVTra) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Tracking" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-list-ol icon"><b class="bg-primary"></b></i><span>Tracking</span></a></li>');
            //    if ($("#cbIsAir").prop("checked")) {
            //        $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-BillsofLading" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-table icon"><b class="bg-primary"></b></i><span>B/Ls</span></a></li>');
            //    }
            //    else {
            //        if (OVMas) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Master" class="hl-submenu-item hide" href="javascript:void(0);"><i class="fa fa-book icon"><b class="bg-primary"></b></i><span>Master</span></a></li>');
            //        if (OVShi) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Shipments" class="hl-submenu-item hide" href="javascript:void(0);"><i class="fa fa-link icon"><b class="bg-primary"></b></i><span>Houses</span></a></li>');
            //    }
            //}
        else { //return the above to show BLs for all AirButNotAWB
            if (OVTra) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Tracking" onclick="Tracking_SubmenuTabClicked();" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-list-ol icon"><b class="bg-primary"></b></i><span>Tracking</span></a></li>');
            if (OVMas) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Master" class="hl-submenu-item hide" href="javascript:void(0);"><i class="fa fa-book icon"><b class="bg-primary"></b></i><span>Master</span></a></li>');
            if (OVShi) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Shipments" onclick="Shipments_SubmenuTabClicked();" class="hl-submenu-item hide" href="javascript:void(0);"><i class="fa fa-link icon"><b class="bg-primary"></b></i><span>Houses</span></a></li>');
        }
    }
    else { //if (!pIsAWB) {
        $("#ulOperationsSubMenu").html('<li class="active"><a id="hl-submenu-BillsofLading" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-table icon"><b class="bg-primary"></b></i><span>B/Ls</span></a></li>');
    }
    $("#ulMainMenu").addClass("hide");
    $("#ulOperationsSubMenu").removeClass("hide");

    $("#ulOperationsSubMenu .hl-submenu-item").on("click"
        , function (event) {
            var calledStep = $(this).attr("id").split('-')[2];
            $(".steps").children().removeClass("active");
            $(".step-pane").removeClass("active");
            $("#" + calledStep).addClass("active");
            $("#steps" + calledStep).addClass("active");
        });
    $("#hl-menu-Quotations").parent().removeClass("active");//for the case of creating Operation from quotation then pressing BackToOperations then hl-menu-Quotations will be highlighted instead of hl-menu-Operations
    $("#hl-menu-Operations").parent().addClass("active");
    if (pCallback != null && pCallback != undefined)
        pCallback();
}
function UnLoadOperationsSubMenu() {
    $("#ulOperationsSubMenu").html('');
    //FillModules(function () {
    //    $(".hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").split('-')[2]); });
    //});
    $("#ulOperationsSubMenu").addClass("hide");
    $("#ulMainMenu").removeClass("hide");

    //$("#ulOperationsSubMenu .hl-submenu-item").on("click"
    //    , function (event) {
    //    });
}

function LoadView(pServiceFunctionName, pContentName, callback, callbackAddNew, callbackDelete, pIsAppend, pRoleID, pUserID) {
    $.ajax({
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pCutlureID: $("#hf_ChangeLanguage").val().trim() },
        contentType: "application/json; charset=utf-8",
        dataType: "html",
        success: function (data) {
            if (pIsAppend) //sherif: incase of calling a partial view with only modal called from different places
                $("#" + pContentName).append(data);
            else
                $("#" + pContentName).html(data);
            if (callback != null && callback != undefined) {
                callback();//sherif: loads countries.js or any.js  
            }
            // Bind Option Buttons
            if (!pIsAppend || pIsAppend == undefined || pIsAppend == null) //this condition coz Operations and Quotations calls many times equal
                GetPermissions(callbackAddNew, callbackDelete); //i need it here for when loading forms

            // Bind Apply Paging Button
            if (callback != null) //i added this condition to handle the case of attaching the btn-applypaging.onclick fn attached many times with multiple calls of LoadView() like in partners and quotations, so with this condition it attaches the btn-applypaging.onclick fn. only one time to for the main view
                $("#btn-applypaging").on("click", function () {
                    //sherif: I commented those lines and replaced with the last one to make pressing btn-applypaging always start from the first page
                    //var currentPageNo = $("#div-Pager").find(".active a").html();
                    //if (currentPageNo == null || currentPageNo == undefined)
                    //    currentPageNo = 1;
                    //LoadDataWithPaging(currentPageNo);
                    LoadDataWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", 1);
                });
            SetDatepickerFormat();
            //FadePageCover(false);
            ReverseUIControls();
        }
    });
}

function SetDatepickerFormat() {
    $(".datepicker-input").datepicker(
                    {
                        //dateFormat: 'mm/dd/yy',
                        dateFormat: 'dd/mm/yyyy',
                        showStatus: true,
                        showWeeks: true,
                        highlightWeek: true,
                        numberOfMonths: 1,
                        autoclose: true,
                        showAnim: "scale",
                        showOptions: {
                            origin: ["top", "right"]
                        }
                    });
    //sherif: to fix hiding of datepicker
    $(".datepicker-input").datepicker().on('changeDate'
        , function () {
            $(this).datepicker('hide');
            debugger;
            if (this.id == "txtInvoiceIssueDate")//used incase i am in the invoice modal and this condition is to make sure of that
                Invoices_SetDueDate(this.id, 'txtInvoiceDueDate', 'slInvoicePaymentTerms');
            else if (this.id == "txtEditInvoiceIssueDate") //used incase i am in the Edit Invoice modal and this condition is to make sure of that
                Invoices_SetDueDate(this.id, 'txtEditInvoiceDueDate', 'slEditInvoicePaymentTerms');
            else if (this.id.substring(0, 27) == "txtTblModalPayableIssueDate") {
                var _RowID = this.id.substring(27, 50);
                Payables_SetDueDate(this.id, 'txtTblModalPayableEntryDate' + _RowID, "slPayableSupplier" + _RowID);
            }
            else if (this.id == "txtOperationOpenDate") //used incase i am changing the operation open date from modal(new operation or shipment)
                Operations_SetCloseDate(this.id, "txtOperationCloseDate");
            else if (this.id.substring(0, 10) == "txtValidTo" || this.id.substring(0, 12) == "txtValidFrom") //used in pricing multi-save to mark the changed rows
                Pricing_SetIsRowChanged(this.id);
            else if (this.id == "txtGateOutDate" || this.id  == "txtLoadingDate") //used in pricing multi-save to mark the changed rows
                ContainerTracking_GetDaysDifference();
            //else if (this.id == "txtOpenDate") //used incase i am changing the operation open date from edit
            //        Operations_SetCloseDate(this.id, "txtCloseDate");
        });
    $(".datepicker-input").datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });
}

function Payables_SetDueDate(pCallingControl, pControlToBeSet, pSlPaymentTermControl) {
    debugger;
    if (pDefaults.UnEditableCompanyName != "GBL") {
        if (isValidDate($("#" + pCallingControl).val().trim(), 1))
            $("#" + pControlToBeSet).val(
                Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControl).val()), $("#" + pSlPaymentTermControl + " option:selected").attr("Days")));
        //EnableDisable DueDate according to Cash or not
        if ($("#" + pSlPaymentTermControl + " option:selected").text().toUpperCase() == "CASH")
            $("#" + pControlToBeSet).attr("disabled", "disabled");
        else
            $("#" + pControlToBeSet).removeAttr("disabled");
    }
}
function Payables_PayableSupplierChanged(pSupplierControlID, pSupplierInvoiceControl, pSupplierReceiptControl) { //pSupplierInvoiceControl is a control not ID so dont use #
    debugger;
    if ($("#" + pSupplierControlID).val() == "") {
        $("#" + pSupplierInvoiceControl).attr("disabled", "disabled");
        $("#" + pSupplierInvoiceControl).val("");
    }
    else {
        $("#" + pSupplierInvoiceControl).removeAttr("disabled");
        $("#" + pSupplierReceiptControl).removeAttr("disabled");
    }
}

//edit record when double clicking the row
function EditByDblClick(pModalID, pID, callback) { //pID : is the ID of the row
    jQuery("#" + pModalID).modal("show");
    if (callback != null)
        callback(pID);
}
//pUserID is used for QuotationsEdit also,....

function LoadWithPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pPageNumber, pPageSize, callback, pRoleID, pUserID) {
    FadePageCover(true);
    debugger
    if (pPageNumber <= 0)
        pPageNumber = 1;
    //sherif
    if (pPageSize <= 0)
        pPageSize = 10;
    if (pPageSize == null)
        pPageSize = 0;
    $.ajax({
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pSearchKey: ($("#txt-Search").val() == null ? "" : $("#txt-Search").val().trim()), pRoleID: (pRoleID == null ? EditedRoleID : pRoleID), pUserID: (pUserID == null ? EditedUserID : pUserID) },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $("#cb-CheckAll").prop('checked', false);

            //sherif : fix so when delete all last page, then get the previous
            if (data[1] == 0 && parseInt(pPageNumber) > 1)
                LoadWithPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, (parseInt(pPageNumber) - 1), pPageSize, callback);
            else {
                callback(JSON.parse(data[0]));
                InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNumber, data[1]);
                FadePageCover(false);
            }
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!  this is LoadWithPaging in mainapp.master !", "error");
            FadePageCover(false);
        }
    });
    //if (callbackForDelete != null)
    //    callbackForDelete();
}
function LoadWithPagingWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pPageNumber, pPageSize, callback) {
    FadePageCover(true);
    if (pPageNumber <= 0)
        pPageNumber = 1;
    //sherif
    if (pPageSize <= 0)
        pPageSize = 10;
    if (pPageSize == null)
        pPageSize = 0;
    $.ajax({
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pSearchKey: ($("#txt-Search").val() == null ? "" : $("#txt-Search").val().trim()) },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $("#cb-CheckAll").prop('checked', false);

            //sherif : fix so when delete all last page, then get the previous
            if (data[1] == 0 && parseInt(pPageNumber) > 1)
                LoadWithPagingWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, (parseInt(pPageNumber) - 1), pPageSize, callback);
            else {
                callback(data);
                InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNumber, data[1]);
                FadePageCover(false);
            }
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!  this is LoadWithPaging in mainapp.master !", "error");
            FadePageCover(false);
        }
    });
    //if (callbackForDelete != null)
    //    callbackForDelete();
}
//sherif: LoadWithPaging using where clause
//TODO: to be replaced in the whole application with fn. LoadWithPagingWithWhereClauseAndOrderBy
function LoadWithPagingWithWhereClause(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pWhereClause, pPageNumber, pPageSize, callback) {
    debugger;
    FadePageCover(true);
    if (pPageNumber <= 0)
        pPageNumber = 1;

    if (pPageSize <= 0)
        pPageSize = 10;
    $.ajax({//calls "/api/Countries/LoadWithPaging" or "/api/Regions/LoadWithPaging" or ......
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            $("#cb-CheckAll").prop('checked', false);
            if (data.length > 2)
                callback(data);
            else
                callback(JSON.parse(data[0]));
            InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNumber, data[1]);
            FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!  this is LoadWithPagingWithWhereClause in mainapp.master !", "error");
            FadePageCover(false);
        }
    });
}

//sherif: LoadOperationWithDetails using where clause
function LoadOperationWithDetails(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pWhereClause, pPageNumber, pPageSize, pOperationID, callback) {
    debugger;
    //FadePageCover(true);
    if (pPageNumber <= 0)
        pPageNumber = 1;

    if (pPageSize <= 0)
        pPageSize = 10;
    $.ajax({//calls "/api/Countries/LoadWithPaging" or "/api/Regions/LoadWithPaging" or ......
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause1: pWhereClause, pOperationID: pOperationID, pOperationFormID: constOperationsFormID },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            $("#cb-CheckAll").prop('checked', false);
            callback(JSON.parse(data[0])/*Operation(just 1)*/, JSON.parse(data[2])/*OperationPartners*/, JSON.parse(data[3])/*pOperationContainersAndPackages*/
                , JSON.parse(data[4])/*pRouting*/, JSON.parse(data[5])/*pPayables*/, JSON.parse(data[6])/*pReceivables*/, JSON.parse(data[7])/*pInvoices*/
                , JSON.parse(data[8])/*pDocsOut*/, JSON.parse(data[9])/*pMasterOperation*/, JSON.parse(data[10])/*pHouseOperations*/, JSON.parse(data[11])/*pMasterAndHouses*/
                , data[12]/*pIsOperationClosed*/, JSON.parse(data[13])/*pDocsInFileNames*/, data[14]/*pOperationStages*/, data[15]/*pBranches*/, data[16]/*pUsers*/
                , data[17]/*pIncoterms*/, data[18]/*pPOrC*/, data[19]/*pMoveTypes*/, data[20]/*pCommodities*/, data[21]/*pInvoiceTypes*/, JSON.parse(data[22])/*pAccNotes*/
                , JSON.parse(data[23])/*pTracking*/, data[24]/*pNetwork*/, JSON.parse(data[25])/*pPurchaseInvoice*/);
            InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNumber, data[1]);
            FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!  this is LoadWithPagingWithWhereClause in mainapp.master !", "error");
            FadePageCover(false);
        }
    });
}

//use in all cases instead of the above
//sherif: LoadWithPaging using where clause and order by
function LoadWithPagingWithWhereClauseAndOrderBy(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, callback) {
    debugger;
    FadePageCover(true);
    if (pPageNumber <= 0)
        pPageNumber = 1;

    if (pPageSize <= 0)
        pPageSize = 10;
    $.ajax({//calls "/api/Countries/LoadWithPaging" or "/api/Regions/LoadWithPaging" or ......
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            $("#cb-CheckAll").prop('checked', false);
            callback(data);
            InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNumber, data[1]);
            FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!  this is LoadWithPagingWithWhereClauseAndOrderBy in mainapp.master !", "error");
            FadePageCover(false);
        }
    });
}
function LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, callback) {
    //debugger;
    FadePageCover(true);
    if (pPageNumber <= 0)
        pPageNumber = 1;
    //sherif
    if (pPageSize <= 0)
        pPageSize = 10;
    if (pPageSize == null)
        pPageSize = 0;
    $.ajax({//calls "/api/Countries/LoadWithPaging" or "/api/Regions/LoadWithPaging" or ......
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: pControllerParameters, //{ pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            $("#cb-CheckAll").prop('checked', false);

            //sherif : fix so when delete all last page, then get the previous
            if (data[1] == 0 && parseInt(pPageNumber) > 1) {
                //LoadWithPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, (parseInt(pPageNumber) - 1), pPageSize, callback);
                pControllerParameters.pPageNumber = 1;
                LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pWhereClause, pOrderBy, /*(parseInt(pPageNumber) - 1)*/1, pPageSize, pControllerParameters, callback);
            }
            else {
                callback(data);
                InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNumber, data[1]);
                FadePageCover(false);
            }
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!  this is LoadWithPagingWithWhereClause in mainapp.master !", "error");
            FadePageCover(false);
        }
    });
}

//sherif: LoadWithPaging using where clause
function LoadAll(pServiceFunctionName, pWhereClause, callback) {
    FadePageCover(true);

    $.ajax({//calls "/api/Countries/LoadWithPaging" or "/api/Regions/LoadWithPaging" or ......
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (pData) {
            debugger;
            $("#cb-CheckAll").prop('checked', false);
            callback(pData);
            //InitiPaging("div-Pager", pPageNumber, data[1]);
            FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!  this is LoadAll in mainapp.master !", "error");
            FadePageCover(false);
        }
    });
}
//sherif: used in case searching for specific ID and filling table in a modal
// pSearch Key here is 
function LoadWithPagingForModal(pServiceFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, callback) {
    FadePageCover(true);
    debugger;

    if (pPageNumber <= 0)
        pPageNumber = 1;

    if (pPageSize <= 0)
        pPageSize = 10;
    $.ajax({//calls "/api/Countries/LoadWithPaging" or "/api/Regions/LoadWithPaging" or ......
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $("#cb-CheckAll").prop('checked', false);
            callback(JSON.parse(data[0]));
            InitiPagingForModal("div-Pager-Modal", pWhereClause, pOrderBy, pPageNumber, data[1]); //sherif: i added for mod
            FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!  this is LoadWithPagingForModal in mainapp.master !", "error");
            FadePageCover(false);
        }
    });
}
// calling Server Function.
function InsertUpdateFunction(pValidateFormID, pFunctionName, pParametersWithValues, pSaveandAddNew, pModalID, callback) {
    debugger;
    if (ValidateForm(pValidateFormID, pModalID)) {
        FadePageCover(true);
        $.ajax({
            type: "GET",
            url: strServerURL + pFunctionName,
            data: pParametersWithValues,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () { },
            success: function (data) {
                debugger;
                if (data != undefined && data.length > 1) {
                    if (data[0] == true) {
                        if (callback != null && callback != undefined) {
                            if (data[1] != null && data[1] != undefined) //data[1] is the ID: for opening quotation or operation after saving a new one / or strMessageReturned
                                callback(data);
                        }

                        if (!pSaveandAddNew && pModalID != null) {
                            jQuery.noConflict();
                            (function ($) {
                                $('#' + pModalID).modal('hide');
                            })(jQuery);
                        }
                    }
                    else //data[0] = false
                        //swal(strSorry, strUniqueFailInsertUpdateMessage, "warning");
                        swal(strSorry, data[1]);
                }
                else {
                    if (data == true) {
                        if (callback != null && callback != undefined) {
                            callback();
                        }
                        if (!pSaveandAddNew && pModalID != null) {
                            jQuery.noConflict();
                            (function ($) {
                                $('#' + pModalID).modal('hide');
                            }
                            )(jQuery);
                        }
                    }
                    else //unique key violated
                        swal(strSorry, strUniqueFailInsertUpdateMessage);
                }
                FadePageCover(false);
            },
            error: function (jqXHR, exception) {
                FadePageCover(false);
                alert('Error when trying to call function [' + pFunctionName + ']. InsertUpdateFunction fn in mainapp.master');
            }
        });
    }
    else
        FadePageCover(false);
}




// calling Server Function.
function InsertUpdateFunctionWithTranslate(pValidateFormID, pFunctionName, pParametersWithValues, pSaveandAddNew, pModalID, callback) {
    debugger;
    if (ValidateForm(pValidateFormID, pModalID)) {
        FadePageCover(true);
        $.ajax({
            type: "GET",
            url: strServerURL + pFunctionName,
            data: pParametersWithValues,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () { },
            success: function (data) {
                debugger;
                if (data != undefined && data.length > 1) {
                    if (data[0] == true) {
                        if (callback != null && callback != undefined) {
                            if (data[1] != null && data[1] != undefined) //data[1] is the ID: for opening quotation or operation after saving a new one / or strMessageReturned
                                callback(data);
                        }

                        if (!pSaveandAddNew && pModalID != null) {
                            jQuery.noConflict();
                            (function ($) {
                                $('#' + pModalID).modal('hide');
                            })(jQuery);
                        }
                    }
                    else //data[0] = false
                        //swal(strSorry, strUniqueFailInsertUpdateMessage, "warning");
                        swal(strSorry, TranslateString( data[1] ));
                }
                else {
                    if (data == true) {
                        if (callback != null && callback != undefined) {
                            callback();
                        }
                        if (!pSaveandAddNew && pModalID != null) {
                            jQuery.noConflict();
                            (function ($) {
                                $('#' + pModalID).modal('hide');
                            }
                            )(jQuery);
                        }
                    }
                    else //unique key violated
                        swal(strSorry, strUniqueFailInsertUpdateMessage);
                }
                FadePageCover(false);
            },
            error: function (jqXHR, exception) {
                FadePageCover(false);
                alert('Error when trying to call function [' + pFunctionName + ']. InsertUpdateFunction fn in mainapp.master');
            }
        });
    }
    else
        FadePageCover(false);
}








//sherif: InsertUpdate using Post not Get and ID is returned in data
function PostInsertUpdateFunction(pValidateFormID, pFunctionName, pParametersWithValues, pSaveandAddNew, pModalID, callback) {
    if (ValidateForm(pValidateFormID, pModalID)) {
        FadePageCover(true);
        $.ajax({
            type: "POST",
            url: strServerURL + pFunctionName,
            data: JSON.stringify(pParametersWithValues),
            dataType: "json",
            //beforeSend: function () { },
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                debugger;
                if (data[0] == true) {
                    if (callback != null && callback != undefined) {
                        callback(data); //data[1] is the record ID
                    }
                    if (!pSaveandAddNew && pModalID != null) {
                        jQuery.noConflict();
                        (function ($) {
                            $('#' + pModalID).modal('hide');
                        }
                        )(jQuery);
                    }
                }
                else if (parent.strBindTableRowsFunctionName == "OperationsManagement_BindTableRows") //unique key violated
                    swal(strSorry, data[3], "");
                else
                    swal(strSorry, strUniqueFailInsertUpdateMessage, "warning");
                //}
                FadePageCover(false);
            },
            error: function (jqXHR, exception) {
                FadePageCover(false);
                alert('Error when trying to call function [' + pFunctionName + ']. PostInsertUpdateFunctionWithIDReturned fn in mainapp.master.js');
            }
        });
    }
    else
        FadePageCover(false);
}








//sherif: InsertList
function InsertSelectedCheckboxItems(pFunctionName, pParametersWithValues, pSaveandAddNew, pModalID, callback, callback1) {
    debugger;
    $.ajax({
        type: "GET",
        url: strServerURL + pFunctionName,
        data: pParametersWithValues,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;

            if (!pSaveandAddNew && pModalID != null) {
                jQuery.noConflict();
                (function ($) {
                    $('#' + pModalID).modal('hide');
                }
                )(jQuery);
            }
            else //to reload the checkboxes select list without closing the modal
                if (pSaveandAddNew && callback != null && callback != undefined)
                    callback();

            if (callback1 != null && callback1 != undefined)
                callback1(data);
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! this is InsertSelectedCheckboxItems() in mainapp.master !", "error");
        }
    });
}
//sherif: to CallGETFunctionWithParameters
function CallGETFunctionWithParameters(pFunctionName, pParametersWithValues, callback, callback1) {
    //FadePageCover(true);
    $.ajax({
        type: "GET",
        url: strServerURL + pFunctionName,
        data: pParametersWithValues,
        //contentType: "application/json; charset=utf-8",
        //dataType: "json",
        //contentType: "application/html; charset=utf-8",
        //dataType: "html",
        beforeSend: function () {
            //$("body").addClass("loading");
            //FadePageCover(true);
        },
        success: function (data) {
            if (callback != null && callback != undefined) //the data here is bool(pRecordsExist) and used as a flag for no records in reports //for Generate_MAWBs then data is string(return empty string if OK and returns MAWBSuffix if exists)
                callback(data);
            if (callback1 != null && callback1 != undefined) //callback fn without parameters
                callback1(data);
            //$("body").removeClass("loading");
            //FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            debugger;
            FadePageCover(false);
            $("body").removeClass("loading");
            swal("Oops!", "Please, contact your technical support! CallGETFunctionWithParameters in mainapp.master.js", "error");
        }
    });
    //FadePageCover(false);
}
function CallPOSTFunctionWithParameters(pFunctionName, pParametersWithValues, callback, callback1) {
    //FadePageCover(true);
    $.ajax({
        type: "POST",
        url: strServerURL + pFunctionName,
        //contentType: "application/json; charset=utf-8",
        data: JSON.stringify(pParametersWithValues),
        dataType: "json",
        //dataType: "html",
        //contentType: "application/html; charset=utf-8",
        contentType: "application/json; charset=utf-8",
        beforeSend: function () {
            //$("body").addClass("loading");
            //FadePageCover(true);
        },
        success: function (data) {
            if (callback != null && callback != undefined) //the data here is bool(pRecordsExist) and used as a flag for no records in reports //for Generate_MAWBs then data is string(return empty string if OK and returns MAWBSuffix if exists)
                callback(data);
            if (callback1 != null && callback1 != undefined) //callback fn without parameters
                callback1(data);
            //$("body").removeClass("loading");
            //FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            debugger;
            FadePageCover(false);
            $("body").removeClass("loading");
            swal("Oops!", "Please, contact your technical support! CallPOSTFunctionWithParameters in mainapp.master.js", "error");
        }
    });
    //FadePageCover(false);
}
//sherif: calling this fn is to set the timelocked to null in the DB to unlock the edited field in case of pressing close
//i commented coz i disabled locking
function UnlockFunction(pFunctionName, pParametersWithValues, pModalID, callback) {
    //debugger;
    //$.ajax({
    //    type: "GET",
    //    url: strServerURL + pFunctionName,
    //    data: pParametersWithValues,
    //    contentType: "application/json; charset=utf-8",
    //    dataType: "json",
    //    beforeSend: function () { },
    //    success: function (data) {
    //        if (data != undefined && data == true)
    //        {
    //            if (callback != null && callback != undefined)
    //            {
    //                callback();
    //                if (pModalID != null) {
    //                    jQuery.noConflict();
    //                    (function ($) {
    //                        $('#' + pModalID).modal('hide');
    //                    }
    //                    )(jQuery);
    //                }
    //            }
    //        }
    //    },
    //    error: function (jqXHR, exception) {
    //        //swal("","'Error when trying to call function ['" + pFunctionName + "']. UnlockFunction fn in mainapp.master'","error");
    //        alert('Error when trying to call function [' + pFunctionName + ']. UnlockFunction fn in mainapp.master');
    //    }
    //});
}

//Region Operations And Quotations////////////////////////////////////////////////////////////
//DirectionType : 1-DIRECT 2-HOUSE 3-MASTER
function GetBLType(pBLType) {
    if (pBLType == 1)
        return "DIRECT";
    if (pBLType == 2)
        return "HOUSE";
    if (pBLType == 3)
        return "MASTER";
}
//DirectionType : 1-Import 2-Export 3-Domestic
function GetDirectionType(pDirectionType) {
    if (pDirectionType == 1)
        return "IMPORT";
    if (pDirectionType == 2)
        return "EXPORT";
    if (pDirectionType == 3)
        return "DOMESTIC";
    if (pDirectionType == 4)
        return "CROSSBOOKING";
    if (pDirectionType == 5)
        return "REEXPORT";
}
//TransportType : 1-Ocean 2-Air 3-Inland
function GetTransportType(pTransportType) {
    if (pTransportType == OceanTransportType)
        return "OCEAN";
    if (pTransportType == AirTransportType)
        return "AIR";
    if (pTransportType == InlandTransportType)
        return "INLAND";
}
//ShipmentType : 1-FCL 2-LCL 3-FTL 4-LTL
function GetShipmentType(pGetShipmentType) {
    if (pGetShipmentType == constFCLShipmentType)
        return "FCL";
    else if (pGetShipmentType == constLCLShipmentType)
        return "LCL";
    else if (pGetShipmentType == constFTLShipmentType)
        return "FTL";
    else if (pGetShipmentType == constLTLShipmentType)
        return "LTL";
    else if (pGetShipmentType == constConsolidationShipmentType)
        return "Consol.";
    else if (pGetShipmentType == constFlexiShipmentType)
        return "FLEXI";
    else if (pGetShipmentType == constTankShipmentType)
        return "TANK";
    //incase of air then none of the above is returned
    return "";
}
//EOF Region Quotations////////////////////////////////////////////////////////

//Region Setting Icons/////////////////////////////////////////////////////////

//Set IconName according to Direction type choice
function DirectionType_SetIconNameAndStyle() {
    debugger;
    if ($("#cbIsImport").prop('checked')) {
        $("#hDirectionIconName").val(ImportIconName);
        $("#hDirectionIconStyle").val(strImportIconStyleClassName);
        ShowHideClientRequired();
    }
    if ($("#cbIsExport").prop('checked')) {
        $("#hDirectionIconName").val(ExportIconName);
        $("#hDirectionIconStyle").val(strExportIconStyleClassName);
        ShowHideClientRequired();
    }
    if ($("#cbIsDomestic").prop('checked')) {
        $("#hDirectionIconName").val(DomesticIconName);
        $("#hDirectionIconStyle").val(strDomesticIconStyleClassName);
        ShowHideClientRequired();
    }
    if ($("#cbIsCrossBooking").prop('checked')) {
        $("#hDirectionIconName").val(CrossbookingIconName);
        $("#hDirectionIconStyle").val(strCrossbookingIconStyleClassName);
        ShowHideClientRequired();
    }
    if ($("#cbIsReExport").prop('checked')) {
        $("#hDirectionIconName").val(ReExportIconName);
        $("#hDirectionIconStyle").val(strReExportIconStyleClassName);
        ShowHideClientRequired();
    }
}
//to handle the case of Master Operation by showing Agent instead of Shipper and Consignee
//incase of Quotation $("#cbIsMaster").prop("checked") will be = undefined so it will work correctly in the else case
function ShowHideClientRequired() {
    if ($("#cbIsMaster").prop("checked")) { //Master
        //$("#divShipper").addClass("hide");
        $("#slShippers").attr("data-required", "false");
        //$("#divConsignee").addClass("hide");
        $("#slConsignees").attr("data-required", "false");
        $("#divAgent").removeClass("hide");
        $("#slAgents").attr("data-required", "true");
    }
    else { //House or Direct
        //$("#divAgent").addClass("hide");
        $("#slAgents").attr("data-required", "false");
        if ($("#cbIsImport").prop('checked')) { //Import i.e. Consignee
            //$("#divShipper").addClass("hide");
            $("#slShippers").attr("data-required", "false");
            $("#divConsignee").removeClass("hide");
            $("#slConsignees").attr("data-required", "true");
        }
        else { //Export or Domestic i.e. Shipper
            //$("#divConsignee").addClass("hide");
            $("#slConsignees").attr("data-required", "false");
            $("#divShipper").removeClass("hide");
            $("#slShippers").attr("data-required", "true");
        }
    }
}

//Set IconName according to B/L Type choice
function BLType_SetIconNameAndStyle() {
    debugger;
    if ($("#cbIsDirect").prop('checked')) {
        $("#hBLTypeIconName").val(DirectIconName);
        $("#hBLTypeIconStyle").val(strDirectIconStyleClassName);
    }
    if ($("#cbIsHouse").prop('checked')) {
        $("#hBLTypeIconName").val(HouseIconName);
        $("#hBLTypeIconStyle").val(strHouseIconStyleClassName);
    }
    if ($("#cbIsMaster").prop('checked')) {
        $("#hBLTypeIconName").val(MasterIconName);
        $("#hBLTypeIconStyle").val(strMasterIconStyleClassName);
    }
    //to ShowHide Consolidation Option
    Operations_ShipmentTypeChanged();
}

//Set IconName according to transportation type choice
function TransportType_SetIconNameAndStyle() {
    debugger;
    if ($("#cbIsOcean").prop('checked')) {
        $("#hTransportIconName").val(OceanIconName);
        $("#hTransportIconStyle").val(strOceanIconStyleClassName);
        //show section ShipmentType (FCL,LCL)
        $("#secShipmentType").removeClass("hide");
        $("#divOceanType").removeClass("hide");
        $("#divInlandType").addClass("hide");
        //set FCL as default
        $("#cbIsFCL").prop('checked', true);
    }
    if ($("#cbIsAir").prop('checked')) {
        $("#hTransportIconName").val(AirIconName);
        $("#hTransportIconStyle").val(strAirIconStyleClassName);
        //hide section ShipmentType (FCL,LCL,FTL,LTL)
        $("#secShipmentType").addClass("hide");
        //uncheck all ShipmentTypes
        $('input[name=cbShipmentType]').prop('checked', false);
    }
    if ($("#cbIsInland").prop('checked')) {
        $("#hTransportIconName").val(InlandIconName);
        $("#hTransportIconStyle").val(strInlandIconStyleClassName);
        //show section ShipmentType (FTL,LTL)
        $("#secShipmentType").removeClass("hide");
        $("#divOceanType").addClass("hide");
        $("#divInlandType").removeClass("hide");
        //set FTL as default
        $("#cbIsFTL").prop('checked', true);
    }
}

//EOF Region Setting Icons/////////////////////////////////////////////////////////

function DeleteListFunction(pFunctionName, pParametersWithValues, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pFunctionName,
        data: pParametersWithValues,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            callback();

            if (!data)//sherif: deletion is not completed for all rows because of foreign key 
            {
                swal(strSorry, "Some or all of the selected records were not deleted because of dependencies existance.", "warning");
                showDeleteFailMessage = true;
            }

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! this is DeleteListFunction() in mainapp.master !", "error");
            FadePageCover(false);
        }
    });
}

//to fill select list showing name
function GetListWithName(pID, pStrFnName, pStrFirstRow, pSlName, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pOrderBy: " Name " },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Name + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithName in mainapp.master.js", "error");
        }
    });
}
//to fill select list showing code
function GetListWithCode(pID, pStrFnName, pStrFirstRow, pSlName, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pOrderBy: " Code " },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithCode in mainapp.master.js", "error");
        }
    });
}
//to fill select list showing Name and using whereclause
function GetListWithNameAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            if (pStrFirstRow != "" && pStrFirstRow != null)
                option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Name + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithName in mainapp.master.js", "error");
        }
    });
}
//to fill select list showing code and using whereclause
function GetListWithCodeAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            if (pStrFirstRow != "" && pStrFirstRow != null)
                option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithCode in mainapp.master.js", "error");
        }
    });
}
function GetListWithCertificateNumberAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName, pControllerParameters, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            if (pStrFirstRow != "" && pStrFirstRow != null)
                option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.CertificateNumber + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.CertificateNumber + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.CertificateNumber + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithCertificateNumberAndWhereClause in mainapp.master.js", "error");
        }
    });
}
function GetListCurrencyWithCodeAndExchangeRateAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            //option = '<option value="0" MasterDataExchangeRate="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '">' + item.Code + '</option>';
                else
                    if ($("#hDefaultCurrencyID").val() == item.ID)
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithCode in mainapp.master.js", "error");
        }
    });
}
function GetListCurrencyWithCodeAndExchangeRateAttr_ERP(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClauseCurrencyDetails, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClauseCurrencyDetails: pWhereClauseCurrencyDetails },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            //option = '<option value="0" MasterDataExchangeRate="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" ExchangeRate="' + item.ExchangeRate + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" ExchangeRate="' + item.ExchangeRate + '">' + item.Code + '</option>';
                else
                    if ($("#hDefaultCurrencyID").val() == item.ID)
                        option += '<option value="' + item.ID + '" ExchangeRate="1" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" ExchangeRate="' + item.ExchangeRate + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            FadePageCover(false);
            swal("Oops!", "Please, contact your technical support! GetListCurrencyWithCodeAndExchangeRateAttr_ERP in mainapp.master.js", "error");
        }
    });
}
//to fill select list Years
function GetListYears(pID, pStrFirstRow, pSlName, pWhereClause, callback, pEndYear) {
    ClearAllOptions(pSlName);
    var TodaysDate = new Date();
    var CurrentYear = 0;
    if (pEndYear == null || pEndYear == undefined)
        CurrentYear = parseInt(TodaysDate.getUTCFullYear());
    else
        CurrentYear = pEndYear
    var option = "";
    for (i = 0; i < 50; i++)
        if (pID != null && pID != undefined && pID == (CurrentYear - i))
            option += '<option value="' + (CurrentYear - i) + '" selected>' + (CurrentYear - i) + '</option>';
        else
            option += '<option value="' + (CurrentYear - i) + '">' + (CurrentYear - i) + '</option>';
    $("#" + pSlName).append(option);

    if (callback != null && callback != undefined)
        callback();

}
function GetListTaxTypeWithNameAndPercAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ClearAllOptions(pSlName);
            if (pStrFirstRow != null && pStrFirstRow != undefined)
                var option = '<option value="" CurrentPercentage="0">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" CurrentPercentage="' + item.CurrentPercentage + '" IsDiscount=' + item.IsDiscount + ' selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '" CurrentPercentage="' + item.CurrentPercentage + '" IsDiscount=' + item.IsDiscount + '>' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" CurrentPercentage="' + item.CurrentPercentage + '" IsDiscount=' + item.IsDiscount + '>' + item.Name + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithCode in mainapp.master.js", "error");
        }
    });
}
//to fill select list showing code and using whereclause and getting Cur Exchange Rate as an attr
function GetListPaymentTermWithCodeAndDaysAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="0" Days="0">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" Days="' + item.Days + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" Days="' + item.Days + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" Days="' + item.Days + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithCode in mainapp.master.js", "error");
        }
    });
}
//to fill select list showing Name and using whereclause and adding Prefix attribute
function GetListWithNameAndPrefixAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" Prefix="' + item.Prefix + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '" Prefix="' + item.Prefix + '">' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" Prefix="' + item.Prefix + '">' + item.Name + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithName in mainapp.master.js", "error");
        }
    });
}
function GetListWithCodeAndOperationPartnerIDAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" OperationPartnerID="' + item.OperationPartnerID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" OperationPartnerID="' + item.OperationPartnerID + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" OperationPartnerID="' + item.OperationPartnerID + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithName in mainapp.master.js", "error");
        }
    });
}
//to fill list of operations with code, house no.
function GetListWithOpCodeAndHouseNoAndClientEmailAttr(pID, pStrFnName, pStrFirstRow, pSlName, pControllerParameters, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        //data: { pWhereClause: pWhereClause },
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            if (pStrFirstRow != "" && pStrFirstRow != null)
                option = '<option value="">' + pStrFirstRow + '</option>';
            //// Bind Data
            //$.each(JSON.parse(data[0]), function (i, item) {
            //    debugger;
            //    if (pID != null && pID != undefined) //in case of editing
            //        if (pID == item.ID)
            //            option += '<option value="' + item.ID + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '" selected >' + item.Code + '(House:' + (item.HouseNumber == 0 ? "'N/A'" : item.HouseNumber) + ')' + '</option>';
            //            //option += '<option value="' + item.ID + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '" selected >' + '(House:' + (item.HouseNumber == 0 ? "0" : item.HouseNumber) + ')' + '</option>';
            //        else
            //            option += '<option value="' + item.ID + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '">' + item.Code + '(House:' + (item.HouseNumber == 0 ? "'N/A'" : item.HouseNumber) + ')' + '</option>';
            //            //option += '<option value="' + item.ID + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '">' + '(House:' + (item.HouseNumber == 0 ? "0" : item.HouseNumber) + ')' + '</option>';
            //    else
            //        option += '<option value="' + item.ID + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '">' + item.Code + '(House:' + (item.HouseNumber == 0 ? "'N/A'" : item.HouseNumber) + ')' + '</option>';
            //        //option += '<option value="' + item.ID + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '">' + '(House:' + (item.HouseNumber == 0 ? "0" : item.HouseNumber) + ')' + '</option>';
            //});
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID == item.ID)
                    //option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '" selected >' + item.Code + (item.RepBLTypeShown == 'MASTER' ? ('(MBL:' + (item.MasterBL == 0 ? "'N/A'" : item.MasterBL) + ')') : ('(House:' + (item.HouseNumber == 0 ? "'N/A'" : item.HouseNumber) + ')')) + '</option>';
                    option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '" selected >' + item.EffectiveOperationCode + (item.BLType != 2 ? ('(MBL:' + (item.MasterBL == 0 ? "" : item.MasterBL) + ')') : ('(HBL:' + (item.HouseNumber == 0 ? "" : item.HouseNumber) + ')')) + '</option>';
                else
                    //option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '">' + item.Code + (item.RepBLTypeShown == 'MASTER' ? ('(MBL:' + (item.MasterBL == 0 ? "'N/A'" : item.MasterBL) + ')') : ('(House:' + (item.HouseNumber == 0 ? "'N/A'" : item.HouseNumber) + ')')) + '</option>';
                    option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '">' + item.EffectiveOperationCode + (item.BLType != 2 ? ('(MBL:' + (item.MasterBL == 0 ? "" : item.MasterBL) + ')') : ('(HBL:' + (item.HouseNumber == 0 ? "" : item.HouseNumber) + ')')) + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithCode in mainapp.master.js", "error");
        }
    });
}
//to fill select list showing Code and Name and using whereclause
function GetListWithCodeAndNameAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + ($("#cbIsAir").prop("checked") ? (item.Code + ": " + item.Name) : (item.Name + ": " + item.Code)) + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + ($("#cbIsAir").prop("checked") ? (item.Code + ": " + item.Name) : (item.Name + ": " + item.Code)) + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + ($("#cbIsAir").prop("checked") ? (item.Code + ": " + item.Name) : (item.Name + ": " + item.Code)) + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithName in mainapp.master.js", "error");
        }
    });
}
//to fill select list showing Code and Name and using whereclause
function GetListOperationPartnersWithPartnerTypeIDAndPartnerIDAttrAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            if (pStrFirstRow != null)
                option += '<option value="" PartnerTypeID="0" PartnerID="0" PaymentTermID="0" ClientEmailNotContact="0" Email="0">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value=' + item.ID + ' ClientEmailNotContact="' + item.ClientEmailNotContact + '"' + ' Email="' + item.Email + '"' + ' PartnerTypeID = ' + item.PartnerTypeID + ' PartnerID = ' + item.PartnerID + ' PaymentTermID = ' + item.PaymentTermID + ' selected >' + item.Code + ": " + item.Name + '</option>';
                    else
                        option += '<option value=' + item.ID + ' ClientEmailNotContact="' + item.ClientEmailNotContact + '"' + ' Email="' + item.Email + '"' + ' PartnerTypeID = ' + item.PartnerTypeID + ' PartnerID = ' + item.PartnerID + ' PaymentTermID = ' + item.PaymentTermID + '>' + item.Code + ": " + item.Name + '</option>';
                else
                    option += '<option value=' + item.ID + ' ClientEmailNotContact="' + item.ClientEmailNotContact + '"' + ' Email="' + item.Email + '"' + ' PartnerTypeID = ' + item.PartnerTypeID + ' PartnerID = ' + item.PartnerID + '     PaymentTermID = ' + item.PaymentTermID + '>' + item.Code + ": " + item.Name + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithName in mainapp.master.js", "error");
            FadePageCover(false);
        }
    });
}
//to fill select list showing code and using whereclause and PartnerType attr
function GetListWithOperationPartnerTypesCodeAndWhereClauseAndPartnerTypeAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithCode in mainapp.master.js", "error");
        }
    });
}
//to fill select list showing code and using whereclause and adding quantity attribute
function GetListWithContainerTypeCodeAndQuantityAttr(pID, pStrFnName, pStrFirstRow, pSlName, pControllerParameters, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                debugger;
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ContainerTypeID)
                        option += '<option value="' + item.ContainerTypeID + '" Quantity="' + item.Quantity + '" selected >' + item.ContainerTypeCode + '</option>';
                    else
                        option += '<option value="' + item.ContainerTypeID + '" Quantity="' + item.Quantity + '">' + item.ContainerTypeCode + '</option>';
                else
                    option += '<option value="' + item.ContainerTypeID + '" Quantity="' + item.Quantity + '">' + item.ContainerTypeCode + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithCode in mainapp.master.js", "error");
        }
    });
}
//to fill select list showing Name and using whereclause and adding quantity attribute
function GetListWithPackageTypeNameAndQuantityAttr(pID, pStrFnName, pStrFirstRow, pSlName, pControllerParameters, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.PackageTypeID)
                        option += '<option value="' + item.PackageTypeID + '" Quantity="' + item.Quantity + '" selected >' + item.PackageTypeName + '</option>';
                    else
                        option += '<option value="' + item.PackageTypeID + '" Quantity="' + item.Quantity + '">' + item.PackageTypeName + '</option>';
                else
                    option += '<option value="' + item.PackageTypeID + '" Quantity="' + item.Quantity + '">' + item.PackageTypeName + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithName in mainapp.master.js", "error");
        }
    });
}
//to fill select list showing ContainerTypeCode and ContainerNumber and using whereclause
function GetListWithContainerTypeCodeAndContainerNumberAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName, pControllerParameters, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.ContainerTypeCode + (item.ContainerNumber == 0 ? "" : " (" + item.ContainerNumber + ")") + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.ContainerTypeCode + (item.ContainerNumber == 0 ? "" : " (" + item.ContainerNumber + ")") + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.ContainerTypeCode + (item.ContainerNumber == 0 ? "" : " (" + item.ContainerNumber + ")") + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithName in mainapp.master.js", "error");
        }
    });
}
//to fill Addresses select list holding multiple attributes
function GetListAddressesWithMultipleAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="0">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                debugger;
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" CountryName="' + item.CountryName + '" CityName="' + item.CityName + '" StreetLine1="' + item.StreetLine1 + '" StreetLine2="' + item.StreetLine2 + '" selected >' + item.AddressType + '</option>';
                    else
                        option += '<option value="' + item.ID + '" CountryName="' + item.CountryName + '" CityName="' + item.CityName + '" StreetLine1="' + item.StreetLine1 + '" StreetLine2="' + item.StreetLine2 + '">' + item.AddressType + '</option>';
                else
                    option += '<option value="' + item.ID + '" CountryName="' + item.CountryName + '" CityName="' + item.CityName + '" StreetLine1="' + item.StreetLine1 + '" StreetLine2="' + item.StreetLine2 + '">' + item.AddressType + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            FadePageCover(false);
            swal("Oops!", "Please, contact your technical support! GetListWithCode in mainapp.master.js", "error");
        }
    });
}
function GetListMAWBStockWithMAWBSuffixAttr(pID, pStrFnName, pStrFirstRow, pSlName, SlctItem, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            ClearAllOptions(pSlName);
            var option='';
            if (SlctItem != 'auto' || data == "[]") {
                option = '<option value="0">' + pStrFirstRow + '</option>';

            }

            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {


                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.MAWBSuffix + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.MAWBSuffix + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.MAWBSuffix + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListWithName in mainapp.master.js", "error");
        }
    });
}
//used when a dropdown options list depends on another one
function FilterListByAnotherListID(pID, pStrFnName, pStrFirstRow, pSlName, pFilteringSlName, pFilteringColumnName) {
    debugger;
    FadePageCover(true);
    var pFilterColumnValue = $("#"+pFilteringSlName).val() == "" ? 0 : $("#"+pFilteringSlName).val();
    GetListWithCodeAndNameAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName
        , "WHERE " + pFilteringColumnName + "=" + pFilterColumnValue
        , function() {FadePageCover(false);});
}
//used to fill the select list in case i have the data(Already got from the controller)
//pCodeOrName: 1-Code, 2-Name, 3-CurrencyWithAttrs(ExchangeRate), 4-NameAndCode, 5-Partners w PartnerTypeID, 6-PartnerBalanceCur, 7-BankAccount, 8-Template, 9-CodeAndName
//10-PricingSettings, 11-ContainerTypeCode & ContainerNumber 12-OperationPartnerTypes 13-OperationWithBLNos
//14-OperationsWithHouses, 15-OperationPartners,16-PortsWithCodeAndCountryAttr,17-MAWBSuffix,18-MoveTypes,19-Operations
function FillListFromObject(pID, pCodeOrName, pStrFirstRow, pSlName, pData, callback) {
    ClearAllOptions(pSlName);
    debugger;
    var option = "";
    if (pStrFirstRow != "" && pStrFirstRow != null)
        option = '<option value="">' + pStrFirstRow + '</option>';
    // Bind Data
    switch (pCodeOrName) {
        case 1: { //Code
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Code + '</option>';
            });
            break;
        }
        case 2: { //Name
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Name + '</option>';
            });
            break;
        }
        case 3: {  //CurrencyWithAttrs(ExchangeRate)
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '">' + item.Code + '</option>';
                else
                    if ($("#hDefaultCurrencyID").val() == item.ID)
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '">' + item.Code + '</option>';
            });
            break;
        }
        case 4: {  //NameAndCode
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Name + ": " + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Name + ": " + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Name + ": " + item.Code + '</option>';
            });
            break;
        }
        case 5: {  //Partners
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '">' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '">' + item.Name + '</option>';
            });
            break;
        }
        case 6: { //PartnerBalanceCur
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.CurrencyID + '" AvailableBalance=' + item.AvailableBalance + '" selected >' + item.CurrencyCode + '</option>';
                    else
                        option += '<option value="' + item.CurrencyID + '" AvailableBalance=' + item.AvailableBalance + '">' + item.CurrencyCode + '</option>';
                else
                    if ($("#hDefaultCurrencyID").val() == item.ID)
                        option += '<option value="' + item.CurrencyID + '" AvailableBalance=' + item.AvailableBalance + '" selected >' + item.CurrencyCode + '</option>';
                    else
                        option += '<option value="' + item.CurrencyID + '" AvailableBalance=' + item.AvailableBalance + '">' + item.CurrencyCode + '</option>';
            }); 
            break;
        }
        case 7: { //BankAccount
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" AccountNumber=' + item.AccountNumber + ' CurrencyID=' + item.DefaultCurrencyID + ' selected >' + item.Name + "/" + item.CurrencyCode + ": " + item.AccountNumber + '</option>';
                    else
                        option += '<option value="' + item.ID + '" AccountNumber=' + item.AccountNumber + ' CurrencyID=' + item.DefaultCurrencyID + '>' + item.Name + "/" + item.CurrencyCode + ": " + item.AccountNumber + '</option>';
                else
                    option += '<option value="' + item.ID + '" AccountNumber=' + item.AccountNumber + ' CurrencyID=' + item.DefaultCurrencyID + '>' + item.Name + "/" + item.CurrencyCode + ": " + item.AccountNumber + '</option>';
            });
            break;
        }
        case 8: { //Template
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" Subject="' + item.Subject + '" TermsAndConditions="' + item.TermsAndConditions + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '" Subject="' + item.Subject + '" TermsAndConditions="' + item.TermsAndConditions + '">' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" Subject="' + item.Subject + '" TermsAndConditions="' + item.TermsAndConditions + '">' + item.Name + '</option>';
            });
            break;
        }
        case 9: { //CodeAndName
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Code + ": " + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Code + ": " + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Code + ": " + item.Name + '</option>';
            });
            break;
        }
        case 10: { //PricingSettings
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ChargeTypeID + '" selected >' /*+ item.Code + ": " */ + item.ChargeTypeName + '</option>';
                    else
                        option += '<option value="' + item.ChargeTypeID + '">' /*+ item.Code + ": " */ + item.ChargeTypeName + '</option>';
                else
                    option += '<option value="' + item.ChargeTypeID + '">' /*+ item.Code + ": " */ + item.ChargeTypeName + '</option>';
            });
            break;
        }
        case 11: { //ContainerTypeCode and ContainerNumber 
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.ContainerTypeCode + ": " + item.ContainerNumber + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.ContainerTypeCode + ": " + item.ContainerNumber + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.ContainerTypeCode + ": " + item.ContainerNumber + '</option>';
            });
            break;
        }
        case 12: { //OperationPartnerTypes
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '">' + item.Code + '</option>';
            });
            break;
        }
        case 13: { //OperationWithBLNos
            $.each(JSON.parse(pData), function (i, item) {
                if ($("#hOperationID").val() == item.ID)
                    option += '<option value="' + item.ID + '" selected >' + item.EffectiveOperationCode + (item.BLType != 2 ? ('(MBL:' + (item.MasterBL == 0 ? "" : item.MasterBL) + ')') : ('(HBL:' + (item.HouseNumber == 0 ? "" : item.HouseNumber) + ')')) + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.EffectiveOperationCode + (item.BLType != 2 ? ('(MBL:' + (item.MasterBL == 0 ? "" : item.MasterBL) + ')') : ('(HBL:' + (item.HouseNumber == 0 ? "" : item.HouseNumber) + ')')) + '</option>';
            });
            break;
        }
        case 14: { //OperationsWithHouses
            $.each(JSON.parse(pData), function (i, item) {
                if (pID == item.ID)
                    //option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '" selected >' + item.Code + (item.RepBLTypeShown == 'MASTER' ? ('(MBL:' + (item.MasterBL == 0 ? "'N/A'" : item.MasterBL) + ')') : ('(House:' + (item.HouseNumber == 0 ? "'N/A'" : item.HouseNumber) + ')')) + '</option>';
                    option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '" selected >' + item.EffectiveOperationCode + (item.BLType != 2 ? ('(MBL:' + (item.MasterBL == 0 ? "" : item.MasterBL) + ')') : ('(HBL:' + (item.HouseNumber == 0 ? "" : item.HouseNumber) + ')')) + '</option>';
                else
                    //option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '">' + item.Code + (item.RepBLTypeShown == 'MASTER' ? ('(MBL:' + (item.MasterBL == 0 ? "'N/A'" : item.MasterBL) + ')') : ('(House:' + (item.HouseNumber == 0 ? "'N/A'" : item.HouseNumber) + ')')) + '</option>';
                    option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '">' + item.EffectiveOperationCode + (item.BLType != 2 ? ('(MBL:' + (item.MasterBL == 0 ? "" : item.MasterBL) + ')') : ('(HBL:' + (item.HouseNumber == 0 ? "" : item.HouseNumber) + ')')) + '</option>';
            });
            break;
        }
        case 15: { //OperationPartners
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '"' + ' PartnerTypeID = "' + item.PartnerTypeID + '"' + ' PartnerID = "' + item.PartnerID + '" PaymentTermID = "' + item.PaymentTermID + '" selected >' + item.Code + ": " + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '"' + ' PartnerTypeID = "' + item.PartnerTypeID + '"' + ' PartnerID = "' + item.PartnerID + '" PaymentTermID = "' + item.PaymentTermID + '">' + item.Code + ": " + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '"' + ' PartnerTypeID = "' + item.PartnerTypeID + '"' + ' PartnerID = "' + item.PartnerID + '"     PaymentTermID = "' + item.PaymentTermID + '">' + item.Code + ": " + item.Name + '</option>';
            });
            break;
        }
        case 16: { //16-PortsWithCodeAndCountryAttr
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" CountryID="' + item.CountryID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" CountryID="' + item.CountryID + '">' + item.Code + '</option>';
                else
                    if ($("#hDefaultCurrencyID").val() == item.ID)
                        option += '<option value="' + item.ID + '" CountryID="' + item.CountryID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" CountryID="' + item.CountryID + '">' + item.Code + '</option>';
            });
            break;
        }
        case 17: { //MAWBSuffix
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.MAWBSuffix + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.MAWBSuffix + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.MAWBSuffix + '</option>';
            });
            break;
        }
        case 18: { //18-MoveType
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option IsCustomsClearance='+item.IsCustomsClearance+' IsWarehousing='+item.IsWarehousing+' value="' + item.ID + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option IsCustomsClearance='+item.IsCustomsClearance+' IsWarehousing='+item.IsWarehousing+' value="' + item.ID + '">' + item.Name + '</option>';
                else
                    option += '<option IsCustomsClearance='+item.IsCustomsClearance+' IsWarehousing='+item.IsWarehousing+' value="' + item.ID + '">' + item.Name + '</option>';
            });
            break;
        }
        case 19: { //Name
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" ActionPercent="' + item.ActionPercent + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '" ActionPercent="' + item.ActionPercent + '" >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" ActionPercent="' + item.ActionPercent + '" >' + item.Name + '</option>';
            });
            break;
        }
    } //switch (pCodeOrName) {
    $("#" + pSlName).append(option);
    if (callback != null && callback != undefined)
        callback();
}
//pCodeOrName: 1-Code, 2-Name, 3-CodeAndName, 4-NameAndCode, 5-FormNumber&Year, 6-CurrencyWithExchangeRate
//, 7-TaxWithIsDebitAccount, 8-BankOrSafeWithDefaultCurrency, 9-RevenueItems, 10-SystemOptions,11-PurchaseInvoiceItem
function FillListFromObject_ERP(pID, pCodeOrName, pStrFirstRow, pSlName, pData, callback) {
    //var pCreationDate = GetDateWithFormatMDY(item.CreationDate);
    //var pYear = pCreationDate.substr(pCreationDate.length - 4);
    ClearAllOptions(pSlName);
    var option = "";
    if (pStrFirstRow != "" && pStrFirstRow != null)
        option = '<option value="0">' + pStrFirstRow + '</option>';
    // Bind Data
    if (pCodeOrName == 1) //Code
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" selected >' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Code + '</option>';
            else
                option += '<option value="' + item.ID + '">' + item.Code + '</option>';
        });
    else if (pCodeOrName == 2) //Name
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Name + '</option>';
            else
                option += '<option value="' + item.ID + '">' + item.Name + '</option>';
        });
    else if (pCodeOrName == 3) //CodeAndName
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" Code="' + item.Code + '" selected >' + item.Code + " : " + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" Code="' + item.Code + '">' + item.Code + " : " + item.Name + '</option>';
            else
                option += '<option value="' + item.ID + '" Code="' + item.Code + '">' + item.Code + " : " + item.Name + '</option>';
        });
    else if (pCodeOrName == 4) //NameAndCode
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" Code="' + item.Code + '" selected >' + item.Name + " : " + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" Code="' + item.Code + '">' + item.Name + " : " + item.Code + '</option>';
            else
                option += '<option value="' + item.ID + '" Code="' + item.Code + '">' + item.Name + " : " + item.Code + '</option>';
        });
    else if (pCodeOrName == 5) //BankWithDefaultCurrencyAndNotesAccounts
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" CurrencyID=' + item.DefaultCurrencyID + ' Account_ID=' + item.Account_ID + ' NotesReceivable=' + item.NotesReceivable + ' NotesPayable=' + item.NotesPayable + ' NotesReceivableUnderCollection=' + item.NotesReceivableUnderCollection + ' NotesPayableUnderCollection=' + item.NotesPayableUnderCollection + ' CollectionExpenses=' + item.CollectionExpenses + ' InJournalTypeID=' + item.InJournalTypeID + ' OutJournalTypeID=' + item.OutJournalTypeID + ' selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" CurrencyID=' + item.DefaultCurrencyID + ' Account_ID=' + item.Account_ID + ' NotesReceivable=' + item.NotesReceivable + ' NotesPayable=' + item.NotesPayable + ' NotesReceivableUnderCollection=' + item.NotesReceivableUnderCollection + ' NotesPayableUnderCollection=' + item.NotesPayableUnderCollection + ' CollectionExpenses=' + item.CollectionExpenses + ' InJournalTypeID=' + item.InJournalTypeID + ' OutJournalTypeID=' + item.OutJournalTypeID + ' >' + item.Name + '</option>';
            else
                option += '<option value="' + item.ID + '" CurrencyID=' + item.DefaultCurrencyID + ' Account_ID=' + item.Account_ID + ' NotesReceivable=' + item.NotesReceivable + ' NotesPayable=' + item.NotesPayable + ' NotesReceivableUnderCollection=' + item.NotesReceivableUnderCollection + ' NotesPayableUnderCollection=' + item.NotesPayableUnderCollection + ' CollectionExpenses=' + item.CollectionExpenses + ' InJournalTypeID=' + item.InJournalTypeID + ' OutJournalTypeID=' + item.OutJournalTypeID + '>' + item.Name + '</option>';
        });
    else if (pCodeOrName == 6) //CurrencyWithExchangeRate
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" ExchangeRate="' + item.ExchangeRate + '" selected >' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" ExchangeRate="' + item.ExchangeRate + '">' + item.Code + '</option>';
            else
                if ($("#hDefaultCurrencyID").val() == item.ID)
                    option += '<option value="' + item.ID + '" ExchangeRate="1" selected >' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" ExchangeRate="' + item.ExchangeRate + '">' + item.Code + '</option>';
        });
    else if (pCodeOrName == 7) //TaxWithIsDebitAccount
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" IsDebitAccount="' + (item.IsDebitAccount ? 1 : 0) + '" selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" IsDebitAccount="' + (item.IsDebitAccount ? 1 : 0) + '">' + item.Name + '</option>';
            else
                if ($("#hDefaultCurrencyID").val() == item.ID)
                    option += '<option value="' + item.ID + '" IsDebitAccount="' + (item.IsDebitAccount ? 1 : 0) + '" selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" IsDebitAccount="' + (item.IsDebitAccount ? 1 : 0) + '">' + item.Name + '</option>';
        });
    else if (pCodeOrName == 8) //BankOrSafeWithDefaultCurrency
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" CurrencyID=' + item.DefaultCurrencyID + ' Account_ID=' + item.Account_ID + ' selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" CurrencyID=' + item.DefaultCurrencyID + ' Account_ID=' + item.Account_ID + ' >' + item.Name + '</option>';
            else
                option += '<option value="' + item.ID + '" CurrencyID=' + item.DefaultCurrencyID + ' Account_ID=' + item.Account_ID + '>' + item.Name + '</option>';
        });
    else if (pCodeOrName == 9) //RevenueItems: //take care with validation for required coz its filled from vwSL_RevenueItems where id can be 0 so when validate for required returns false when 0 is chooses
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option RevenueItemID="' + item.ID + '" IsFreightItem="' + (item.IsFreightItem ? 1 : 0) + '" selected >' + item.Name + '</option>';
                else
                    option += '<option RevenueItemID="' + item.ID + '" IsFreightItem="' + (item.IsFreightItem ? 1 : 0) + '">' + item.Name + '</option>';
            else
                if ($("#hDefaultCurrencyID").val() == item.ID)
                    option += '<option RevenueItemID="' + item.ID + '" IsFreightItem="' + (item.IsFreightItem ? 1 : 0) + '" selected >' + item.Name + '</option>';
                else
                    option += '<option RevenueItemID="' + item.ID + '" IsFreightItem="' + (item.IsFreightItem ? 1 : 0) + '">' + item.Name + '</option>';
        });
    else if (pCodeOrName == 10) //SystemOptions
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.OptionID)
                    option += '<option value="' + item.OptionID + '" OptionValue="' + item.OptionValue + '" selected >' + item.OptionEnName + '</option>';
                else
                    option += '<option value="' + item.OptionID + '" OptionValue="' + item.OptionValue + '">' + item.OptionEnName + '</option>';
            else
                option +=    '<option value="'  + item.OptionID + '" OptionValue="' + item.OptionValue + '">' + item.OptionEnName + '</option>';
        });
    else if (pCodeOrName == 11) //PurchaseInvoiceItem
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" Price="' + item.Price + '" selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" Price="' + item.Price + '">' + item.Name + '</option>';
            else
                option += '<option value="' + item.ID + '" Price="' + item.Price + '">' + item.Name + '</option>';
        });
    else if (pCodeOrName == 12) //Name
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" selected >' + item.CreditLimit + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.CreditLimit + '</option>';
            else
                option += '<option value="' + item.ID + '">' + item.CreditLimit + '</option>';
        });
    $("#" + pSlName).append(option);
    if (callback != null && callback != undefined)
        callback();
}
//Get Checkboxes instead of list to select from
//if pInvoiceTypeID has value then this is called from InvoiceTypes so check the checkboxes according to item is binded to the calling invoice type or not not
function GetListAsCheckboxes(pStrFnName, pWhereClause, pDivName, pCheckboxNameAttr, callback, pCodeOrName) { //pCodeOrName=1:Name, 2:Code, 3:NameAndCode,4:ContainerTypeCode
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            //Clear the div
            $("#" + pDivName).html("");
            var option = "";
            // Bind Data
            //option = '<section class="panel panel-default">';
            //option += '<header class="panel-heading">';
            //option += '</header>';
            $.each(JSON.parse(data[0]), function (i, item) {
                option += '<div class="col-sm-3"> <label> ';
                option += '<input type="checkbox" name="' + pCheckboxNameAttr + '" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);"  value="' + item.ID + '"> ';
                //option += item.Code + ' (' + item.Name + ')';
                if (pCodeOrName == null || pCodeOrName == undefined || pCodeOrName == 1)
                    option += item.Name;
                else if (pCodeOrName == 2) //2:Code
                    option += item.Code;
                else if (pCodeOrName == 3) //3:NameAndCode
                    option += item.Name + (item.Code == 0 ? "" : (" (" + item.Code + ")"));
                else if (pCodeOrName == 4) //4:ContainerTypeCode
                    option += item.ContainerTypeCode;
                option += '</label></div>';
            });
            //option += '<footer class="panel-footer">';
            //option += "</footer>";
            //option += "</section>";
            $("#" + pDivName).append(option);

            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {

            FadePageCover(false);
            swal("Oops!", "Please, contact your technical support! GetListAsCheckboxes in mainapp.master.js", "error");
        }
    });
}
function GetListAsCheckboxesWithVariousParameters(pStrFnName, pControllerParameters, pDivName, pCheckboxNameAttr, callback, pCodeOrName, pCol_sm_size) { //pCodeOrName=1:Name, 2:Code, 3:NameAndCode,4:ContainerTypeCode
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            //Clear the div
            $("#" + pDivName).html("");
            var option = "";
            // Bind Data
            //option = '<section class="panel panel-default">';
            //option += '<header class="panel-heading">';
            //option += '</header>';
            $.each(JSON.parse(data[0]), function (i, item) {
                //option += '<div class="col-sm-3"> <label> ';
                option += '<div class="' + (pCol_sm_size == undefined ? "col-sm-3" : pCol_sm_size) + '"> <label> ';
                option += '<input type="checkbox" id=' + pCheckboxNameAttr + item.ID + ' name="' + pCheckboxNameAttr + '" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);"  value="' + item.ID + '"> ';
                //option += item.Code + ' (' + item.Name + ')';
                if (pCodeOrName == null || pCodeOrName == undefined || pCodeOrName == 1)
                    option += item.Name;
                else if (pCodeOrName == 2) //2:Code
                    option += item.Code;
                else if (pCodeOrName == 3) //3:NameAndCode
                    option += item.Name + (item.Code == 0 ? "" : (" (" + item.Code + ")"));
                else if (pCodeOrName == 4) //4:ContainerTypeCode
                    option += item.ContainerTypeCode;
                option += '</label></div>';
            });
            //option += '<footer class="panel-footer">';
            //option += "</footer>";
            //option += "</section>";
            $("#" + pDivName).append(option);

            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {

            FadePageCover(false);
            swal("Oops!", "Please, contact your technical support! GetListAsCheckboxes in mainapp.master.js", "error");
        }
    });
}
//pOption 1:Code 2:Name(En/Ar) 3:Code&Name 4:Name&Code 5: Name
function FillDivWithCheckboxes(pDivName, pData, pCheckboxNameAttr, pOption, callback) {
    //Clear the div
    $("#" + pDivName).html("");
    var option = "";
    // Bind Data
    //option = '<section class="panel panel-default">';
    //option += '<header class="panel-heading">';
    //option += '</header>';
    $.each(JSON.parse(pData), function (i, item) {
        option += '<div class="swapCheckBoxesClass"> ';
        option += ' <input type="checkbox" name="' + pCheckboxNameAttr + '" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);"  value="' + item.ID + '" /> ';
        switch (pOption) {
            case 1: { //Code
                option += ' <label> ' + item.Code; break;
            }
            case 2: { //Name(Ar-En)
                option += ' <label> ' + ($("[id$='hf_ChangeLanguage']").val() == "ar" ? item.Name : item.EnName); break;
            }
            case 3: { //Code - Name
                option += ' <label> ' + item.Code + ' - ' + ($("[id$='hf_ChangeLanguage']").val() == "ar" ? item.Name : item.EnName); break;
            }
            case 4: { //Name - Code
                option += ' <label> ' + ($("[id$='hf_ChangeLanguage']").val() == "ar" ? item.Name : item.EnName) + ' - ' + item.Code; break;
            }
            case 5: { //name
                option += ' <label> ' + item.Name; break;
            }
            default: {
                swal("Sorry", "Connection failed, please try again.");
                break;
            }
        } //of switch
        option += ' &nbsp;</label> </div>';
    });
    //option += '<footer class="panel-footer">';
    //option += "</footer>";
    //option += "</section>";
    $("#" + pDivName).append(option);
    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapCheckBoxesClass:not(.reversed)").reverseChildren();
}
function CheckIncludedItemsInDivFromArray(pMainDivName, pCheckboxNameAttr, pSelectedCbList, pColumnName, pCallback) {
    debugger;
    $("#" + pMainDivName).find('input[name="' + pCheckboxNameAttr + '"]').each(function () {
        //$(this).attr('value')
        for (var i = 0; i < pSelectedCbList.length; i++) {
            if ($(this).attr('value') == pSelectedCbList[i][pColumnName])
                $(this).prop('checked', true);
        }
    });
    if (pCallback != null && pCallback != undefined)
        pCallback();
}
//fill the Payables modal table allowing to save multi row with values of many tds//
function FillPayablesModalTableControls(pStrFnName, pWhereClause, pDivName, ptblModalName, pCheckboxNameAttr, pIsInsert, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var varHide = "";
            if ($("#cbIsAWB").prop("checked")) {
                var varHide = " hide ";
            }
            var pPOrCData = data[1];
            var pCurData = data[2];
            //Clear the div
            $("#" + pDivName).html("");
            var divData = ' <section class="panel panel-default m-l-n" style="overflow: scroll; width:auto; height: 350px;"> ';
            divData += '    <div class="table-responsive"> ';
            divData += '        <table id="' + ptblModalName + '" class="table table-striped b-t b-light text-sm  table-hover"> ';
            divData += '            <thead> ';
            divData += '            <tr> ';
            divData += '                <th id="HeaderSelectChargeTypesIDs" ' + (pIsInsert ? '>' : ' class="hide">');
            divData += '                </th> ';
            divData += '                <th>ChargeType</th> ';
            divData += '                <th class="hide">P/C</th> ';
            divData += '                <th class="' + varHide + '">Supplier</th> ';
            divData += '                <th class="hide">UOM</th> ';
            divData += '                <th class="' + varHide + '">Qty</th> ';
            divData += '                <th>U.Price</th> ';

            divData += '                <th class="' + varHide + '">TaxType</th> ';
            divData += '                <th class="' + varHide + '">Discount</th> ';

            divData += '                <th class="' + varHide + '">Actual Cost</th> ';
            divData += '                <th class="' + varHide + '">InitSale</th> ';
            divData += '                <th class="' + varHide + '">SupInvNo</th> ';
            divData += '                <th class="' + varHide + '">Rec.No</th> ';
            divData += '                <th class="' + varHide + '">DueDate</th> ';
            divData += '                <th class="' + varHide + '">Ex.Rate</th> ';
            divData += '                <th class="' + varHide + '">Cur</th> ';
            divData += '                <th class="rounded-right hide"></th> ';
            divData += '            </tr> ';
            divData += '            </thead> ';
            divData += '            <tbody> ';
            // Bind Rows
            $.each(JSON.parse(data[0]), function (i, item) {
                divData += "        <tr ID='" + item.ID + "'> ";
                divData += "            <td class='tblModalPayableID " + (pIsInsert ? " ' " : " hide '") + " > <input name='" + pCheckboxNameAttr + "' type='checkbox' value='" + item.ID + "' " + (pIsInsert ? "" : "checked='checked'") + "></td> ";
                //divData += "            <td class='tblModalPayable' val='" + item.ChargeTypeID + "'>" + item.ChargeTypeCode + " (" + item.ChargeTypeName + ")" + "</td> ";
                divData += "            <td class='tblModalPayable' val='" + item.ChargeTypeID + "' style='width:300px;'>" + item.ChargeTypeName + "</td> ";
                divData += "            <td class='tblModalPayablePOrC hide'> <select id='slPayablePOrC" + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='false'></select> </td> ";
                divData += "            <td class='tblModalPayableSupplier " + varHide + varHideInTruckingOrder + " '> <select id='slPayableSupplier" + item.ID + "' class='controlStyle' style='width:107px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange=" + '"' + "Payables_PayableSupplierChanged('slPayableSupplier" + item.ID + "','txtTblModalPayableSupplierInvoiceNo" + item.ID + "','txtTblModalPayableSupplierReceiptNo" + item.ID + "');FillSupplierSitesBySupplier(0," + item.ID + ");Payables_SetDueDate('txtTblModalPayableIssueDate" + item.ID + "','" + "txtTblModalPayableEntryDate" + item.ID + "','" + "slPayableSupplier" + item.ID + "'" + ");" + '"' + (/*item.SupplierInvoiceNo != 0 ||*/ item.IsApproved ? " disabled " : "") + " data-required='false'><option value=''>Select Supplier</option></select> </td> ";
                divData += "            <td class='tblModalPayableUOM hide'> <select id='slPayableUOM" + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='false'" + (item.IsApproved ? " disabled " : "") + "></select></td> ";
                divData += "            <td class='tblModalPayableQuantity " + varHide + " '> <input type='text' id='txtTblModalPayableQuantity" + item.ID + "' class='form-control controlStyle' onchange='Payables_Row_CalculatePayablesAmount(" + item.ID + "," + pIsInsert + ");'  onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);' data-required='false' maxlength='10' placeholder='0' value='1'" + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableCostPrice'> <input type='text' id='txtTblModalPayableCostPrice" + item.ID + "' class='form-control controlStyle' onchange='Payables_Row_CalculatePayablesAmount(" + item.ID + "," + pIsInsert + ");' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";

                divData += "            <td class='tblModalPayableCostAmountWithoutVAT hide'><input type='text' disabled='disabled' id='txtTblModalPayableCostAmountWithoutVAT" + item.ID + "' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableTax " + varHide + " '> <select id='slPayableTax" + item.ID + "' class='controlStyle' style='width:107px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Payables_Row_CalculatePayablesAmount(" + item.ID + "," + pIsInsert + ")'" + " data-required='false'" + (item.IsApproved ? " disabled " : "") + "></select> </td> ";
                divData += "            <td class='tblModalPayableTaxPercentage hide'> <input type='text' id='txtTblModalPayableTaxPercentage" + item.ID + "' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableTaxAmount hide'> <input type='text' id='txtTblModalPayableTaxAmount" + item.ID + "' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableDiscount " + varHide + " '> <select id='slPayableDiscount" + item.ID + "' class='controlStyle' style='width:107px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Payables_Row_CalculatePayablesAmount(" + item.ID + "," + pIsInsert + ")'" + " data-required='false'" + (item.IsApproved ? " disabled " : "") + "></select> </td> ";
                divData += "            <td class='tblModalPayableDiscountPercentage hide'> <input type='text' id='txtTblModalPayableDiscountPercentage" + item.ID + "' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModal
                hide'> <input type='text' id='txtTblModalPayableDiscountAmount" + item.ID + "' class='form - control controlStyle' onkeypress='CheckValueIsDecimal(id); ' onfocus='CheckValueIsDecimal(id); ' onblur='CheckDecimalFormat(id); '  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";

                divData += "            <td class='tblModalPayableCostAmount " + varHide + " '><input type='text' name='txtTblModalPayableCostAmount'  disabled='disabled' id='txtTblModalPayableCostAmount" + item.ID + "' class='form-control controlStyle' onchange='Payables_txtTblModalCostAmount_Changed(" + item.ID + "," + pIsInsert + ");' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableInitialSalePrice " + varHide + " '> <input type='text' id='txtTblModalPayableInitialSalePrice" + item.ID + "' class='input-sm form-control parsley-validated controlStyle ' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-type='float' data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableSupplierInvoiceNo " + varHide + " '> <input type='text' id='txtTblModalPayableSupplierInvoiceNo" + item.ID + "' class='input-sm form-control parsley-validated controlStyle upperCase' data-type='text' onchange='Payables_PayableSupplierInvoiceOrReceiptNoChanged(slPayableSupplier" + item.ID + ", txtTblModalPayableSupplierInvoiceNo" + item.ID + ", txtTblModalPayableSupplierReceiptNo" + item.ID + ")'" + (item.SupplierOperationPartnerID == 0 || item.IsApproved ? " disabled " : "") + " data-required='false' maxlength='20' placeholder='Inv No' /> </td> ";
                divData += "            <td class='tblModalPayableSupplierReceiptNo " + varHide + " '> <input type='text' id='txtTblModalPayableSupplierReceiptNo" + item.ID + "' class='input-sm form-control parsley-validated controlStyle upperCase' data-type='text' onchange='Payables_PayableSupplierInvoiceOrReceiptNoChanged(slPayableSupplier" + item.ID + ", txtTblModalPayableSupplierInvoiceNo" + item.ID + ", txtTblModalPayableSupplierReceiptNo" + item.ID + ")'" + (item.SupplierOperationPartnerID == 0 || item.IsApproved ? " disabled " : "") + " data-required='false' maxlength='20' placeholder='Rec No' /> </td> ";
                //divData += "            <td class='tblModalPayableEntryDate'> <input type='text' id='txtTblModalPayableEntryDate" + item.ID + "' data-date-format='dd/mm/yyyy' class='datepicker-input input-sm form-control parsley-validated controlStyle upperCase ' data-type='text' readonly='readonly'  " + (item.SupplierOperationPartnerID == 0 || item.IsApproved ? " disabled " : "") + " data-required='false' placeholder='Date' /> </td> ";
                divData += "            <td class='tblModalPayableEntryDate " + varHide + " '> <input id='txtTblModalPayableEntryDate" + item.ID + "' type='text' style='width:75px;' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' style='cursor:text;' class=' form-control controlStyle datepicker-input' data-required='false' data-date-format='dd/mm/yyyy' placeholder='Date' readonly " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                //<input id="txtExpectedDeparture" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="cursor:text;" class="datepicker-input form-control" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" />
                divData += "            <td class='tblModalPayableExchangeRate " + varHide + " '><input type='text' name='txtTblModalPayableExchangeRate' id='txtTblModalPayableExchangeRate" + item.ID + "' class='form-control controlStyle' data-type='float' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + ($("#hDefaultCurrencyID").val() == item.CurrencyID || item.IsApproved ? "disabled" : "") + " /> </td> ";
                divData += "            <td class='tblModalPayableCurrency " + varHide + " '> <select id='slPayableCurrency" + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Payables_txtTblModalCurrency_Changed(" + item.ID + "," + pIsInsert + ");' data-required='true'" + (item.IsApproved ? " disabled " : "") + "></select> </td> ";
                divData += "        </tr> ";
            });
            divData += '            </tbody> ';
            divData += '        </table> ';
            divData += '    </div> ';
            divData += ' </section> ';
            $("#" + pDivName).append(divData);
            //to fill the controls after creating them in the previous loop
            $.each(JSON.parse(data[0]), function (i, item) {
                debugger;
                //PayablePOrC_GetList(item.POrC, "slPayablePOrC" + item.ID);
                //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                FillListFromObject(item.POrC, 1, "P/C", "slPayablePOrC" + item.ID, pPOrCData, null);
                PayableSuppliers_GetList(item.SupplierOperationPartnerID, "slPayableSupplier" + item.ID);
                PayableUOM_GetList(item.MeasurementID, "slPayableUOM" + item.ID);
                GetListTaxTypeWithNameAndPercAttr(item.TaxTypeID, "api/TaxeTypes/LoadAllWithWhereClause"
                , "<--Select-->", "slPayableTax" + item.ID, "WHERE IsInactive=0 ORDER BY Name"
                , function () {
                    $("#slPayableDiscount" + item.ID).html($("#slPayableTax" + item.ID).html());
                    $("#slPayableDiscount" + item.ID).val(item.DiscountTypeID == 0 ? "" : item.DiscountTypeID);
                    $("#slPayableTax" + item.ID + " option[IsDiscount='true']").addClass('hide');
                    $("#slPayableDiscount" + item.ID + " option[IsDiscount='false']").addClass('hide');
                });

                $("#txtTblModalPayableQuantity" + item.ID).val(pIsInsert ? 1 : item.Quantity);
                $("#txtTblModalPayableCostPrice" + item.ID).val(item.CostPrice);

                $("#txtTblModalPayableCostAmountWithoutVAT" + item.ID).val(item.AmountWithoutVAT);
                $("#txtTblModalPayableTaxPercentage" + item.ID).val(item.TaxPercentage);
                $("#txtTblModalPayableTaxAmount" + item.ID).val(item.TaxAmount);
                $("#txtTblModalPayableDiscountPercentage" + item.ID).val(item.DiscountPercentage);
                $("#txtTblModalPayableDiscountAmount" + item.ID).val(item.DiscountAmount);

                $("#txtTblModalPayableCostAmount" + item.ID).val(item.CostAmount);
                $("#txtTblModalPayableInitialSalePrice" + item.ID).val(item.InitialSalePrice);
                $("#txtTblModalPayableSupplierInvoiceNo" + item.ID).val((item.SupplierInvoiceNo == 0 ? "" : item.SupplierInvoiceNo));
                $("#txtTblModalPayableSupplierReceiptNo" + item.ID).val((item.SupplierReceiptNo == 0 ? "" : item.SupplierReceiptNo));
                $("#txtTblModalPayableEntryDate" + item.ID).val((Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(item.EntryDate)) > 0 ? ConvertDateFormat(GetDateWithFormatMDY(item.EntryDate)) : ""));
                //$("#txtTblModalPayableEntryDate" + item.ID).addClass('datepicker-input').datepicker({ dateFormat: 'dd-mm-yy' });
                $("#txtTblModalPayableEntryDate" + item.ID).addClass('datepicker-input'); //coz when adding datepicker dynamicalli i ve to rebind it
                //PayableCurrency_GetList(item.CurrencyID, "slPayableCurrency" + item.ID);
                //pCodeOrName: 1-Code, 2-Name, 3-CurrencyWithAttrs(ExchangeRate)
                FillListFromObject(item.CurrencyID, 3/*pCodeOrName*/, null, "slPayableCurrency" + item.ID, pCurData, null);
                //Payables_txtTblModalCurrency_Changed(pRowID, pIsInsert);
                //$("#txtTblModalPayableExchangeRate" + item.ID).val($("#slPayableCurrency" + item.ID + " option:selected").attr("MasterDataExchangeRate"));
                $("#txtTblModalPayableExchangeRate" + item.ID).val(pIsInsert ? 1 : item.ExchangeRate);//if insert then default currency so exchangeRate is 1 
                if (item.SupplierInvoiceNo != 0 || item.IsApproved > 0)
                    $("#slPayableSupplier" + item.ID).attr("disabled", "disabled");
                else
                    $("#slPayableSupplier" + item.ID).removeAttr("disabled");
                    
                //if ($("#hDefaultCurrencyID").val() == item.CurrencyID)
            });
            SetDatepickerFormat();//coz when adding datepicker dynamically i ve to rebind it
            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! FillPayablesModalTableControls in mainapp.master.js", "error");
        }
    });
}
var AddAirPackages_ID = 0;
function AddAirPackagesModalTableControls(pStrFnName, pWhereClause, pDivName, ptblModalName, pCheckboxNameAttr, pIsInsert, callback) {
    debugger;
    AddAirPackages_ID--;
    var divData = "";
    divData += "        <tr ID='" + (AddAirPackages_ID).toString() + "'> ";
    divData += "            <td class='tblModalPackageID " + (pIsInsert ? " hide " : " hide '") + " > <input name='" + pCheckboxNameAttr + "' type='checkbox' value='" + (AddAirPackages_ID).toString() + "' " + (pIsInsert ? "" : "checked='checked'") + "></td> ";
    divData += "            <td class='ID'> <input name='Delete' type='checkbox' value='" + (AddAirPackages_ID).toString() + "' /></td>"
    divData += "            <td class='tblModalPackageType'> <select id='slTblModalPackageType" + (AddAirPackages_ID).toString() + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='true' style='width:100%;'></select></td> ";
    divData += "            <td class='tblModalNoOfPkg'> <input type='text' id='txtTblModalNoOfPkg" + (AddAirPackages_ID).toString() + "' class='form-control input-sm'  onkeypress='CheckValueIsInteger(id);' onfocus='CheckValueIsInteger(id);' data-type='number' data-required='true' maxlength='8' placeholder='0' /> </td> ";
    divData += "            <td class='tblModalMarksAndNumbers'> <input type='text' id='txtTblModalMarksAndNumbers" + (AddAirPackages_ID).toString() + "' maxlength='10' class='form-control input-sm' autocomplete='off' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' data-required='false' placeholder='0.0' style='text-transform:uppercase;' /> </td> ";

    divData += "            <td class='tblModalGrossWeightBll'><input type='text' id='txtTblModalGrossWeightBll" + (AddAirPackages_ID).toString() + "' class='form-control input-sm' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id)' ; data-required='false' placeholder='0.0' /> </td> ";
    divData += "            <td class='tblModalWeightChargeBll'> <input type='text' id='txtTblModalWeightChargeBll" + (AddAirPackages_ID).toString() + "' class='form-control input-sm' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id)' ; data-required='false' placeholder='0.0'/> </td> ";
    divData += "            <td class='tblModalRateCharge'> <input type='text' id='txtTblModalRateCharge" + (AddAirPackages_ID).toString() + "' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);' data-type='number' class='form-control input-sm' data-required='false' maxlength='11' placeholder='0.0'/> </td> ";
    divData += "            <td class='tblModalWeightUnit'> <input type='text' id='txtTblModalWeightUnit" + (AddAirPackages_ID).toString() + "' maxlength='10' class='form-control input-sm' autocomplete='off' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' data-required='false' placeholder='0.0' style='text-transform:uppercase;' /> </td> ";
    divData += "            <td class='tblModalRateClass'> <input type='text' id='txtTblModalRateClass" + (AddAirPackages_ID).toString() + "' maxlength='10' class='form-control input-sm' autocomplete='off' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' data-required='false' placeholder='0.0' style='text-transform:uppercase;' /> </td> ";
    divData += "            <td class='tblModalisMinmum' > <input  type='checkbox' id='ChkTblModalIsMinimum" + (AddAirPackages_ID).toString() + "'></td> ";

    divData += "        </tr> ";
    //$("#" + pDivName + "  section ").append(divData);
    $("#" + ptblModalName + "  tbody ").append(divData);
    $("#slTblModalPackageType" + (AddAirPackages_ID).toString()).html($("#slPackageTypes").html());
    $("#slTblModalPackageType" + (AddAirPackages_ID).toString()).val("");
    //to fill the controls after creating them in the previous loop

    //SetDatepickerFormat();//coz when adding datepicker dynamically i ve to rebind it
}
//fill the Receivables modal table allowing to save multi row with values of many tds//
//if pIsInsert is false then its either multirow edit or invoice Edit according to pIsInvoiceEdit
function FillReceivablesModalTableControls(pStrFnName, pWhereClause, pDivName, ptblModalName, pCheckboxNameAttr, pIsInsert, pIsInvoiceEdit, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var pPOrCData = data[1];
            var pCurData = data[2];
            //Clear the div
            $("#" + pDivName).html("");
            var divData = ' <section class="panel panel-default" style="overflow: scroll; width:auto ; height: 300px;"> ';
            divData += '    <div class="table-responsive"> ';
            divData += '        <table id="' + ptblModalName + '" class="table table-striped b-t b-light text-sm  table-hover"> ';
            divData += '            <thead> ';
            divData += '            <tr> ';
            divData += '                <th id="HeaderSelectChargeTypesIDs" ' + (pIsInsert || pIsInvoiceEdit ? '>' : ' class="hide">');
            divData += '                </th> ';
            divData += '                <th>'+TranslateString("ChargeType")+'</th> ';
            divData += '                <th class="hide">P/C</th> ';
            divData += '                <th class="hide">UOM</th> ';
            divData += '                <th>' + TranslateString("Quantity") + '</th> ';
            divData += '                <th>' + TranslateString("UnitPrice") + '</th> ';
            divData += '                <th class="' + (pDefaults.IsTaxOnItems ? '' : 'hide') + '">' + TranslateString("TaxType") + '</th> ';
            divData += '                <th class="hide">TaxPerc</th> ';
            divData += '                <th class="' + (pDefaults.IsTaxOnItems ? '' : 'hide') + '">' + TranslateString("TaxAmt") + '</th> ';
            divData += '                <th class="' + (pDefaults.IsTaxOnItems ? '' : 'hide') + '">' + "Deduction" + '</th> ';
            divData += '                <th class="hide">DeductionPerc</th> ';
            divData += '                <th class="' + (pDefaults.IsTaxOnItems ? '' : 'hide') + '">' + "DeductionAmt" + '</th> ';
            divData += '                <th>' + TranslateString("TotalAmount") + '</th> ';
            divData += '                <th ' + (pIsInvoiceEdit ? ' class="hide" ' : '') + '>' + TranslateString("Ex.Rate") + '</th> ';
            divData += '                <th>' + TranslateString("Cur") + '</th> ';
            divData += '                <th>'+TranslateString("Inv.No")+'</th> ';
            divData += '                <th ' + (pIsInvoiceEdit ? '' : ' class="hide" ') + '>' + TranslateString("Order") + '</th> ';
            divData += '                <th class="rounded-right hide"></th> ';
            divData += '            </tr> ';
            divData += '            </thead> ';
            divData += '            <tbody> ';
            // Bind Rows
            $.each(JSON.parse(data[0]), function (i, item) {
                divData += "        <tr ID='" + item.ID + "'> ";
                divData += "            <td class='tblModalReceivableID " + (pIsInsert || pIsInvoiceEdit ? " ' " : " hide '") + " > <input name='" + pCheckboxNameAttr + "' type='checkbox' value='" + item.ID + "' " + (!pIsInsert && !pIsInvoiceEdit && item.InvoiceID == 0 && item.DraftInvoiceID == 0/*this is an edit for hidden rec. item coz its added to an invoice so dont update*/ ? " checked='checked' " : "") + "></td> ";//if item has invoiceID then check by default
                divData += "            <td class='tblModalReceivable' val='" + item.ChargeTypeID + "' style='width:300px;'>" + item.ChargeTypeName + "</td> ";
                divData += "            <td class='tblModalReceivablePOrC hide'> <select id='slReceivablePOrC" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='false' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "></select> </td> ";
                divData += "            <td class='tblModalReceivableUOM hide'> <select id='slReceivableUOM" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='false' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "></select></td> ";
                divData += "            <td class='tblModalReceivableQuantity'> <input type='text' id='txtTblModalReceivableQuantity" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='number' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + "  onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);' data-required='false' maxlength='10' placeholder='0' value='1' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + " /> </td> ";
                divData += "            <td class='tblModalReceivableSalePrice'> <input type='text' id='txtTblModalReceivableSalePrice" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='float' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + " onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + " /> </td> ";

                divData += "            <td class='tblModalReceivableAmountWithoutVAT hide'><input type='text' disabled='disabled' id='txtTblModalReceivableAmountWithoutVAT" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + "/> </td> ";
                divData += "            <td class='tblModalReceivableTax " + (pDefaults.IsTaxOnItems ? "" : " hide ") + "'> <select disabled='disabled' id='slReceivableTax" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='controlStyle' style='width:150px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + " data-required='false'" + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "></select> </td> ";
                divData += "            <td class='tblModalReceivableTaxPercentage hide'> <input type='text' id='txtTblModalReceivableTaxPercentage" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + "/> </td> ";
                divData += "            <td class='tblModalReceivableTaxAmount " + (pDefaults.IsTaxOnItems ? "" : " hide ") + "'> <input disabled='disabled' type='text' id='txtTblModalReceivableTaxAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + "/> </td> ";
                divData += "            <td class='tblModalReceivableDiscount " + (pDefaults.IsTaxOnItems ? "" : " hide ") + "'> <select disabled='disabled' id='slReceivableDiscount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='controlStyle' style='width:150px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + " data-required='false'" + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "></select> </td> ";
                divData += "            <td class='tblModalReceivableDiscountPercentage hide'> <input type='text' id='txtTblModalReceivableDiscountPercentage" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + "/> </td> ";
                divData += "            <td class='tblModalReceivableDiscountAmount " + (pDefaults.IsTaxOnItems ? "" : " hide ") + "'> <input disabled='disabled' type='text' id='txtTblModalReceivableDiscountAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + "/> </td> ";

                divData += "            <td class='tblModalReceivableSaleAmount'><input type='text' name='txtTblModalReceivableSaleAmount'  disabled='disabled' id='txtTblModalReceivableSaleAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='float' " + (pIsInvoiceEdit ? "onchange='Invoices_ChangeAmountInInvoiceEdit(false);'" : "onchange='Receivables_txtTblModalSaleAmount_Changed(" + item.ID + "," + pIsInsert + ");' ") + " onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + " /> </td> ";
                divData += "            <td class='tblModalReceivableExchangeRate " + (pIsInvoiceEdit ? "hide" : "") + "'><input type='text' name='txtTblModalReceivableExchangeRate' id='txtTblModalReceivableExchangeRate" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='float' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + ($("#hDefaultCurrencyID").val() == item.CurrencyID || item.InvoiceID != 0 || pIsInvoiceEdit ? "disabled" : "") + " /> </td> ";
                divData += "            <td class='tblModalReceivableCurrency'> <select id='slReceivableCurrency" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' " + (pIsInvoiceEdit ? "disabled='disabled' " : "") + " class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Receivables_txtTblModalCurrency_Changed(" + item.ID + "," + pIsInvoiceEdit + ");' data-required='false' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "></select> </td> ";
                divData += "            <td class='tblModalReceivableInvoice'><input type='text' id='txtTblModalReceivableInvoice" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='float' onkeypress='DisableEnterKey(id);' onfocus='DisableEnterKey(id);' data-required='false' maxlength='6' placeholder='' disabled /> </td> ";
                divData += "            <td class='tblModalReceivableViewrOder " + (pIsInvoiceEdit ? "" : "hide") + "'><input type='text' id='txtTblModalReceivableViewOrder" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='number' onkeypress='CheckValueIsInteger(id);' onfocus='CheckValueIsInteger(id);' data-required='false' maxlength='3' value='' /> </td> ";
                divData += "        </tr> ";
            });
            divData += '            </tbody> ';
            divData += '        </table> ';
            divData += '    </div> ';
            divData += ' </section> ';
            $("#" + pDivName).append(divData);
            $.each(JSON.parse(data[0]), function (i, item) {
                debugger;
                //ReceivablePOrC_GetList(item.POrC, "slReceivablePOrC" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID);
                FillListFromObject(item.POrC, 1, "P/C", "slReceivablePOrC" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID, pPOrCData, null);
                GetListTaxTypeWithNameAndPercAttr(item.TaxTypeID, "api/TaxeTypes/LoadAllWithWhereClause"
                , "<--Select-->", "slReceivableTax" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID, "WHERE IsInactive=0 ORDER BY Name"
                , function () {
                    $("#slReceivableDiscount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).html($("#slReceivableTax" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).html());
                    $("#slReceivableDiscount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.DiscountTypeID == 0 ? "" : item.DiscountTypeID);
                    $("#slReceivableTax" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + " option[IsDiscount='true']").addClass('hide');
                    $("#slReceivableDiscount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + " option[IsDiscount='false']").addClass('hide');
                });
                ReceivableUOM_GetList(item.MeasurementID, "slReceivableUOM" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID);
                $("#txtTblModalReceivableQuantity" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val((item.Quantity == 0 || item.Quantity == undefined) && (item.SalePrice == 0 || item.SalePrice == undefined)/*to handle the case of item set to 0 and saved, so i prevent it from default*/ ? 1 : item.Quantity);
                $("#txtTblModalReceivableSalePrice" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.SalePrice);

                $("#txtTblModalReceivableAmountWithoutVAT" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.AmountWithoutVAT);
                $("#txtTblModalReceivableTaxPercentage" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.TaxPercentage);
                $("#txtTblModalReceivableTaxAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.TaxAmount);
                $("#txtTblModalReceivableDiscountPercentage" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.DiscountPercentage);
                $("#txtTblModalReceivableDiscountAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.DiscountAmount);

                $("#txtTblModalReceivableSaleAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.SaleAmount);
                $("#txtTblModalReceivableExchangeRate" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.ExchangeRate);
                $("#txtTblModalReceivableInvoice" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.InvoiceNumber == 0 ? "" : item.InvoiceNumber);
                $("#txtTblModalReceivableViewOrder" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.ViewOrder == 0 ? "" : item.ViewOrder);
                //ReceivableCurrency_GetList(item.CurrencyID, "slReceivableCurrency" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID, null);
                //pCodeOrName: 1-Code, 2-Name, 3-CurrencyWithAttrs(ExchangeRate)
                FillListFromObject(item.CurrencyID, 3/*pCodeOrName*/, null, "slReceivableCurrency" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID, pCurData, null);
            });
            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! FillReceivablesModalTableControls in mainapp.master.js", "error");
        }
    });
}
//fill AccNote Items in table modal
function FillAccNoteModalTableControls(pStrFnName, pWhereClause, pDivName, ptblModalName, pCheckboxNameAttr, pAccNoteType, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var pPOrCData = data[1];
            var pCurData = data[2];
            //Clear the div
            $("#" + pDivName).html("");
            var divData = ' <section class="panel panel-default" style="overflow: scroll; width:auto ; height: 350px;"> ';
            divData += '    <div class="table-responsive"> ';
            divData += '        <table id="' + ptblModalName + '" class="table table-striped b-t b-light text-sm  table-hover"> ';
            divData += '            <thead> ';
            divData += '            <tr> ';
            divData += '                <th id="HeaderSelectChargeTypesIDs" ';
            divData += '                </th> ';
            divData += '                <th>ChargeType</th> ';
            divData += '                <th>Amount</th> ';
            //divData += '                <th>Ex.Rate</th> ';
            divData += '                <th>Currency</th> ';
            divData += '                <th class="rounded-right hide"></th> ';
            divData += '            </tr> ';
            divData += '            </thead> ';
            divData += '            <tbody> ';
            // Bind Rows
            $.each(JSON.parse(data[0]), function (i, item) {
                divData += "        <tr ID='" + item.ID + "'> ";
                divData += "            <td class='tblModalAccNoteID'> <input name='" + pCheckboxNameAttr + "' type='checkbox' value='" + item.ID + "' " + (item.IsApproved ? " disabled='disabled' ": "") + "></td> ";//if item has invoiceID then check by default
                divData += "            <td class='tblModalAccNoteCharge' val='" + item.ChargeTypeID + "' style='width:600px;'>" + item.ChargeTypeName + "</td> ";
                divData += "            <td class='tblModalAccNoteAmount'>" + (pAccNoteType == constTransactionDebitNote ? item.SaleAmount : item.CostAmount) + " </td> ";
                //divData += "            <td class='tblModalAccNoteExchangeRate'>" + item.ExchangeRate + "</td> ";
                divData += "            <td class='tblModalAccNoteCurrency'>" + item.CurrencyCode + " </td> ";
                divData += "        </tr> ";
            });
            divData += '            </tbody> ';
            divData += '        </table> ';
            divData += '    </div> ';
            divData += ' </section> ';
            $("#" + pDivName).append(divData);
            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! FillReceivablesModalTableControls in mainapp.master.js", "error");
        }
    });
}
function FillAirPackagesModalTableControls(pStrFnName, pControllerParameters, pDivName, ptblModalName, pCheckboxNameAttr, pIsInsert, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            //var pPOrCData = data[1];
            //var pCurData = data[2];
            //Clear the div
            $("#" + pDivName).html("");
            var divData = ' <section class="panel panel-default" style="overflow: scroll; width:100%; height: 150px;"> ';
            //var divData = ' <section class="panel panel-default m-l-n" style="overflow: scroll; width:auto; height: 350px;"> ';
            divData += '    <div class="table-responsive"> ';
            divData += '        <table id="' + ptblModalName + '" class="table table-striped b-t b-light text-sm  table-hover"> ';
            divData += '            <thead> ';
            divData += '            <tr> ';
            divData += '                <th id="HeaderSelectShipmentPackageID" ' + (pIsInsert ? '>' : ' class="hide">');
            divData += '                </th> ';
            divData += '                <th id="HeaderDeleteShipmentPackageID" style="width:5%"> <input id="cbShpmntAirPackageDeleteHeader" type="checkbox" hidden />';
            divData += '                </th>';
            divData += '                <th style="width:17%;">PackageType</th>';
            divData += '                <th style="width:10%;">NoOfPkgs</th>';
            divData += '                <th style="width:18%;">Marks&Nos</th>';
            divData += '                <th style="width:10%;">Gross.Wt</th>';
            divData += '                <th style="width:10%;">Chg.Wt</th>';
            divData += '                <th style="width:10%;">Rates</th>';
            divData += '                <th style="width:10%;">Unit</th>';
            divData += '                <th style="width:10%;">Class</th>';
            divData += '                <th style="width:5%;">IsMin.</th>';
            divData += '                <th class="hide">Total</th>'; 
            divData += '                <th class="rounded-right hide"></th>';   
            divData += '            </tr> ';
            divData += '            </thead> ';
            divData += '            <tbody> ';
            // Bind Rows
            $.each(JSON.parse(data[0]), function (i, item) {
                divData += "        <tr ID='" + item.ID + "'> ";
                divData += "            <td class='tblModalPackageID " + (pIsInsert ? " ' " : " hide '") + " > <input name='" + pCheckboxNameAttr + "' type='checkbox' value='" + item.ID + "' " + (pIsInsert ? "" : "checked='checked'") + "></td> ";
                divData += "            <td class='ID'> <input name='Delete' type='checkbox' value='" + item.ID + "' /></td>"
                divData += "            <td class='tblModalPackageType'> <select id='slTblModalPackageType" + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='true' style='width:100%;'></select></td> ";
                divData += "            <td class='tblModalNoOfPkg'> <input type='text' id='txtTblModalNoOfPkg" + item.ID + "' class='form-control input-sm'  onkeypress='CheckValueIsInteger(id);' onfocus='CheckValueIsInteger(id);' data-type='number' data-required='true' maxlength='8' placeholder='0' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalMarksAndNumbers'> <input type='text' id='txtTblModalMarksAndNumbers" + item.ID + "' maxlength='10' class='form-control input-sm' autocomplete='off' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' data-required='false' placeholder='' style='text-transform:uppercase;width:100%;' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalGrossWeightBll'><input type='text' id='txtTblModalGrossWeightBll" + item.ID + "' class='form-control input-sm' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id)' ; data-required='false' style='width:100%;' placeholder='Weight Charge' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalWeightChargeBll'> <input type='text' id='txtTblModalWeightChargeBll" + item.ID + "' class='form-control input-sm' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id)' ; data-required='false' style='width:100%;' placeholder='Weight Charge' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalRateCharge'> <input type='text' id='txtTblModalRateCharge" + item.ID + "' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);' data-type='number' class='form-control input-sm' data-required='false' style='width:100%;' maxlength='11' placeholder='0.0' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalWeightUnit'> <input type='text' id='txtTblModalWeightUnit" + item.ID + "' maxlength='10' class='form-control input-sm' autocomplete='off' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' data-required='false' placeholder='' style='text-transform:uppercase;width:100%;' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalRateClass'> <input type='text' id='txtTblModalRateClass" + item.ID + "' maxlength='10' class='form-control input-sm' autocomplete='off' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' data-required='false' placeholder='' style='text-transform:uppercase;width:100%;' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalIsMinimum' > <input  type='checkbox' id='ChkTblModalIsMinimum" + item.ID + "'" + (item.IsApproved ? " disabled " : "") + "/></td> ";

                divData += "        </tr> ";
            });
            divData += '            </tbody> ';
            divData += '        </table> ';
            divData += '    </div> ';
            divData += ' </section> ';
            $("#" + pDivName).append(divData);
            //to fill the controls after creating them in the previous loop
            var weightCharge = 0;
            $.each(JSON.parse(data[0]), function (i, item) {
                debugger;

                $("#slTblModalPackageType" + item.ID).html($("#slPackageTypes").html());
                $("#slTblModalPackageType" + item.ID).val(item.PackageTypeID == 0 ? "" : item.PackageTypeID);
                $("#txtTblModalNoOfPkg" + item.ID).val(pIsInsert ? 1 : item.Quantity);
                $("#txtTblModalMarksAndNumbers" + item.ID).val(item.MarksAndNumbers);
                $("#txtTblModalGrossWeightBll" + item.ID).val(item.GrossWeight);
                $("#txtTblModalWeightUnit" + item.ID).val(item.WeightUnit == 0 ? "" : item.WeightUnit);
                $("#txtTblModalRateClass" + item.ID).val(item.RateClass == 0 ? "" : item.RateClass);
                
                $("#txtTblModalWeightChargeBll" + item.ID).val(item.ChargeableWeight);
                $("#txtTblModalRateCharge" + item.ID).val(item.Rate);
                $("#ChkTblModalIsMinimum" + item.ID).prop('checked',item.IsMinimum);
                //if ($("#hDefaultCurrencyID").val() == item.CurrencyID)
                weightCharge = weightCharge + (item.Rate == 0 ? "" : (item.IsMinimum==true? item.Rate: (item.GrossWeight > item.ChargeableWeight ? item.GrossWeight * item.Rate : item.ChargeableWeight * item.Rate)))
            });
            weightCharge=parseFloat(weightCharge).toFixed(2);
            $("#txtWeightCharge").val(weightCharge);
            BindAllCheckboxonTable(ptblModalName, "ID", "cbShpmntAirPackageDeleteHeader");
            CheckAllCheckbox("HeaderDeleteShipmentPackageID");
            //SetDatepickerFormat();//coz when adding datepicker dynamically i ve to rebind it
            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! GetListAsCheckboxes in mainapp.master.js", "error");
        }
    });
}
//Fill Dropdown list
function FillListWithNames(pStrFnName, pStrFirstRow, pListName, pWhereClause) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            //ClearAllListItems;
            $("#" + pListName).html("");
            var option = ' <li class="active" value="0"><a href="#"><input type="radio" name="d-s-r">' + pStrFirstRow + '</a></li> ';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                option += ' <li class="" value="' + item.ID + '"><a href="#"><input type="radio" name="d-s-r">' + item.Name + '</a></li> ';
            });

            $("#" + pListName).append(option);

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! FillListWithNames in mainapp.master.js", "error");
        }
    });
}
//fill list without first row
function FillListWithNamesWithoutFirstRow(pID, pStrFnName, pListName, pWhereClause) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            //ClearAllListItems;
            $("#" + pListName).html("");
            var option = '';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                debugger;
                if (pID == item.ID)
                    option += ' <li class="active" value="' + item.ID + '"><a href="#"><input type="radio" name="d-s-r">' + item.Name + '</a></li> ';
                else
                    option += ' <li class="" value="' + item.ID + '"><a href="#"><input type="radio" name="d-s-r">' + item.Name + '</a></li> ';
            });

            $("#" + pListName).append(option);

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support! FillListWithNames in mainapp.master.js", "error");
        }
    });
}
function FillSlAccountFromGroup(pSlName, pSlGroupName, pSlSubAccountName, pSubAccountID, pAccountID) {
    debugger;
    if (pSubAccountID == 0)
        pSubAccountID = $("#" + pSlGroupName).val();
    $("#"+pSlSubAccountName).html('<option value=0>' + 'AUTO GENERATED' + '</option>');
    FadePageCover(true);
    CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadAll"
        , {
            pLanguage: $("[id$='hf_ChangeLanguage']").val()
            , pWhereClause: "WHERE ID IN (SELECT Account_ID FROM A_SubAccounts_Details WHERE SubAccount_ID=" + pSubAccountID + ")"
            , pOrderBy: " Name, Code"
        }
        , function (pData) {
            var pAccounts = pData[0];
            FillListFromObject_ERP(pAccountID, OptionNameCodeAccount == "true" ? 4 : 3 /*pCodeOrName*/, TranslateString("SelectFromMenu"), pSlName, pAccounts, null);
            FadePageCover(false);
        }
        , null);
}
function FillSlSubAccount(pSlName, pSlAccountName, pSubAccountID, pAccountID) {
    debugger;
    //$("#slSubAccount").val(0);
    if (pAccountID == 0)
        pAccountID = $("#" + pSlAccountName).val();
    FadePageCover(true);
    CallGETFunctionWithParameters("/api/ChartOfLinkingAccounts/LoadSubAccountDetails"
        , {
            pLanguage: $("[id$='hf_ChangeLanguage']").val()
            , pWhereClauseSubAccountDetails: "WHERE IsMain=0 AND Account_ID=" + pAccountID
            , pOrderBy: "Name"
        }
        , function (pData) {
            FillListFromObject_ERP(pSubAccountID, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), pSlName, pData[0], null);
            FadePageCover(false);
        }
        , null);
}

////to be replaced with function ClearAll(containerName, callback)
//function ClearAllControls(pArryResetText, pArryResetSelectOption, pArrayResetCheckbox) {
//    debugger;
//    $('input[type="text"].validation-error').removeClass("validation-error");
//    $('select.validation-error').removeClass("validation-error");
//    // Reset Textbox Array list
//    if (pArryResetText != null) {
//        $.each(pArryResetText, function (i, item) {
//            $("#" + item).val("");
//        });
//    }
//    // Reset Selection Options Array list
//    if (pArryResetSelectOption != null) {
//        var _resetSelectOption = null;
//        $.each(pArryResetSelectOption, function (i, item) {
//            _resetSelectOption = $("#" + item);
//            _resetSelectOption[0].selectedIndex = 0;
//        });
//    }
//    // Reset Checkbox Array list
//    if (pArrayResetCheckbox != null) {
//        $.each(pArrayResetCheckbox, function (i, item) {
//            $("#" + item).prop('checked', false);
//        });
//    }
//    $(".alert-danger").slideUp();
//}

//Sherif: Added newly 11/02/2015
//used instead of function ClearAllControls(pArryResetText, pArryResetSelectOption, pArrayResetCheckbox) as it taked only the container name
function ClearAll(containerName, callback) {

    $('input[type="text"].validation-error').removeClass("validation-error");
    $('input[type="password"].validation-error').removeClass("validation-error");
    $('select.validation-error').removeClass("validation-error");

    // Reset Textbox Array list
    var _ListofControls = $(containerName.toString() + ' input[type="text"]');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).val("");
        });
    }

    // Reset Textbox Array list
    var _ListofControls = $(containerName.toString() + ' input[type="number"]');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).val("");
        });
    }
    // sherif: Reset Inputs of type password
    _ListofControls = $(containerName.toString() + ' input[type="password"]');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).val("");
        });
    }
    // sherif: Reset Label Array list
    var _ListofControls = $(containerName.toString() + ' label[purpose="dynamicLabel"]');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).html("");
        });
    }
    // Reset Textbox Array list
    var _ListofControls = $(containerName.toString() + ' textarea');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).val("");
        });
    }
    // Reset Hidden Array list
    _ListofControls = $(containerName.toString() + ' input[type="hidden"]');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).val("");
        });
    }
    // Reset Selection Options Array list
    _ListofControls = $(containerName.toString() + ' select');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            item.selectedIndex = 0;
        });
    }
    // Reset Checkbox Array list
    _ListofControls = $(containerName.toString() + ' input[type="checkbox"]');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).prop('checked', false);
        });
    }

    $(".alert-danger").slideUp();
    try {
        $('#lblShown').text("")
    }
    catch (ex) {

    }
    if (callback != null && callback != undefined)
        callback();
}
function ClearSlList(pSlName) {
    $("#" + pSlName).html("<option value=''><--Select--></option>");
}
function BindDataToHTMLTable(pHTMLTableID, pHTMLRowLayout, pData, callback) {
    // removes existing rows from table except header row
    $('#' + pHTMLTableID + ' tr:gt(0)').remove();
    //apply tmpl plugin to <script> and append result to table
    $("#" + pHTMLRowLayout).tmpl(pData).appendTo('#' + pHTMLTableID);
    if (callback != null && callback != undefined) {
        callback();
    }
    ReverseUIControls();
}

//function ShowDashboard() {
//    $('#div-main-content').show();
//}

//it attaches function to the checkboxes in tables so when all are checked then check cb-checkall too

//it attaches function to the checkboxes in tables so when all are checked then check cb-checkall too
function BindAllCheckboxonTable(pTableName, pCheckBoxColumnClassName, pCheckBoxID) {
    debugger;
    $("#" + pCheckBoxID).prop("checked", false); //initialised to be unchecked then according to total checkboxes it is rechecked or not
    $('#' + pTableName + ' td.' + pCheckBoxColumnClassName + ' input:checkbox').click(function () {
        debugger;
        if (!this.checked) {
            debugger;
            if (pCheckBoxID != null && pCheckBoxID != undefined) {
                $("#" + pCheckBoxID).prop('checked', false);
            }
            else {
                $("#cb-CheckAll").prop('checked', false);
            }
        }
            //sherif: check if all are checked then check the cb-checkall
            //note: it compares items with class(ID) and name(Delete) to exclude checked boxes which are not Delete
        else if ($('#' + pTableName + ' td.' + pCheckBoxColumnClassName + ' input:checkbox').length ==
            //sherif: coz i gave a name property to the checkboxes
            //$('#' + pTableName + ' td').find('input[type="checkbox"]:checked').length) {
            $('#' + pTableName + ' td').find('input[name="Delete"]:checked').length) {
            if (pCheckBoxID != null && pCheckBoxID != undefined) {
                $("#" + pCheckBoxID).prop('checked', true);
            }
            else {
                $("#cb-CheckAll").prop('checked', true);
            }
        }
    });
}

//it attaches function to the main checkbox in the header, so when changes the other checkboxes take its value
function CheckAllCheckbox(pCheckBoxID) {
    debugger;
    $("#" + pCheckBoxID).click(function (e) {

        var table = $(e.target).closest('table');

        $('td input[name="Delete"]:checkbox', table).not(':disabled').prop('checked',
        $(this).find('input:checkbox').is(':checked'));
    });
}

// get all select IDs from selected table
function GetAllSelectedIDs(pTableName) {
    var listOfIDs = new Array();
    $('#' + pTableName + ' td').find('input[type="checkbox"]:checked').each(function () {
        listOfIDs.push($(this).attr('value'));
    });
    return listOfIDs;
}
// get all select IDs from selected table as string
function GetAllSelectedIDsAsString(pTableName) {
    var listOfIDs = "";
    //$('#' + pTableName + ' td').find('input[type="checkbox"]:checked').each(function () {
    $('#' + pTableName + ' td').find('input[name="Delete"]:checked').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
    });
    return listOfIDs;
}
// get all select IDs from selected table as string with various checkboxes
function GetAllSelectedIDsAsStringWithNameAttr(pCheckboxNameAttr) {
    var listOfIDs = "";
    $('input[name="' + pCheckboxNameAttr + '"]:checked').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
    });
    return listOfIDs;
}
////Get all IDs wether checked or not
//function GetAllIDsAsStringWithNameAttr(pCheckboxNameAttr) {
//    var listOfIDs = "";
//    $('input[name="' + pCheckboxNameAttr + '"]').each(function () {
//        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
//    });
//    return listOfIDs;
//}
// get all select IDs from selected table as string with various checkboxes
function GetAllSelectedIDsAsStringWithTableNameAndNameAttr(pTableName, pCheckboxNameAttr) {
    var listOfIDs = "";
    $('#' + pTableName + ' td').find('input[name="' + pCheckboxNameAttr + '"]:checked').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
    });
    return listOfIDs;
}
function GetAllIDsAsStringWithNameAttr(pTableID, pCheckboxNameAttr) {
    var listOfIDs = "";
    $("#" + pTableID).find('input[name="' + pCheckboxNameAttr + '"]').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
    });
    return listOfIDs;
}
//Get all IDs which are NOT checked
function GetAllNOTSelectedIDsAsStringWithNameAttr(pCheckboxNameAttr) {
    var listOfIDs = "";
    $('input[name="' + pCheckboxNameAttr + '"]:not(:checked)').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
    });
    return listOfIDs;
}
//By A.Medra for Venus: used it to save time of tracing
function GetAllUnSelectedIDsAsStringWithNameAttr(pCheckboxNameAttr) {
    var listOfIDs = "";
    $('input[name="' + pCheckboxNameAttr + '"]:checked').each(function () {
        if (parseInt($(this).attr('value')) !== 0) {
            listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
        }
    });
    return listOfIDs;
}
//// get valaues of tds in a table using the name attr
//function GetValuesOfTblCellsAsStringWithNameAttr(pTableName, pAttrName) {
//    var listOfValues = "";
//    $('#' + pTableName + ' td').find('input[name="' + pAttrName + '"]').each(function () {
//        debugger;
//        listOfValues += ((listOfValues == "") ? "" : ",") + $(this).val();
//    });
//    return listOfValues;
//}
// clear all checked checkBoxes
function UncheckAllCheckboxes(pTableName) {
    debugger;
    $('#' + pTableName + ' tr td input[type="checkbox"]').each(function () {
        $(this).prop('checked', false);
    });
}
// check all checked checkBoxes
function CheckCheckboxes(pTableName, pIDs) {
    if (pIDs != null && pIDs != undefined) {
        var substr = pIDs.split(',');
        jQuery.each(substr, function (index, item) {
            $('#' + pTableName + ' td input:checkbox[value=' + item + ']').prop('checked', true);
        });
    }
}
// Validate controls before send to the server
//Date.prototype.compareDates($(tr).find("td.CurrentPercentageDate").html(),"3/10/2015")
//Date.prototype.compareDates($($("tr[TaxeTypeID='" + pTaxeTypeID + "']")).find("td.CurrentPercentageDate").html(),"3/10/2015")
function ValidateForm(pClassNameToValidate, pModalID) {
    debugger;
    var submit = true;
    //validate for empty and length of code
    $.each($('#' + pModalID + ' .' + pClassNameToValidate + " .has-error input[type=text]"), function (i, item) {
        $(item).removeClass('validation-error');
        if (($(item).val().trim() == '' && $(item).attr('data-required') == "true") || //to check for mandatory fields
            ($(item).attr('data-minlength') > $(item).val().trim().length && $(item).val().trim() != '') || //sherif: the condition $(item).val() != '' is used in case a txtbox a certain number of characters or be empty (ex. 5 letters or empty not 2 letters)
            $(item).val().split(';').length > 1 || //to check for semicolons
            $(item).val().split('<').length > 1 ||
            $(item).val().split('>').length > 1
            //|| $(item).val().split('&').length > 1
            ) {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
    });
    //validate for empty and length of code
    $.each($('#' + pModalID + ' .' + pClassNameToValidate + " .has-error :password"), function (i, item) {
        $(item).removeClass('validation-error');
        if (($(item).val().trim() == '' && $(item).attr('data-required') == "true") || //to check for mandatory fields
            ($(item).attr('data-minlength') > $(item).val().trim().length && $(item).val().trim() != '') //sherif: the condition $(item).val() != '' is used in case a txtbox a certain number of characters or be empty (ex. 5 letters or empty not 2 letters)
            || $("#pwdPassword").val() != $("#pwdConfirmPassword").val()) {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
    });
    //validate ExchangeRate values
    $.each($('#' + pModalID + '.' + pClassNameToValidate + " .has-error input[name=ExchangeRate]"), function (i, item) {
        $(item).removeClass('validation-error');
        if (($(item).val().trim == '' || $(item).val() < 0.00001 || $(item).val() > 99999.99999 || !($.isNumeric($(item).val().trim())))
            && $(item).attr('data-required') == "true") //this line is for letters as when compared always guves false
        {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
    });
    //validate ExchangeRateDate
    $.each($('#' + pModalID + '.' + pClassNameToValidate + " .has-error input[name=txtCurrentExchangeRateDate]"), function (i, item) {
        $(item).removeClass('validation-error');
        //if (Date.prototype.compareDates($("tr[CurrencyID='" + $("#hID").val() + "']").find("td.CurrentExchangeRateDate").text(), $(item).val().trim()) < 0
        if (Date.prototype.compareDates(ConvertDateFormat($('#tblCurrencies tr[id=' + $("#hID").val() + '] td.CurrentExchangeRateDate').text()), ConvertDateFormat($(item).val().trim())) < 0
            && $(item).attr('data-required') == "true") //this line is for letters as when compared always gives false
        {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
    });
    //validate QuotationExpirationDate
    $.each($('#' + pModalID + '.' + pClassNameToValidate + " .has-error input[id=txtQuotationExpirationDate]"), function (i, item) {
        $(item).removeClass('validation-error');
        var TodaysDate = new Date();
        var FormattedTodaysDate = TodaysDate.toLocaleDateString();
        var diffDays = Date.prototype.compareDates(FormattedTodaysDate, ConvertDateFormat($(item).val().trim()));//if < 1 then add the validation error
        if (diffDays < 1
            && $(item).attr('data-required') == "true") //this line is for letters as when compared always gives false
        {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
    });
    //validate Percentage values
    $.each($('#' + pModalID + '.' + pClassNameToValidate + " .has-error input[name=Percentage]"), function (i, item) {
        $(item).removeClass('validation-error');
        if (($(item).val() == '' || $(item).val() < 0 || $(item).val() > 100 || !($.isNumeric($(item).val().trim())))
            && $(item).attr('data-required') == "true") //this line is for letters as when compared always gives false
        {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
    });
    //validate PercentageDate
    $.each($('#' + pModalID + '.' + pClassNameToValidate + " .has-error input[name=txtCurrentPercentageDate]"), function (i, item) {
        $(item).removeClass('validation-error');
        if (Date.prototype.compareDates(ConvertDateFormat($('#tblTaxeTypes tr[id=' + $("#hID").val() + '] td.CurrentPercentageDate').text()), ConvertDateFormat($(item).val().trim())) < 0
            && $(item).attr('data-required') == "true") //this line is for letters as when compared always guves false
        {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
    });
    //validate to make sure the value is a number between 0 and 999 for any id= "txtDays" and 0 to 99 for"txtViewOrder"
    $.each($('#' + pModalID + ' .' + pClassNameToValidate + " .has-error input[data-type=number]"), function (i, item) {
        $(item).removeClass('validation-error');
        //txtdays in Payment terms
        if (($(item).val() == '' || $(item).val() < 0 || $(item).val() > 999 || !($.isNumeric($(item).val().trim())) || $(item).val().split('.').length > 1) //the last condition is for integer
            && $(item).attr('data-required') == "true" && ($(item).attr('id') == "txtDays")) //sherif: this is for days in payment terms
        {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
        //txtViewOrder in ChargeTypes
        if (($(item).val() == '' || $(item).val() < 0 || $(item).val() > 99 || !($.isNumeric($(item).val().trim())) || $(item).val().split('.').length > 1) //the last condition is for integer
            && $(item).attr('data-required') == "true" && ($(item).attr('id') == "txtViewOrder")) //sherif: this is for days in payment terms
        {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
    });

    $.each($('#' + pModalID + ' .' + pClassNameToValidate + " .has-error input[type=number]"), function (i, item) {
        $(item).removeClass('validation-error');
        //txtdays in Payment terms
        if (($(item).val() == '' || $(item).val() < 0 || $(item).val() > 999 || !($.isNumeric($(item).val().trim())) || $(item).val().split('.').length > 1) //the last condition is for integer
            && $(item).attr('data-required') == "true") //sherif: this is for days in payment terms
        {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
    });
    //validate to check that 1st 2 letters in port code like country code
    $.each($('#' + pModalID + ' .' + pClassNameToValidate + " .has-error input[name=txtPortCode]"), function (i, item) {
        $(item).removeClass('validation-error');
        var element = $("#slCountry").find('option:selected'); // to get the selected row
        var CountryCode = element.attr("CountryCode");
        if ($(item).val().toUpperCase().substring(0, 2) != CountryCode && $(item).attr('name') == "txtPortCode") {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
    });
    //validate Email values
    $.each($('.' + pClassNameToValidate + " .has-error input[name=Email]"), function (i, item) {
        $(item).removeClass('validation-error');
        if (!validateEmail($(item).val()) && $(item).val().trim() != "") {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
    });
    //validate Website values (must have at least 1 dot)
    $.each($('.' + pClassNameToValidate + " .has-error input[name=Website]"), function (i, item) {
        $(item).removeClass('validation-error');
        if ($(item).val().split('.').length < 2 && $(item).val().trim() != "") {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
    });
    //validate Datepicker format(used in case data-required=false so to delete it i remove readonly, and the user might enter wrong format) 
    $.each($('#' + pModalID + " .datepicker-input[readonly!=readonly]"), function (i, item) {
        if ($(item).is('[data-required=false]')) //this condition is to make sure that validation-error class is only removed done only for datepickers with data-required-false and not readonly
            $(item).removeClass('validation-error');
        if ($(item).val().trim() != '' && !isValidDate($(item).val().trim(), 1)) {
            debugger;
            $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
        }
    });
    //validate for select box
    $.each($('#' + pModalID + ' .' + pClassNameToValidate + " .has-error select[data-required!=false]"), function (i, item) {
        $(item).removeClass('validation-error');
        if ($(item).val() == '' || $(item).val() == '0') {
            debugger;
            if (submit) {
                $('.div-error').slideDown();
            } $(item).addClass('validation-error'); submit = false;
        }
    });
    if (submit) {
        $('input[type="text"].validation-error').removeClass("validation-error");
        $('select.validation-error').removeClass("validation-error");
        $('.div-error').slideUp();
    }
    return submit;
}
//sherif: validate for Email
function validateEmail($email) {
    var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
    return emailReg.test($email);
}

// Validates that the input string is a valid date formatted as "dd/mm/yyyy" or "mm/dd/yyyy"
//pFormatType: 1-dd/MM/yyyy 2-MM/dd/yyyy
function isValidDate(dateString, pFormatType) {
    // First check for the pattern
    if (!/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(dateString))
        return false;

    // Parse the date parts to integers
    var parts = dateString.split("/");
    if (pFormatType == 1) //dd/mm/yyyy
    {
        var day = parseInt(parts[0], 10);
        var month = parseInt(parts[1], 10);
    }
    else
        if (pFormatType == 2) //mm/dd/yyyy
        {
            var day = parseInt(parts[1], 10);
            var month = parseInt(parts[0], 10);
        }
    var year = parseInt(parts[2], 10);

    // Check the ranges of month and year
    if (year < 1000 || year > 3000 || month == 0 || month > 12)
        return false;

    var monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    // Adjust for leap years
    if (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0))
        monthLength[1] = 29;

    // Check the range of the day
    return day > 0 && day <= monthLength[month - 1];
};

function AppendRowtoTable(pHTMLTableID, pHTMLTableRow) {
    $("#" + pHTMLTableID + " tbody").append(pHTMLTableRow).each(function () {
        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
            $(".table>tbody>tr:not(.reversed)").reverseChildren();
        }
    });

}

function ClearAllTableRows(pHTMLTableID) {
    $("#" + pHTMLTableID + " tbody tr").remove();
}

function ClearAllOptions(pSelectID) {
    $('#' + pSelectID)
    .find('option')
    .remove()
    .end();
}

function InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pCurrentPageNo, pRowsCount) {
    if (pRowsCount > 0 && $('#' + pSelectPageSizeName).val() != null) {
        var totalPageCount = Math.ceil(pRowsCount / parseInt($('#' + pSelectPageSizeName).val().trim()));
        var options = {
            size: "small",
            currentPage: pCurrentPageNo,
            totalPages: totalPageCount,
            onPageClicked: function (e, originalEvent, type, page) {
                if (page.toString() != $('#' + pDivPagerName + 'li.active a').text()) {
                    debugger;
                    LoadDataWithPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, page);
                }
            }
        };
        debugger;
        if (pRowsCount > parseInt($('#' + pSelectPageSizeName).val().trim())) {
            if (pCurrentPageNo > 1) {
                $('#' + pSpnFirstPageRowName).html((parseInt($('#' + pSelectPageSizeName).val().trim()) * (pCurrentPageNo - 1)) + 1);
                var intLastRecordNo = parseInt($('#' + pSpnFirstPageRowName).html()) + parseInt($('#' + pSelectPageSizeName).val().trim()) - 1;
                if (intLastRecordNo > pRowsCount)
                    $('#' + pSpnLastPageRowName).html(pRowsCount);
                else
                    $('#' + pSpnLastPageRowName).html(parseInt($('#' + pSpnFirstPageRowName).html()) + parseInt($('#' + pSelectPageSizeName).val().trim()) - 1);
            }
            else {
                $('#' + pSpnFirstPageRowName).html("1");
                $('#' + pSpnLastPageRowName).html(parseInt($('#' + pSelectPageSizeName).val().trim()));
            }
        }
        else {
            $('#' + pSpnFirstPageRowName).html("1");
            $('#' + pSpnLastPageRowName).html(pRowsCount);
        }

        $('#' + pSpnTotalCountName).html(pRowsCount);

        $('#' + pDivTextTotalModal).show();
        $('#' + pDivPagerName).show();

        jQuery.noConflict();
        $('#' + pDivPagerName).bootstrapPaginator(options);

        if (totalPageCount == 1)
            $('#' + pDivPagerName).hide();
        else
            $('#' + pDivPagerName).show();
    }
    else {
        $('#' + pDivTextTotalModal).hide();
        $('#' + pDivPagerName).hide();
    }
}

//sherif: to call LoadDataWithPagingForModal instead of LoadDataWithPaging
function InitiPagingForModal(pDivID, pWhereClause, pOrderBy, pCurrentPageNo, pRowsCount) {
    if (pRowsCount > 0 && $('#select-page-size').val() != null) { //sherif: i use $('#select-page-size') without -Modal (i.e. the same apply size for both modals)
        var totalPageCount = Math.ceil(pRowsCount / parseInt($('#select-page-size').val().trim()));
        var options = {
            size: "small",
            currentPage: pCurrentPageNo,
            totalPages: totalPageCount,
            onPageClicked: function (e, originalEvent, type, page) {
                if (page.toString() != $("#div-Pager-Modal li.active a").text()) {
                    debugger;
                    LoadDataWithPagingForModal(page, pWhereClause, pOrderBy);
                }
            }
        };
        debugger;//sherif: i use $('#select-page-size') without -Modal (i.e. the same apply size for both modals)
        if (pRowsCount > parseInt($('#select-page-size').val().trim())) {
            if (pCurrentPageNo > 1) {
                $("#spn-first-page-row-Modal").html((parseInt($('#select-page-size').val().trim()) * (pCurrentPageNo - 1)) + 1);
                var intLastRecordNo = parseInt($('#spn-first-page-row-Modal').html()) + parseInt($('#select-page-size').val().trim()) - 1;
                if (intLastRecordNo > pRowsCount)
                    $("#spn-last-page-row-Modal").html(pRowsCount);
                else
                    $("#spn-last-page-row-Modal").html(parseInt($('#spn-first-page-row-Modal').html()) + parseInt($('#select-page-size').val().trim()) - 1);
            }
            else {
                $("#spn-first-page-row-Modal").html("1");
                $("#spn-last-page-row-Modal").html(parseInt($('#select-page-size').val().trim()));
            }
        }
        else {
            $("#spn-first-page-row-Modal").html("1");
            $("#spn-last-page-row-Modal").html(pRowsCount);
        }
        debugger;
        $("#spn-total-count-Modal").html(pRowsCount);

        $("#div-Text-Total-Modal").show();
        $("#div-Pager-Modal").show();

        jQuery.noConflict();
        $('#' + pDivID).bootstrapPaginator(options);

        if (totalPageCount == 1)
            $("#div-Pager-Modal").hide();
        else
            $("#div-Pager-Modal").show();
    }
    else {
        $("#div-Text-Total-Modal").hide();
        $("#div-Pager-Modal").hide();
    }
}

function LoadDataWithPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNo) {
    debugger;
    if (parent.strBindTableRowsFunctionName == "Quotations_BindTableRows") {
        var pWhereClause = Quotations_GetFilterWhereClause();
        LoadWithPagingWithWhereClause(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "api/Quotations/LoadWithWhereClause", pWhereClause, pPageNo, $('#' + pSelectPageSizeName).val().trim(), function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "OperationsManagement_BindTableRows" || parent.strBindTableRowsFunctionName == "BLDocuments_BindTableRows") {
        var pWhereClause = Operations_GetFilterWhereClause();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNo, pPageSize: $('#' + pSelectPageSizeName).val().trim(), pWhereClause: pWhereClause };
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause }
        //LoadWithPagingWithWhereClause(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "api/Operations/LoadWithWhereClause", pWhereClause, pPageNo, $('#' + pSelectPageSizeName).val().trim(), function (pTabelRows) {
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, "ID DESC", pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Treasury_BindTableRows") {
        var pWhereClause = Treasury_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Treasury/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "RS_Projects_BindTableRows") {
        var pWhereClause = Treasury_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/RS_Projects/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_FCL_Tariff_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_FCL_Tariffs/WH_FCL_Tariffs_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_FCL_Tariff_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_MTY_Tariff_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_MTY_Tariffs/WH_MTY_Tariffs_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_MTY_Tariff_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_CntrStock_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_CntrStocks/WH_CntrStocks_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_CntrStock_GetWhereClause();
        var pOrderBy = "ContainerNumber";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_MTY_GateIn_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_MTY_GateIn/WH_MTY_GateIn_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_MTY_GateIn_GetWhereClause();
        var pOrderBy = "ID";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_MTY_Inventory_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_MTY_Inventory/WH_MTY_Inventory_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_MTY_Inventory_GetWhereClause();
        var pOrderBy = "ID";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_MTY_GateOut_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_MTY_GateOut/WH_MTY_GateOut_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_MTY_GateOut_GetWhereClause();
        var pOrderBy = "StorageEndDate DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_CSL_Tariff_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_CSL_Tariffs/WH_CSL_Tariffs_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_CSL_Tariff_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
        //else if (parent.strBindTableRowsFunctionName == "WH_FCL_Tariff_Details_BindTableRows") {
        //    debugger;
        //    strLoadWithPagingFunctionName = "/api/WH_FCL_Tariffs/WH_FCL_Tariff_Details_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        //    var pWhereClause = WH_FCL_Tariff_Details_GetWhereClause();
        //    var pOrderBy = "ID";
        //    var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        //    var pPageSize = $('#select-page-size').val();
        //    var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        //    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
        //        var parm = [JSON.parse(pData[0])];
        //        var runFunction = window[strBindTableRowsFunctionName];
        //        if (typeof runFunction === "function") runFunction.apply(null, parm);
        //    });
        //}
    else if (parent.strBindTableRowsFunctionName == "BankAccount_BindTableRows") {
        var pWhereClause = BankAccount_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/BankAccount/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "TaxeTypes_BindTableRows") {
        var pWhereClause = TaxeTypes_GetWhereClause();
        var pOrderBy = "Code";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/TaxeTypes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Payment_BindTableRows") {
        var pWhereClause = Payment_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        //LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ARAllocation_Partners_BindTableRows") {
        var pWhereClause = ARAllocation_Partners_GetWhereClause();
        var pOrderBy = "PartnerTypeID, Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseAllocation_Partners: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payment/ARAllocation_Partners_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PaymentApproval_BindTableRows") {
        var pWhereClause = PaymentApproval_GetWhereClause();
        var pOrderBy = " ID DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "OperationPayableApproval_BindTableRows") {
        var pWhereClause = OperationPayableApproval_GetWhereClause();
        var pOrderBy = " OperationID DESC, PartnerSupplierName ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payables/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "InvoiceApproval_BindTableRows") {
        var pWhereClause = InvoiceApproval_GetWhereClause();
        //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
        var pOrderBy = " ID DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Invoices/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PurchaseInvoiceApproval_BindTableRows") {
        var pWhereClause = PurchaseInvoiceApproval_GetWhereClause();
        //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
        var pOrderBy = " ID ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/PurchaseInvoice/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "AccNoteApproval_BindTableRows") {
        var pWhereClause = AccNoteApproval_GetWhereClause();
        //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
        var pOrderBy = " ID DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/AccNote/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "LocalEmails_BindTableRows") {
        var pWhereClause = LocalEmails_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy, pIsReceived: true }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/LocalEmails/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Pricing_BindTableRows") {
        var pWhereClause = Pricing_GetWhereClause();
        var pOrderBy = "SupplierName, ID DESC"; //"TransportTypeID, LineName, POLName, PODName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsReturnObjectArray: false, pPricingTypeID: intPricingType, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Pricing/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0]), JSON.parse(pData[7])/*pPricingCharge*/];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PricingSettings_BindTableRows") {
        var pWhereClause = PricingSettings_GetWhereClause();
        var pOrderBy = "ChargeTypeName"; //"TransportTypeID, LineName, POLName, PODName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsReturnObjectArrayForPricingSettings: false, pPricingTypeID: intPricingType, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Pricing/PricingSettings_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PricingCharges_BindTableRows") { //PricingCharges NOT Pricing
        var pWhereClause = PricingCharges_GetWhereClause();
        var pOrderBy = "SupplierName, ID DESC"; //"PricingTypeID, SupplierName, POLName, PODName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsReturnObjectArray: false, pPricingTypeID: $("#slPricingType").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        //LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Pricing/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0]), JSON.parse(pData[7])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PartnerOpenBalance_BindTableRows") {
        var pWhereClause = PartnerOpenBalance_GetWhereClause();
        var pOrderBy = "PartnerTypeCode, PartnerName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjectsForPartnerOpenBalance: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "BankOpenBalance_BindTableRows") {
        var pWhereClause = BankOpenBalance_GetWhereClause();
        var pOrderBy = "AccountName ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjectsForBankOpenBalance: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "TreasuryOpenBalance_BindTableRows") {
        var pWhereClause = TreasuryOpenBalance_GetWhereClause();
        var pOrderBy = "TreasuryName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjectsForTreasuryOpenBalance: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Currencies_BindTableRows") {
        var pWhereClause = Currencies_GetWhereClause();
        var pOrderBy = "Code";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Currencies/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        })
    }
    else if (parent.strBindTableRowsFunctionName == "JVTypes_BindTableRows") {
        var pWhereClause = JVTypes_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/JVTypes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "SystemOptions_BindTableRows") {
        var pWhereClause = SystemOptions_GetWhereClause();
        var pOrderBy = "OptionArName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SystemOptions/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Creditlimitexceptionperiod_BindTableRows") {
        debugger;
        var pWhereClause = Creditlimitexceptionperiod_GetWhereClause();
        var pOrderBy = "customerName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Creditlimitexceptionperiod/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "JournalTypes_BindTableRows") {
        var pWhereClause = JournalTypes_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/JournalTypes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "OpnJVNo_BindTableRows") {
        var pWhereClause = OpnJVNo_GetWhereClause();
        var pOrderBy = "ID";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/OpnJVNo/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "JVDefaults_BindTableRows") {
        var pWhereClause = JVDefaults_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/JVDefaults/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Sec_UserSafes_BindTableRows") {
        var pWhereClause = Sec_UserSafes_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Sec_UserSafes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "CashFlow_BindTableRows") {
        debugger;
        var pWhereClause = CashFlow_GetWhereClause();
        var pOrderBy = "ID";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CashFlow/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "JournalVouchers_BindTableRows") {
        var pWhereClause = JournalVouchers_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/JournalVouchers/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Post_Restore_Unpost_JVs_BindTableRows") {
        var pWhereClause = Post_Restore_Unpost_JVs_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/JournalVouchers/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "A_ActionLink_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/A_AccountLink/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { A_AccountLink_BindTableRows(pTabelRows); A_AccountLink_ClearAllControls(); });
        HighlightText("#tblA_AccountLink>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "Voucher_BindTableRows") {
        var pWhereClause = Voucher_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Post_Unpost_Voucher_BindTableRows") {
        var pWhereClause = Post_Unpost_Voucher_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PostingReceivablePayableNotes_BindTableRows") {
        var pWhereClause = PostingReceivablePayableNotes_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseChequeStatus: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Voucher/ChequeStatus_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PostingUnderCollectNotes_BindTableRows") {
        var pWhereClause = PostingReceivablePayableNotes_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseChequeStatus: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Voucher/ChequeStatus_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ContainerTracking_BindTableRows") {
        var pWhereClause = ContainerTracking_GetWhereClause();
        var pOrderBy = "OperationID DESC, ContainerNumber DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/OperationContainersAndPackages/ContainerTracking_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "A_Fiscal_Year_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_Actions/LoadWithPaging", pPageNumber, pPageSize,
        //    function (pData) {
        //        var parm = [JSON.parse(pData[0])];
        //        var runFunction = window[strBindTableRowsFunctionName];
        //        if (typeof runFunction === "function")
        //            runFunction.apply(null, parm);
        //        //  CRM_Actions_BindTableRows(pTabelRows); 
        //        CRM_Actions_ClearAllControls();
        //    });
        //HighlightText("#tblCRM_Actions>tbody>tr", $("#txt-Search").val().trim());
        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/A_Fiscal_Year/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { A_Fiscal_Year_BindTableRows(pTabelRows); });
        HighlightText("#tblA_Fiscal_Year>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "Warehouse_BindTableRows") {
        var pWhereClause = Warehouse_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Warehouse/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Area_BindTableRows") {
        var pWhereClause = Area_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Area/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Row_BindTableRows") {
        var pWhereClause = Row_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Row/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
        /************************Warehousing/Transactions**********************************/
    else if (parent.strBindTableRowsFunctionName == "Contract_BindTableRows") {
        var pWhereClause = Contract_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Contract/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Receive_BindTableRows") {
        var pWhereClause = Receive_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Receive/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Pickup_BindTableRows") {
        var pWhereClause = Pickup_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Pickup/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Inventory_BindTableRows") {
        var pWhereClause = Inventory_GetWhereClause();
        var pOrderBy = pDefaults.UnEditableCompanyName == "DGL" ? "PurchaseItemCode" : "LocationCode,PurchaseItemCode";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Inventory/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ProductLog_BindTableRows") {
        var pWhereClause = ProductLog_GetWhereClause();
        var pOrderBy = "PurchaseItemCode,FinalizeDate";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/ProductLog/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
        /********************************CRM/SC/... By Mostafa Hany*****************************************/
    else if (parent.strBindTableRowsFunctionName == "CommissionTarget_BindTableRows") {
        var pWhereClause = CommissionTarget_GetWhereClause();
        var pOrderBy = "TargetYear DESC, SalesmanName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CommissionTarget/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WHInvoice_BindTableRows") {
        var pWhereClause = WHInvoice_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/WHInvoice/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "MaterialIssueVouchers_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        var WhereClause = "Where TransactionTypeID = " + TransTypeID + " AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            //WhereClause += " AND Code LIKE '%" + $('#txtCode_Filter').val() + "%'";
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        if ($('#txtRequestCode_Filter').val().trim() != "") {
            WhereClause += " AND MaterialRequestCode = '" + $('#txtRequestCode_Filter').val() + "'";
        }
        if ($('#txtInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND InvoiceNo = '" + $('#txtInvoiceNo_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //  HighlightText("#tblSC_Stores>tbody>tr", $("#txt-Search").val().trim());
    }


    else if (parent.strBindTableRowsFunctionName == "SC_Inventory_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        var WhereClause = "Where TransactionTypeID = " + 100 + " AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code LIKE '%" + $('#txtCode_Filter').val() + "%'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //  HighlightText("#tblSC_Stores>tbody>tr", $("#txt-Search").val().trim());
    }

    else if (parent.strBindTableRowsFunctionName == "SC_Settlement_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        var WhereClause = "Where TransactionTypeID = " + 110 + " AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code LIKE '%" + $('#txtCode_Filter').val() + "%'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //  HighlightText("#tblSC_Stores>tbody>tr", $("#txt-Search").val().trim());
    }

    else if (parent.strBindTableRowsFunctionName == "PS_Invoices_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        debugger;
        var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1";

        if ($('#txtInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND InvoiceNo = '" + $('#txtInvoiceNo_Filter').val() + "'";
        }
        if ($('#txtSupplierInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND SupplierInvoiceNo LIKE '%" + $('#txtSupplierInvoiceNo_Filter').val() + "%'";
        }
        if ($('#txtTotalPrice_Filter').val().trim() != "") {
            WhereClause += " AND TotalPrice LIKE '%" + $('#txtTotalPrice_Filter').val() + "%'";
        }
        if ($('#slSupplier_Filter').val().trim() != "0") {
            WhereClause += " AND SupplierID = " + $('#slSupplier_Filter').val() + "";
        }
        if ($('#slCurrency_Filter').val().trim() != "0") {
            WhereClause += " AND CurrencyID = " + $('#slCurrency_Filter').val() + "";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_Invoices/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { PS_Invoices_BindTableRows(pTabelRows); PS_Invoices_ClearAllControls(); });
        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //  HighlightText("#tblSC_Stores>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "SL_Invoices_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1";

        if ($('#txtInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND InvoiceNo = '" + $('#txtInvoiceNo_Filter').val() + "'";
        }
        if ($('#txtTotalPrice_Filter').val().trim() != "") {
            WhereClause += " AND TotalPrice LIKE '%" + $('#txtTotalPrice_Filter').val() + "%'";
        }
        if ($('#slClients_Filter').val().trim() != "0") {
            WhereClause += " AND ClientID = " + $('#slClients_Filter').val() + "";
        }
        if ($('#slCurrency_Filter').val().trim() != "0") {
            WhereClause += " AND CurrencyID = " + $('#slCurrency_Filter').val() + "";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Invoices/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SL_Invoices_BindTableRows(pTabelRows); SL_Invoices_ClearAllControls(); });
    }
    else if (parent.strBindTableRowsFunctionName == "SL_ApproveInvoice_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        debugger;
        var WhereClause = "Where ISNULL(IsDeleted , 0) = 0 and ISNULL(IsApproved , 0) = 0";

        if ($('#txtInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND InvoiceNo LIKE '%" + $('#txtInvoiceNo_Filter').val() + "%'";
        }
        if ($('#txtTotalPrice_Filter').val().trim() != "") {
            WhereClause += " AND TotalPrice LIKE '%" + $('#txtTotalPrice_Filter').val() + "%'";
        }
        if ($('#slClients_Filter').val().trim() != "0") {
            WhereClause += " AND ClientID = " + $('#slClients_Filter').val() + "";
        }
        if ($('#slCurrency_Filter').val().trim() != "0") {
            WhereClause += " AND CurrencyID = " + $('#slCurrency_Filter').val() + "";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Invoices/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SL_Invoices_BindTableRows(pTabelRows); SL_Invoices_ClearAllControls(); });
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Approving/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SL_ApproveInvoice_BindTableRows(pTabelRows); SL_ApproveInvoice_ClearAllControls(); });
        //  HighlightText("#tblSL_ApproveInvoice>tbody>tr", $("#txt-Search").val().trim()); LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Invoices/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SL_Invoices_BindTableRows(pTabelRows); SL_Invoices_ClearAllControls(); });
    }
    else if (parent.strBindTableRowsFunctionName == "SL_UnApproveInvoice_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where ISNULL(IsDeleted , 0) = 0 and ISNULL(IsApproved , 0) = 1";

        if ($('#txtInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND InvoiceNo LIKE '%" + $('#txtInvoiceNo_Filter').val() + "%'";
        }
        if ($('#txtTotalPrice_Filter').val().trim() != "") {
            WhereClause += " AND TotalPrice LIKE '%" + $('#txtTotalPrice_Filter').val() + "%'";
        }
        if ($('#slClients_Filter').val().trim() != "0") {
            WhereClause += " AND ClientID = " + $('#slClients_Filter').val() + "";
        }
        if ($('#slCurrency_Filter').val().trim() != "0") {
            WhereClause += " AND CurrencyID = " + $('#slCurrency_Filter').val() + "";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Approving/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SL_UnApproveInvoice_BindTableRows(pTabelRows); SL_UnApproveInvoice_ClearAllControls(); });
        HighlightText("#tblSL_UnApproveInvoice>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "SC_ExminationOrders_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where TransactionTypeID = 60 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "SC_ClientReturnsVoucher_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where TransactionTypeID = 40 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });

    }
    else if (parent.strBindTableRowsFunctionName == "SC_MaterialIssueRequest_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var WhereClause = "Where TransactionTypeID = 70 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        WhereClause += $('#slIsClosed_Filter').val();

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });


    }
    else if (parent.strBindTableRowsFunctionName == "SC_OpenCloseMaterialIssueRequest_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var WhereClause = "Where TransactionTypeID = 70 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        WhereClause += $('#slIsClosed_Filter').val();

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });


    }
    else if (parent.strBindTableRowsFunctionName == "SC_OpeningBalance_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where TransactionTypeID = 30 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //   HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());


    }
    else if (parent.strBindTableRowsFunctionName == "SC_StoresTransferVoucher_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where TransactionTypeID = 80 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        // HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());


    }
    else if (parent.strBindTableRowsFunctionName == "SC_SupplierReturnsVoucher_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var WhereClause = "Where TransactionTypeID = 50 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //   HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());


    }

    else if (parent.strBindTableRowsFunctionName == "SL_ClientDbtCrdtNotes") {
        debugger;
        var WhereClause = "Where 1=1";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        if ($('#txtInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND InvoiceNo LIKE '%" + $('#txtInvoiceNo_Filter').val() + "%'";
        }
        if ($('#txtTotalPrice_Filter').val().trim() != "") {
            WhereClause += " AND TotalPrice LIKE '%" + $('#txtTotalPrice_Filter').val() + "%'";
        }
        if ($('#slClients_Filter').val().trim() != "0") {
            WhereClause += " AND ClientID = " + $('#slClients_Filter').val() + "";
        }
        if ($('#slCurrency_Filter').val().trim() != "0") {
            WhereClause += " AND CurrencyID = " + $('#slCurrency_Filter').val() + "";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , DbtCrdtNoteDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , DbtCrdtNoteDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/ClientDbtCrdtNotes/LoadWithWhereClause", WhereClause, pPageNumber, $('#select-page-size').val().trim(), function (pTabelRows) { SL_ClientDbtCrdtNotes_BindTableRows(pTabelRows); SL_ClientDbtCrdtNotes_ClearAllControls(); });
        HighlightText("#tblSL_Invoices>tbody>tr", $("#txt-Search").val().trim());



    }
    else if (parent.strBindTableRowsFunctionName == "Batches_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var WhereClause = "Where TransactionTypeID = 90 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        // HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());



    }
    else if (parent.strBindTableRowsFunctionName == "CRM_Clients_BindTableRows") {
        if (pDivPagerName == "div-Pager1") {
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size1').val();
            var ClientID = $('#hID').val();
            var pWhereClause = $('#ContactPersonsSqlQuery').val() + ' AND CRM_ClientsID = ' + ClientID;


            if (pWhereClause == ' AND CRM_ClientsID = ' + ClientID) {
                pWhereClause = "Where  CRM_ClientsID = " + ClientID;

            }
            else {

                pWhereClause = pWhereClause.replace("Where AND", "Where ");
            }
            var pOrderBy = " ID DESC ";
            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size1 option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClauseAndOrderBy("div-Pager1", "select-page-size1", "spn-first-page-row1", "spn-last-page-row1", "spn-total-count1", "div-Text-Total1", "api/CRM_ContactPersons/LoadWithPagingWithWhereClause", pWhereClause, 'ID', pPageNumber, pPageSize
                , function (pData) {
                    // var parm = [JSON.parse(pData[0])];
                    //  var runFunction = "CRM_ContactPersons_BindTableRows" //window[strBindTableRowsFunctionName];
                    //  if (typeof runFunction === "function") runFunction.apply(null, parm);

                    CRM_ContactPersons_BindTableRows(JSON.parse(pData[0]));
                });
        }
        else if (pDivPagerName == "div-Pager2") {
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size2').val();
            var ClientID = $('#hID').val();
            var pWhereClause = $('#FollowUpSqlQuery').val() + ' AND CRM_ClientID = ' + ClientID;
            if (pWhereClause == ' AND CRM_ClientID = ' + ClientID) {
                pWhereClause = "Where  CRM_ClientID = " + ClientID;
            }
            else {
                pWhereClause = pWhereClause.replace("Where AND", "Where ");
            }
            var pOrderBy = " ID DESC ";
            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size2 option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClauseAndOrderBy("div-Pager2", "select-page-size2", "spn-first-page-row2", "spn-last-page-row2", "spn-total-count2", "div-Text-Total2", "api/vwCRM_FollowUps/LoadWithPagingWithWhereClause", pWhereClause, 'ID', pPageNumber, pPageSize
                , function (pData) {
                    // var parm = [JSON.parse(pData[0])];
                    //  var runFunction = 'CRM_FollowUp_BindTableRows' //window[strBindTableRowsFunctionName];
                    //  if (typeof runFunction === "function") runFunction.apply(null, parm);
                    CRM_FollowUp_BindTableRows(JSON.parse(pData[0]));


                });
        }
        else if (pDivPagerName == "div-Pager3") {
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size3').val();
            jQuery("#CRM_ActionDetailstblModal").modal("show");
            var FollowUpID = $('#hID2').val();
            var pWhereClause = "Where  CRM_FollowID = " + FollowUpID;
            if (pWhereClause.trim() == "") {
                pWhereClause = "Where 1 = 1";
            }
            var pOrderBy = " ID DESC ";
            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClauseAndOrderBy("div-Pager3", "select-page-size3", "spn-first-page-row3", "spn-last-page-row3", "spn-total-count3", "div-Text-Total3", "api/CRM_ActionDetails/LoadWithPagingWithWhereClause", pWhereClause, 'ID', pPageNumber, pPageSize
                , function (pData) {
                    //  var parm = [JSON.parse(pData[0])];
                    //var runFunction = "CRM_ActionDetails_BindTableRows" //window[strBindTableRowsFunctionName];
                    //  if (typeof runFunction === "function") runFunction.apply(null, parm);
                    CRM_ActionDetails_BindTableRows(JSON.parse(pData[0]));

                });
        }

        else {
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size').val();
            var pWhereClause = $('#ClientSqlQuery').val();
            if (pWhereClause.trim() == "") {
                pWhereClause = "Where 1 = 1";
            }
            var pOrderBy = " ID DESC ";
            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClauseAndOrderBy("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "api/vwCRM_Clients/LoadWithPagingWithWhereClause", pWhereClause, 'Name', pPageNumber, pPageSize
                , function (pData) {
                    var parm = [JSON.parse(pData[0])];
                    var runFunction = window[strBindTableRowsFunctionName];
                    if (typeof runFunction === "function") runFunction.apply(null, parm);


                });
        }
    }
    else if (parent.strBindTableRowsFunctionName == "SC_UnApproveTransaction_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();

        if ($('#slTransactionsTypes').val() == "0") {
            swal("", "You Must Select Transaction Type .", "warning");
            $('#slTransactionsTypes').addClass("bg-info");
        }
        else {
            $('#slTransactionsTypes').removeClass("bg-info");
            var WhereClause = "Where isnull(IsApproved,0) <> 0   AND isnull(IsDeleted , 0) <> 1";
            if ($('#txtCode').val().trim() != "") {
                WhereClause += " AND Code = '" + $('#txtCode').val() + "'";
            }
            if ($('#slPSInvoices').val().trim() != "0") {
                WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices').val() + "";
            }
            //if ($('#slTransactionsTypes').val().trim() != "0") {
            //    WhereClause += " AND TransactionTypeID = " + $('#slTransactionsTypes').val() + "";
            //}
            if ($('#txtFromDate').val().trim() != "") {
                WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate').val()) + "')";
            }
            if ($('#txtToDate').val().trim() != "") {
                WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate').val()) + "')";
            }
            if ($('#slTransactionsTypes').val().trim() != "0") {
                if ($('#slTransactionsTypes').val().trim() == "70") {
                    WhereClause += " AND (vwSC_Transactions.TransactionTypeID = 70 AND ISNULL((SELECT  COUNT(isnull(vst.ID , 0 )) FROM dbo.vwSC_Transactions AS vst WHERE isnull(vst.IsDeleted , 0 ) = 0 and ISNULL( vst.MaterialIssueRequesitionsID , 0 ) = vwSC_Transactions.ID) , 0 )  <=0           )";
                }
                else if ($('#slTransactionsTypes').val().trim() == "60") {
                    WhereClause += " AND (vwSC_Transactions.TransactionTypeID = 60 AND ISNULL((SELECT  COUNT(isnull(vst.ID , 0 )) FROM dbo.vwSC_Transactions AS vst WHERE isnull(vst.IsDeleted , 0 ) = 0 and ISNULL( vst.ExaminationID , 0 ) = vwSC_Transactions.ID) , 0 )  <=0  )";
                }
                else {
                    WhereClause += " AND TransactionTypeID = " + $('#slTransactionsTypes').val() + "";
                }
            }
            LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Approving/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_UnApproveTransaction_BindTableRows(pTabelRows); });
            //   LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Approving/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_UnApproveTransaction_BindTableRows(pTabelRows); });

            console.log(WhereClause);
            ///  HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());

        }
    }
    else if (parent.strBindTableRowsFunctionName == "SC_ApproveTransaction_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();

        if ($('#slTransactionsTypes').val() == "0") {
            swal("", "You Must Select Transaction Type .", "warning");
            $('#slTransactionsTypes').addClass("bg-info");
        }
        else {
            $('#slTransactionsTypes').removeClass("bg-info");
            var WhereClause = "Where isnull(IsApproved,0) <> 1   AND isnull(IsDeleted , 0) <> 1";
            if ($('#txtCode').val().trim() != "") {
                WhereClause += " AND Code = '" + $('#txtCode').val() + "'";
            }
            if ($('#slPSInvoices').val().trim() != "0") {
                WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices').val() + "";
            }
            if ($('#slTransactionsTypes').val().trim() != "0") {
                WhereClause += " AND TransactionTypeID = " + $('#slTransactionsTypes').val() + "";
            }
            if ($('#txtFromDate').val().trim() != "") {
                WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate').val()) + "')";
            }
            if ($('#txtToDate').val().trim() != "") {
                WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate').val()) + "')";
            }
            LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Approving/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_ApproveTransaction_BindTableRows(pTabelRows); });

            console.log(WhereClause);
            ///  HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());

        }
    }
    else if (parent.strBindTableRowsFunctionName == "Complaint_BindTableRows") {
        var pWhereClause = Complaint_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_Clients/Complaint_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "CRM_Actions_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_Actions/LoadWithPaging", pPageNumber, pPageSize,
        //    function (pData) {
        //        var parm = [JSON.parse(pData[0])];
        //        var runFunction = window[strBindTableRowsFunctionName];
        //        if (typeof runFunction === "function")
        //            runFunction.apply(null, parm);
        //        //  CRM_Actions_BindTableRows(pTabelRows); 
        //        CRM_Actions_ClearAllControls();
        //    });
        //HighlightText("#tblCRM_Actions>tbody>tr", $("#txt-Search").val().trim());
        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_Actions/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { CRM_Actions_BindTableRows(pTabelRows); CRM_Actions_ClearAllControls(); });
        HighlightText("#tblCRM_Actions>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "CRM_Sources_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_Sources/LoadWithPaging", pPageNumber, pPageSize,
        //    function (pData) {
        //        var parm = [pData[0]];
        //        var runFunction = window[strBindTableRowsFunctionName];
        //        if (typeof runFunction === "function")
        //            runFunction.apply(null, parm);
        //        //  CRM_Actions_BindTableRows(pTabelRows); 

        //        CRM_Sources_ClearAllControls();
        //    });
        //HighlightText("#tblCRM_Sources>tbody>tr", $("#txt-Search").val().trim());

        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_Sources/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { CRM_Sources_BindTableRows(pTabelRows); CRM_Sources_ClearAllControls(); });
        HighlightText("#tblCRM_Sources>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "CRM_SalesMenTarget_BindTableRows") {
        debugger;
        if (pDivPagerName == "div-Pager1") {
            var ID = $('#hID').val();
            var pWhereClause = $('#SalesMenTargetDetailsSqlQuery').val() + ' AND CRM_SalesMenTargetID = ' + ID;
            if (pWhereClause == ' AND CRM_SalesMenTargetID = ' + ID) {
                pWhereClause = "Where  CRM_SalesMenTargetID = " + ID;
            }
            else {
                pWhereClause = pWhereClause.replace("Where AND", "Where ");
            }

            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size1').val();
            var pOrderBy = " ID DESC ";
            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size1 option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClauseAndOrderBy("div-Pager1", "select-page-size1", "spn-first-page-row1", "spn-last-page-row1", "spn-total-count1", "div-Text-Total1", "api/CRM_SalesMenTargetDetails/LoadWithPagingWithWhereClause", pWhereClause, 'ID', pPageNumber, pPageSize
                , function (pData) {
                    //  console.log(pData[0]);
                    CRM_SalesMenTargetDetails_BindTableRows(JSON.parse(pData[0]));
                });
        }
        else {
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size').val();
            var pWhereClause = $('#SalesMenTargetSqlQuery').val();
            if (pWhereClause.trim() == "") {
                pWhereClause = "Where 1 = 1";
            }
            var pOrderBy = " ID DESC ";
            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClauseAndOrderBy("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "api/vwCRM_SalesMenTarget/LoadWithPagingWithWhereClause", pWhereClause, 'ID', pPageNumber, pPageSize
                , function (pData) {
                    var parm = [JSON.parse(pData[0])];
                    var runFunction = window[strBindTableRowsFunctionName];
                    if (typeof runFunction === "function") runFunction.apply(null, parm);
                });
        }
    }
    else if (parent.strBindTableRowsFunctionName == "StoresAccounts_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        HighlightText("#tblSC_Stores>tbody>tr", $("#txt-Search").val().trim());
    }

    else if (parent.strBindTableRowsFunctionName == "GoodReceiptNotes_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        var WhereClause = "Where TransactionTypeID = 10 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        if ($('#slPSInvoices_Filter').val().trim() != "0") {
            WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        if ($('#txtInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND InvoiceNo = '" + $('#txtInvoiceNo_Filter').val() + "'";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //  HighlightText("#tblSC_Stores>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "UnapprovingAllocations_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        var WhereClause = "Where InvoicePaymentDetailsID IS NOT NULL  AND    (JVID IS NOT NULL and JVID<>0)    AND   (IsDeleted = 0 OR IsDeleted IS NULL )   AND   TransactionType = 60  ";

        if ($('#slPartner').val() != null && $('#slPartner').val().trim() != "0") {
            WhereClause += " AND PartenerID = " + $('#slPartner').val() + "";
        }
        if ($('#txtSearchFrom').val().trim() != "") {
            WhereClause += " AND CONVERT(date , CreationDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtSearchFrom').val()) + "')";
        }
        if ($('#txtSearchTo').val().trim() != "") {
            WhereClause += " AND CONVERT(date , CreationDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtSearchTo').val()) + "')";
        }
        //-------------------------
        //  LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/A_ARAllocation/vwAccPartnerBalanceUnapproving_LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { UnapprovingAllocations_BindTableRows(pTabelRows); });

    }
    else if (parent.strBindTableRowsFunctionName == "A_ARAllocation_Partners_BindTableRows") {
        var pWhereClause = ARAllocation_Partners_GetWhereClause();
        var pOrderBy = "PartnerTypeID, Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseAllocation_Partners: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/A_ARAllocation/ARAllocation_Partners_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
        /********************************EOF CRM/SC/... By Mostafa Hany*****************************************/
        /******************************************* Nour **********************************************/

    else if (parent.strBindTableRowsFunctionName == "TRCK_Drivers_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //LoadWithPaging             ("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/WHS_Warehouses/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { WHS_Warehouses_BindTableRows(pTabelRows); WHS_Warehouses_ClearAllControls(); });
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/TRCK_Drivers/LoadWithPaging", " Where IsDriver=" + TRCK_WorkingOnDrivers, pPageNumber, pPageSize, function (pTabelRows) { TRCK_Drivers_BindTableRows(pTabelRows); TRCK_Drivers_ClearAllControls(); });
        HighlightText("#tblTRCK_Drivers>tbody>tr", $("#txt-Search").val().trim());
    }

    else if (parent.strBindTableRowsFunctionName == "TRCK_DriverAssistant_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //LoadWithPaging             ("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/WHS_Warehouses/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { WHS_Warehouses_BindTableRows(pTabelRows); WHS_Warehouses_ClearAllControls(); });
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/TRCK_Drivers/LoadWithPaging", " Where IsDriver=" + TRCK_WorkingOnDrivers, pPageNumber, pPageSize, function (pTabelRows) { TRCK_Drivers_BindTableRows(pTabelRows); TRCK_Drivers_ClearAllControls(); });
        HighlightText("#tblTRCK_Drivers>tbody>tr", $("#txt-Search").val().trim());
    }

    else if (parent.strBindTableRowsFunctionName == "MainWarehouse_BindTableRows") {
        var pWhereClause = MainWarehouse_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/MainWarehouse/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }

    else if (parent.strBindTableRowsFunctionName == "WarehouseNotes_BindTableRows") {
        var pWhereClause = WarehouseNotes_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/WarehouseNotes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_CFS_GateIn_BindTableRows") {
        var pWhereClause = WH_CFS_GateIn_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/WH_CFS_GateIn/WH_CFS_GateIn_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " OperationNumber DESC, ContainerNumber DESC, HouseNumber DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[2])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_CFS_GateInInventory_BindTableRows") {
        var pWhereClause = WH_CFS_GateInInventory_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/WH_CFS_GateInInventory/WH_CFS_GateInInventory_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " OperationNumber DESC, ContainerNumber DESC, HouseNumber DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[2])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_CFS_Invoices_BindTableRows") {
        var pWhereClause = WH_CFS_Invoices_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/WH_CFS_Invoices/WH_CFS_Invoices_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " OperationNumber DESC, ContainerNumber DESC, HouseNumber DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[2])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_CFS_ReleaseOrders_BindTableRows") {
        var pWhereClause = WH_CFS_ReleaseOrders_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/WH_CFS_ReleaseOrders/WH_CFS_ReleaseOrders_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " OperationNumber DESC, ContainerNumber DESC, HouseNumber DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[2])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "FA_Addition_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where (TransactionTypeID = 20)  AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = " + $('#txtCode_Filter').val() + "";
        }


        if ($('#txtName_Filter').val().trim() != "") {
            WhereClause += " AND AssetName LIKE '%" + $('#txtName_Filter').val() + "%'";
        }

        if ($('#txtBarCode_Filter').val().trim() != "") {
            WhereClause += " AND BarCode LIKE '%" + $('#txtBarCode_Filter').val() + "%'";
        }



        if ($('#slBranchID_Filter').val().trim() != "0") {
            WhereClause += " AND BranchID = " + $('#slBranchID_Filter').val() + "";
        }
        if ($('#slDevisonID_Filter').val().trim() != "0") {
            WhereClause += " AND DevisonID = " + $('#slDevisonID_Filter').val() + "";
        }
        //if ($('#slTransactionTypeID_Filter').val().trim() != "0")
        //{
        //    WhereClause += " AND TransactionTypeID = " + $('#slTransactionTypeID_Filter').val() + "";
        //}


        if ($('#slDepartmentID_Filter').val().trim() != "0") {
            WhereClause += " AND DepartmentID = " + $('#slDepartmentID_Filter').val() + "";
        }

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { FA_Transactions_BindTableRows(pTabelRows); FA_Transactions_ClearAllControls(); });

    }
    else if (parent.strBindTableRowsFunctionName == "FA_Depreciations_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where  ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = " + $('#txtCode_Filter').val() + "";
        }


        //if ($('#txtName_Filter').val().trim() != "")
        //{
        //    WhereClause += " AND AssetName LIKE '%" + $('#txtName_Filter').val() + "%'";
        //}

        //if ($('#txtBarCode_Filter').val().trim() != "") {
        //    WhereClause += " AND BarCode LIKE '%" + $('#txtBarCode_Filter').val() + "%'";
        //}



        if ($('#slBranchID_Filter').val().trim() != "0") {
            WhereClause += " AND BranchID = " + $('#slBranchID_Filter').val() + "";
        }
        if ($('#slPeriodType_Filter').val().trim() != "0") {
            WhereClause += " AND PeriodType = " + $('#slPeriodType_Filter').val() + "";
        }
        //if ($('#slDevisonID_Filter').val().trim() != "0") {
        //    WhereClause += " AND DevisonID = " + $('#slDevisonID_Filter').val() + "";
        //}
        ////if ($('#slTransactionTypeID_Filter').val().trim() != "0")
        ////{
        ////    WhereClause += " AND TransactionTypeID = " + $('#slTransactionTypeID_Filter').val() + "";
        ////}


        //if ($('#slDepartmentID_Filter').val().trim() != "0") {
        //    WhereClause += " AND DepartmentID = " + $('#slDepartmentID_Filter').val() + "";
        //}

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , ToDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , ToDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_Depreciations/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { FA_Depreciations_BindTableRows(pTabelRows); FA_Depreciations_ClearAllControls(); });

    }
    else if (parent.strBindTableRowsFunctionName == "FA_DepreciationsByAssets_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where  ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = " + $('#txtCode_Filter').val() + "";
        }


        //if ($('#txtName_Filter').val().trim() != "")
        //{
        //    WhereClause += " AND AssetName LIKE '%" + $('#txtName_Filter').val() + "%'";
        //}

        //if ($('#txtBarCode_Filter').val().trim() != "") {
        //    WhereClause += " AND BarCode LIKE '%" + $('#txtBarCode_Filter').val() + "%'";
        //}



        if ($('#slAssets_Filter').val().trim() != "0") {
            WhereClause += " AND AssetID = " + $('#slAssets_Filter').val() + "";
        }
        if ($('#slPeriodType_Filter').val().trim() != "0") {
            WhereClause += " AND PeriodType = " + $('#slPeriodType_Filter').val() + "";
        }
        //if ($('#slDevisonID_Filter').val().trim() != "0") {
        //    WhereClause += " AND DevisonID = " + $('#slDevisonID_Filter').val() + "";
        //}
        ////if ($('#slTransactionTypeID_Filter').val().trim() != "0")
        ////{
        ////    WhereClause += " AND TransactionTypeID = " + $('#slTransactionTypeID_Filter').val() + "";
        ////}


        //if ($('#slDepartmentID_Filter').val().trim() != "0") {
        //    WhereClause += " AND DepartmentID = " + $('#slDepartmentID_Filter').val() + "";
        //}

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , ToDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , ToDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_DepreciationsByAssets/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { FA_DepreciationsByAssets_BindTableRows(pTabelRows); FA_DepreciationsByAssets_ClearAllControls(); });

    }
    else if (parent.strBindTableRowsFunctionName == "FA_AssetsInventory_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where   ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = " + $('#txtCode_Filter').val() + "";
        }

        if ($('#slBranchID_Filter').val().trim() != "0") {
            WhereClause += " AND BranchID = " + $('#slBranchID_Filter').val() + "";
        }
        if ($('#slDevisonID_Filter').val().trim() != "0") {
            WhereClause += " AND DevisonID = " + $('#slDevisonID_Filter').val() + "";
        }

        if ($('#slDepartmentID_Filter').val().trim() != "0") {
            WhereClause += " AND DepartmentID = " + $('#slDepartmentID_Filter').val() + "";
        }

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , Date ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , Date) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_AssetsInventory/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { FA_AssetsInventory_BindTableRows(pTabelRows); FA_AssetsInventory_ClearAllControls(); });

    }
    else if (parent.strBindTableRowsFunctionName == "FA_Exclusion_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where (TransactionTypeID = 30 or TransactionTypeID = 60)  AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = " + $('#txtCode_Filter').val() + "";
        }


        if ($('#txtName_Filter').val().trim() != "") {
            WhereClause += " AND AssetName LIKE '%" + $('#txtName_Filter').val() + "%'";
        }

        if ($('#txtBarCode_Filter').val().trim() != "") {
            WhereClause += " AND BarCode LIKE '%" + $('#txtBarCode_Filter').val() + "%'";
        }



        if ($('#slBranchID_Filter').val().trim() != "0") {
            WhereClause += " AND BranchID = " + $('#slBranchID_Filter').val() + "";
        }
        if ($('#slDevisonID_Filter').val().trim() != "0") {
            WhereClause += " AND DevisonID = " + $('#slDevisonID_Filter').val() + "";
        }
        if ($('#slTransactionTypeID_Filter').val().trim() != "0") {
            WhereClause += " AND TransactionTypeID = " + $('#slTransactionTypeID_Filter').val() + "";
        }


        if ($('#slDepartmentID_Filter').val().trim() != "0") {
            WhereClause += " AND DepartmentID = " + $('#slDepartmentID_Filter').val() + "";
        }

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { FA_Transactions_BindTableRows(pTabelRows); FA_Transactions_ClearAllControls(); });

    }
    else if (parent.strBindTableRowsFunctionName == "FA_StopDepreciations_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var WhereClause = "Where  ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = " + $('#txtCode_Filter').val() + "";
        }


        //if ($('#txtName_Filter').val().trim() != "")
        //{
        //    WhereClause += " AND AssetName LIKE '%" + $('#txtName_Filter').val() + "%'";
        //}

        //if ($('#txtBarCode_Filter').val().trim() != "") {
        //    WhereClause += " AND BarCode LIKE '%" + $('#txtBarCode_Filter').val() + "%'";
        //}



        if ($('#slBranchID_Filter').val().trim() != "0") {
            WhereClause += " AND BranchID = " + $('#slBranchID_Filter').val() + "";
        }
        if ($('#slPeriodType_Filter').val().trim() != "0") {
            WhereClause += " AND PeriodType = " + $('#slPeriodType_Filter').val() + "";
        }
        //if ($('#slDevisonID_Filter').val().trim() != "0") {
        //    WhereClause += " AND DevisonID = " + $('#slDevisonID_Filter').val() + "";
        //}
        ////if ($('#slTransactionTypeID_Filter').val().trim() != "0")
        ////{
        ////    WhereClause += " AND TransactionTypeID = " + $('#slTransactionTypeID_Filter').val() + "";
        ////}


        //if ($('#slDepartmentID_Filter').val().trim() != "0") {
        //    WhereClause += " AND DepartmentID = " + $('#slDepartmentID_Filter').val() + "";
        //}

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , ToDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , ToDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_Depreciations/LoadWithWhereClause", WhereClause, pPageNo, pPageSize, function (pTabelRows) { FA_Depreciations_BindTableRows(pTabelRows); FA_Depreciations_ClearAllControls(); });

    }

        /***************************************** end nour *********************************************/
    else if (parent.strBindTableRowsFunctionName == "ShipLinkClients_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkClients_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkClients/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " Name, ArName DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }

    else if (parent.strBindTableRowsFunctionName == "ShipLinkCurrencyClientLinking_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkCurrencyClientLinking_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkCurrencyClientLinking/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " CurrencyCode ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ShipLinkInvoicePosting_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkInvoicePosting_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkInvoicePosting/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        //  var pOrderBy = " CurrencyCode ";
        var pOrderBy = $("#cbIsJV1").prop("checked") ? "IssueDate,PaymentDate" : "PaymentDate,IssueDate";

        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ShipLinkInvoiceTypeToJournal_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkInvoiceTypeToJournal_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkInvoiceTypeToJournal/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        //  var pOrderBy = " CurrencyCode ";
        var pOrderBy = "InvoiceTypeName, JournalTypeName";

        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ShipLinkInvoiceTypeToJournal_Payment_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkInvoiceTypeToJournal_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkInvoiceTypeToJournal_Payment/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        //  var pOrderBy = " CurrencyCode ";
        var pOrderBy = "InvoiceTypeName, JournalTypeName";

        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else
        LoadWithPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, strLoadWithPagingFunctionName, pPageNo, $('#' + pSelectPageSizeName).val().trim(), function (pTabelRows) {
            var parm = [pTabelRows];
            debugger;
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
}

//sherif: to call LoadWithPagingForModal instead of LoadWithPaging
function LoadDataWithPagingForModal(pPageNo, pWhereClause, pOrderBy) {

    LoadWithPagingForModal(strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNo, $('#select-page-size').val().trim(), function (pTabelRows) {
        var parm = [pTabelRows];
        debugger;
        var runFunction = window[strBindTableRowsFunctionName];
        if (typeof runFunction === "function") runFunction.apply(null, parm);
    });
}

//function KeepSessionAlive() {
//    $.post(strServerURL + "/proxy/WSHoteliz.asmx/KeepSessionAlive", null, function () { });
//}

//function CheckIsSessionAlive() {
//    $.ajax({
//        type: "POST",
//        url: strServerURL + "/proxy/WSHoteliz.asmx/CheckIsSessionAlive",
//        data: "{ }",
//        contentType: "application/json; charset=utf-8",
//        dataType: "json",
//        success: function (data) {
//            if (data) {
//                if (data) {
//                    window.location = strServerURL + "/login.aspx";
//                }
//            }
//        },
//        error: function (jqXHR, exception) {
//            swal("Oops!", "Please, contact your technical support! this is CheckIsSessionAlive in mainapp.master !", "error");
//        }
//    });
//}


function WarningMessage() {
    var $textAndPic = $('<div></div>');
    $textAndPic.append('Who\'s this? <br />');
    $textAndPic.append('<img src="./images/pig.ico" />');
    jQuery.noConflict();
    BootstrapDialog.show({
        title: 'Guess who that is',
        message: $textAndPic,
        buttons: [{
            label: 'Acky',
            action: function (dialogRef) {
                dialogRef.close();
            }
        }, {
            label: 'Robert',
            action: function (dialogRef) {
                dialogRef.close();
            }
        }]
    });
}

function ElementPosition(pElementID) {
    $("#tip").css('visibility', 'visible');
    $("#tip").css('background-color', '#ff0000');
    $("#tip").offset({ top: event.screenY, left: event.screenX });
    $("#tip").show();
}

function ElementHide(pElementID) {
    $("#tip").hide();
}

function IsNumberKey(evt) {
    var charCode = (evt.which) ? evt.which : event.keyCode
    if (charCode > 31 && (charCode < 48 || charCode > 57))
        return false;
    return true;
}

// sherif: Integers Only
function CheckValueIsInteger(pTextBoxIDs) {
    $('#' + pTextBoxIDs).keydown(function (e) {
        // Allow: (backspace=8) , (delete=46) , (tab=9) , (escape=), (enter=13) , (.=190)
        //if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
        if ($.inArray(e.keyCode, [46, 8, 9]) !== -1 || //those keys are allowed
            // Allow: Ctrl+A
            (e.keyCode == 65 && e.ctrlKey === true) ||
            // Allow: Ctrl+V
            (e.keyCode == 86 && e.ctrlKey === true) ||
            // Allow: Ctrl+C
            (e.keyCode == 67 && e.ctrlKey === true) ||
            // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });
}

// sherif: Decimal Only
function CheckValueIsDecimal(pTextBoxIDs) {
    $("#" + pTextBoxIDs).keydown(function (e) {
        // Allow: (backspace=8) , (delete=46) , (tab=9) , (escape=), (enter=13), (. in NumPad =110) , (.=190)
        //if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
        if ($.inArray(e.keyCode, [46, 8, 9, 110, 190]) !== -1 || //those keys are allowed
            // Allow: Ctrl+A
            (e.keyCode == 65 && e.ctrlKey === true) ||
            // Allow: Ctrl+V
            (e.keyCode == 86 && e.ctrlKey === true) ||
            // Allow: Ctrl+C
            (e.keyCode == 67 && e.ctrlKey === true) ||
            // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });
}
// sherif: Decimal Only
function CheckValueIsNegativeOrPositiveDecimal(pTextBoxIDs) {
    $("#" + pTextBoxIDs).keydown(function (e) {
        // Allow: (backspace=8) , (delete=46) , (tab=9) , (escape=), (enter=13), (. in NumPad =110) , (.=190), (-=189)
        //if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
        if ($.inArray(e.keyCode, [46, 8, 9, 110, 190, 189]) !== -1 || //those keys are allowed
            // Allow: Ctrl+A
            (e.keyCode == 65 && e.ctrlKey === true) ||
            // Allow: Ctrl+V
            (e.keyCode == 86 && e.ctrlKey === true) ||
            // Allow: Ctrl+C
            (e.keyCode == 67 && e.ctrlKey === true) ||
            // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });
}

function CheckDecimalPlacesAndNegativeSigns(id) {
    var isValid = true; //1st cond. Check decimal places No., 2nd: Check -ve signs no. , 3rd: Check -ve sign place
    if ($("#" + id).val().trim().split(".").length > 2 || $("#" + id).val().trim().split("-").length > 2 || $("#" + id).val().trim().indexOf("-") > 0) {
        isValid = false;
        swal(strSorry, "Please, Revise that field.");
        $("#" + id).focus();
    }
    return isValid;
}
//called onblur() of control and sets focus on it if not correct
function CheckDecimalFormat(id) {
    //1st cond. Check decimal places No., 2nd: Check -ve signs no. , 3rd: Check -ve sign place
    if ($("#" + id).val().trim().split(".").length > 2 || $("#" + id).val().trim().split("-").length > 2 || $("#" + id).val().trim().indexOf("-") > 0) {
        swal(strSorry, "Please, Revise that field.");
        $("#" + id).focus();
    }
}
//sherif: prevent Enter Key in input controls
function DisableEnterKey(pInputID) {
    $("#" + pInputID).keydown(function (e) {
        //  (backspace=8) , (delete=46) , (tab=9) , (escape=), (enter=13) , (.=190)
        if (e.keyCode == 13) {
            e.preventDefault();
        }
        else
            return;
    });
}

function DisableBackspaceKey(pInputID) {
    $("#" + pInputID).keydown(function (e) {
        //  (backspace=8) , (delete=46) , (tab=9) , (escape=), (enter=13) , (.=190)
        if (e.keyCode == 8) {
            e.preventDefault();
        }
        else
            return;
    });
}
////sherif Check if Enter Key pressed to save
////sherif: it loads more times every save (problem)
//function SaveIfEnterKeyPressed(pTextBoxIDs) {
//    $(pTextBoxIDs).keydown(function (e) {
//        debugger;
//        // Allow: (backspace=8) , (delete=46) , (tab=9) , (escape=), (enter=13) , (.=190)
//        //if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
//        if ($.inArray(e.keyCode, [13]) !== -1) {
//            $("#btnSave").click();
//            return;
//        }
//    });
//}

//converts a number to letters (tf2et floos)
function toWords(s) {
    var th = ['', 'Thousand', 'Million', 'Billion', 'Trillion'];
    var dg = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];
    var tn = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
    var tw = ['Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
    s = s.toString();
    s = s.replace(/[\, ]/g, '');
    if (s != parseFloat(s)) return 'not a number';
    var x = s.indexOf('.');
    if (x == -1) x = s.length;
    if (x > 15) return 'too big';
    var n = s.split('');
    var str = '';
    var sk = 0;
    for (var i = 0; i < x; i++) {
        if ((x - i) % 3 == 2) {
            if (n[i] == '1') {
                str += tn[Number(n[i + 1])] + ' ';
                i++;
                sk = 1;
            } else if (n[i] != 0) {
                str += tw[n[i] - 2] + ' ';
                sk = 1;
            }
        } else if (n[i] != 0) {
            str += dg[n[i]] + ' ';
            if ((x - i) % 3 == 0) str += 'Hundred ';
            sk = 1;
        }
        if ((x - i) % 3 == 1) {
            if (sk) str += th[(x - i - 1) / 3] + ' ';
            sk = 0;
        }
    }
    if (x != s.length && parseInt(s.split('.')[1]) != 0/*to prevent printing decimals in words if 0s*/) {
        var y = s.length;
        str += 'point ';
        for (var i = x + 1; i < y; i++) str += dg[n[i]] + ' ';
    }
    return str.replace(/\s+/g, ' ').trim();
}
//converts a number to letters with fraction xxx/1000 (tf2et floos)
function toWords_WithFractionNumbers(s) {
    var th = ['', 'Thousand', 'Million', 'Billion', 'Trillion'];
    var dg = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];
    var tn = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
    var tw = ['Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
    s = s.toString();
    s = s.replace(/[\, ]/g, '');
    if (s != parseFloat(s)) return 'not a number';
    var x = s.indexOf('.');
    if (x == -1) x = s.length;
    if (x > 15) return 'too big';
    var n = s.split('');
    var str = '';
    var sk = 0;
    for (var i = 0; i < x; i++) {
        if ((x - i) % 3 == 2) {
            if (n[i] == '1') {
                str += tn[Number(n[i + 1])] + ' ';
                i++;
                sk = 1;
            } else if (n[i] != 0) {
                str += tw[n[i] - 2] + ' ';
                sk = 1;
            }
        } else if (n[i] != 0) {
            str += dg[n[i]] + ' ';
            if ((x - i) % 3 == 0) str += 'Hundred ';
            sk = 1;
        }
        if ((x - i) % 3 == 1) {
            if (sk) str += th[(x - i - 1) / 3] + ' ';
            sk = 0;
        }
    }
    if (x != s.length && parseInt(s.split('.')[1]) != 0/*to prevent printing decimals in words if 0s*/) {
        var y = s.length;
        str += ' and ';
        for (var i = x + 1; i < y; i++) str += n[i].toString();
        str += '/' + '1';
        for (var i = x + 1; i < y; i++) str += '0';
    }
    return str.replace(/\s+/g, ' ').trim();
}
function DateToArabicWords(pDate) { //pDate Format is dd/MM/yyyy
    debugger;
    var Ret = "";
    //Days
    switch (parseInt(pDate.split('/')[0]))
    {
        case 1: { Ret = "الأول"; break; }
        case 2: { Ret = "الثانى"; break;}
        case 3: { Ret = "الثالث"; break;}
        case 4: { Ret = "الرابع"; break;}
        case 5: { Ret = "الخامس"; break;}
        case 6: { Ret = "السادس"; break;}
        case 7: { Ret = "السابع"; break;}
        case 8: { Ret = "الثامن"; break;}
        case 9: { Ret = "التاسع"; break;}
        case 10: { Ret = "العاشر"; break; }
        case 11: { Ret = "الحادى عشر"; break;}
        case 12: { Ret = "الثانى عشر"; break;}
        case 13: { Ret = "الثالث عشر"; break;}
        case 14: { Ret = "الرابع عشر"; break;}
        case 15: { Ret = "الخامس عشر"; break;}
        case 16: { Ret = "السادس عشر"; break;}
        case 17: { Ret = "السابع عشر"; break;}
        case 18: { Ret = "الثامن عشر"; break;}
        case 19: { Ret = "التاسع عشر"; break;}
        case 20: { Ret = "العشرون"; break; }
        case 21: { Ret = "الواحد و العشرون"; break;}
        case 22: { Ret = "الثانى و العشرون"; break;}
        case 23: { Ret = "الثالث و العشرون"; break;}
        case 24: { Ret = "الرابع و العشرون"; break;}
        case 25: { Ret = "الخامس و العشرون"; break;}
        case 26: { Ret = "السادس و العشرون"; break;}
        case 27: { Ret = "السابع و العشرون"; break;}
        case 28: { Ret = "الثامن و العشرون"; break;}
        case 29: { Ret = "التاسع و العشرون"; break;}
        case 30: { Ret = "الثلاثون"; break;          }
        case 31: { Ret = "الواحد و الثلاثون"; break;}
    }

    Ret += " من ";

    switch (parseInt(pDate.split('/')[1]))
    {
        case 1: Ret += "يناير"; break;
        case 2: Ret += "فبراير"; break;
        case 3: Ret += "مارس"; break;
        case 4: Ret += "أبريل"; break;
        case 5: Ret += "مايو"; break;
        case 6: Ret += "يونيو"; break;
        case 7: Ret += "يوليه"; break;
        case 8: Ret += "أغسطس"; break;
        case 9: Ret += "سبتمبر"; break;
        case 10: Ret += "أكتوبر"; break;
        case 11: Ret += "نوفمبر"; break;
        case 12: Ret += "ديسمبر"; break;
    }
    Ret += " لعام " + pDate.split('/')[2];
    return Ret;
}

function DisableElement(pElementID) {
    $("#" + pElementID).hide();
}

function ShowElement(pElementID) {
    $("#" + pElementID).show();
}

function SetIndexForTable(pTableID, pClassName) {
    $('#' + pTableID + ' > tbody  > tr').each(function (currentIndex, currentRow) {
        $(currentRow).find('.' + pClassName).html((currentIndex * 1) + 1);
    });
}

//function BindUploadFileButton(pButtonID, pFolderName) {
//    $("#" + pButtonID).fileUpload({
//        'uploader': strServerURL + '/scripts/uploader.swf',
//        'cancelImg': 'images/cancel.png',
//        'buttonText': 'Browse Files',
//        'script': strServerURL + '/proxy/GHFileUpload.ashx',
//        'folder': strServerURL + '/' + pFolderName,
//        'fileDesc': 'Image Files',
//        'fileExt': '*.jpg;*.jpeg;*.gif;*.png',
//        'multi': false,
//        'auto': false
//    });
//}

function ReverseUIControls() {
    if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
        debugger;
        jQuery.noConflict();
        $("#ul-breadcrumb").reverseChildren();
        $("#div-main-options").reverseChildren();
        $("#div-option-buttons").reverseChildren();
        $("#txt-Search").parent().reverseChildren();

        $(".modal-footer").reverseChildren();
        $(".table>thead>tr").reverseChildren();
    }
}

//to check if column is locked by another user
// i commented it coz i wan to disable it
function Check(pFunctionName, pRowID, callback, pPartnerTypeID) { // i used the last parameter to handle the case of restarting when trying to edit a locked row
    //$.ajax({
    //    type: "GET",
    //    url: strServerURL + pFunctionName,
    //    data: pRowID,
    //    contentType: "application/json; charset=utf-8",
    //    dataType: "json",
    //    beforeSend: function () { },
    //    success: function (xyz) { // xyz The return value of pFunction Name
    //            if (xyz == false) {//false means row is available and not locked

    //                if (callback != null && callback != undefined) {
    //                    callback();
    //                    //$("#btn-Update").click();
    //                } 
    //            } else {// row is locked
    //                debugger;
    //                if (pPartnerTypeID == null || pPartnerTypeID == undefined || pPartnerTypeID == 1)
    //                    $("#btnClose").click();
    //                else if (pPartnerTypeID == 2) //Agent
    //                    $("#btnAgentClose").click();
    //                else if (pPartnerTypeID == 3) //ShippingAgent
    //                    $("#btnShippingAgentClose").click();
    //                else if (pPartnerTypeID == 4) //CustomsClearanceAgent
    //                    $("#btnCustomsClearanceAgentClose").click();
    //                else if (pPartnerTypeID == 5) //ShippingLine
    //                    $("#btnShippingLineClose").click();
    //                else if (pPartnerTypeID == 6) //Airline
    //                    $("#btnAirlineClose").click();
    //                else if (pPartnerTypeID == 7) //Trucker
    //                    $("#btnTruckerClose").click();
    //                else if (pPartnerTypeID == 8) //Supplier
    //                    $("#btnSupplierClose").click();
    //                swal(strSorry, 'Another user is editing this record now!', 'warning');
    //            }
    //    },
    //    error: function (jqXHR, exception) {
    //        alert('Error when trying to call function [' + pFunctionName + '].');
    //    }
    //});
}
// ******************************************************************************
// Date Functions ---------------------------------------------------------------
// Convert Date To mm DD YYYY ---------------------------------------------------
function GetDateWithFormatMDY(pSenderDate) {
    var dtFormatedMDY = new Date(1 * pSenderDate.substring(6, pSenderDate.length - 2));
    return dtFormatedMDY.toLocaleDateString();
}
//sherif: returns Date with Format yyyyMMdd from dd/MM/yyyy
function GetDateWithFormatyyyyMMdd(pDate) {
    return pDate.split('/')[2] + pDate.split('/')[1].padStart(2,0) + pDate.split('/')[0].padStart(2,0);
}
//sherif: Convert mm/dd/yyyy to dd/mm/yyyy and vice versa
function ConvertDateFormat(pDateToConvert) {
    if (pDateToConvert != "") {
        //if (isValidDate(pDateToConvert, 1)) { //the 2nd param is 1 coz its still in dd/mm/yyyy format(if correct format then convert)
        var ddmmyyy = (pDateToConvert.split('/')[1].length == 1 ? "0" + pDateToConvert.split('/')[1] : pDateToConvert.split('/')[1]) + "/"
            + (pDateToConvert.split('/')[0].length == 1 ? "0" + pDateToConvert.split('/')[0] : pDateToConvert.split('/')[0]) + "/"
            + pDateToConvert.split('/')[2];
        return ddmmyyy;
        //}
        //else
        //    return 0;
    }
    else
        return "1";
}
function PadDateWithZeroes(pDateToPad) {
    if (pDateToPad != "") {
        //if (isValidDate(pDateToPad, 1)) { //the 2nd param is 1 coz its still in dd/mm/yyyy format(if correct format then convert)
        var ddmmyyy = (pDateToPad.split('/')[0].length == 1 ? "0" + pDateToPad.split('/')[0] : pDateToPad.split('/')[0]) + "/"
            + (pDateToPad.split('/')[1].length == 1 ? "0" + pDateToPad.split('/')[1] : pDateToPad.split('/')[1]) + "/"
            + pDateToPad.split('/')[2];
        return ddmmyyy;
        //}
        //else
        //    return 0;
    }
    else
        return "1";
}
//sherif: to show date as today or tomorrow
function GetShownDate(pFirstDate, pSecondDate) {
    var i = Date.prototype.compareDates(pFirstDate, pSecondDate);
    if (i == 0)
        return "Today";
    if (i == -1)
        return "Yesterday";
    if (i == 1)
        return "Tomorrow";
    return ConvertDateFormat(pSecondDate);
}
// GLOBAL FUNCTIONS -------------------------------------------------------------
Date.prototype.subtractDates = function (pFirstDate, pSecondDate) {
    var _firstDate = new Date(pFirstDate);
    var _secondDate = new Date(pSecondDate);
    var _timeDiff = Math.abs(_secondDate.getTime() - _firstDate.getTime());
    var _diffDays = Math.ceil(_timeDiff / (1000 * 3600 * 24));
    // console.log(_diffDays.toString());

    return _diffDays;
}

//sherif: if return is 0 then they are equal, if return < 0 then 1stdate is larger else smaller
//the return value is the number of days different between the 2 dates
Date.prototype.compareDates = function (pFirstDate, pSecondDate) {
    var _firstDate = new Date(pFirstDate);
    var _secondDate = new Date(pSecondDate);
    //var _timeDiff = Math.abs(_secondDate.getTime() - _firstDate.getTime());
    var _timeDiff = _secondDate.getTime() - _firstDate.getTime();
    var _diffDays = Math.ceil(_timeDiff / (1000 * 3600 * 24));
    // console.log(_diffDays.toString());
    
    //***By Mostafa** sometimes date comparing return -0 (when day is 31) that is equal +0 and we need negative value
    // -0 == 0 true
    // Object.is(-0, +0) false //>>>>>[ Mostafa ]
    //**************************************************
    if (Object.is(-0, _diffDays))
    {
        _diffDays = -1;
    }
    //*****EOF By Mostafa******************************************
    return _diffDays;
}

Date.prototype.addDays = function (pDays) {
    debugger;
    var dat = new Date(this.valueOf());
    dat.setDate(dat.getDate() + pDays);
    return dat;
}
//returns MM/DD/YYYY
Date.prototype.addDays = function (pFirstDate, pDays) {

    var someDate = new Date(pFirstDate);
    var numberOfDaysToAdd = pDays * 1;

    someDate.setDate(someDate.getDate() + numberOfDaysToAdd);

    var dd = someDate.getDate();
    var mm = someDate.getMonth() + 1;
    var y = someDate.getFullYear();
    var someFormattedDate = dd + '/' + mm + '/' + y;

    return someFormattedDate;
}

function getTodaysDateInddMMyyyyFormat() {
    var today = new Date();

    var dd = today.getDate().toString().length == 1 ? ("0" + today.getDate().toString()) : today.getDate().toString();
    var MM = (today.getMonth() + 1).toString().length == 1 ? ("0" + (today.getMonth() + 1).toString()) : (today.getMonth() + 1).toString();
    var yyyy = today.getFullYear().toString();

    return dd + "/" + MM + "/" + yyyy;
}
function getTime() {
    //// debugger;
    var pDate = new Date();
    return pDate.toLocaleTimeString();
}
function getMonthFromString(mon) {
    return new Date(Date.parse(mon + " 1, 2012")).getMonth() + 1
}
function getDayInLetters(pDateInddMMyyyyFormat, pLanguage) { //pLanguage 1:En, 2:Ar
    debugger;
    var pDay = "";
    //var dayOrder = new Date(Date.parse("10" + " 07, 2018")).getDay() + 1
    if (pDateInddMMyyyyFormat == "01/01/1900")
        return "";
    var dayOrder = new Date(Date.parse(pDateInddMMyyyyFormat.split("/")[1]/*Month*/ + " " + pDateInddMMyyyyFormat.split("/")[0]/*day*/ +", " +pDateInddMMyyyyFormat.split("/")[2]/*year*/)).getDay() + 1
    if (pLanguage == 1) { //En
        switch(dayOrder) {
            case 1 :
                return "Sunday";
            case 2 :
                return "Monday";
            case 3 :
                return "Tuesday";
            case 4 :
                return "Wednesday";
            case 5 :
                return "Thursday";
            case 6 :
                return "Friday";
            case 7 :
                return "Saturday";
            default:
                return "";
        }
    }
    else if (pLanguage == 2) { //Ar
        switch(dayOrder) {
            case 1 :
                return "الأحد";
            case 2 :
                return "الأثنين";
            case 3 :
                return "الثلاثاء";
            case 4 :
                return "الأربعاء";
            case 5 :
                return "الخميس";
            case 6 :
                return "الجمعة";
            case 7 :
                return "السبت";
            default:
                return "";
        }
    }
}
function getMonthInLetters(pMonthInNumber, pLanguage) { //pLanguage 1:En, 2:Ar
    debugger;
    var _intMonth = parseInt(pMonthInNumber);
    switch(_intMonth) {
        case 1 :
            return "Jan";
        case 2 :
            return "Feb";
        case 3 :
            return "Mar";
        case 4 :
            return "Apr";
        case 5 :
            return "Mai";
        case 6 :
            return "Jun";
        case 7 :
            return "Jul";
        case 8 :
            return "Aug";
        case 9 :
            return "Sep";
        case 10 :
            return "Oct";
        case 11 :
            return "Nov";
        case 12 :
            return "Dec";
        default:
            return "";
    }
}
function get24Houre(pTime) {
    var time = pTime;
    var hours = Number(time.match(/^(\d+)/)[1]);
    var minutes = Number(time.match(/:(\d+)/)[1]);
    var AMPM = time.match(/\s(.*)$/)[1];
    if (AMPM == "PM" && hours < 12) hours = hours + 12;
    if (AMPM == "AM" && hours == 12) hours = hours - 12;
    var sHours = hours.toString();
    var sMinutes = minutes.toString();
    if (hours < 10) sHours = "0" + sHours;
    if (minutes < 10) sMinutes = "0" + sMinutes;
    console.log(sHours + ":" + sMinutes)
    return (sHours + ":" + sMinutes);
}

function convertTo24Hour(time) {
    var hours = parseInt(time.substr(0, 2));
    if (time.indexOf('am') != -1 && hours == 12) {
        time = time.replace('12', '0');
    }
    if (time.indexOf('pm') != -1 && hours < 12) {
        time = time.replace(hours, (hours + 12));
    }
    return time.replace(/(am|pm)/, '');
}

// Context Menu Section *********************************************
function CreateCustomContextMenu(pSelector, pItems, callback) {
    $.contextMenu({
        selector: pSelector,
        callback: function (key, options) {
            callback(key);
        },
        items: pItems,
        autoHide: true
    });
}
//*******************************************************************

; $.fn.reverseChildren = function () {
    return this.each(function () {
        var $this = $(this);
        $this.children().each(function () { $this.prepend(this) });
        $this.addClass("reversed");
    });
};

function HighlightText(pContainerName, pHighlightString) {
    $(pContainerName).highlight(pHighlightString);
}

function Print(pServiceFunctionName, pPageNumber, pPageSize, callback, pRoleID, pUserID) {
    FadePageCover(true);
    if (pPageNumber <= 0)
        pPageNumber = 1;
    debugger;//sherif
    if (pPageSize <= 0)
        pPageSize = 10;
    if (pPageSize == null)
        pPageSize = 0;
    $.ajax({
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pSearchKey: ($("#txt-Search").val() == null ? "" : $("#txt-Search").val().trim()), pRoleID: (pRoleID == null ? EditedRoleID : pRoleID), pUserID: (pUserID == null ? EditedUserID : pUserID) },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $("#cb-CheckAll").prop('checked', false);

            debugger; //sherif : fix so when delete all last page, then get the previous
            if (data[1] == 0 && parseInt(pPageNumber) > 1)
                LoadWithPaging(pServiceFunctionName, (parseInt(pPageNumber) - 1), pPageSize, callback);
            else {
                callback(JSON.parse(data[0]));
                InitiPaging("div-Pager", pPageNumber, data[1]);
                FadePageCover(false);
            }
        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!  this is LoadWithPaging in mainapp.master !", "error");
            FadePageCover(false);
        }
    });
    //if (callbackForDelete != null)
    //    callbackForDelete();
}

function Operations_SetCloseDate(pCallingControlID, pControlToBeSet) {
    debugger;
    if ($("#cbIsImport").prop('checked') && $("#cbIsOcean").prop('checked')) //ImportOceanDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultImportOceanDays").val()));
    else if ($("#cbIsImport").prop('checked') && ($("#cbIsAir").prop('checked'))) //ImportAirDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultImportAirDays").val()));
    else if ($("#cbIsImport").prop('checked') && ($("#cbIsInland").prop('checked'))) //InmportInlandDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultImportInlandDays").val()));
    else if ($("#cbIsExport").prop('checked') && $("#cbIsOcean").prop('checked')) //ExportOceanDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultExportOceanDays").val()));
    else if ($("#cbIsExport").prop('checked') && ($("#cbIsAir").prop('checked'))) //ExportAirDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultExportAirDays").val()));
    else if ($("#cbIsExport").prop('checked') && ($("#cbIsInland").prop('checked'))) //ExportInlandDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultExportInlandDays").val()));
    else if ($("#cbIsDomestic").prop('checked') && $("#cbIsOcean").prop('checked')) //DomesticOceanDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultDomesticOceanDays").val()));
    else if ($("#cbIsDomestic").prop('checked') && ($("#cbIsAir").prop('checked'))) //DomesticAirDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultDomesticAirDays").val()));
    else if ($("#cbIsDomestic").prop('checked') && ($("#cbIsInland").prop('checked'))) //DomesticInlandDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultDomesticInlandDays").val()));
}

function Operations_ClearFilters() {
    glbOperationTransportFilter = 0;
    glbOperationDirectionFilter = 0;
    glbOperationBLTypeFilter = 0;
    glbOperationStageFilter = "";
    glbOperationTxtSearchFilter = "";
    //SetAsideSearchControls(0);
}
function Quotations_ClearFilters() {
    glbQuotationTransportFilter = 0;
    glbQuotationDirectionFilter = 0;
    glbQuotationStageFilter = "";
    glbQuotationTxtSearchFilter = "";
}
//pOption 0:Clear,1:Operations
//function SetAsideSearchControls(pOption) {
//    debugger;
//    var htmlSearchControls = "";
//    if (pOption == 0) {
//        $("#asideSearch").addClass("hide");
//    }
//    else if (pOption == 1) { //Search Operations
//        $("#asideSearch").addClass("hide"); //the default is hide
//        htmlSearchControls = '<a class="list-group-item" style="height:70px;"><label>Operation Code</label><input type="text" id="txtFilterOperationCode" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" class="form-control input-sm" maxlength="200" placeholder="Op. Code" style="text-transform:uppercase"></a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>From Open Date</label><input id="txtFilterFromOpenDate" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="background-color:white; cursor:text;" class="datepicker-input form-control input-sm" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" /> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>To Open Date</label><input id="txtFilterToOpenDate" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="background-color:white; cursor:text;" class="datepicker-input form-control input-sm" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" /> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>From ETD Date</label><input id="txtFilterFromETDDate" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="background-color:white; cursor:text;" class="datepicker-input form-control input-sm" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" /> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>To ETD Date</label><input id="txtFilterToETDDate" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="background-color:white; cursor:text;" class="datepicker-input form-control input-sm" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" /> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>From ETA Date</label><input id="txtFilterFromETADate" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="background-color:white; cursor:text;" class="datepicker-input form-control input-sm" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" /> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>To ETA Date</label><input id="txtFilterToETADate" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="background-color:white; cursor:text;" class="datepicker-input form-control input-sm" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" /> </a> ';
//        //Operations  here w/o dashes
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>Service</label><select id="slFilterMoveType" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item '+($("#hDefaultUnEditableCompanyName").val() == "EGL" ? " hide ": "")+'" style="height:70px;"><label>Shipper</label><select id="slFilterShipper" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item '+($("#hDefaultUnEditableCompanyName").val() == "EGL" ? " hide ": "")+'" style="height:70px;"><label>Consignee</label><select id="slFilterConsignee" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item '+($("#hDefaultUnEditableCompanyName").val() == "EGL" ? " hide ": "")+'" style="height:70px;"><label>Agent</label><select id="slFilterAgent" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>State</label><select id="ulOperationStages" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>POL Country</label><select id="slFilterPOLCountry" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>POL</label><select id="slFilterPOL" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"><option value=""><--All--></option></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>POD Country</label><select id="slFilterPODCountry" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>POD</label><select id="slFilterPOD" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"><option value=""><--All--></option></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>Invoice No.</label><input type="text" id="txtFilterInvoiceNumber" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" class="form-control input-sm" maxlength="200" placeholder="Invoice No." style="text-transform:uppercase"></a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>Gross Wgt(kg)</label><input type="text" id="txtFilterGrossWeight" name="txtSalePrice" onkeypress="CheckValueIsDecimal(id);" onfocus="CheckValueIsDecimal(id);" onblur="CheckDecimalFormat(id);" class="form-control input-sm" maxlength="10" placeholder="0.0"></a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>Container No.</label><input type="text" id="txtFilterContainerNumber" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" class="form-control input-sm" maxlength="200" placeholder="Container No." style="text-transform:uppercase"></a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>Certificate No.</label><input type="text" id="txtFilterCertificateNumber" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" class="form-control input-sm" maxlength="200" placeholder="Certificate No." style="text-transform:uppercase"></a> ';
//        //$("#asideSearch").removeClass("hide"); //i transferred this line to the callback of load views not to be shown early
//        $("#btnFilterOptions").attr("onclick", "Operations_LoadingWithPaging();");
//    }
//    $("#divSearchControls").html(htmlSearchControls);
//}
function GetTotalEquivalantDefaultCurrencyAmount(pCurrenciesBalance) { //pCurrenciesBalance: like "387.4 EGP, 4873 USD, 2937 EUR"
    debugger;
    var pEquivalantAmountInDefaultCurrency = 0;
    var arrRowBalance = pCurrenciesBalance.split(',');
    if (arrRowBalance[0].trim() != "")
        for (var i = 0; i < arrRowBalance.length; i++) {
            var row = arrRowBalance[i].trim();
            if (row != "0") {
                pEquivalantAmountInDefaultCurrency += parseFloat(row)
                                                *
                                                $("#hReadySlCurrencies option:Contains('" + row.substr(row.length - 3, 3) + "')").attr("MasterDataExchangeRate");
            }
        }
    return pEquivalantAmountInDefaultCurrency;
}

function OpenUploadedFile(pFileName) {
    window.open(constDocsInFilesPath + $("#hOperationCreationYear").val() + "\\" + $("#hOperationCode").val() + "\\" + pFileName, '_blank');
    //var myWindow = window.open("", "_blank");
    //myWindow.document.write("<p>I replaced the current window.</p>");
}
//SaveUploadedFile - DownloadUploadedFile
function SaveFile(pFileName) {
    debugger;
    //window.open(constDocsInFilesPath + $("#hOperationCode").val() + "\\" + pFileName, '_blank');
    var link = document.createElement('a');//a is <anchor>
    if (typeof link.download === 'string') {
        link.href = constDocsInFilesPath + pFileName;
        link.setAttribute('download', pFileName);
        document.body.appendChild(link);//Firefox requires the link to be in the body
        link.click();//simulate click
        document.body.removeChild(link); //remove the link when done
    } else {
        window.open(constDocsInFilesPath + pFileName);
    }
    var file = constDocsInFilesPath + $("#hOperationCode").val() + "\\" + pFileName;
    saveAs(file);
}
function ShowliChequeAlarm() {
    $("#liChequeAlarm").addClass("hidden-xs");
    $("#liChequeAlarm").removeClass("hide");
}
function HideliChequeAlarm() {
    $("#liChequeAlarm").removeClass("hidden-xs");
    $("#liChequeAlarm").addClass("hide");
}

function InvoiceReports_SumColumn(pTableName, pClassName) {
    debugger;
    var result = 0;
    $("#" + pTableName + " td." + pClassName).each(function () {
        var value = $(this).text();
        if (!isNaN(value) && value.length != 0)
            result += parseInt(value);
    });
}
function ExportToExcel(pArray, pHeader, pFileName) {
    debugger;
    exportToCsv = function () {
        var CsvString = "";
        ////TODO: Add header and select each column for each
        ////TODO: Handle showing date in readable format
        //for (var i = 0; i < pHeader.length; i++)
        //    CsvString += pHeader[i] + ',';
        //CsvString += "\r\n";
        pArray.forEach(function (RowItem, RowIndex) {
            for (var key in RowItem) {
                CsvString += RowItem[key] + ','
            }
            CsvString += "\r\n";
        });
        //CsvString = "data:application/csv," + encodeURIComponent(CsvString);
        CsvString = "data:text/csv;charset=utf-8,%EF%BB%BF" + encodeURIComponent(CsvString);
        var x = document.createElement("A");
        x.setAttribute("href", CsvString);
        if (pFileName == undefined) pFileName = "NewFile";
        x.setAttribute("download", pFileName + ' ' + getTodaysDateInddMMyyyyFormat() + ' ' + getTime() + ".csv");
        document.body.appendChild(x);
        x.click();
    }
    exportToCsv();
}
function ExportHtmlTableToCsv(pTblName, pFileName) {
    debugger;
    exportToCsv = function () {
        var CsvString = "";
        var mytable = document.getElementById(pTblName);
        var rowCount = mytable.rows.length;
        var colCount = mytable.getElementsByTagName("tr")[0].getElementsByTagName("th").length;
        for (var i = 0; i < rowCount; i++) {
            for (var j = 0; j < colCount; j++) {
                if (i == 0) {
                    CsvString += mytable.getElementsByTagName("thead")[i].getElementsByTagName("th")[j].innerText + ',';
                }
                else {
                    CsvString += mytable.getElementsByTagName("tr")[i].getElementsByTagName("td")[j].innerText.replace(/,/g, "-") + ',';
                }
            }
            CsvString += "\r\n";
        }
        CsvString = "data:text/csv;charset=utf-8,%EF%BB%BF" + encodeURIComponent(CsvString);
        var x = document.createElement("A");
        x.setAttribute("href", CsvString);
        if (pFileName == undefined) pFileName = "NewFile";
        x.setAttribute("download", pFileName + ' ' + getTodaysDateInddMMyyyyFormat() + ' ' + getTime() + ".csv");
        document.body.appendChild(x);
        x.click();
    }
    exportToCsv();
}
function ExportHtmlTableToCsv_RemovingCommasForNumbers(pTblName, pFileName) {
    debugger;
    exportToCsv = function () {
        var CsvString = "";
        var mytable = document.getElementById(pTblName);
        var rowCount = mytable.rows.length;
        var colCount = mytable.getElementsByTagName("tr")[0].getElementsByTagName("th").length;
        //Header
        for (var j = 0; j < colCount; j++)
            CsvString += mytable.getElementsByTagName("thead")[0].getElementsByTagName("th")[j].innerText + ',';
        CsvString += "\r\n";
        //Rows
        for (var i = 1; i < rowCount; i++) {
            for (var j = 0; j < colCount; j++)
                CsvString += mytable.getElementsByTagName("tr")[i].getElementsByTagName("td")[j].innerText.replace(/,/g, "") + ',';
            CsvString += "\r\n";
        }
        CsvString = "data:text/csv;charset=utf-8,%EF%BB%BF" + encodeURIComponent(CsvString);
        var x = document.createElement("A");
        x.setAttribute("href", CsvString);
        if (pFileName == undefined) pFileName = "NewFile";
        x.setAttribute("download", pFileName + ' ' + getTodaysDateInddMMyyyyFormat() + ' ' + getTime() + ".csv");
        document.body.appendChild(x);
        x.click();
    }
    exportToCsv();
}
function Receptionists_GetAvailableUsers(pWhereClause) {
    $("#lblShownItems").html(" Receptionists");
    $("#divCheckboxesList").html("");
    jQuery("#CheckboxesListModal").modal("show");
    var pStrFnName = "/api/Users/LoadAll";
    var pDivName = "divCheckboxesList";
    var pCheckboxNameAttr = "cbAddedItemID";
    if (pWhereClause == null || pWhereClause == undefined) {
        //pWhereClause = " WHERE IsInactive=0 AND ID <> " + $("#hLoggedUserID").val();
        pWhereClause = " WHERE IsInactive=0 ";
        //pWhereClause += " AND ( Name LIKE N'%" + $("#txtSearchItems").val().trim().toUpperCase() + "%' OR LocalName LIKE N'%" + $("#txtSearchItems").val().trim().toUpperCase() + "%') ";
        pWhereClause += " AND Name LIKE N'%" + $("#txtSearchItems").val().trim().toUpperCase() + "%' ";
        pWhereClause += " ORDER BY Name ";
    }
    debugger;
    FadePageCover(true);
    GetListAsCheckboxes(pStrFnName, pWhereClause, pDivName, pCheckboxNameAttr
        , function () {
            HighlightText("#" + pDivName, $("#txtSearchItems").val().trim());
            FadePageCover(false);
        });
}
//************************ Excel Function (Dynamic Fields Title) ************* 
//#tblExcel      ,  #InputFileID
function ImportExcel(HashUplaodFileID, HashTableID) {
    debugger
    $(HashTableID).html("")
    var regex = /^([a-zA-Z0-9\s_\\.\-:]\\(\\))+(.xlsx|.xls)$/;
    /*Checks whether the file is a valid excel file*/
    if ($(HashUplaodFileID).val().toLowerCase().indexOf(".xlsx") > 0 || $(HashUplaodFileID).val().toLowerCase().indexOf(".xls") > 0) {
        var xlsxflag = false; /*Flag for checking whether excel is .xls format or .xlsx format*/
        if ($(HashUplaodFileID).val().toLowerCase().indexOf(".xlsx") > 0) {
            xlsxflag = true;
        }
        /*Checks whether the browser supports HTML5*/
        if (typeof (FileReader) != "undefined") {
            var reader = new FileReader();
            reader.onload = function (e) {
                var data = e.target.result;
                /*Converts the excel data in to object*/
                if (xlsxflag) {

                    var binary = "";
                    var bytes = new Uint8Array(data);
                    var length = bytes.byteLength;
                    for (var i = 0; i < length; i++) {
                        binary += String.fromCharCode(bytes[i]);
                    }
                    // call 'xlsx' to read the file
                    var workbook = XLSX.read(binary, { type: 'binary', cellDates: true, cellStyles: true });

                }
                else {
                    var workbook = XLS.read(data, { type: 'binary' });
                }
                /*Gets all the sheetnames of excel in to a variable*/
                var sheet_name_list = workbook.SheetNames;

                var cnt = 0; /*This is used for restricting the script to consider only first sheet of excel*/
                sheet_name_list.forEach(function (y) { /*Iterate through all sheets*/
                    /*Convert the cell value to Json*/
                    if (xlsxflag) {
                        var exceljson = XLSX.utils.sheet_to_json(workbook.Sheets[y]);
                    }
                    else {
                        var exceljson = XLS.utils.sheet_to_row_object_array(workbook.Sheets[y]);
                    }
                    if (exceljson.length > 0 && cnt == 0) {
                        BindTable(exceljson, HashTableID);
                        cnt++;
                    }
                });
                $(HashTableID).show();
            }
            if (xlsxflag) {/*If excel file is .xlsx extension than creates a Array Buffer from excel*/
                reader.readAsArrayBuffer($(HashUplaodFileID)[0].files[0]);
            }
            else {
                reader.readAsBinaryString($(HashUplaodFileID)[0].files[0]);
            }
        }
        else {
            alert("Sorry! Your browser does not support HTML5!");
        }
    }
    else {
        alert("Please upload a valid Excel file!");
    }
}
function BindTable(jsondata, tableid) {/*Function used to convert the JSON array to Html Table*/
    debugger;
    var columns = BindTableHeader(jsondata, tableid); /*Gets all the column headings of Excel*/
    for (var i = 0; i < jsondata.length; i++) {
        var row$ = $('<tr/>');
        for (var colIndex = 0; colIndex < columns.length; colIndex++) {
            var cellValue = jsondata[i][columns[colIndex]];
            if (cellValue != null && cellValue.toString().indexOf("GMT+") >= 0) {
                var myDate = new Date(cellValue);
              
                row$.append($('<td/>').html(myDate.getFullYear() + '-' + (myDate.getMonth() + 1) + '-' + (myDate.getDate()+1)));
            }
            else {
                if (cellValue == null)
                    cellValue = "";
                row$.append($('<td/>').html(cellValue));
            }
        }
        $(tableid).append(row$);
    }
}
function BindTableHeader(jsondata, tableid) {/*Function used to get all column names from JSON and bind the html table header*/
    debugger;
    var columnSet = [];
    var headerTr$ = $('<tr/>');
    for (var i = 0; i < jsondata.length; i++) {
        var rowHash = jsondata[i];
        for (var key in rowHash) {
            if (rowHash.hasOwnProperty(key)) {
                if ($.inArray(key, columnSet) == -1) {/*Adding each unique column names to a variable array*/
                    columnSet.push(key);
                    headerTr$.append($('<th/>').html(key));
                }
            }
        }
    }
    $(tableid).append(headerTr$);
    return columnSet;
}
function Fill_SelectInputAfterLoadData_WithMultiAttrWithoutOptionText(data, ID_Name, Title, SelectInput_ID, Selected_ID, AttrItemNames) {
    var selectAttrs = "";
    var option = "";
    if (Title != null)
        option += '<option value="' + 0 + '" selected "> ' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);
        selectAttrs = "";
        $(AttrItemNames.split(",")).each(function (attrindex, attr) {
            // element == this
            selectAttrs += ' ' + attr + ' = "' + item[attr] + '" ';
            if (attrindex == AttrItemNames.split(",").length - 1) {
                if (item[ID_Name] == Selected_ID) {
                    option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '" selected> ' + '' + '</option>';
                }
                else {
                    option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '"> ' + '' + '</option>';
                }
            }
        });
    });
    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);
}

//var tableToExcel = (function() {
//    var uri = 'data:application/vnd.ms-excel;base64,'
//      , template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><meta http-equiv="content-type" content="text/plain; charset=UTF-8"/></head><body><table>{table}</table></body></html>'
//      , base64 = function(s) { return window.btoa(unescape(encodeURIComponent(s))) }
//      , format = function(s, c) { return s.replace(/{(\w+)}/g, function(m, p) { return c[p]; }) }
//    debugger;
//    return function(table, name) {
//        if (!table.nodeType) table = document.getElementById(table);
//        debugger;
//        var ctx = {worksheet: name || 'Worksheet', table: table.innerHTML}
//        window.location.href = uri + base64(format(template, ctx))
//    }
//})()

function UnifyArabicLetters(pControlID) {
    debugger;
    // UniCodes -->  ا :0627 , إ :0625 , أ :0623 , آ :0622
    var strText = $("#" + pControlID).val();
    strText = strText.replace(new RegExp("\u0623", "g"), "\u0627"); //the parameter "g" is to replace all occurances globally
    strText = strText.replace(new RegExp("\u0625", "g"), "\u0627");
    strText = strText.replace(new RegExp("\u0622", "g"), "\u0627");
    $("#" + pControlID).val(strText);
}
function pad_with_zeroes(number, length) {

    var my_string = '' + number;
    while (my_string.length < length) {
        my_string = '0' + my_string;
    }
    return my_string;
}
function GetColumnSum(pTableName, pColumnClassName) {
    //debugger;
    var pSum = 0;
    //var RowsCount = $("#" + pTableName + " tbody tr").length;
    //for (var i = 0; i < RowsCount; i++) {
    //    pSum += parseFloat($("#" + pTableName + " tbody tr td." + pColumnClassName).text());
    //}
    $("#" + pTableName + " tbody tr td." + pColumnClassName).each(function () {
        //debugger;
        //if ($(tr).find("input[name='Delete']").prop("checked"))
        this.innerText = this.innerText.replace(/,/g, "");
        pSum += (isNaN(this.innerText) || this.innerText.length == 0 ? 0 : parseFloat(this.innerText));
    });
    return pSum;
}
function GetColumnSumForNotChecked(pTableName, pColumnClassName, pExcludedClassNameIfChecked) {
    debugger;
    //var pSum = 0;
    $("#" + pTableName + " tbody tr td." + pColumnClassName).each(function () {
        var tr = this.parentElement;
        if (!$(tr).find("input[name='" + pExcludedClassNameIfChecked + "']").prop("checked")) {
            this.innerText = this.innerText.replace(/,/g, "");
            pSum += (isNaN(this.innerText) || this.innerText.length == 0 ? 0 : parseFloat(this.innerText));
        }
    });
    return pSum;
}
function CalculateTotalCurrenciesSummaryFromArray(pArray) {
    debugger;
    var temp = {};
    var row = null;
    tempArray = JSON.parse(JSON.stringify(pArray)); //not to change the original Array so i make a copy
    for (var i = 0; i < tempArray.length; i++) {
        row = tempArray[i];
        if (!temp[row.CurrencyCode]) {
            temp[row.CurrencyCode] = row;
        } else {
            temp[row.CurrencyCode].Amount += row.Amount;
            row.Amount = 0; //to avoid duplication
            //temp[row.CurrencyCode].PaidAmount += row.PaidAmount;
            //row.PaidAmount = 0; //to avoid duplication
            //temp[row.CurrencyCode].RemainingAmount += row.RemainingAmount;
            //row.RemainingAmount = 0; //to avoid duplication
        }
    }
    var ArrResultTotals = [];
    var pTotalSummary = "";
    for (var prop in temp) {
        ArrResultTotals.push(temp[prop]);
        pTotalSummary += (pTotalSummary == "" ? (temp[prop].Amount.toFixed(2) + ' ' + prop) : (", " + temp[prop].Amount.toFixed(2) + " " + prop));
    }
    return pTotalSummary;
}

function CalculateSumOfArrayWithGroupBy(pArray, pColumnNameToSum, pGroupBy) {
    debugger;
    var temp = {};
    var row = null;
    tempArray = JSON.parse(JSON.stringify(pArray)); //not to change the original Array so i make a copy
    for (var i = 0; i < tempArray.length; i++) {
        row = tempArray[i];
        if (!temp[row[pGroupBy]]) {
            temp[row[pGroupBy]] = row;
        } else {
            temp[row[pGroupBy]][pColumnNameToSum] += row[pColumnNameToSum];
            row[pColumnNameToSum] = 0; //to avoid duplication
        }
    }
    var ArrResultTotals = [];
    var pTotalSummary = "";
    for (var prop in temp) {
        ArrResultTotals.push(temp[prop]);
        pTotalSummary += (pTotalSummary == "" ? (temp[prop][pColumnNameToSum].toFixed(2) + ' ' + prop) : (", " + temp[prop][pColumnNameToSum].toFixed(2) + " " + prop));
    }
    return pTotalSummary;
}
function CalculateTotalInDefaultCurrencyFromArray(pArray, pColumnNameToSum, pExchangeRateColumnName) {
    debugger;
    var temp = {};
    var row = null;
    var _TotalInDefaultCurrency = 0;
    //tempArray = JSON.parse(JSON.stringify(pArray)); //not to change the original Array so i make a copy
    for (var i = 0; i < pArray.length; i++) {
        row = pArray[i];
        _TotalInDefaultCurrency += (row[pColumnNameToSum] * row[pExchangeRateColumnName]);
    }
    return (_TotalInDefaultCurrency.toFixed(2) + " " + pDefaults.CurrencyCode);
}
//function GetArraySum(pArray) {
//    debugger;
//    _total = 0;
//    for (var i = 0; i < pArray.length; i++) {
//        _total += pArray[i].Amount;
//    }
//    return _total;
//}

//function Print() {
//    $.ajax({
//        type: "GET",
//        //url: strServerURL + "/api/Regions/PrintReport",
//        url: strServerURL + "/MasterData/PrintReport",
//        //data: { pCutlureID: $("#hf_ChangeLanguage").val() },
//        data: { },
//        contentType: "application/json; charset=utf-8",
//        dataType: "html",
//        success: function (data) {
//            debugger;

//        },
//        error: function (jqXHR, exception) {
//            debugger;
//            swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
//            FadePageCover(false);
//        }
//    });
//}


//@@@@@@ MOSTAA @@@@@@@@@

//C# date to javascript Time
function GetTimeFromServer(pServerDate) {
    try {
        var dtFormatedMDY = new Date(1 * pServerDate.substring(6, pServerDate.length - 2));
        return dtFormatedMDY.toLocaleTimeString();
    }
    catch(Exc)
    {
        return ' ';
    }
}

function IsNull(_in, _out) {
    var res = _in;
    if (typeof _in === "undefined" || _in == null || _in == "" || _in == "0" || _in == 0)
        res = _out;
    return res;
}
function SendPDF_ReportByEmail(pSendTo, pReportHTML, pReportTitle, pIsUser) {
    debugger;
    var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    if (regex.test(pSendTo)) {
        CallPOSTFunctionWithParameters("/api/Defaults/SendPDFEmailWithBodyTemplate"
            , {
                pEmail_Subject: pReportTitle
                , pEmail_To: pSendTo
                , pEmail_Body: "Dear Sir, <br><br>Please check the attached file ..... <br><br>Thanks & best regards.<br>"
                , pHTML_ForPDF: pReportHTML
                , pHTML_ForExcel: null
                , pEmail_ReportName: pReportTitle
            }, function (pData) {
                var _MessageReturned = pData[0];
                if (_MessageReturned == "") {
                    swal("Great !", "Email Is Sending", "success");
                }
                else {
                    swal("Sorry !", _MessageReturned, "warning");
                }
            });
    }
    else {
        swal("Excuse me !", "Insert Correct [To] Email", "warning");
    }
}
function SendTestEmail() {
    FadePageCover(true)
    $.ajax({
        type: 'GET',
        url: 'api/Defaults/EmailSending',
        data: {},
        contentType: "application/json; charset=utf-8",
        success: function (pData) {
            FadePageCover(false)
        }

    });


}
function SendPDFEmail_General(pEmail_Subject, pEmail_To, pReportHTML, pReportTitle, pCallback) {
    debugger;
    var pParametersWithValues = {
        pEmail_Subject: pEmail_Subject
        , pEmail_To: pEmail_To
        , pEmail_Body: "Dear Sir, <br><br>Please check the attached file ..... <br><br>Thanks & best regards.<br>"
        , pHTML_ForPDF: pReportHTML
        , pHTML_ForExcel: null
        , pEmail_ReportName: pReportTitle
    };
    CallPOSTFunctionWithParameters("/api/Defaults/SendPDFEmail_General", pParametersWithValues
        , function (pData) {
            var _MessageReturned = pData[0];
            if (pData[0] == "") {
                swal("Success", "Sent successfully.");
            }
            else
                swal("Sorry", _MessageReturned);
            FadePageCover(false);
        }
        , pCallback);
}

function SendFastReportEmail_General(pEmail_Subject, pEmail_To, pUrl, pReportTitle, pCallback) {
    debugger;
    var pParametersWithValues = {
        pEmail_Subject: pEmail_Subject
        , pEmail_To: pEmail_To
        , pEmail_Body: "Dear Sir, <br><br>Please check the following link : <br> " + "<a href='" + pUrl + "'>" + pEmail_Subject +"</a>" +  ""  + "<br><br>Thanks & best regards.<br>"
        , pHTML_ForPDF: ""
        , pHTML_ForExcel: null
        , pEmail_ReportName: pReportTitle
    };
    CallPOSTFunctionWithParameters("/api/Defaults/SendFastReportEmail_General", pParametersWithValues
        , function (pData) {
            var _MessageReturned = pData[0];
            if (pData[0] == "") {
                swal("Success", "Sent successfully.");
            }
            else
                swal("Sorry", _MessageReturned);
            FadePageCover(false);
        }
        , pCallback);
}

//C# date to javascript Date
function GetDateFromServer(pServerDate) {
    try {
        var a = ConvertDateFormat(GetDateWithFormatMDY(pServerDate));
        return a;
    }
    catch(Exc)
    {

        return " ";
    }

}



var _OverlapArr = new Array();
var _IsOverlap = "false"




function isOverlap(tblID , FromClass , ToClass , callback)
{
    debugger
    _OverlapArr = [];
 
    
    $(tblID).find("tbody tr").each(function (j, tr)
    {
       // var obj = new Object();
      //  obj.start = moment($(tr).find("td." + FromClass).find("input").val(), 'DD/MM/YYYY').unix();
       // obj.end = moment($(tr).find("td." + ToClass).find("input").val(), 'DD/MM/YYYY').unix();
        _OverlapArr.push(moment($(tr).find("td." + FromClass).find("input").val(), 'DD/MM/YYYY').unix());
        _OverlapArr.push(moment($(tr).find("td." + ToClass).find("input").val(), 'DD/MM/YYYY').unix());

        if( (moment($(tr).find("td." + FromClass).find("input").val(), 'DD/MM/YYYY').unix()) > (moment($(tr).find("td." + ToClass).find("input").val(), 'DD/MM/YYYY').unix()))
        {

            if (typeof callback != "undefined" && callback != null) {
                callback("true");
                return false;
            }
            else
                return "true"
            
        }



        if (j == $(tblID).find("tbody tr").length - 1)
        {
            if (multipleDateRangeOverlaps(_OverlapArr) == "false")
            {
                if (typeof callback != "undefined" && callback != null )
                    callback("false")
                else
                    return "false"
            }
            else
            {
                if (typeof callback != "undefined" && callback != null)
                    callback("true")
                else
                    return "true"

            }


        }
    });

   
}  


function dateRangeOverlaps(a_start, a_end, b_start, b_end) {
    if (a_start <= b_start && b_start <= a_end) return true; // b starts in a
    if (a_start <= b_end && b_end <= a_end) return true; // b ends in a
    if (b_start < a_start && a_end < b_end) return true; // a in b
    return false;
}
function multipleDateRangeOverlaps(arguments) {
    var i, j;
    if (arguments.length % 2 !== 0)
        throw new TypeError('Arguments length must be a multiple of 2');
    for (i = 0; i < arguments.length - 2; i += 2) {
        for (j = i + 2; j < arguments.length; j += 2) {
            if (
                dateRangeOverlaps(
                    arguments[i], arguments[i + 1],
                    arguments[j], arguments[j + 1]
                )
            )
            {
                console.log("Is Overlap"); return "true"
            }
        }
    }
    {
        console.log("Is NOT Overlap"); return "false"
    }
}


/******************************Mostafa fns*************************************/







function FillHTMLtblInputs(Selector) {
    debugger;
    $.each($(Selector), function (j, tr) {
        try {
            var sl = $(tr).find('input[type=select]');
            console.log("sl" + sl.length)
            $.each($(tr).find('select'), function (i1, i_sl) {
                $(i_sl).val($(i_sl).attr('tag'));
                $(i_sl).trigger("change");

            });
        } catch (ex1) { }
        //---------------------------------------------------------------------------------------------------------
        try {
            var nu = $(tr).find('input[type=number]');
            console.log("nu" + nu.length)
            $.each($(tr).find('input[type=number]'), function (i2, i_nu) {
                $(i_nu).val($(i_nu).attr('tag'));
                $(i_nu).trigger("blur");
            });
        } catch (ex2) { }
        //---------------------------------------------------------------------------------------------------------
        try {
            var txt = $(tr).find('input[type=text]');
            console.log("txt" + txt.length)
            $.each($(tr).find('input[type=text]'), function (i3, i_txt) {
                $(i_txt).val($(i_txt).attr('tag'));
                $(i_txt).trigger("blur");

                if ($(i_txt).hasClass("datepicker-input")) {
                    try {
                        $(i_txt).datepicker().on('changeDate'
                            , function () {
                                $(this).datepicker('hide');
                                FireDateChangingEvent();

                            });
                        $(i_txt).datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });

                    }
                    catch (ex) {


                    }
                }
            });
        } catch (ex3) { }
    });
}
//FunUrl,
//ID_Name ,
//Item_Name,
//Title, 
//SelectInput_ID,
//Selected_ID
function Fill_SelectInput(FunUrl, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID) {

    $.ajax({
        type: "POST",
        url: strServerURL + FunUrl,
        data: {  },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (d) {
           // console.log(r.d[0]);

            var option = "";
            if (Title != null)
            option = '<option value="0">' + Title + '</option>';
            $.each(JSON.parse(d[0]), function (i, item) {
                console.log(item[ID_Name]);


                if (item[ID_Name] == Selected_ID) {

                    option += '<option value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]).trim() + '</option>';

                }
                else {
                    option += '<option value="' + item[ID_Name] + '"> ' + (item[Item_Name]).trim() + '</option>';
                }
            });


            $(SelectInput_ID).html("");
            $(SelectInput_ID).append(option);

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!", "error");
        }
    });


}
function Fill_SelectInputAfterLoadData_WithMultiAttrWithoutOptionText(data, ID_Name, Title, SelectInput_ID, Selected_ID, AttrItemNames) {
    var selectAttrs = "";
    var option = "";
    if (Title != null)
        option += '<option value="' + 0 + '" selected "> ' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);
        selectAttrs = "";
        $(AttrItemNames.split(",")).each(function (attrindex, attr) {
            // element == this
            selectAttrs += ' ' + attr + ' = "' + item[attr] + '" ';
            if (attrindex == AttrItemNames.split(",").length - 1) {
                if (item[ID_Name] == Selected_ID) {
                    option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '" selected> ' + '' + '</option>';
                }
                else {
                    option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '"> ' + '' + '</option>';
                }
            }
        });
    });
    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);
}
function Fill_SelectInput_WithDependedID(FunUrl, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, DependedID) {
    FadePageCover(true);
    $.ajax({
        type: "GET",
        url: strServerURL + FunUrl,
        data:{ pID: DependedID },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (d) {
          //  console.log(r.d[0]);

            var option = "";
            if (Title != null)
            option = '<option value="">' + Title + '</option>';
            $.each(JSON.parse(d[0]), function (i, item) {
                console.log(item[ID_Name]);


                if (item[ID_Name] == Selected_ID) {

                    option += '<option value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]).trim() + '</option>';

                }
                else {
                    option += '<option value="' + item[ID_Name] + '"> ' + (item[Item_Name]).trim() + '</option>';
                }
            });


            $(SelectInput_ID).html("");
            $(SelectInput_ID).append(option);
            FadePageCover(false);

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!", "error");
        }
    });
}

function GetAllSelectedIDsAsStringWithNameAttrRPT(pCheckboxNameAttr) {
    debugger;
    var listOfIDs = "";
    $('input[name="' + pCheckboxNameAttr + '"]:checked').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : "*") + ($(this).attr('value'));
    });
    return listOfIDs;
}
function InsertUpdateFunctionAndReturnID(pValidateFormID, pFunctionName, pParametersWithValues, pSaveandAddNew, pModalID, phID , callback)
{
    debugger;
    if (ValidateForm(pValidateFormID, pModalID)) {
        FadePageCover(true);
        $.ajax({
            type: "GET",
            url: strServerURL + pFunctionName,
            data: pParametersWithValues,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () { },
            success: function (data) {
                debugger;
                if (data != undefined && data.length > 1) {
                    if (data != 0) {
                        $(phID).val(data[0]);
                        if (callback != null && callback != undefined) {
                            if (data[1] != null && data[1] != undefined) //data[1] is the ID: for opening quotation or operation after saving a new one / or strMessageReturned
                                callback(data);
                        }

                        if (!pSaveandAddNew && pModalID != null) {
                            jQuery.noConflict();
                            (function ($) {
                              //  $('#' + pModalID).modal('hide');
                            })(jQuery);
                        }
                    }
                    else //data[0] = false
                        //swal(strSorry, strUniqueFailInsertUpdateMessage, "warning");
                        swal(strSorry, data[1]);
                }
                else {
                    if (data != 0) {
                        $(phID).val(data);
                        if (callback != null && callback != undefined) {
                            callback();
                        }
                        if (!pSaveandAddNew && pModalID != null) {
                            jQuery.noConflict();
                            (function ($) {
                               // $('#' + pModalID).modal('hide');
                            }
                            )(jQuery);
                        }
                    }
                    else //unique key violated
                        swal(strSorry, strUniqueFailInsertUpdateMessage);
                }
                FadePageCover(false);
            },
            error: function (jqXHR, exception) {
                FadePageCover(false);
                alert('Error when trying to call function [' + pFunctionName + ']. InsertUpdateFunction fn in mainapp.master');
            }
        });
    }
    else
        FadePageCover(false);
}
function Fill_SelectInput_WithWhereCondition(FunUrl, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, WhereClause) {
    FadePageCover(true);
    $.ajax({
        type: "GET",
        url: strServerURL + FunUrl,
        data: { pWhereClause: WhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (d) {
            //  console.log(r.d[0]);

            var option = "";
            if (Title != null)
            option = '<option value="0">' + Title + '</option>';
            $.each(JSON.parse(d[0]), function (i, item) {
                console.log(item[ID_Name]);


                if (item[ID_Name] == Selected_ID) {

                    option += '<option value="' + item[ID_Name] + '" selected ">' + (item[Item_Name]).trim() + '</option>';

                }
                else {
                    option += '<option value="' + item[ID_Name] + '">' + (item[Item_Name]).trim() + '</option>';
                }
            });


            $(SelectInput_ID).html("");
            $(SelectInput_ID).append(option);
            FadePageCover(false);

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!", "error");
        }
    });
}


//-------------------------
function Fill_SelectInputAfterLoadData(data, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID) {

    debugger;

    var option = "";
    if (Title != null)
    option = '<option value="0">' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);

        if (Selected_ID == "ActionPercent")
        {
            option += '<option ActionOrder="' + item.ActionPercent + '" value="' + item[ID_Name] + '"> ' + (item[Item_Name]).trim() + '</option>';
        }
        else
        {
            if (item[ID_Name] == Selected_ID)
            {
                option += '<option value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]).trim() + '</option>';
            }
            else
            {
                option += '<option value="' + item[ID_Name] + '"> ' + (item[Item_Name]).trim() + '</option>';
            }
        }
        
    });


    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);





}

function Fill_SelectInput_WithDependedID(FunUrl, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, DependedID) {
    FadePageCover(true);
    $.ajax({
        type: "GET",
        url: strServerURL + FunUrl,
        data:{ pID: DependedID },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (d) {
          //  console.log(r.d[0]);

            var option = "";
            if (Title != null)
            option = '<option value="0">' + Title + '</option>';
            $.each(JSON.parse(d[0]), function (i, item) {
                console.log(item[ID_Name]);


                if (item[ID_Name] == Selected_ID) {

                    option += '<option value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]).trim() + '</option>';

                }
                else {
                    option += '<option value="' + item[ID_Name] + '"> ' + (item[Item_Name]).trim() + '</option>';
                }
            });


            $(SelectInput_ID).html("");
            $(SelectInput_ID).append(option);
            FadePageCover(false);

        },
        error: function (jqXHR, exception) {
            swal("Oops!", "Please, contact your technical support!", "error");
        }
    });


}
// Disblay int or date 
function Fill_SelectInputAfterLoadData_DynamicTypes(data, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, IsDate) {
    var option = "";

    if (Title != null)
    option = '<option value="0">' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);
        if (item[ID_Name] == Selected_ID) {
            if (!IsDate) {
                option += '<option value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]) + '</option>';
            }
            else {
                option += '<option value="' + GetDateFromServer(item[ID_Name]) + '" selected "> ' + GetDateFromServer((item[Item_Name])) + '</option>';
            }
        }
        else {
            if (!IsDate) {
                option += '<option value="' + item[ID_Name] + '"> ' + (item[Item_Name]) + '</option>';
            }
            else {
                option += '<option value="' + GetDateFromServer(item[ID_Name]) + '"> ' + GetDateFromServer((item[Item_Name])) + '</option>';
            }
        }
    });
    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);
}
//xxxxxxxxxxxxxxxxxxxxxxxxxxxx Insert List Of Object to Webapi Controller xxxxxxxxxxxx
// Notes
//-----------
//1-  return array of object example JS : 
//-------------------------------------------
/*function SetArrayOfItems() {
    // var cobjItem = null;
    var arrayOfItems = new Array();
    $("#tblAllocationItem tbody tr").each(function (i, tr) {
        var pRowID = $(tr).attr("id");
        debugger;
        if ($("#txtItemAmountDue" + pRowID).val().trim() != "") {
            var objItem = new Object();
            objItem.VoucherID = $('#hID').val();
            objItem.InvoiceID = pRowID;
            objItem.DueAmount = $("#txtItemAmountDue" + pRowID).val();
            objItem.CurrencyID = $(tr).find("td.CurrencyID").attr("val");
            objItem.VoucherTypeID = glbFormCalled;
            arrayOfItems.push(objItem);
        }
    });
    return arrayOfItems;
}*/


//*********************************Upload Files***************************************//
function GeneralUpload_FillControls() {
    debugger;
    if (glbGeneralUploadFolderName == "")
        swal("Sorry", "Please, save header first.");
    else {
        $("#" + glbGeneralUploadTableName + " tbody").html("");
        if (glbGeneralUploadModalName != "")
            jQuery("#" + glbGeneralUploadModalName).modal("show");
        //CallGETFunctionWithParameters(pFunctionName, pParametersWithValues, callback, callback1)
        CallGETFunctionWithParameters("/api/PurchaseItem/LoadFiles"
            , { pFolderName: glbGeneralUploadFolderName, pStrFolderPath: glbGeneralUploadRelativePath }
            , function (data) {
                GeneralUpload_BindTableRows(JSON.parse(data[0]));
            }
            , null);
    }
}
function GeneralUpload_BindTableRows(pFileNames) {
    debugger;
    ClearAllTableRows(glbGeneralUploadTableName);
    if (pFileNames != null) {
        //var editControlsText = " class='btn btn-xs btn-rounded btn-info float-right' > <i class='fa fa-pencil' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + TranslateString("Edit") + "</span>";
        var downloadControlsText = " class='btn btn-xs btn-rounded btn-primary float-right' > <i class='fa fa-cloud-download' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + "Download" + "</span>";
        var openControlsText = " class='btn btn-xs btn-rounded btn-info float-right' > <i class='fa fa-folder-open' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + "Open" + "</span>";
        var emailControlsText = " class='btn btn-xs btn-rounded btn-primary float-right' > <i class='fa fa-envelope-o' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + "Mail" + "</span>";
        for (i = 0; i < pFileNames.length; i++) {
            AppendRowtoTable(glbGeneralUploadTableName,
            //("<tr ID='" + item.ID + "' ondblclick='DocumentTypes_EditByDblClick(" + item.ID + ");'>"
            ("<tr ID='" + i + "'>"
                + "<td class='classTdUploadedFilesID'> <input " + (1 == 1 ? "name='Delete'" : "disabled='disabled'") + " type='checkbox' value='" + pFileNames[i] + "'></td>"
                + "<td class='DocsInSerial'>" + (parseInt(i) + 1) + "</td>"
                + "<td class='FileName'>" + pFileNames[i] + "</td>"
                //+ "<td class=''><a onclick='GeneralUpload_OpenUploadedFile(" + '"' + pFileNames[i] + '","' + $("#txtUploadFolderName").val() + '"' + ");' " + openControlsText + "</a><a onclick='SaveFile(" + '"' + pFileNames[i] + '","' + $("#txtUploadFolderName").val() + '"' + ");' " + downloadControlsText + "</a>&nbsp;&nbsp;&nbsp;</td>"
                + "<td class=''><a onclick='GeneralUpload_OpenUploadedFile(" + '"' + pFileNames[i] + '","' + '"' + ");' " + openControlsText + "</a>&nbsp;&nbsp;&nbsp;</td>"
                //+ ($("#hIsOperationDisabled").val() == false
                //? ("<td class=''><a href='#DocumentTypeModal' data-toggle='modal' onclick='DocsOut_Print(" + item.ID + ");' " + printControlsText + "</a><a onclick='DocsOut_SendEmail(" + item.ID + ", function(){window.onbeforeunload = confirmExit;});' " + emailControlsText + "</a>&nbsp;&nbsp;&nbsp;</td>")
                //: "<td></td>")
                + "</tr>"));
        }
    }
    BindAllCheckboxonTable(glbGeneralUploadTableName, "classTdUploadedFilesID", glbTblInputSelectAllInputName);
    CheckAllCheckbox(glbTblTHSelectAllTagName);
}
// Asynchronous file upload process
function GeneralUpload_UploadFile() {
    debugger;
    //maxTotalSize = 10485760;//10MB total of uploaded files together
    maxTotalSize = 20971520;//20MB total of uploaded files together
    var formData = new FormData();
    var files = $("#" + glbGeneralUploadBtnUploadName).get(0).files;
    var totalFilesSize = 0;
    if (files.length > 0) {
        //check files total size is less than 20MB
        for (i = 0; i < files.length; i++)
            totalFilesSize += files[i].size;
        if (totalFilesSize > maxTotalSize)
            swal(strSorry, "Total file(s) size can't exceed 20MBs at one upload.");
        else {
            // Add the uploaded files content to the form data collection
            if (files.length > 0) {
                FadePageCover(true);
                for (i = 0; i < files.length; i++)
                    formData.append("FileNames", files[i]);
            }
            formData.append("pFolderName", glbGeneralUploadFolderName)
            formData.append("pStrFolderPath", glbGeneralUploadRelativePath)
            // Make Ajax request with the contentType = false, and processDate = false
            var ajaxRequest = $.ajax({
                type: "POST",
                xhr: function () {  // Custom XMLHttpRequest
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) { // Check if upload property exists
                        myXhr.upload.addEventListener('progress', progressHandlingFunction, false); // For handling the progress of the upload
                    }
                    return myXhr;
                },
                url: "/api/PurchaseItem/UploadFile",
                contentType: false,
                processData: false,
                data: formData,
                success: function (data) { //data[0]: The filenames returned
                    GeneralUpload_BindTableRows(JSON.parse(data[0]));
                    FadePageCover(false);
                    swal("Success", "File(s) uploaded successfully.");
                },
                error: function (jqXHR, exception) {
                    FadePageCover(false);
                    swal(strSorry, "An error occured, please try again.");
                }
            });
            ajaxRequest.done(function (xhr, textStatus) {
                // Do other operation
                debugger;
            });
        }//of else (correct file sizes)
    }//of if (files.length == 0)
}
function GeneralUpload_DeleteList() {
    debugger;
    //Confirmation message to delete
    var pFileNames = GetAllSelectedIDsAsString(glbGeneralUploadTableName, 'Delete');
    if (pFileNames != "")
        swal({
            title: "Are you sure?",
            text: "The selected files will be removed from server!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, remove!",
            closeOnConfirm: true
        },
        //callback function in case of confirm delete
        function () {
            FadePageCover(true);
            //CallGETFunctionWithParameters(pFunctionName, pParametersWithValues, callback, callback1)
            CallGETFunctionWithParameters("/api/PurchaseItem/DeleteUploadedFile"
            //CallGETFunctionWithParameters("/api/DocsIn/Delete"
                , { "pFolderName": glbGeneralUploadFolderName, "pFileNames": pFileNames, "pStrFolderPath": glbGeneralUploadRelativePath }
                , function (data) { //data[0]: pFileNames
                    GeneralUpload_BindTableRows(JSON.parse(data[0]));
                    FadePageCover(false);
                }
                , null);
        });
}
function GeneralUpload_OpenUploadedFile(pFileName) {
    debugger;
    window.open(glbGeneralUploadPath + glbGeneralUploadFolderName + "\\" + pFileName, '_blank');
    //var myWindow = window.open("", "_blank");
    //myWindow.document.write("<p>I replaced the current window.</p>");
}
function progressHandlingFunction(e) {
    if (e.lengthComputable) {
        $('progress').attr({ value: e.loaded, max: e.total });
    }
}
//*********************************EOF Upload Files***************************************//

//2- webapi invoke parameter example 
/*[HttpGet, HttpPost]
[AllowAnonymous]
        public object[] InsertA_VoucherInvoicesPayment([FromBody]string pItems)
{
    var _result = false;
    // Deserialize List -------------------------------------------------------------------------------
    var Listobj = new JavaScriptSerializer().Deserialize<List<CVarA_VoucherInvoicesPayment>>(pItems);
    CA_VoucherInvoicesPayment cA_VoucherInvoicesPayment = new CA_VoucherInvoicesPayment();
    var checkException = cA_VoucherInvoicesPayment.SaveMethod(Listobj);
    //------------------------------
    if (checkException == null)
        _result = true;

    return new object[] {
        _result, pItems
    };
}
            }*/
//xxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxx xxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxx

function InsertUpdateListOfObject(pFunctionName, ArrayOfObject /*See Notes*/, pSaveandAddNew, pModalID, callback) {
    debugger;
    //console.log(ArrayOfObject);
    //if (1 == 1) {
    FadePageCover(true);
    $.ajax({
        type: "POST",
        url: strServerURL + pFunctionName,
        data: { "": JSON.stringify(ArrayOfObject) },
        //contentType:"application/json; charset=utf-8", 
        beforeSend: function () { },
        success: function (data) {
            debugger;
            if (data != undefined && data.length > 1) {
                if (data[0] == true) {
                    if (callback != null && callback != undefined) {
                        if (data[1] != null && data[1] != undefined) //data[1] is the ID: for opening quotation or operation after saving a new one / or strMessageReturned
                            callback(data);
                    }

                    if (!pSaveandAddNew && pModalID != null) {
                        jQuery.noConflict();
                        (function ($) {
                            $('#' + pModalID).modal('hide');
                        })(jQuery);
                    }
                }
                else //data[0] = false
                    //swal(strSorry, strUniqueFailInsertUpdateMessage, "warning");
                    swal(strSorry, data[1]);
            }
            else {
                if (data == true) {
                    if (callback != null && callback != undefined) {
                        callback();
                    }
                    if (!pSaveandAddNew && pModalID != null) {
                        jQuery.noConflict();
                        (function ($) {
                            $('#' + pModalID).modal('hide');
                        }
                        )(jQuery);
                    }
                }
                else //unique key violated
                    swal(strSorry, strUniqueFailInsertUpdateMessage);
            }
            FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            FadePageCover(false);
            alert('Error when trying to call function [' + pFunctionName + ']. InsertUpdateFunction fn in mainapp.master');
        }
    });
    //}
    //else
    //    FadePageCover(false);
}
function Fill_SelectInputAfterLoadData_WithAttr(data, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID , AttrItemName)
{
    var option = "";
    if (Title != null)
        option += '<option ' + AttrItemName + ' = "' + 0 + '" value="' + 0 + '" selected "> ' + Title + '</option>';
            $.each(JSON.parse(data), function (i, item) {
               // console.log(item[ID_Name]);


                if (item[ID_Name] == Selected_ID) {

                    option += '<option ' + AttrItemName + ' = "' + item[AttrItemName]+'" value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]).trim() + '</option>';

                }
                else {
                    option += '<option ' + AttrItemName + ' = "' + item[AttrItemName] + '" value="' + item[ID_Name] + '"  "> ' + (item[Item_Name]).trim() + '</option>';
                }
            });


            $(SelectInput_ID).html("");
            $(SelectInput_ID).append(option);

}
function Fill_SelectInputAfterLoadData_WithMultiAttr(data, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, AttrItemNames) {
    var selectAttrs = "";
    var option = "";
    if (Title != null)
        option += '<option value="' + 0 + '" selected "> ' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);
        selectAttrs = "";
        $(AttrItemNames.split(",")).each(function (attrindex, attr) {
            // element == this
            selectAttrs += ' ' + attr + ' = "' + item[attr] + '" ';
            if (attrindex == AttrItemNames.split(",").length - 1) {
                if (item[ID_Name] == Selected_ID) {
                    option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '" selected> ' + (item[Item_Name]).trim() + '</option>';
                }
                else {
                    option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '"> ' + (item[Item_Name]).trim() + '</option>';
                }
            }
        });
    });
    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);
}
//xxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxx xxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxx
/******************************EOF Mostafa fns*************************************/

function FillDivWithCheckboxes_DynamicFiledWithIDName(pDivName, pData, pCheckboxNameAttr, FieldName, IDName , callback) {
    //Clear the div
    $("#" + pDivName).html("");
    var option = "";
    // Bind Data
    //option = '<section class="panel panel-default">';
    //option += '<header class="panel-heading">';
    //option += '</header>';
    $.each(JSON.parse(pData), function (i, item) {
        option += '<div class="swapCheckBoxesClass"> ';
        option += ' <input type="checkbox" name="' + pCheckboxNameAttr + '" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);"  value="' + item[IDName] + '" /> ';
        option += ' <label> ' + item[FieldName];
        option += ' &nbsp;</label> </div>';
    });
    //option += '<footer class="panel-footer">';
    //option += "</footer>";
    //option += "</section>";
    $("#" + pDivName).append(option);
    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapCheckBoxesClass:not(.reversed)").reverseChildren();
}

function FillDivWithCheckboxes_DynamicFiled(pDivName, pData, pCheckboxNameAttr, FieldName, callback) {
    //Clear the div
    $("#" + pDivName).html("");
    var option = "";
    // Bind Data
    //option = '<section class="panel panel-default">';
    //option += '<header class="panel-heading">';
    //option += '</header>';
    $.each(JSON.parse(pData), function (i, item) {
        option += '<div class="swapCheckBoxesClass"> ';
        option += ' <input type="checkbox" name="' + pCheckboxNameAttr + '" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);"  value="' + item.ID + '" /> ';
        option += ' <label> ' + item[FieldName];
        option += ' &nbsp;</label> </div>';
    });
    //option += '<footer class="panel-footer">';
    //option += "</footer>";
    //option += "</section>";
    $("#" + pDivName).append(option);
    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapCheckBoxesClass:not(.reversed)").reverseChildren();
}
/*****************************Hijri*********************/
function gmod(n,m){
    return ((n%m)+m)%m;
}

function kuwaiticalendar(adjust){
    var today = new Date();
    if(adjust) {
        adjustmili = 1000*60*60*24*adjust; 
        todaymili = today.getTime()+adjustmili;
        today = new Date(todaymili);
    }
    day = today.getDate();
    month = today.getMonth();
    year = today.getFullYear();
    m = month+1;
    y = year;
    if(m<3) {
        y -= 1;
        m += 12;
    }

    a = Math.floor(y/100.);
    b = 2-a+Math.floor(a/4.);
    if(y<1583) b = 0;
    if(y==1582) {
        if(m>10)  b = -10;
        if(m==10) {
            b = 0;
            if(day>4) b = -10;
        }
    }

    jd = Math.floor(365.25*(y+4716))+Math.floor(30.6001*(m+1))+day+b-1524;

    b = 0;
    if(jd>2299160){
        a = Math.floor((jd-1867216.25)/36524.25);
        b = 1+a-Math.floor(a/4.);
    }
    bb = jd+b+1524;
    cc = Math.floor((bb-122.1)/365.25);
    dd = Math.floor(365.25*cc);
    ee = Math.floor((bb-dd)/30.6001);
    day =(bb-dd)-Math.floor(30.6001*ee);
    month = ee-1;
    if(ee>13) {
        cc += 1;
        month = ee-13;
    }
    year = cc-4716;


    wd = gmod(jd+1,7)+1;

    iyear = 10631./30.;
    epochastro = 1948084;
    epochcivil = 1948085;

    shift1 = 8.01/60.;

    z = jd-epochastro;
    cyc = Math.floor(z/10631.);
    z = z-10631*cyc;
    j = Math.floor((z-shift1)/iyear);
    iy = 30*cyc+j;
    z = z-Math.floor(j*iyear+shift1);
    im = Math.floor((z+28.5001)/29.5);
    if(im==13) im = 12;
    id = z-Math.floor(29.5001*im-29);

    var myRes = new Array(8);

    myRes[0] = day; //calculated day (CE)
    myRes[1] = month-1; //calculated month (CE)
    myRes[2] = year; //calculated year (CE)
    myRes[3] = jd-1; //julian day number
    myRes[4] = wd-1; //weekday number
    myRes[5] = id; //islamic date
    myRes[6] = im-1; //islamic month
    myRes[7] = iy; //islamic year

    return myRes;
}
function writeIslamicDate(adjustment) {
    var wdNames = new Array("Ahad","Ithnin","Thulatha","Arbaa","Khams","Jumuah","Sabt");
    var iMonthNames = new Array("Muharram","Safar","Rabi'ul Awwal","Rabi'ul Akhir",
    "Jumadal Ula","Jumadal Akhira","Rajab","Sha'ban",
    "Ramadan","Shawwal","Dhul Qa'ada","Dhul Hijja");
    var iDate = kuwaiticalendar(adjustment);
    var outputIslamicDate = wdNames[iDate[4]] + ", " 
    + iDate[5] + " " + iMonthNames[iDate[6]] + " " + iDate[7] + " AH";
    return outputIslamicDate;
}
/******************************Time function*****************************/
//h: m: s
function msToTime(s) {
    function pad(n, z) {
        z = z || 2;
        return ('00' + n).slice(-z);
    }
    var ms = s % 1000;
    s = (s - ms) / 1000;
    var secs = s % 60;
    s = (s - secs) / 60;
    var mins = s % 60;
    var hrs = (s - mins) / 60;

    return pad(hrs) + ':' + pad(mins); //+ ':' + secs + '.' + ms;
}
//hh: mm: ss.sss
function msToTimeFullFormat(s) {

    // Pad to 2 or 3 digits, default is 2
    function pad(n, z) {
        z = z || 2;
        return ('00' + n).slice(-z);
    }

    var ms = s % 1000;
    s = (s - ms) / 1000;
    var secs = s % 60;
    s = (s - secs) / 60;
    var mins = s % 60;
    var hrs = (s - mins) / 60;

    return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);
}
function TimeToMSecond(T) {
    debugger;
    var timeEnd = T;
    var time1 = ((Number(timeEnd.split(':')[0]) * 60 + Number(timeEnd.split(':')[1])) * 60) * 1000;
    return time1
}

var ones = {
    0: "صفر",
    1: "واحد",
    2: "اثنان",
    3: "ثلاثة",
    4: "أربعة",
    5: "خمسة",
    6: "ستة",
    7: "سبعة",
    8: "ثمانية",
    9: "تسعة",
    10: "عشرة",
    11: "أحد عشر",
    12: "اثنى عشر"
}

/*
القيم الخاصة بقيم العشرات
* */
var tens = {
    1: "عشر",
    2: "عشرون",
    3: "ثلاثون",
    4: "أربعون",
    5: "خمسون",
    6: "ستون",
    7: "سبعون",
    8: "ثمانون",
    9: "تسعون"
}


/*
القيم الخاصة بقيم المئات
* */
var hundreds = {
    0: "صفر",
    1: "مائة",
    2: "مئتان",
    3: "ثلاثمائة",
    4: "أربعمائة",
    5: "خمسمائة",
    6: "ستمائة",
    7: "سبعمائة",
    8: "ثمانمائة",
    9: "تسعمائة"
}

/*
القيم الخاصة بقيم الآلاف
* */
var thousands = {
    1: "ألف",
    2: "ألفان",
    39: "آلاف",
    1199: "ألفًا"
}

/*
القيم الخاصة بقيم الملايين
* */
var millions = {
    1: "مليون",
    2: "مليونان",
    39: "ملايين",
    1199: "مليونًا"
}


/*
القيم الخاصة بقيم المليارات
* */
var billions = {
    1: "مليار",
    2: "ملياران",
    39: "مليارات",
    1199: "مليارًا"
}

/*
القيم الخاصة بقيم التريليونات
* */
var trillions = {
    1: "تريليون",
    2: "تريليونان",
    39: "تريليونات",
    1199: "تريليونًا"
}

function tafqeetArabic(Amount) {


    if ((String(Amount).split('.').length) == 2)
        var ArabicAmount = ' ( ' + tafqeet(String(Amount).split('.')[0]) + 'دينار و ' + tafqeet(String(Amount).split('.')[1]) + ' درهم  )';

    else
        var ArabicAmount = ' ( ' + tafqeet(String(Amount).split('.')[0]) + 'دينار و ' + tafqeet(String(Amount).split('.')[1]) + ' درهم  )';

    return ArabicAmount;
}

/**
 * 
 * @param {*} number 
 * هذه هي الدالة الرئيسية
 * والتي يتم من خلالها تفقيط الأرقام
 */
function tafqeet(number) {
    debugger;
    /**
     * متغير لتخزين النص المفقط بداخله
     */

    var value = "";
    number = parseInt(number);
    //التحقق من أن المتغير يحتوي أرقامًا فقط، وأقل من تسعة وتسعين تريليون
    if (number.toString().match(/^[0-9]+$/) != null && number.toString().length <= 14) {
        switch (number.toString().length) {
            /**
             * إذا كان العدد من 0 إلى 99
             */
            case 1:
            case 2:
                value = oneTen(number);
                break;

                /**
                 * إذا كان العدد من 100 إلى 999
                 */
            case 3:
                value = hundred(number);
                break;

                /**
                 * إذا كان العدد من 1000 إلى 999999
                 * أي يشمل الآلاف وعشرات الألوف ومئات الألوف
                 */
            case 4:
            case 5:
            case 6:
                value = thousand(number);
                break;

                /**
                 * إذا كان العدد من 1000000 إلى 999999999
                 * أي يشمل الملايين وعشرات الملايين ومئات الملايين
                 */
            case 7:
            case 8:
            case 9:
                value = million(number);
                break;

                /**
                 * إذا كان العدد من 1000000000 إلى 999999999999
                 * أي يشمل المليارات وعشرات المليارات ومئات المليارات
                 */
            case 10:
            case 11:
            case 12:
                value = billion(number);
                break;

                /**
                 * إذا كان العدد من 100000000000 إلى 9999999999999
                 * أي يشمل التريليونات وعشرات التريليونات
                 */
            case 13:
            case 14:
            case 15:
                value = trillion(number);
                break;

        }

    }

    /**
     * هذا السطر يقوم فقط بإزالة بعض الزوائد من النص الأخير
     * تظهر هذه الزوائد نتيجة بعض الفروق في عملية التفقيط
     * ولإزالتها يتم استخدام هذا السطر
     */
    return value.replace(/وصفر/g, "")
        .replace(/وundefined/g, "")
        .replace(/ +(?= )/g, '')
        .replace(/صفر و/g, "")
        .replace(/صفر/g, "")
        .replace(/مئتان أ/, "مائتا أ")
        .replace(/مئتان م/, "مائتا م");
}



/**
 * 
 * @param {*} number
 * الدالة الخاصة بالآحاد والعشرات 
 */
function oneTen(number) {

    /** 
     * القيم الافتراضية
    */
    var value = "صفر";

    //من 0 إلى 12
    if (number <= 12) {
        switch (parseInt(number)) {
            case 0:
                value = ones["0"];
                break;
            case 1:
                value = ones["1"];
                break;
            case 2:
                value = ones["2"];
                break;
            case 3:
                value = ones["3"];
                break;
            case 4:
                value = ones["4"];
                break;
            case 5:
                value = ones["5"];
                break;
            case 6:
                value = ones["6"];
                break;
            case 7:
                value = ones["7"];
                break;
            case 8:
                value = ones["8"];
                break;
            case 9:
                value = ones["9"];
                break;
            case 10:
                value = ones["10"];
                break;

            case 11:
                value = ones["11"];
                break;

            case 12:
                value = ones["12"];
                break;


        }
    }

        /**
         * إذا كان العدد أكبر من12 وأقل من 99
         * يقوم بجلب القيمة الأولى من العشرات
         * والثانية من الآحاد
         */
    else {
        var first = getNth(number, 0, 0);

        var second = getNth(number, 1, 1);

        if (tens[first] == "عشر") {
            value = ones[second] + " " + tens[first];
        }
        else {
            value = ones[second] + " و" + tens[first];
        }

    }

    return value;
}


/**
 * 
 * @param {*} number
 * الدالة الخاصة بالمئات 
 */
function hundred(number) {
    var value = "";

    /**
     * إذا كان الرقم لا يحتوي على ثلاث منازل
     * سيتم إضافة أصفار إلى يسار الرقم
     */
    while (number.toString().length != 3) {
        number = "0" + number;
    }

    var first = getNth(number, 0, 0);

    /**
     * تحديد قيمة الرقم الأول
     */
    switch (parseInt(first)) {
        case 0:
            value = hundreds["0"];
            break;
        case 1:
            value = hundreds["1"];
            break;
        case 2:
            value = hundreds["2"];
            break;
        case 3:
            value = hundreds["3"];
            break;
        case 4:
            value = hundreds["4"];
            break;
        case 5:
            value = hundreds["5"];
            break;
        case 6:
            value = hundreds["6"];
            break;
        case 7:
            value = hundreds["7"];
            break;
        case 8:
            value = hundreds["8"];
            break;
        case 9:
            value = hundreds["9"];
            break;
    }

    /**
     * إضافة منزلة العشرات إلى الرقم المفقط
     * باستخدام دالة العشرات السابقة
     */
    value = value + " و" + oneTen(parseInt(getNth(number, 1, 2)));
    return value;
}

/**
 * 
 * @param {*} number 
 * الدالة الخاصة بالآلاف
 */
function thousand(number) {
    return thousandsTrillions(thousands["1"], thousands["2"], thousands["39"], thousands["1199"], 0, parseInt(number), (getNthReverse(number, 4)));
}

/**
 * 
 * @param {*} number
 * الدالة الخاصة بالملايين 
 */
function million(number) {
    return thousandsTrillions(millions["1"], millions["2"], millions["39"], millions["1199"], 3, parseInt(number), (getNthReverse(number, 7)));
}


/**
 * 
 * @param {*} number
 * الدالة الخاصة بالمليارات 
 */
function billion(number) {
    return thousandsTrillions(billions["1"], billions["2"], billions["39"], billions["1199"], 6, parseInt(number), (getNthReverse(number, 10)));
}


/**
 * 
 * @param {*} number
 * الدالة الخاصة بالترليونات 
 */
function trillion(number) {
    return thousandsTrillions(trillions["1"], trillions["2"], trillions["39"], trillions["1199"], 9, parseInt(number), (getNthReverse(number, 13)));
}


/**
 * هذه الدالة هي الأساسية بالنسبة للأرقام
 * من الآلاف وحتى التريليونات
 * تقوم هذه الدالة بنفس العملية للمنازل السابقة مع اختلاف
 * زيادة عدد المنازل في كل مرة
 * @param {*} one 
 * @param {*} two 
 * @param {*} three 
 * @param {*} eleven 
 * @param {*} diff 
 * @param {*} number 
 * @param {*} other 
 */
function thousandsTrillions(one, two, three, eleven, diff, number, other) {
    /**
     * جلب المنازل المتبقية
     */
    other = parseInt(other);
    other = tafqeet(other);

    /**
     * إذا كان المتبقي يساوي صفر
     */
    if (other == "") {
        other = "صفر"
    }

    var value = "";

    number = parseInt(number);

    /**
     * التحقق من طول الرقم
     * لاكتشاف إلى أي منزلة ينتمي
     */
    switch (number.toString().length) {
        /**
         * ألوف، أو ملايين، أو مليارات، أو تريليونات
         */
        case 4 + diff:
            var ones = parseInt(getNth(number, 0, 0));
            switch (ones) {
                case 1:
                    value = one + " و" + (other);
                    break;
                case 2:
                    value = two + " و" + (other);
                    break;
                default:
                    value = oneTen(ones) + " " + three + " و" + (other);
                    break;
            }
            break;

            /**
             * عشرات الألوف، أو عشرات الملايين، أو عشرات المليارات، أو عشرات التريليونات
             */
        case 5 + diff:
            var tens = parseInt(getNth(number, 0, 1));
            switch (tens) {
                case 10:
                    value = oneTen(tens) + " " + three + " و" + (other);
                    break;
                default:
                    value = oneTen(tens) + " " + eleven + " و" + (other);
                    break;
            }
            break;

            /**
             *مئات الألوف، أو مئات الملايين، أو مئات المليارات
             */
        case 6 + diff:
            var hundreds = parseInt(getNth(number, 0, 2));

            var two = parseInt(getNth(number, 1, 2));
            var th = "";
            switch (two) {
                case 0:
                    th = one;
                    break;

                default:
                    th = eleven;
                    break;
            }
            switch (tens) {
                case 100 <= tens <= 199:
                    value = hundred(hundreds) + " " + th + " و" + (other);
                    break;
                case 200 <= tens <= 299:
                    value = hundred(hundreds) + " " + th + " و" + (other);
                    break;
                default:
                    value = hundred(hundreds) + " " + th + " و" + (other);
                    break;
            }
            break;
    }

    return value;

}


/**
 * دالة لجلب أجزاء من الرقم المراد تفقيطه
 */
function getNth(number, first, end) {
    var finalNumber = "";
    for (var i = first; i <= end; i++) {
        finalNumber = finalNumber + String(number).charAt(i);
    }
    return finalNumber;
}

/**
 * دالة تجلب أجزاء من الرقم بالعكس
 * @param {*} number 
 * @param {*} limit 
 */
function getNthReverse(number, limit) {
    var finalNumber = "";
    var x = 1;
    while (x != limit) {
        finalNumber = String(number).charAt(number.toString().length - x) + finalNumber;
        x++;
    }

    return finalNumber;
}
