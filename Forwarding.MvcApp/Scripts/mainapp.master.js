//pChargeTypeName.replace(/\s/g, "").replace(/\//g, '').replace(/\\/g, ''); //remove spaces,slashes,backslashes
//pChargeTypeNameWithOnlyCharsAndNos = pChargeTypeName.replace(/[^\w]/g,'');
//pDescriptionOfGoods.replace(/\n/g, "<br/>"); //to show all enters coming from DB i.e. convert \n to <br>
//item.MarksAndNumbers.split(/\r\n|\r|\n/).length //get number of lines

// Global Variables  ************************************************************
//Icons and Styles Variables

//x.replace(/\B(?=(\d{3})+(?!\d))/g, ","); (to add comma every 3 digits)
//x.replace(/[\, ()/*.]/g, ''); remove , / ) ( \ space *
//x.replace(/[\, ]/g, '') //remove '\', ' ', ','
//x.replace(/[^\w]/g, ''); //Keep only characters and numbers

//mytable.getElementsByTagName("tr")[i].getAttribute("class").includes("hide")
//mytable.getElementsByTagName("tr")[i].getElementsByTagName("td")[j].getAttribute("class")

debugger;

var glbVersion = 14; //20200210 2300 ForwPublish w FlexiUpload Fix
var TRCK_WorkingOnDrivers = 1;
var pDefaults;
var pLoggedUser;
var pLoggedUserApprovedFromNotifyPaymentRequest = 0;
var pBranchDefaults;

var glbFormCalled = 0; //used for forms which use same table for whereClause filtering
var IsAccountingActive = false;

var constAltun = 10;
var constEUROShipping = 20;
var constMESCO = 30;
var constGlobeLink = 40;
var constSACO = 50;
var constTopManagement = 60;

var constVehicleActionPacking = 2;
var constVehicleActionPOReceipt = 5;
var constVehicleActionInspection = 10;
var constVehicleActionSendToWarehouse = 20;
var constVehicleActionChangeLocation = 30;
var constVehicleActionChangeWarehouse = 40;
var constVehicleActionReceive = 45;
var constVehicleActionPickup = 50;
var constVehicleActionReturn = 60;

var constAutoEmailHalfMonthly = 10;
var constAutoEmailMonthly = 20;

var constNotificationDateOptionETAPOL = 10;
var constNotificationDateOptionATAPOL = 20;
var constNotificationDateOptionETDPOL = 30;
var constNotificationDateOptionATDPOL = 40;
var constNotificationDateOptionETAPOD = 50;
var constNotificationDateOptionATAPOD = 60;

var constTargetTypeByInvoicePerc = 10;
var constTargetTypeByProfitPerc = 20;
var constTargetTypeByInvoiceFixedAmount = 30;
var constTargetTypeByProfitFixedAmount = 40;

var constLengthUnitTypeID = 10;
var constWeightUnitTypeID = 20;
var constAreaUnitTypeID = 30;
var constVolumeUnitTypeID = 40;
var constTemperatureUnitTypeID = 50;

var constMeterUnitID = 30;

var constAreaUnitTypeIDForM2 = 90;
var constVolumeUnitTypeIDForM3 = 100;

var constReceiveStatusInProgress = 10;
var constReceiveStatusPutaway = 20;
var constReceiveStatusFinalized = 30;

var constReceiveDetailsStatusPending = 10;
var constReceiveDetailsStatusHeld = 20;
var constReceiveDetailsStatusDamaged = 30;
var constReceiveDetailsStatusPutaway = 40;

var constContractDetailsTypeNONE = 10;
var constContractDetailsTypeIN = 20;
var constContractDetailsTypeOUT = 30;
var constContractDetailsTypeINAndOUT = 40;

var constMaxAccountsLevels = 7;
var constMaxCostCentersLevels = 5;
var constMaxSubAccountsLevels = 7;

var constFrmPosting = 10;
var constFrmUnPosting = 20;
var constFrmRestoring = 30;

var constVoucherCashIn = 10;
var constVoucherCashOut = 20;
var constVoucherChequeIn = 30;
var constVoucherChequeOut = 40;

var intChgWtDividorAirConstant = 6000;
var intChgWtDividorOceanConstant = 5000;
var intChgWtDividorInlandConstant = 3300;
var maxMAWBGeneratedTogether = 100;
var glbCallingControl = "";
var glbCallingControlInOperation = "";

var IsCashIssueReceiptFromSettlement = 0;
var IsChequeIssueReceiptFromSettlement = 0;
var A_PaymentRequestID_ForVoucherID = 0;
var _IsCustodySettlement = 0;
var IsMESCOCompany = false;

//var eFBLMapPath = "D:\\Projects\\Forwarding\\LogisticsWebServer-New\\Forwarding.Solution\\Forwarding.MvcApp\\api\\eFBL\\SysEmails";
var constDocsInFilesPath = "/DocsInFiles//";// + getTodaysDateInddMMyyyyFormat().split('/')[2].toString() + "//";
var constProductDocsInFilesPath = "";


//Used For Auto Change Color ex)) Chat Users Color
var constArrColors = ["#20cef5", "#44bec7", "#ffc300", "#09e6c3", "#ececec", "#4dd467", "#7646ff"]
var constCurrentUserColor = "#13cf13";
/****************GeneralUploadFiles Parameters************************/
var glbGeneralUploadModalName = "";
var glbGeneralUploadTableName = "";
var glbGeneralUploadFolderName = "";
var glbGeneralUploadPath = "";
var glbGeneralUploadRelativePath = "";
var glbGeneralUploadBtnUploadName = "";
var glbTblTHSelectAllTagName = "";


var constPricingOcean = 10;
var constPricingAir = 20;
var constPricingInland = 30;
var constPricingCustomsClearance = 40;
var constPricingGeneral = 50;
var intPricingType = 0;

var constRequest = 10; //PricingRequest
var constReply = 20; //PricingReply

var OceanTransportType = 1;
var AirTransportType = 2;
var InlandTransportType = 3;
var CustomsClearanceTransportType = 70;

var constImportDirectionType = 1;
var constExportDirectionType = 2;
var constDomesticDirectionType = 3;
var constCrossBookingDirectionType = 4;
var constReExportDirectionType = 5;

var constDirectBLType = 1;
var constHouseBLType = 2;
var constMasterBLType = 3;

//PurchaseInvoiceTypes
var constFlexiPurchaseInvoiceTypeID = 10; //FLEXI
var constHeaterPadPurchaseInvoiceTypeID = 20; //HEATER PAD
var constIronPurchaseInvoiceTypeID = 30; //IRON

var glbOperationTransportFilter = 0;
var glbOperationDirectionFilter = 0;
var glbOperationBLTypeFilter = 0;
var glbOperationStageFilter = "";
var glbOperationTxtSearchFilter = "";

var glbQuotationTransportFilter = 0;
var glbQuotationDirectionFilter = 0;
var glbQuotationStageFilter = "";
var glbQuotationTxtSearchFilter = "";

var constFCLShipmentType = 1;
var constLCLShipmentType = 2;
var constFTLShipmentType = 3;
var constLTLShipmentType = 4;
var constConsolidationShipmentType = 5;
var constFlexiShipmentType = 10;
var constTankShipmentType = 20;
var constVehicleShipmentType = 30;
var constBulkShipmentType = 40;

var constCustomerPartnerTypeID = 1;
var constAgentPartnerTypeID = 2;
var constShippingAgentPartnerTypeID = 3;
var constCustomsClearanceAgentPartnerTypeID = 4;
var constShippingLinePartnerTypeID = 5;
var constAirlinePartnerTypeID = 6;
var constTruckerPartnerTypeID = 7;
var constSupplierPartnerTypeID = 8;
var constCustodyPartnerTypeID = 20;

var constShipperOperationPartnerTypeID = 1;
var constConsigneeOperationPartnerTypeID = 2;
var constNotify1OperationPartnerTypeID = 4;
var constNotify2OperationPartnerTypeID = 5;
var constAgentOperationPartnerTypeID = 6;
var constShippingAgentOperationPartnerTypeID = 7;
var constCustomsClearanceAgentOperationPartnerTypeID = 8;
var constShippingLineOperationPartnerTypeID = 9;
var constAirineOperationPartnerTypeID = 10;
var constTruckerOperationPartnerTypeID = 11;
var constSupplierOperationPartnerTypeID = 12;
var constCustodyOperationPartnerTypeID = 20;
var constEndUserOperationPartnerTypeID = 30;
var constExporterOperationPartnerTypeID = 160;
var constImporterOperationPartnerTypeID = 170;
var constBookingPartyOperationPartnerTypeID = 180;
var constOwnerOperationPartnerTypeID = 190;
var constClientOperationPartnerTypeID = 200;

var constExlReportTypeID = 1;
var constExlWOFormatReportTypeID = 2;
var constPdfReportTypeID = 3;
var constWordReportTypeID = 4;
var constRTFReportTypeID = 5;

var constPaymentTypeOpenBalance = 0; //PaymentTypeID is null for Open Balance
var constPaymentTypeCash = 10;
var constPaymentTypeCheque = 20;
var constPaymentTypeVisa = 30;
var constPaymentTypeBankDeposit = 40;
var constPaymentTypeCredit = 50;
var constPaymentTypeBankTransfer = 45;
var constCurrentPaymentType = 0;

var constFrmTruckingOrdersOwnFleet = 10;
var constFrmTruckingOrdersSupplier = 20;

//may be will be used for DB search for better performance if i want only Payables or only Rec. Logs
//never change those coz used in side controllers
var constOperationLogForPay = 10;
var constOperationLogForRec = 20;

var constOperationsFormID = 29;//OperationsManagement
var constQuotationsFormID = 28;//QuotationsManagement

var DirectIconName = "fa-indent";
var strDirectIconStyleClassName = "direct-icon-style"; //holds the css class name
var HouseIconName = "fa-link";
var strHouseIconStyleClassName = "house-icon-style"; //holds the css class name
var MasterIconName = "fa-book";
var strMasterIconStyleClassName = "master-icon-style"; //holds the css class name

//var OceanIconName = "fa-anchor";
var OceanIconName = "fa-anchor";
var strOceanIconStyleClassName = "ocean-icon-style"; //holds the css class name
var AirIconName = "fa-plane";
var strAirIconStyleClassName = "air-icon-style"; //holds the css class name
var InlandIconName = "fa-truck";
var strInlandIconStyleClassName = "inland-icon-style"; //holds the css class name
var CustomsClearanceIconName = "fa-check-square-o";
var strCustomsClearanceIconStyleClassName = "air-icon-style"; //holds the css class name

var ImportIconName = "fa-arrow-circle-down";
var strImportIconStyleClassName = "import-icon-style"; //holds the css class name
var ExportIconName = "fa-external-link";
var strExportIconStyleClassName = "export-icon-style"; //holds the css class name
var DomesticIconName = "fa-home";
var strDomesticIconStyleClassName = "domestic-icon-style"; //holds the css class name
var CrossbookingIconName = "fa-arrows";
var strCrossbookingIconStyleClassName = "import-icon-style"; //holds the css class name
var ReExportIconName = "fa-repeat";
var strReExportIconStyleClassName = "export-icon-style"; //holds the css class name

//EOF Icons and Styles Variables
//RoutingTypesIDs
var PickupRoutingTypeID = 10;
var PreCarraigeRoutingTypeID = 20;
var MainCarraigeRoutingTypeID = 30;
var OnCarraigeRoutingTypeID = 40;
var DeliveryRoutingTypeID = 50;
var TruckingOrderRoutingTypeID = 60;
var CustomsClearanceRoutingTypeID = 70;
var CancelledTransportOrderID = 80;

//EOF RoutingTypesIDs
var TruckingOrderDocumentTypeID = 230;
//QuoteAndOperStageIDs
var CreatedQuoteAndOperStageID = 1;
var SentQuoteAndOperStageID = 2;
var DraftQuoteAndOperStageID = 3;
var AcceptedQuoteAndOperStageID = 4;
var DeclinedQuoteAndOperStageID = 5;

var ApprovalRequestedQuoteAndOperStageID = 7;
var RejectedQuoteAndOperStageID = 10;
var ApprovedQuoteAndOperStageID = 15;

var OpenQuoteAndOperStageID = 60;
var DepartedQuoteAndOperStageID = 70;
var ArrivedQuoteAndOperStageID = 80;
var DeliveryQuoteAndOperStageID = 90;
var DeliveredQuoteAndOperStageID = 100;
var CancelledQuoteAndOperStageID = 110;
var ClosedQuoteAndOperStageID = 120;
//EOF QuoteAndOperStageIDs
//Roles which can't be deleted
var constAdministratorRoleID = 1;
var constManagementRoleID = 5;
var IsAdminRoleID = false;
//EOF Roles which can't be deleted
//i made those messages as global strings for the case i need translation
var strSorry = "Sorry";
var strPlease = "Please";
var strAreYouSure = "Are you sure?";
var strSelectPortMessage = "Select a port type or uncheck the port property.";
var strDeleteFailMessage = "This command is not completed because of dependencies existance."
var strUniqueFailInsertUpdateMessage = "Uniqueness violated.";
var strUniqueFailInsertUpdateGeneralMessage = "Uniqueness violated.";
var strPasswordsDontMatch = "The Passwords do not match!";
var showDeleteFailMessage = false;
var strNoPermissionMessage = "You Do Not Have Permission.";
var strThreateningMessage = "Don't Do That Again Or Your Username Will Be Saved And Reported!";
var strPOLEqualPODWarning = "POL can not be the same as POD.";
var strDomesticWithDifferentCountriesWarning = "When you choose Domestic, then POL Country must be the same as POD Country.";
var strImportOrExportWithSameCountriesWarning = "When you choose Import or Export, then POL Country must be different from POD Country.";
var strEmptyPortsWarning = "The ports must not be empty.";
var strCheckEntries = "Please, Check the entries.";
var strCheckPrices = "Please, Check the prices.";
var strCheckDates = "Please, Check the dates.";
var strNoRecords = "No records are found.";
var strServerURL = "";
var strLoadWithPagingFunctionName = "";
var strBindTableRowsFunctionName = "";
//var myApp;
var editControlsText = " class='btn btn-xs btn-rounded btn-lightblue float-right hide' title='Edit'> <i class='fa fa-pencil' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + TranslateString("Edit") + "</span>";
var editLogTaxesPercentagesText = " class='btn btn-xs btn-rounded btn-primary float-right' > <i class='fa fa-chain' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + TranslateString("Perc. Log") + "</span>";
var editLogExchangeRatesText = " class='btn btn-xs btn-rounded btn-primary float-right' > <i class='fa fa-chain' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + TranslateString("Rate Log") + "</span>";
var EditedRoleID = 0; //used incase of calling LoadWithPaging() from applypaging 
var EditedUserID = 0; //used incase of calling LoadWithPaging() from applypaging 
var FormID = 0;
var QV = false; var QA = false; var QE = false; var QD = false; var OV = false; var OA = false; var OE = false; var OD = false;
//quotCustsec
var QVGen = false; var QAGen = false; var QEGen = false; var QDGen = false; var QVPar = false; var QAPar = false; var QEPar = false; var QDPar = false;
var QVPac = false; var QAPac = false; var QEPac = false; var QDPac = false; var QVRou = false; var QARou = false; var QERou = false; var QDRou = false;
var QVCha = false; var QACha = false; var QECha = false; var QDCha = false;
//operCustsec
var OVGen = false; var OAGen = false; var OEGen = false; var ODGen = false; var OVPar = false; var OAPar = false; var OEPar = false; var ODPar = false;
var OVPac = false; var OAPac = false; var OEPac = false; var ODPac = false; var OVRou = false; var OARou = false; var OERou = false; var ODRou = false;
var OVPay = false; var OAPay = false; var OEPay = false; var ODPay = false; var OVRec = false; var OARec = false; var OERec = false; var ODRec = false;
var OVInv = false; var OAInv = false; var OEInv = false; var ODInv = false; var OVMas = false; var OAMas = false; var OEMas = false; var ODMas = false;
var OVShi = false; var OAShi = false; var OEShi = false; var ODShi = false;
var OVDocIn = false; var OADocIn = false; var OEDocIn = false; var ODDocIn = false;
var OVNot = false; var OANot = false; var OENot = false; var ODNot = false; //Not: Notes(Credit/Debit)
var OVTra = false; var OATra = false; var OETra = false; var ODTra = false;
var OVPurInv = false; var OAPurInv = false; var OEPurInv = false; var ODPurInv = false;
var OVDraftInv = false; var OADraftInv = false; var OEDraftInv = false; var ODDraftInv = false;
var OVNotif = false; var OANotif = false; var OENotif = false; var ODNotif = false;
var OVVeh = false; var OAVeh = false; var OEVeh = false; var ODVeh = false;
var OVInt = false; var OAInt = false; var OEInt = false; var ODInt = false;
var CustomerAdd = false; var CustomerEdit = false; varAgentAdd = false; var AgentEdit = false;
var OVDelivery = false; var OADelivery = false; var OEDelivery = false; var ODDelivery = false;
var OVACID = false; var OAACID = false; var OEACID = false; var ODACID = false;

var constTransactionOpenCreditBalance = 2; //OpenCreditBalance
var constTransactionOpenDebitBalance = 5; //OpenDebitBalance
var constTransactionARPayment = 10; //Credit
var constTransactionAPPayment = 20; //Debit
var constTransactionInvoiceApproval = 30; //Debit
var constTransactionReceivableAllocation = 40; //Debit
var constTransactionCreditTransfer = 50; //CreditTransfer
var constTransactionDebitTransfer = 60; //DebitTransfer
var constTransactionPayableApproval = 70; //Op.Payable (Credit For Supplier)
var constTransactionPayableAllocation = 80; //Credit
var constTransactionPayableAllocatedFromCustody = 85; //Credit
var constTransactionDebitNote = 90; //DebitNote (i.e. Receivables) inv
var constTransactionCreditNote = 100; //CreditNote (i.e. Payables)
var glbTransactionType = 0;

//var constPRTypeOpenBalance = 5;
var constPRTypeReceivable = 10;
var constPRTypePayable = 20;
var glbPRType = 0;

var constReceivedEmail = 10;
var constSentEmail = 20;

var constEmailSourceTruckingOrder = 10; //Set TruckingOrder
var constEmailSourceTruckingTask = 20; //Routing TruckingOrder
var constEmailSourceQuotationApprovalRequest = 25;
var constEmailSourceQuotationApprovalSet = 30;

var constEmailSourceInterDepartmentRequest = 40;
var constEmailSourceInterDepartmentReply = 50;
var constEmailSourceInterDepartmentAcceptance = 60;
var constEmailSourceInterDepartmentDenial = 70;
var constEmailSourceDynamicsCRMStartOperation = 80;

// Mohamed Abd Elmougood ************************************************************
var constCashInVoucher = 1;
var constCashOutVoucher = 1;
// EOF Mohamed Abd Elmougood ************************************************************
//EOF Global Variables  ************************************************************

////to prevent backspace from going back
//$(document).on("keydown", function (e) {
//    debugger;
//    if (e.which === 8 && !$(e.target).is("input, textarea")) {
//        e.preventDefault();
//    }
//});
var OptionNameCodeAccount = "";
var varPreventTimeoutAndLoadDefaults;
// GLOBAL FUNCTIONS -------------------------------------------------------------
$(document).ready(function () {
    debugger;
    CallGETFunctionWithParameters("/api/Customers/LoadAllWithMinimalColumns"
        , {
            pWhereClauseWithMinimalColumns: ($("#sp-LoginName").text() == "BG EGYPT" ? "WHERE Name=N'BG EGYPT'" : "WHERE 1=1" + " AND IsInActive=0 ")
            , pOrderBy: "Name"
        }
        , function (pData) {
            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "hReadySlCustomers", pData[0], null);

            //Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[0], "ID", "Name", '', TranslateString("SelectFromMenu"), "#hReadySlCustomers", null, "IsInactive", null);
        }
        , null);

    if ($("#hf_ChangeLanguage").val() == "ar")
        $('head').append($('<link rel="stylesheet" type="text/css" />').attr('href', '/Content/CSS/app.v2.ar.css'));

    FadePageCover(true);
    //TODO: Check Is Valid Session

    //CheckIsSessionAlive();
    //10/10/2020
    CallGETFunctionWithParameters("/api/Defaults/LoadAll", { pWhereClause: "WHERE 1=1" }
        , function (pData) {
            debugger;
            pDefaults = JSON.parse(pData[0]);
            pLoggedUser = JSON.parse(pData[8]);

            if (pDefaults.UnEditableCompanyName == "ALT") IsMESCOCompany = true
            else if (pDefaults.UnEditableCompanyName == "EUR") IsMESCOCompany = true
            else if (pDefaults.UnEditableCompanyName == "MES") IsMESCOCompany = true
            else if (pDefaults.UnEditableCompanyName == "GLO") IsMESCOCompany = true
            else if (pDefaults.UnEditableCompanyName == "SAC") IsMESCOCompany = true
            else if (pDefaults.UnEditableCompanyName == "TOP") IsMESCOCompany = true


            if (pLoggedUser.CustomerID != 0) //10/10/2020
            {
                $('head').append($('<link rel="stylesheet" type="text/css"/>').attr('href', '/Scripts/utilities/Portal.css'));
                $('#HeaderCustomerName').html("&nbsp;" + pLoggedUser.CustomerName + " &nbsp;");
                $('#headerNotification').addClass('hide')
                $('#headerLanguages').addClass('hide')


                if (pDefaults.UnEditableCompanyName == "ELI") {

                    $('#imgSysLogo').addClass('hide')
                    $('#imgPortalComponyLogo').removeClass('hide')
                }
                else {
                    $('#imgSysLogo').removeClass('hide')
                    $('#imgPortalComponyLogo').addClass('hide')
                }

            }
            else {
                $('#headerNotification').addClass('hidden-xs')

            }

            FillModules(function () {

                $(".hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").split('-')[2]); });
            });
            SetNavMenuLocation();
            //pLoggedUser.Email_Password = "";
            //pDefaults.Email_Password = "";
            //Load the Dashboard as a default for all users
            console.log(pLoggedUser.CustomerID)
            if (pLoggedUser.CustomerID == 0) { //10/10/2020
                if ($("#sp-LoginName").text() == "BG EGYPT")
                    LoadViews("Warehousing");
                else if (pDefaults.UnEditableCompanyName != "ERP") {
                    $.getScript(strServerURL + '/Scripts/Dashboard/Dashboard.js?' + glbVersion, function () {
                        Dashboard_FillCharts();
                    });
                }
                else
                    LoadViews("Accounting");
            }
            else {
                LoadViews("WebSite_YourOperations");
            }
        }, null);
    //sherif: it calls the FillModules fn outside the $(document).ready with 
    //a callback function as a parameter.... this callback fn calls LoadViews(module-item-code)
    //for security 


    // ValidateForm
    $.extend($.fn.disableTextSelect = function () {
        return this.each(function () {
            if ($.browser.mozilla) {//Firefox
                $(this).css('MozUserSelect', 'none');
            } else if ($.browser.msie) {//IE
                $(this).bind('selectstart', function () { return false; });
            } else {//Opera, etc.
                $(this).mousedown(function () { return false; });
            }
        });
    });

    //$('.noSelect').disableTextSelect();

    // TODO: Keep Session Alive
    // setInterval(KeepSessionAlive, 100000);

    // Height Code ****************************************************
    //$("#navigation-left-bar").height(($(document).height() - 100));
    //$("#navigation-left-bar").height(($(document).height() - 150));
    $("#sec-content").css("min-height", ($(document).height() - 50));
    //$("#div-mainmenu").height(($(document).height() - 100));
    // ****************************************************************
    //LoadDefaults("/api/Defaults/LoadAll", " WHERE 1=1 "); // i am sure i will get just 1 record isa
    PreventTimeoutAndLoadDefaults();


    //$.ajax({
    //    type: 'GET',
    //    url: '/Defaultsdirectly/LoadAll',
    //    data: { pWhereClause: "WHERE ID=1" },
    //    dataType: 'json',
    //    success: function (pData) {
    //        debugger;
    //        var pDefaults = pData.v1;
    //        //Load the Dashboard as a default for all users
    //        if (pData.PageDirectly == "1") {
    //            LoadViews("CRM_Clients");
    //        }
    //        else {
    //            if ($("#sp-LoginName").text() == "BG EGYPT")
    //                LoadViews("Warehousing");
    //            else if (pDefaults.UnEditableCompanyName != "ERP") {
    //                $.getScript(strServerURL + '/Scripts/Dashboard/Dashboard.js?' + glbVersion, function () {
    //                    Dashboard_FillCharts();
    //                });
    //            }
    //            else
    //                LoadViews("Accounting");
    //        }
    //    }

    //});



    window.onbeforeunload = confirmExit;
    function confirmExit() {
        return "";
    }
    CallGETFunctionWithParameters("/api/SystemOptions/LoadAll"
        , { pWhereClause: "WHERE 1=1" }
        , function (pData) {
            debugger;
            var pSystemOption = pData[0];
            var pSystemAccount = JSON.parse(pData[1]);
            FillListFromObject_ERP(null, 10, null/*1st row*/, "hReadySlOptions", pSystemOption, null);
            $("#hCashAccountID").val(pSystemAccount.find(x => x.AccountID == 30).SystemAccountID);
            $("#hCashSubAccountID").val(pSystemAccount.find(x => x.AccountID == 31).SystemAccountID);

            OptionNameCodeAccount = ($('#hReadySlOptions option[value="21"]').attr("OptionValue"));
        }
        , null);
    CallGETFunctionWithParameters("/api/Defaults/AutomaticEmail", { pDummyForAutomaticEmail: "0" }
        , function (pData) {
            debugger;
        }, null);

    CallGETFunctionWithParameters("/api/LicenseExpireDateAlarmsUsers/SendEmailAndAlarmForLicenseExpireDates", {}
        , function (pData) {
            debugger;
        }, null);


    FadePageCover(false);
});

function LoadDefaults(pServiceFunctionName, pWhereClause) {
    $.ajax({
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) { //DefaultsRow: data[0], hReadySlBranches: data[1], hReadySlCurrencies: data[2], pEmailReceiver:data[5], pUnderCollectCheques: data[6]
            var pEmailReceiver = data[5];
            var pUnderCollectCheques = data[6];
            pDefaults = JSON.parse(data[0]);
            pLoggedUser = JSON.parse(data[8]);
            //pLoggedUser.Email_Password = "";
            //pDefaults.Email_Password = "";
            //$.each(pDefaults, function (i, item) { // i am sure i will get just 1 record isa

            //10/10/2020
            //if (pLoggedUser.CustomerID != 0)
            //{
            //    $('#ul-left-menu-Contains').html("");
            //    $('head').append($('<link rel="stylesheet" type="text/css" />').attr('href', '/Content/CSS/WebSite.css'));
            //    $("#spanCompanyName").text(pDefaults.CompanyName)
            //    $("#spanProjectName").text(pDefaults.BranchName)

            //}
            //else {
            if (pDefaults.UnEditableCompanyName == "CQL")
                $("#spanCompanyName").text(pDefaults.UnEditableCompanyName);
            else if (pDefaults.UnEditableCompanyName == "SET")
                $("#spanCompanyName").text("Set Global Logistics & Forwarding");
            else
                $("#spanCompanyName").text("IST");
            if (pDefaults.UnEditableCompanyName == "ERP") {
                $("#spanProjectName").text("ERP");
                $('#LanguageSection').removeClass('hide');
            }
            else if (pDefaults.UnEditableCompanyName == "BAH") {
                $("#spanProjectName").text("WMS");
                $('#LanguageSection').removeClass('hide');
            }
            else {

                if (pLoggedUser.CustomerID != 0)
                    $("#spanProjectName").text("Logistics" + " - OTS");
                else
                    $("#spanProjectName").text("Logistics")


            }

            //}




            $("#hDefaultCompanyName").val(pDefaults.CompanyName);
            $("#hDefaultCurrencyID").val(pDefaults.CurrencyID);
            $("#hDefaultCurrencyCode").val(pDefaults.CurrencyCode);
            $("#hDefaultForeignCurrencyID").val(pDefaults.ForeignCurrencyID);
            $("#hDefaultBranchID").val(pDefaults.BranchID);
            $("#hUserBranchID").val(pDefaults.UserBranchID);
            $("#hIsCreditlimitexceptionperiod").val(pDefaults.IsCreditlimitexceptionperiod);

            $("#hDefaultCountryID").val(pDefaults.CountryID);
            $("#headerGraphLocalCurrency").text("Money in " + $("#hDefaultCurrencyCode").val());
            $("#hDefaultImportOceanDays").val(pDefaults.ImportOceanDays);
            $("#hDefaultImportAirDays").val(pDefaults.ImportAirDays);
            $("#hDefaultImportInlandDays").val(pDefaults.ImportInlandDays);
            $("#hDefaultExportOceanDays").val(pDefaults.ExportOceanDays);
            $("#hDefaultExportAirDays").val(pDefaults.ExportAirDays);
            $("#hDefaultExportInlandDays").val(pDefaults.ExportInlandDays);
            $("#hDefaultDomesticOceanDays").val(pDefaults.DomesticOceanDays);
            $("#hDefaultDomesticAirDays").val(pDefaults.DomesticAirDays);
            $("#hDefaultDomesticInlandDays").val(pDefaults.DomesticInlandDays);
            $("#hDefaultUnEditableCompanyName").val(pDefaults.UnEditableCompanyName);

            FillListFromObject(pDefaults.CurrencyID, 3, null/*1st row*/, "hReadySlCurrencies", data[2], null);
            FillListFromObject(pDefaults.UserBranchID, 2/*pCodeOrName*/, null/*1st row*/, "hReadySlBranches", data[1], null);
            pBranchDefaults = data[1];
            $("#hDefaultCountryName").val(JSON.parse(data[1]).find(x => x.ID == pDefaults.BranchID).CountryName);
            var RenewalDate = GetDateWithFormatMDY(pDefaults.RenewalDate);
            if (Date.prototype.compareDates(ConvertDateFormat(getTodaysDateInddMMyyyyFormat()), RenewalDate) < 8) {
                $("#liRenewalWarning").text("Warning, Your renewal date is " + ConvertDateFormat(RenewalDate) + ".");
            }
            //});
            $("#hLoggedUserID").val(data[3]);
            $("#hLoggedUserNameNotLogin").val(data[4]); //not login name
            $("#hLoggedUserDepartmentID").val(pLoggedUser.DepartmentID);
            FillAlarms(JSON.parse(pEmailReceiver));
            FillAccPaymentAlarms(JSON.parse(pUnderCollectCheques));
            if (glbCallingControl == "OperationsEdit") //(typeof LocalEmails_LoadALLFromOperations === "function")
                LocalEmails_LoadALLFromOperations();
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. This is LoadDefaults in mainapp.master.", "");
        }
    });
}
//search for setInterval() instead in w3schools
//i call it every fixed interval of time to prevent timeout on host
function PreventTimeoutAndLoadDefaults() {
    debugger;
    LoadDefaults("/api/Defaults/LoadAll", "WHERE 1=1 "); // i am sure i will get just 1 record isa
    //var now = new Date();
    //var outStr = now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds();
    //alert("Prevent fn is called at ." + outStr);
    varPreventTimeoutAndLoadDefaults = setTimeout(PreventTimeoutAndLoadDefaults, 300000); //5minutes (in msecs)
}

function FillAlarms(pAlarmRows) {
    debugger;
    var Anchors = "";
    $.each(pAlarmRows,function (i, item) {
        if (item.QuotationRouteRequestID != 0) { //Request to enter QuotationCharges
            Anchors += ' <a href="#" onclick="AnswerQuotationChargeRequest(' + item.EmailID + "," + item.QuotationRequestID + "," + item.QuotationRouteRequestID + '); CallGETFunctionWithParameters(' + "'" + '/api/LocalEmails/RemoveAlarm' + "'" + ', { pRemoveAlarmEmailID: ' + item.EmailID + ' }, function() { LoadDefaults(' + "'" + '/api/Defaults/LoadAll' + "'" + ', ' + "'" + 'WHERE 1=1 ' + "'" + '); }, null);" class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">Charges Request for Quot : <span>' + item.QuotationRouteRequestCode + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.EmailSource == constEmailSourceQuotationApprovalRequest) {
            Anchors += ' <a href="#" onclick="LoadViews(' + "'QuotationsEdit_Approval'" + ",null," + item.QuotationID + '); LoadOperationsSubMenu(); CallGETFunctionWithParameters(' + "'" + '/api/LocalEmails/RemoveAlarm' + "'" + ', { pRemoveAlarmEmailID: ' + item.EmailID + ' }, null, null);" class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject + ': <span>' + item.QuotationCode + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.EmailSource == constEmailSourceQuotationApprovalSet) {
            Anchors += ' <a href="#" onclick="LoadViews(' + "'QuotationsEdit'" + ",null," + item.QuotationID + '); LoadOperationsSubMenu(); CallGETFunctionWithParameters(' + "'" + '/api/LocalEmails/RemoveAlarm' + "'" + ', { pRemoveAlarmEmailID: ' + item.EmailID + ' }, null, null);" class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject + ': <span>' + item.QuotationCode + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.QuotationRouteID != 0) { //Request to create operation on quotation
            Anchors += ' <a href="#" onclick="CreateOperationFromAlarm(' + item.EmailID + "," + item.QuotationRouteID + ',' + "'" + item.QuotationCode + "'" + ',' + "'" + item.Body + "'" + ');" class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">Create Operation for Quot : <span>' + item.QuotationCode + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.PricingID != 0) {
            Anchors += ' <a href="#" onclick="LoadViews(' + (item.RequestOrReply == constReply ? "'PricingRequest'" : "'PricingForm'") + ", " + item.PricingTypeID + ", " + item.PricingID + '); CallGETFunctionWithParameters(' + "'" + '/api/LocalEmails/RemoveAlarm' + "'" + ', { pRemoveAlarmEmailID: ' + item.EmailID + ' }, function() { LoadDefaults(' + "'" + '/api/Defaults/LoadAll' + "'" + ', ' + "'" + 'WHERE 1=1 ' + "'" + '); }, null);" class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.RequestOrReplyCase + ' <span>' + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.EmailSource == constEmailSourceTruckingOrder) {
            //For Kareem
            Anchors += ' <a href="#" onclick="CreateTruckingOrdersFromAlarm(' + item.EmailID + "," + item.OperationID + ",'" + item.OperationCode + "','" + item.Body + "','" + item.Subject + "'" + '); CallGETFunctionWithParameters(' + "'" + '/api/LocalEmails/RemoveAlarm' + "'" + ', { pRemoveAlarmEmailID: ' + item.EmailID + ' }, function() { LoadDefaults(' + "'" + '/api/Defaults/LoadAll' + "'" + ', ' + "'" + 'WHERE 1=1 ' + "'" + '); }, null);" class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject + ': <span>' + item.OperationCode + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.EmailSource == constEmailSourceTruckingTask) {
            //For Kareem
            Anchors += ' <a href="#" onclick="LoadViews(' + "'OperationsEdit'" + ",null," + item.OperationID + '); LoadOperationsSubMenu(); CallGETFunctionWithParameters(' + "'" + '/api/LocalEmails/RemoveAlarm' + "'" + ', { pRemoveAlarmEmailID: ' + item.EmailID + ' }, null, null);" class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject + ': <span>' + item.OperationCode + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.Body.split('/')[0] == "Payment Request") {
            //For Kareem
            //Anchors += ' <a href="#" onclick="OpenPaymentRequest(' + item.Body.split('/')[1] + '); CallGETFunctionWithParameters(' + "'" + '/api/LocalEmails/RemoveAlarm' + "'" + ', { pRemoveAlarmEmailID: ' + item.EmailID + ' }, function() { LoadDefaults(' + "'" + '/api/Defaults/LoadAll' + "'" + ', ' + "'" + 'WHERE 1=1 ' + "'" + '); }, null);" class="media list-group-item" style="display: block;">';
            Anchors += ' <a href="#" onclick="OpenPaymentRequest(' + item.Body.split('/')[1] + '); " class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject + ': <span>' + item.OperationCode + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.Body.split('/')[0] == "مراجعة العهدة") {
            //For Kareem
            //Anchors += ' <a href="#" onclick="OpenPaymentRequest(' + item.Body.split('/')[1] + '); CallGETFunctionWithParameters(' + "'" + '/api/LocalEmails/RemoveAlarm' + "'" + ', { pRemoveAlarmEmailID: ' + item.EmailID + ' }, function() { LoadDefaults(' + "'" + '/api/Defaults/LoadAll' + "'" + ', ' + "'" + 'WHERE 1=1 ' + "'" + '); }, null);" class="media list-group-item" style="display: block;">';
            Anchors += ' <a href="#" onclick="OpenPaymentRequest(' + item.Body.split('/')[1] + '); " class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject + '<span></span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.Body.split('/')[0] == "Payment Request Supplier ") {
            //For Kareem
            //Anchors += ' <a href="#" onclick="OpenPaymentRequest(' + item.Body.split('/')[1] + '); CallGETFunctionWithParameters(' + "'" + '/api/LocalEmails/RemoveAlarm' + "'" + ', { pRemoveAlarmEmailID: ' + item.EmailID + ' }, function() { LoadDefaults(' + "'" + '/api/Defaults/LoadAll' + "'" + ', ' + "'" + 'WHERE 1=1 ' + "'" + '); }, null);" class="media list-group-item" style="display: block;">';
            Anchors += ' <a href="#" onclick="OpenPaymentRequestSupplier(' + item.Body.split('/')[1] + '); " class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject + '<span></span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.Body.split('/')[0] == "The Payment Request Supplier has been approved") {
            Anchors += ' <a href="#" onclick="OpenPaymentRequestSupplier(' + item.Body.split('/')[1] + '); " class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject + '<span></span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.Body.split('/')[0] == "Approve Payment Request Supplier") {
            Anchors += ' <a href="#" onclick="ApproveSavedPaymentRequestSupplier(' + item.Body.split('/')[1] + '); " class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject + '<span></span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.Body.split('/')[0] == "Approve Payment Request") {
            //For Kareem
            //Anchors += ' <a href="#" onclick="OpenPaymentRequest(' + item.Body.split('/')[1] + '); CallGETFunctionWithParameters(' + "'" + '/api/LocalEmails/RemoveAlarm' + "'" + ', { pRemoveAlarmEmailID: ' + item.EmailID + ' }, function() { LoadDefaults(' + "'" + '/api/Defaults/LoadAll' + "'" + ', ' + "'" + 'WHERE 1=1 ' + "'" + '); }, null);" class="media list-group-item" style="display: block;">';
            Anchors += ' <a href="#" onclick="ApproveSavedPaymentRequest(' + item.Body.split('/')[1] + '); " class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject + ': <span>' + item.OperationCode + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
        else if (item.Body.split('/')[0] == "Approve Custody Settlement") {
            //For Kareem
            //Anchors += ' <a href="#" onclick="OpenPaymentRequest(' + item.Body.split('/')[1] + '); CallGETFunctionWithParameters(' + "'" + '/api/LocalEmails/RemoveAlarm' + "'" + ', { pRemoveAlarmEmailID: ' + item.EmailID + ' }, function() { LoadDefaults(' + "'" + '/api/Defaults/LoadAll' + "'" + ', ' + "'" + 'WHERE 1=1 ' + "'" + '); }, null);" class="media list-group-item" style="display: block;">';
            Anchors += ' <a href="#" onclick="ApproveSavedCustodySettlement(' + item.Body.split('/')[1] + '); " class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject + ': <span>' + item.OperationCode + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        } else if (item.Body.includes("Incoming Task: Operation ") && pDefaults.UnEditableCompanyName == "MED") {    // إمكانية ارسال تنبيه tracking stage by group وبعد فتح التنبيه يفتح نفس العملية لادخال التاسك

            Anchors += ' <a href="#" onclick="LoadViews(' + "'OperationsEdit'" + ",null," + item.OperationID + '); LoadOperationsSubMenu(); CallGETFunctionWithParameters(' + "'" + '/api/LocalEmails/RemoveAlarm' + "'" + ', { pRemoveAlarmEmailID: ' + item.EmailID + ' }, null, null);" class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject + ': <span>' + item.OperationCode + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        } else { //normal email
            Anchors += ' <a href="#" onclick="LoadViews(' + "'LocalEmails'" + ' , null , ' + item.EmailID + '); CallGETFunctionWithParameters(' + "'" + '/api/LocalEmails/RemoveAlarm' + "'" + ', { pRemoveAlarmEmailID: ' + item.EmailID + ' }, function() { LoadDefaults(' + "'" + '/api/Defaults/LoadAll' + "'" + ', ' + "'" + 'WHERE 1=1 ' + "'" + '); }, null);" class="media list-group-item" style="display: block;">';
            Anchors += '    <span class="media-body block m-b-none">' + item.Subject + ' <span>' + '</span><br><small class="text-muted"> - Sender :' + item.SenderName + ' (' + item.SendingDateAndTime + ')</small></span>';
            Anchors += ' </a> ';
        }
    });
    $("#spanNotificationsCount").text(pAlarmRows.length);
    $("#span1stRowNotifications").text("You have " + (pAlarmRows.length) + " Notification(s).");
    $("#divNotificationAchors").html(Anchors);
}
function CreateOperationFromAlarm(pEmailID, pQuotationRouteID, pQuotationCode, pBody) {
    debugger;
    UnLoadOperationsSubMenu();
    Quotations_ClearFilters();
    $("#hl-menu-LocalEmails").parent().siblings().removeClass("active");
    //$("#hl-menu-Dashboard").parent().addClass("active");
    strBindTableRowsFunctionName = "LocalEmails_BindTableRows";
    strLoadWithPagingFunctionName = "/api/LocalEmails/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
    //var pWhereClause = " WHERE IsDeleted=0 AND (ReceiverUserID = " + $("#hLoggedUserID").val() +" OR SenderUserID = " + $("#hLoggedUserID").val() + ")";
    var pWhereClause = " WHERE IsDeleted=0 AND ReceiverUserID = " + $("#hLoggedUserID").val(); //Default is the received mails
    //var pWhereClause = " WHERE Receivers LIKE N'%" + $("#hLoggedUserNameNotLogin").val() + "%' "; //Default is the received mails
    var pOrderBy = "ID DESC";
    var pPageNumber = 1;
    var pPageSize = 10;
    var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy, pIsReceived: true }
    LoadView("/LocalEmails/LocalEmails", "div-content", function () {
        if ($("#hDefaultUnEditableCompanyName").val() == "KDS" || $("#hDefaultUnEditableCompanyName").val() == "NEW") {
            //SelectOperationTypeModal
            $("#spanCbIsHouse").text("B/L");
            $("#spanCbIsMaster").text("Full Vessel");
        }
        LoadView("/MasterData/ModalCheckboxesList", "div-content", null, null, null, true);
        $.getScript(strServerURL + '/Scripts/LocalEmails/LocalEmails.js?' + glbVersion, function () {
            LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                , function (pData) {
                    LocalEmails_BindTableRows(JSON.parse(pData[0]));
                    FillListFromObject(null, 2/*pCodeOrName*/, "All Users", "slUser", pData[2], null);
                    Alarm_FillSelectOperationTypeModal(pEmailID, pQuotationRouteID, pQuotationCode, pBody);
                });
        });
        CallGETFunctionWithParameters("/api/Operations/LoadOperationsToRestoreInvoices"
            , { pPageSize: 99999, pWhereClauseToGetOperationsToRestoreInvoices: "WHERE EffectiveOperationCode IS NOT NULL  AND BLType <> 2 AND OperationStageID NOT IN (" + ClosedQuoteAndOperStageID + "," + CancelledQuoteAndOperStageID + ") AND CreationDate > DATEADD(mm,DATEDIFF(mm,0,GETDATE())-12,0)", pOrderBy: "ID DESC" }
            , function (pData) {
                FillListFromObject(null, 13, "<--Select-->", "slOperationFilterEmail", pData[0], function () { $("#slRegardingOperation").html($("#slOperationFilterEmail").html()); });
            }
            , null);




        //ShipmentTypeName in ('LCL','LTL') OR ShipmentType is null) and 
        CallGETFunctionWithParameters("/api/Quotations/QR_LoadAll"
            , { pPageSize: 99999, pWhereClauseQR: "WHERE   QuotationCode= '" + pQuotationCode + "'", pOrderBy: "ID DESC" }
            , function (pData) {
                var QData = JSON.parse(pData[1]);

                if (QData.length > 0
                    && (QData[0].ShipmentTypeName == 'FTL' || QData[0].ShipmentTypeName == 'LTL')
                ) {
                    $('.classShowByOperationType').removeClass('hide');
                    $("#txtClientName").val(QData[0].ClientName);
                    $("#txtPOLName").val(QData[0].POLName);
                    $("#txtPODName").val(QData[0].PODName);
                    $("#txtGrossWeight").val(QData[0].GrossWeight);
                    $("#txtCommodityName").val(QData[0].CommodityName);
                    $("#NumberOfPackages").val(QData[0].NumberOfPackages);
                }
                else {
                    $('.classShowByOperationType').addClass('hide');
                    $("#txtClientName").val('');
                    $("#txtPOLName").val('');
                    $("#txtPODName").val('');
                    $("#txtGrossWeight").val('');
                    $("#txtCommodityName").val('');
                    $("#NumberOfPackages").val('0');
                }
            }
            , null);

    });
}
function CreateTruckingOrdersFromAlarm(pEmailID, pOperationID, pOperationCode, pBody, pSubject) {

    debugger;
    FadePageCover(true);
    //$("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
    strBindTableRowsFunctionName = "TruckingOrders_BindTableRows";
    strLoadWithPagingFunctionName = "/api/TruckingOrders/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

    var pWhereClause = " WHERE RoutingTypeID=60";
    var pOrderBy = "ID DESC";
    var pPageNumber = 1;
    var pPageSize = 10;
    var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
    LoadView("/TR/Transactions/TruckingOrders", "div-content", function () {
        $("#hf_CanAdd").val(1);
        $("#hf_CanDelete").val(1);
        $("#hf_CanEdit").val(1);
        LoadView("/MasterData/ModalSelectCharges", "div-content", function () {
            if (pDefaults.IsTaxOnItems)
                $(".classShowForTaxOnItems").removeClass("hide");
            else
                $(".classShowForTaxOnHeader").removeClass("hide");
        }, null, null, true);
        if (pDefaults.UnEditableCompanyName == "GBL")
            $(".classShowForGBL").removeClass("hide");
        $.getScript(strServerURL + ' /Scripts/TR/Transactions/TruckingOrders.js?' + glbVersion, function () {
            LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                , function (pData) {
                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();

                    //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTrailerTruckingOrder", pData[2], function () { $("#slFilterTrailer").html($("#slTrailerTruckingOrder").html()); });
                    Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[2], "ID", "Name,LicenseStatus", ' ', "<--Select-->", "#slTrailerTruckingOrder", null, "", function () { $("#slFilterTrailer").html($("#slTrailerTruckingOrder").html()); });
                    Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Name,LicenseStatus", ' ', "<--Select-->", "#slDriverTruckingOrder", null, "", null);
                    Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[4], "ID", "Name,LicenseStatus", ' ', "<--Select-->", "#slDriverAssistantTruckingOrder", null, "", null);
                    Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[6], "ID", "Name,LicenseStatus", ' ', "<--Select-->", "#slEquipmentTruckingOrder", null, "", null);
                    FillListFromObject(null, 2, "<--Select-->", "slRoutingsLoadingZoneTruckingOrder", pData[7], null);
                    FillListFromObject(null, 2, "<--Select-->", "slRoutingsFirstCuringAreaTruckingOrder", pData[7], null);
                    FillListFromObject(null, 2, "<--Select-->", "slRoutingsSecondCuringAreaTruckingOrder", pData[7], null);
                    FillListFromObject(null, 2, "<--Select-->", "slRoutingsThirdCuringAreaTruckingOrder", pData[7], null);

                    FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTruckingOrderGateInPortTruckingOrder", pData[7], null);

                    $("#slTruckingOrderGateOutPortTruckingOrder").html($("#slTruckingOrderGateInPortTruckingOrder").html());
                    $("#slFilterEquipment").html($("#slEquipmentTruckingOrder").html());


                    TruckingOrders_BindTableRows(JSON.parse(pData[0]));
                });
        });
        //if (pDefaults.UnEditableCompanyName == "IST")
        //    $(".classShowForIST").removeClass("hide");
        if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();

        var pParametersWithValues = {
            pPageNumber: 1
            , pPageSize: 99999
            , pWhereClause: " WHERE ID = " + pOperationID
            , pOrderBy: "HouseNumber"

        };

        CallGETFunctionWithParameters("/api/Operations/LoadWithParameters"
            , pParametersWithValues
            , function (pData) {
                var pOperations = JSON.parse(pData[0]);
                var ShipmentTypeCode = pOperations[0].ShipmentTypeCode;

                var strFnName = "";
                var str1stRow = "";
                var pWhereClause = " WHERE 1=1 ORDER BY Name ";

                strFnName = "/api/Truckers/LoadAll";
                str1stRow = "Select Trucker";
                GetListWithNameAndWhereClause(0, strFnName, str1stRow, "slRoutingsLinesTruckingOrder", pWhereClause);

                if (ShipmentTypeCode == 'FCL')
                    $('#lblName').text('No Of Containers');
                else if (ShipmentTypeCode == 'Vehicle')
                    $('#lblName').text('No Of Vehicles');

                $("#txtAlarmSubject").val(pSubject);
                $("#txtAlarmBody").val(pBody);
                $("#txtAlarmOperationCode").val(pOperationCode);
                $("#hAlarmOperationID").val(pOperationID);
                $("#hAlarmEmailID").val(pEmailID);


                jQuery("#SelectTruckingOrderTypeModal").modal("show");
            }

        );




    },
        function () { Routing_ClearAllControls(); },
        function () { Routing_DeleteList(); }
    );



}

function OpenPaymentRequest(A_PaymentRequestID) {
    debugger;
    //LoadViews("PaymentRequest", undefined, undefined, undefined, undefined);
    {
        debugger;
        // $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
        CallGETFunctionWithParameters("/api/PaymentRequest/LoadDetails"
            , { pHeaderID: A_PaymentRequestID, pIsCustodySettlement: _IsCustodySettlement }
            , function (pData1) {
                var PaymentRequest = JSON.parse(pData1[1]);

                if (PaymentRequest[0].IsAccept == 0 && pDefaults.UnEditableCompanyName == "NEW") {
                    debugger;
                    FormID = 281;
                    //LoadViews("PaymentRequest", undefined, undefined, undefined, undefined)
                    {
                        debugger;
                        _IsCustodySettlement = 0;
                        pLoggedUserApprovedFromNotifyPaymentRequest = 1;
                        // $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
                        strBindTableRowsFunctionName = "PaymentRequest_BindTableRows";
                        strLoadWithPagingFunctionName = "/api/PaymentRequest/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

                        //var pWhereClause = " WHERE CreatorUserID_Request = " + $("#hLoggedUserID").val() + " AND ID = "+A_PaymentRequestID;
                        var pWhereClause = " WHERE ID = " + A_PaymentRequestID;
                        var pOrderBy = "ID DESC";
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadView("/ReceiptsAndPayments/Custodies/PaymentRequest", "div-content", function () {

                            $.getScript(strServerURL + ' /Scripts/ReceiptsAndPayments/Custodies/PaymentRequest.js?' + glbVersion, function () {
                                LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                                    , function (pData) {

                                        var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                        $("#slCurrency").html($("#hReadySlCurrencies").html());

                                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCustody", pData[2],
                                            function () { $("#slFilterCustody").html($("#slCustody").html()) });
                                        // FillListFromObject(null, 1, "<--Select-->", "slOperation", pData[3], null);
                                        //Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "OperationID", "OperationCode,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                                        if (pDefaults.UnEditableCompanyName == "NEW") {
                                            if (pLoggedUser.IsAccessAllCharges == true) {
                                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });

                                            } else {
                                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "OperationID", "OperationCode,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });

                                            }
                                        }
                                        else {
                                            Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                                        }
                                        FillListFromObject(null, 2, "<--Select-->", "slChargeType", pData[4], null);

                                        PaymentRequest_BindTableRows(JSON.parse(pData[0]));
                                        $('#btn-Approve').removeClass('hide');

                                        pLoggedUserApprovedFromNotifyPaymentRequest = 1;
                                    });
                            });
                            if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                        },
                            function () { PaymentRequest_ClearAllControls(); },
                            function () { PaymentRequest_DeleteList(); });

                    }
                } else {

                    if (PaymentRequest[0].IsCheck) {
                        $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
                        strBindTableRowsFunctionName = "Voucher_BindTableRows";
                        strLoadWithPagingFunctionName = "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                        glbFormCalled = constVoucherChequeOut;

                        var pWhereClause = "WHERE VoucherType=" + glbFormCalled;
                        var pOrderBy = $("#hDefaultUnEditableCompanyName").val() == "KDS" ? " ISNUMERIC(code) DESC,Try_Parse(code AS numeric) DESC,ID  DESC" : "ID DESC";
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadView("/ReceiptsAndPayments/Transactions/ChequeVoucher", "div-content", function () {
                            $("#li_InOrOut").text(TranslateString("ChequeIssueVoucher"));
                            $("#h3_InOrOut").text($("#li_InOrOut").text());
                            $("#h3Modal").html('<span>' + $("#li_InOrOut").text() + '</span><label id="lblShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                            $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Transactions/ChequeVoucher.js?' + glbVersion, function () {
                                LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                                    , function (pData) {
                                        var pAccount = pData[2];
                                        var pSafe = pData[3];
                                        var pTax = pData[4];
                                        var pCostCenter = pData[5];
                                        var pBank = pData[6];
                                        Voucher_BindTableRows(JSON.parse(pData[0]));
                                        var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();

                                        var SelectSafe = TranslateString("SelectFromMenu");
                                        if ($('#hReadySlOptions option[value="55"]').attr("OptionValue") == "true")
                                            SelectSafe = "";

                                        if ($("#hDefaultUnEditableCompanyName").val() != "SAF") {
                                            SelectSafe = TranslateString("SelectFromMenu");
                                        }

                                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);

                                        FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchBank", pBank, function () { $("#slBank").html($("#slSearchBank").html()); });
                                        FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                                        FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenter, null);
                                        FillListFromObject_ERP(null, 8/*pCodeOrName*/, SelectSafe, "slSearchSafe", pSafe, function () { $("#slSafe").html($("#slSearchSafe").html()); });


                                        $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                                        $("#slCurrency").html($("#hReadySlCurrencies").html());
                                        $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                                        $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                                        $("#slSearchCurrency").val(0);
                                        $("#txtSearchFrom").val("01/01/2000");
                                        $("#txtSearchTo").val(pFormattedTodaysDate);
                                        if (glbFormCalled == constVoucherChequeIn) {
                                            $(".showForChequeIssue").addClass("hide");
                                            $(".hideForChequeIssue").removeClass("hide");
                                            $(".hideForChequeReceiving").addClass("hide");
                                        }
                                        else if (glbFormCalled == constVoucherChequeOut) {
                                            $(".showForChequeIssue").removeClass("hide");
                                            //$(".hideForChequeIssue").addClass("hide");
                                            $(".hideForChequeIssue").removeClass("hide");
                                            $(".hideForChequeReceiving").removeClass("hide");
                                            if ($("#hDefaultUnEditableCompanyName").val() == "SAF") {
                                                $('#bDeposit').html('');
                                                $('#bPO').html('Transfer');
                                                var option = "";
                                                option += '<option value="' + 0 + '" selected >' + '<--Select-->' + '</option>';
                                                option += '<option value="' + 10 + '"  >' + 'Cheque' + '</option>';
                                                option += '<option value="' + 20 + '"  >' + 'Deposit' + '</option>';
                                                option += '<option value="' + 30 + '"  >' + 'Transfer' + '</option>';
                                                $("#slSearchChequeOrDepositOrPO").html(option);
                                            }
                                            {
                                                var FormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                                var dateValidTo = Date.prototype.addDays(ConvertDateFormat(FormattedTodaysDate), 30);

                                                IsChequeIssueReceiptFromSettlement = 1;
                                                A_PaymentRequestID_ForVoucherID = A_PaymentRequestID;
                                                Voucher_ClearAllControls();
                                                debugger;
                                                var TotalEstmatedCost = JSON.parse(pData1[1])[0].TotalEstmatedCost;
                                                var Description_Details = "";
                                                $.each(JSON.parse(pData1[2]), function (i, item) {
                                                    Description_Details += "  Item:" + item.ChargeTypeName + "-" + item.OperationCode + "  (" + item.EstmatedCost + ")   \n"
                                                });
                                                var Custody = JSON.parse(pData1[3]);
                                                if (Custody.length > 0) {
                                                    Custody[0].AccountID
                                                    Custody[0].SubAccountID
                                                }

                                                ++maxDetailsIDInTable;
                                                var tr = "";
                                                tr += "<tr ID='" + 0 + "' isdeleted='0' tag='item'   counter='" + (maxDetailsIDInTable) + "' value='" + 0 + "'>"
                                                tr += "     <td class='IsInsert hide'> <input type='checkbox' id='IsInsert" + maxDetailsIDInTable + "' checked='checked' /></td>";
                                                tr += "     <td class='DetailsID' style='width:2%;'><input " + (1 == 2 ? " disabled='disabled' " : " name='Delete' ") + " type='checkbox' value='" + maxDetailsIDInTable + "' /></td>";
                                                tr += "     <td class='Value' style='width:9%;'><input type='text' style='width:100%;font-size:90%;'  id='txtValue1' class='controlStyle inputValue' data-type='number'  onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);Voucher_CalculateTotal();' onchange='Details_SetIsRowChanged(id);Voucher_CalculateTotal();' data-required='true' value='' /> </td>";
                                                tr += "     <td class='Description' style='width:20%;'><input type='text' style='width:100%;font-size:90%;text-transform:uppercase;' id='txtDescription1' class='controlStyle inputDescription'  onkeypress='DisableEnterKey(id);' onfocus='DisableEnterKey(id);' onchange='Details_SetIsRowChanged(id);' data-required='true' value='" + ($("#txtDescription" + (maxDetailsIDInTable - 1)).val() == undefined ? "" : $("#txtDescription" + (maxDetailsIDInTable - 1)).val()) + "' /> </td>";
                                                tr += "     <td class='AccountID' style='width:20%;' val='" + (Custody[0].AccountID) + "'><select id='slAccount" + maxDetailsIDInTable + "' style='width:100%;' class='controlStyle selectAccountID' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Details_SetIsRowChanged(id); Details_AccountChanged(" + maxDetailsIDInTable + ");' data-required='true'>" + "<option value=0></option>" + "</select></td>";
                                                tr += "     <td class='SubAccountID' style='width:20%;' val=''><select id='slSubAccount" + maxDetailsIDInTable + "' style='width:100%;' class='controlStyle selectSubAccountID' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Details_SetIsRowChanged(id);SubAccount_Changed(this);' data-required='false'>" + "<option value=0></option>" + "</select></td>";
                                                tr += "     <td class='CostCenterID' style='width:15%;' val=''><select id='slCostCenter" + maxDetailsIDInTable + "' style='width:100%;' class='controlStyle selectcostcenterID' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Details_SetIsRowChanged(id);' data-required='false'>" + "<option value=0></option>" + "</select></td>";
                                                tr += "      <td class='Documented' style='width:1%;'><input id='cbDocumented" + maxDetailsIDInTable + "' name='Documented'  class='cbIsDocumented' type='checkbox' value='' ></td>";
                                                tr += "     <td class='SelectedIDsToUpdate hide'> <input name='SelectedIDsToUpdate'  id='SelectedIDsToUpdate" + maxDetailsIDInTable + "' type='checkbox' value='" + maxDetailsIDInTable + "' /></td>";
                                                tr += "     <td class='hide'></td>";
                                                tr += "</tr>";
                                                $("#tblDetails tbody").prepend(tr);
                                                if ($("[id$='hf_ChangeLanguage']").val() == "ar")
                                                    $("#tblDetails tbody tr[ID=" + maxDetailsIDInTable + "]").reverseChildren();
                                                /***************************Filling row controls******************************/
                                                $('#txtDescription1').val(Description_Details);
                                                $('#txtValue1').val(TotalEstmatedCost);


                                                $("#slAccount" + maxDetailsIDInTable).html($("#slAccount").html());
                                                $("#slAccount" + maxDetailsIDInTable).val($("#slAccount" + (maxDetailsIDInTable - 1)).val() == undefined ? 0 : $("#slAccount" + (maxDetailsIDInTable - 1)).val());

                                                //Start Auto Filter
                                                $("#slAccount" + maxDetailsIDInTable).css({ "width": "100%" }).select2();
                                                $("#slSubAccount" + maxDetailsIDInTable).css({ "width": "100%" }).select2();
                                                $("div[tabindex='-1']").removeAttr('tabindex');
                                                $("#slAccount" + maxDetailsIDInTable).trigger("change");
                                                $("#slSubAccount" + maxDetailsIDInTable).trigger("change");
                                                //End Auto Filter
                                                if (Custody.length > 0) {
                                                    $("#slAccount" + maxDetailsIDInTable).val(Custody[0].AccountID);
                                                    $("#slAccount" + maxDetailsIDInTable).trigger("change");
                                                    //
                                                    $("#slSubAccount" + maxDetailsIDInTable).val(Custody[0].SubAccountID);
                                                    $("#slSubAccount" + maxDetailsIDInTable).trigger("change");
                                                }

                                                $("#slSubAccount" + maxDetailsIDInTable).html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                                                $("#slSubAccount" + maxDetailsIDInTable).html($("#slSubAccount" + (maxDetailsIDInTable - 1)).html());
                                                $("#slSubAccount" + maxDetailsIDInTable).val($("#slSubAccount" + (maxDetailsIDInTable - 1)).val() == undefined ? 0 : $("#slSubAccount" + (maxDetailsIDInTable - 1)).val());

                                                $("#slCostCenter" + maxDetailsIDInTable).html($("#slCostCenter").html());
                                                $("#slCostCenter" + maxDetailsIDInTable).val($("#slCostCenter" + (maxDetailsIDInTable - 1)).val() == undefined ? 0 : $("#slCostCenter" + (maxDetailsIDInTable - 1)).val());

                                                Details_FillSlSubAccountNew("slSubAccount" + maxDetailsIDInTable, Custody[0].SubAccountID, $("#slAccount" + maxDetailsIDInTable).val());
                                                //SetDatepickerFormat();
                                                BindAllCheckboxonTable("tblDetails", "DetailsID", "cbDetailsDeleteHeader");
                                                ////////////////////
                                                $("#slSubAccount" + maxDetailsIDInTable).val(Custody[0].SubAccountID);
                                                $("#slSubAccount" + maxDetailsIDInTable).trigger("change");

                                                ////////////////////
                                                Voucher_CalculateTotal();
                                                Details_CalculateTotals();
                                            }

                                        }
                                        $(".hideForReciprocalBank").addClass("hide");
                                        if ($("#hDefaultUnEditableCompanyName").val() != "SAF")
                                            $(".showForIsCheque").removeClass("hide");

                                    });
                            });
                            if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                        },
                            function () { Voucher_ClearAllControls(); },
                            function () { Voucher_DeleteList(); });
                    }
                    else//CASH
                    {//btn-NewAdd
                        $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
                        strBindTableRowsFunctionName = "Voucher_BindTableRows";
                        strLoadWithPagingFunctionName = "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                        glbFormCalled = constVoucherCashOut;
                        var pWhereClause = "WHERE VoucherType=" + glbFormCalled;
                        var pOrderBy = "ID DESC";
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadView("/ReceiptsAndPayments/Transactions/CashVoucher", "div-content", function () {
                            $("#li_InOrOut").text(TranslateString("CashIssueVoucher"));
                            $("#h3_InOrOut").text($("#li_InOrOut").text());
                            $("#h3Modal").html('<span>' + $("#li_InOrOut").text() + '</span><label id="lblShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                            $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Transactions/CashVoucher.js?' + glbVersion, function () {
                                LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                                    , function (pData) {
                                        var pAccount = pData[2];
                                        var pSafe = pData[3];
                                        var pTax = pData[4];
                                        var pCostCenter = pData[5];
                                        Voucher_BindTableRows(JSON.parse(pData[0]));
                                        var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);
                                        FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, function () { $("#slSafe").html($("#slSearchSafe").html()); });
                                        FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                                        FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenter, null);
                                        $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                                        $("#slCurrency").html($("#hReadySlCurrencies").html());
                                        $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                                        $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                                        $("#slSearchCurrency").val(0);
                                        $("#txtSearchFrom").val("01/01/2000");
                                        $("#txtSearchTo").val(pFormattedTodaysDate);
                                        if (glbFormCalled == constVoucherCashIn) {
                                            $("#thIsCash").addClass("hide");
                                            $(".showForCashIssue").addClass("hide");
                                            $(".hideForCashIssue").removeClass("hide");
                                            $(".hideForCashReceiving").addClass("hide");
                                            //in details
                                            $("#thInvoiceNumber").removeClass("hide");
                                            $("#lblVoucherDate").html('Receipt Date');
                                            if ($("#hDefaultUnEditableCompanyName").val() == "SAF") {
                                                //$("#txtChargedPerson").removeAttr("data-required");
                                                // $("#txtChargedPerson").prop("disabled", "disabled");
                                                $("#btn-AddDetailsNew").html(' <i class="fa fa-plus"></i><b>&nbsp;Paid in advance&nbsp;</b>');
                                            }
                                        }
                                        else if (glbFormCalled == constVoucherCashOut) {
                                            IsCashIssueReceiptFromSettlement = 1;
                                            A_PaymentRequestID_ForVoucherID = A_PaymentRequestID;
                                            Voucher_ClearAllControls();
                                            $(".hideForCashReceiving").removeClass("hide");
                                            $("#cbIsCash").prop("checked", "checked");
                                            $("#thIsCash").removeClass("hide");
                                            $(".showForCashIssue").removeClass("hide");
                                            $(".hideForCashIssue").removeClass("hide");
                                            //in details
                                            $("#thInvoiceNumber").addClass("hide");
                                            //$('#btn-NewAdd').removeClass("hide");
                                            //$('#btn-Delete').removeClass("hide");
                                            //$('#hID').val(''); $('#txtChargedPerson').removeAttr('disabled');
                                            //Voucher_ClearAllControls();
                                            //jQuery('#VoucherModal').modal('show');
                                            //Details_NewRow();
                                            var TotalEstmatedCost = JSON.parse(pData1[1])[0].TotalEstmatedCost;
                                            //var TotalEstmatedCost = PaymentRequest[0].TotalEstmatedCost;
                                            var Description_Details = "";
                                            $.each(JSON.parse(pData1[2]), function (i, item) {
                                                Description_Details += "  Item:" + item.ChargeTypeName + "-" + item.OperationCode + "  (" + item.EstmatedCost + ")   \n"

                                            });
                                            var Custody = JSON.parse(pData1[3]);
                                            if (Custody.length > 0) {
                                                Custody[0].AccountID
                                                Custody[0].SubAccountID
                                            }
                                            $('#txtDescription1').val(Description_Details);
                                            $('#txtValue1').val(TotalEstmatedCost);
                                            ////////////////////////////////////////////////////////
                                            var maxDetailsIDInTable = 0;
                                            ClearAllTableRows("tblDetails");
                                            maxDetailsIDInTable = 0;
                                            //$.each(pTableRows, function (i, item) {
                                            //maxDetailsIDInTable = (item.ID > maxDetailsIDInTable ? item.ID : maxDetailsIDInTable);

                                            AppendRowtoTable("tblDetails",
                                                ("<tr ID='0' " + ">"
                                                    + "<td class='DetailsID'> <input " + (1 == 2 ? " disabled='disabled' " : " name='Delete' ") + " type='checkbox' value='0' /></td>"
                                                    + "<td class='Value' style='width:9%;'><input  tag='" + (TotalEstmatedCost) + "' type='text' style='width:100%;font-size:90%;'  id='txtValue0' class='controlStyle inputValue' data-type='number'  onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);Voucher_CalculateTotal();' onchange='Details_SetIsRowChanged(id);Voucher_CalculateTotal();' data-required='false' value='" + (TotalEstmatedCost) + "' /> </td>"
                                                    + "<td class='Description' style='width:20%;'><input  tag='" + (Description_Details) + "' type='text' style='width:100%;font-size:90%;text-transform:uppercase;' id='txtDescription0' class='controlStyle inputDescription'  onkeypress='DisableEnterKey(id);' onfocus='DisableEnterKey(id);' onchange='Details_SetIsRowChanged(id);' data-required='true' value='" + Description_Details + "' /> </td>"
                                                    + "<td class='AccountID' style='width:20%;' val='" + (Custody[0].AccountID) + "'>" + "<select  tag='" + (Custody[0].AccountID) + "' id='slAccount0' style='width:100%;' class='controlStyle selectAccountID' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Details_SetIsRowChanged(id);Details_FillSlSubAccountInTable(this , \".SubAccountID\" ," + Custody[0].SubAccountID + ");' data-required='true'>" + $('#slAccount').html() + "</select></td>"
                                                    + "<td class='SubAccountID' style='width:20%;' val='" + (Custody[0].SubAccountID) + "'>" + "<select  tag='" + (Custody[0].SubAccountID) + "'id='slSubAccount0' style='width:100%;' class='controlStyle selectSubAccountID' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Details_SetIsRowChanged(id);' data-required='false'>" + "<option value=0></option>" + "</select></td>"
                                                    + "<td class='CostCenterID' style='width:15%;' val='" + (0) + "'>" + "<select  tag='" + (0) + "' id='slCostCenter0' style='width:100%;' class='controlStyle selectcostcenterID' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Details_SetIsRowChanged(id);' data-required='false'>" + $('#slCostCenter').html() + "</select></td>"
                                                    + "<td class='Documented'> <input name='Documented' id='cbDocumented0' type='checkbox'  " + (false ? " checked='checked' " : "") + " /></td>"
                                                    + "<td class='SelectedIDsToUpdate hide'> <input name='SelectedIDsToUpdate' id='SelectedIDsToUpdate0' type='checkbox' value='0' /></td></tr>"
                                                ));

                                            //Start Auto Filter
                                            $("#slAccount0").css({ "width": "100%" }).select2();
                                            $("#slSubAccount0").css({ "width": "100%" }).select2();
                                            $("div[tabindex='-1']").removeAttr('tabindex');
                                            //if (i == pTableRows.length - 1) {
                                            debugger;
                                            FillHTMLtblInputs("#tblDetails > tbody");
                                            //}
                                            //});
                                            BindAllCheckboxonTable("tblDetails", "DetailsID", "cbDetailsDeleteHeader");//Parameters(pTableName, pCheckBoxColumnClassName, pCheckBoxHeaderID)
                                            CheckAllCheckbox("HeaderDeleteDetailsID");
                                            if (showDeleteFailMessage) { //sherif: if deletion failed due to foreign key, then this message is shown
                                                swal(strSorry, strDeleteFailMessage);
                                                showDeleteFailMessage = false;
                                            }
                                            $('#txtChargedPerson').prop('disabled', false)
                                            /////////////////////////////////////////////////
                                        }
                                    });
                            });
                            if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                        },
                            function () { Voucher_ClearAllControls(); },
                            function () { Voucher_DeleteList(); });
                    }
                }
            }
            , null);

    }
}


function OpenPaymentRequestSupplier(A_PaymentRequestID) {
    debugger;
    //LoadViews("PaymentRequest", undefined, undefined, undefined, undefined);
    {
        debugger;
        // $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
        CallGETFunctionWithParameters("/api/PaymentRequestSupplier/LoadDetails"
            , { pHeaderID: A_PaymentRequestID, pIsCustodySettlement: _IsCustodySettlement }
            , function (pData1) {
                var PaymentRequest = JSON.parse(pData1[1]);



                if (PaymentRequest[0].IsCheck) {
                    $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
                    strBindTableRowsFunctionName = "Voucher_BindTableRows";
                    strLoadWithPagingFunctionName = "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                    glbFormCalled = constVoucherChequeOut;

                    var pWhereClause = "WHERE VoucherType=" + glbFormCalled;
                    var pOrderBy = $("#hDefaultUnEditableCompanyName").val() == "KDS" ? " ISNUMERIC(code) DESC,Try_Parse(code AS numeric) DESC,ID  DESC" : "ID DESC";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadView("/ReceiptsAndPayments/Transactions/ChequeVoucher", "div-content", function () {
                        $("#li_InOrOut").text(TranslateString("ChequeIssueVoucher"));
                        $("#h3_InOrOut").text($("#li_InOrOut").text());
                        $("#h3Modal").html('<span>' + $("#li_InOrOut").text() + '</span><label id="lblShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                        $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Transactions/ChequeVoucher.js?' + glbVersion, function () {
                            LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                                , function (pData) {
                                    var pAccount = pData[2];
                                    var pSafe = pData[3];
                                    var pTax = pData[4];
                                    var pCostCenter = pData[5];
                                    var pBank = pData[6];
                                    Voucher_BindTableRows(JSON.parse(pData[0]));
                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();

                                    var SelectSafe = TranslateString("SelectFromMenu");
                                    if ($('#hReadySlOptions option[value="55"]').attr("OptionValue") == "true")
                                        SelectSafe = "";

                                    if ($("#hDefaultUnEditableCompanyName").val() != "SAF") {
                                        SelectSafe = TranslateString("SelectFromMenu");
                                    }

                                    FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);

                                    FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchBank", pBank, function () { $("#slBank").html($("#slSearchBank").html()); });
                                    FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                                    FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenter, null);
                                    FillListFromObject_ERP(null, 8/*pCodeOrName*/, SelectSafe, "slSearchSafe", pSafe, function () { $("#slSafe").html($("#slSearchSafe").html()); });


                                    $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                                    $("#slCurrency").html($("#hReadySlCurrencies").html());
                                    $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                                    $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                                    $("#slSearchCurrency").val(0);
                                    $("#txtSearchFrom").val("01/01/2000");
                                    $("#txtSearchTo").val(pFormattedTodaysDate);
                                    if (glbFormCalled == constVoucherChequeIn) {
                                        $(".showForChequeIssue").addClass("hide");
                                        $(".hideForChequeIssue").removeClass("hide");
                                        $(".hideForChequeReceiving").addClass("hide");
                                    }
                                    else if (glbFormCalled == constVoucherChequeOut) {
                                        $(".showForChequeIssue").removeClass("hide");
                                        //$(".hideForChequeIssue").addClass("hide");
                                        $(".hideForChequeIssue").removeClass("hide");
                                        $(".hideForChequeReceiving").removeClass("hide");
                                        if ($("#hDefaultUnEditableCompanyName").val() == "SAF") {
                                            $('#bDeposit').html('');
                                            $('#bPO').html('Transfer');
                                            var option = "";
                                            option += '<option value="' + 0 + '" selected >' + '<--Select-->' + '</option>';
                                            option += '<option value="' + 10 + '"  >' + 'Cheque' + '</option>';
                                            option += '<option value="' + 20 + '"  >' + 'Deposit' + '</option>';
                                            option += '<option value="' + 30 + '"  >' + 'Transfer' + '</option>';
                                            $("#slSearchChequeOrDepositOrPO").html(option);
                                        }
                                        {
                                            var FormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                            var dateValidTo = Date.prototype.addDays(ConvertDateFormat(FormattedTodaysDate), 30);

                                            IsChequeIssueReceiptFromSettlement = 1;
                                            A_PaymentRequestID_ForVoucherID = A_PaymentRequestID;
                                            Voucher_ClearAllControls();
                                            debugger;
                                            var TotalEstmatedCost = JSON.parse(pData1[1])[0].TotalEstmatedCost;
                                            var Description_Details = "";
                                            $.each(JSON.parse(pData1[2]), function (i, item) {
                                                Description_Details += "  Item:" + item.ChargeTypeName + "-" + item.OperationCode + "  (" + item.EstmatedCost + ")   \n"
                                            });
                                            var Supplier = JSON.parse(pData1[3]);
                                            if (Supplier.length > 0) {
                                                Supplier[0].AccountID
                                                Supplier[0].SubAccountID
                                            }

                                            ++maxDetailsIDInTable;
                                            var tr = "";
                                            tr += "<tr ID='" + 0 + "' isdeleted='0' tag='item'   counter='" + (maxDetailsIDInTable) + "' value='" + 0 + "'>"
                                            tr += "     <td class='IsInsert hide'> <input type='checkbox' id='IsInsert" + maxDetailsIDInTable + "' checked='checked' /></td>";
                                            tr += "     <td class='DetailsID' style='width:2%;'><input " + (1 == 2 ? " disabled='disabled' " : " name='Delete' ") + " type='checkbox' value='" + maxDetailsIDInTable + "' /></td>";
                                            tr += "     <td class='Value' style='width:9%;'><input type='text' style='width:100%;font-size:90%;'  id='txtValue1' class='controlStyle inputValue' data-type='number'  onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);Voucher_CalculateTotal();' onchange='Details_SetIsRowChanged(id);Voucher_CalculateTotal();' data-required='true' value='' /> </td>";
                                            tr += "     <td class='Description' style='width:20%;'><input type='text' style='width:100%;font-size:90%;text-transform:uppercase;' id='txtDescription1' class='controlStyle inputDescription'  onkeypress='DisableEnterKey(id);' onfocus='DisableEnterKey(id);' onchange='Details_SetIsRowChanged(id);' data-required='true' value='" + ($("#txtDescription" + (maxDetailsIDInTable - 1)).val() == undefined ? "" : $("#txtDescription" + (maxDetailsIDInTable - 1)).val()) + "' /> </td>";
                                            tr += "     <td class='AccountID' style='width:20%;' val='" + (Supplier[0].AccountID) + "'><select id='slAccount" + maxDetailsIDInTable + "' style='width:100%;' class='controlStyle selectAccountID' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Details_SetIsRowChanged(id); Details_AccountChanged(" + maxDetailsIDInTable + ");' data-required='true'>" + "<option value=0></option>" + "</select></td>";
                                            tr += "     <td class='SubAccountID' style='width:20%;' val=''><select id='slSubAccount" + maxDetailsIDInTable + "' style='width:100%;' class='controlStyle selectSubAccountID' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Details_SetIsRowChanged(id);SubAccount_Changed(this);' data-required='false'>" + "<option value=0></option>" + "</select></td>";
                                            tr += "     <td class='CostCenterID' style='width:15%;' val=''><select id='slCostCenter" + maxDetailsIDInTable + "' style='width:100%;' class='controlStyle selectcostcenterID' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Details_SetIsRowChanged(id);' data-required='false'>" + "<option value=0></option>" + "</select></td>";
                                            tr += "      <td class='Documented' style='width:1%;'><input id='cbDocumented" + maxDetailsIDInTable + "' name='Documented'  class='cbIsDocumented' type='checkbox' value='' ></td>";
                                            tr += "     <td class='SelectedIDsToUpdate hide'> <input name='SelectedIDsToUpdate'  id='SelectedIDsToUpdate" + maxDetailsIDInTable + "' type='checkbox' value='" + maxDetailsIDInTable + "' /></td>";
                                            tr += "     <td class='hide'></td>";
                                            tr += "</tr>";
                                            $("#tblDetails tbody").prepend(tr);
                                            if ($("[id$='hf_ChangeLanguage']").val() == "ar")
                                                $("#tblDetails tbody tr[ID=" + maxDetailsIDInTable + "]").reverseChildren();
                                            /***************************Filling row controls******************************/
                                            $('#txtDescription1').val(Description_Details);
                                            $('#txtValue1').val(TotalEstmatedCost);


                                            $("#slAccount" + maxDetailsIDInTable).html($("#slAccount").html());
                                            $("#slAccount" + maxDetailsIDInTable).val($("#slAccount" + (maxDetailsIDInTable - 1)).val() == undefined ? 0 : $("#slAccount" + (maxDetailsIDInTable - 1)).val());

                                            //Start Auto Filter
                                            $("#slAccount" + maxDetailsIDInTable).css({ "width": "100%" }).select2();
                                            $("#slSubAccount" + maxDetailsIDInTable).css({ "width": "100%" }).select2();
                                            $("div[tabindex='-1']").removeAttr('tabindex');
                                            $("#slAccount" + maxDetailsIDInTable).trigger("change");
                                            $("#slSubAccount" + maxDetailsIDInTable).trigger("change");
                                            //End Auto Filter
                                            if (Supplier.length > 0) {
                                                $("#slAccount" + maxDetailsIDInTable).val(Supplier[0].AccountID);
                                                $("#slAccount" + maxDetailsIDInTable).trigger("change");
                                                //
                                                $("#slSubAccount" + maxDetailsIDInTable).val(Supplier[0].SubAccountID);
                                                $("#slSubAccount" + maxDetailsIDInTable).trigger("change");
                                            }

                                            $("#slSubAccount" + maxDetailsIDInTable).html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                                            $("#slSubAccount" + maxDetailsIDInTable).html($("#slSubAccount" + (maxDetailsIDInTable - 1)).html());
                                            $("#slSubAccount" + maxDetailsIDInTable).val($("#slSubAccount" + (maxDetailsIDInTable - 1)).val() == undefined ? 0 : $("#slSubAccount" + (maxDetailsIDInTable - 1)).val());

                                            $("#slCostCenter" + maxDetailsIDInTable).html($("#slCostCenter").html());
                                            $("#slCostCenter" + maxDetailsIDInTable).val($("#slCostCenter" + (maxDetailsIDInTable - 1)).val() == undefined ? 0 : $("#slCostCenter" + (maxDetailsIDInTable - 1)).val());

                                            Details_FillSlSubAccountNew("slSubAccount" + maxDetailsIDInTable, Supplier[0].SubAccountID, $("#slAccount" + maxDetailsIDInTable).val());
                                            //SetDatepickerFormat();
                                            BindAllCheckboxonTable("tblDetails", "DetailsID", "cbDetailsDeleteHeader");
                                            ////////////////////
                                            $("#slSubAccount" + maxDetailsIDInTable).val(Supplier[0].SubAccountID);
                                            $("#slSubAccount" + maxDetailsIDInTable).trigger("change");

                                            ////////////////////
                                            Voucher_CalculateTotal();
                                            Details_CalculateTotals();
                                        }

                                    }
                                    $(".hideForReciprocalBank").addClass("hide");
                                    if ($("#hDefaultUnEditableCompanyName").val() != "SAF")
                                        $(".showForIsCheque").removeClass("hide");

                                });
                        });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                    },
                        function () { Voucher_ClearAllControls(); },
                        function () { Voucher_DeleteList(); });
                }
                else//CASH
                {//btn-NewAdd
                    $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
                    strBindTableRowsFunctionName = "Voucher_BindTableRows";
                    strLoadWithPagingFunctionName = "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                    glbFormCalled = constVoucherCashOut;
                    var pWhereClause = "WHERE VoucherType=" + glbFormCalled;
                    var pOrderBy = "ID DESC";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadView("/ReceiptsAndPayments/Transactions/CashVoucher", "div-content", function () {
                        $("#li_InOrOut").text(TranslateString("CashIssueVoucher"));
                        $("#h3_InOrOut").text($("#li_InOrOut").text());
                        $("#h3Modal").html('<span>' + $("#li_InOrOut").text() + '</span><label id="lblShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                        $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Transactions/CashVoucher.js?' + glbVersion, function () {
                            LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                                , function (pData) {
                                    var pAccount = pData[2];
                                    var pSafe = pData[3];
                                    var pTax = pData[4];
                                    var pCostCenter = pData[5];
                                    Voucher_BindTableRows(JSON.parse(pData[0]));
                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);
                                    FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, function () { $("#slSafe").html($("#slSearchSafe").html()); });
                                    FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                                    FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenter, null);
                                    $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                                    $("#slCurrency").html($("#hReadySlCurrencies").html());
                                    $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                                    $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                                    $("#slSearchCurrency").val(0);
                                    $("#txtSearchFrom").val("01/01/2000");
                                    $("#txtSearchTo").val(pFormattedTodaysDate);
                                    if (glbFormCalled == constVoucherCashIn) {
                                        $("#thIsCash").addClass("hide");
                                        $(".showForCashIssue").addClass("hide");
                                        $(".hideForCashIssue").removeClass("hide");
                                        $(".hideForCashReceiving").addClass("hide");
                                        //in details
                                        $("#thInvoiceNumber").removeClass("hide");
                                        $("#lblVoucherDate").html('Receipt Date');
                                        if ($("#hDefaultUnEditableCompanyName").val() == "SAF") {
                                            $("#btn-AddDetailsNew").html(' <i class="fa fa-plus"></i><b>&nbsp;Paid in advance&nbsp;</b>');
                                        }
                                    }
                                    else if (glbFormCalled == constVoucherCashOut) {
                                        IsCashIssueReceiptFromSettlement = 1;
                                        A_PaymentRequestID_ForVoucherID = A_PaymentRequestID;
                                        Voucher_ClearAllControls();
                                        $(".hideForCashReceiving").removeClass("hide");
                                        $("#cbIsCash").prop("checked", "checked");
                                        $("#thIsCash").removeClass("hide");
                                        $(".showForCashIssue").removeClass("hide");
                                        $(".hideForCashIssue").removeClass("hide");
                                        //in details
                                        $("#thInvoiceNumber").addClass("hide");
                                        var TotalEstmatedCost = JSON.parse(pData1[1])[0].TotalEstmatedCost;
                                        //var TotalEstmatedCost = PaymentRequest[0].TotalEstmatedCost;
                                        var Description_Details = "";
                                        $.each(JSON.parse(pData1[2]), function (i, item) {
                                            Description_Details += "  Item:" + item.ChargeTypeName + "-" + item.OperationCode + "  (" + item.EstmatedCost + ")   \n"

                                        });
                                        var Custody = JSON.parse(pData1[3]);
                                        if (Custody.length > 0) {
                                            Custody[0].AccountID
                                            Custody[0].SubAccountID
                                        }
                                        $('#txtDescription1').val(Description_Details);
                                        $('#txtValue1').val(TotalEstmatedCost);
                                        ////////////////////////////////////////////////////////
                                        var maxDetailsIDInTable = 0;
                                        ClearAllTableRows("tblDetails");
                                        maxDetailsIDInTable = 0;

                                        AppendRowtoTable("tblDetails",
                                            ("<tr ID='0' " + ">"
                                                + "<td class='DetailsID'> <input " + (1 == 2 ? " disabled='disabled' " : " name='Delete' ") + " type='checkbox' value='0' /></td>"
                                                + "<td class='Value' style='width:9%;'><input  tag='" + (TotalEstmatedCost) + "' type='text' style='width:100%;font-size:90%;'  id='txtValue0' class='controlStyle inputValue' data-type='number'  onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);Voucher_CalculateTotal();' onchange='Details_SetIsRowChanged(id);Voucher_CalculateTotal();' data-required='false' value='" + (TotalEstmatedCost) + "' /> </td>"
                                                + "<td class='Description' style='width:20%;'><input  tag='" + (Description_Details) + "' type='text' style='width:100%;font-size:90%;text-transform:uppercase;' id='txtDescription0' class='controlStyle inputDescription'  onkeypress='DisableEnterKey(id);' onfocus='DisableEnterKey(id);' onchange='Details_SetIsRowChanged(id);' data-required='true' value='" + Description_Details + "' /> </td>"
                                                + "<td class='AccountID' style='width:20%;' val='" + (Custody[0].AccountID) + "'>" + "<select  tag='" + (Custody[0].AccountID) + "' id='slAccount0' style='width:100%;' class='controlStyle selectAccountID' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Details_SetIsRowChanged(id);Details_FillSlSubAccountInTable(this , \".SubAccountID\" ," + Custody[0].SubAccountID + ");' data-required='true'>" + $('#slAccount').html() + "</select></td>"
                                                + "<td class='SubAccountID' style='width:20%;' val='" + (Custody[0].SubAccountID) + "'>" + "<select  tag='" + (Custody[0].SubAccountID) + "'id='slSubAccount0' style='width:100%;' class='controlStyle selectSubAccountID' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Details_SetIsRowChanged(id);' data-required='false'>" + "<option value=0></option>" + "</select></td>"
                                                + "<td class='CostCenterID' style='width:15%;' val='" + (0) + "'>" + "<select  tag='" + (0) + "' id='slCostCenter0' style='width:100%;' class='controlStyle selectcostcenterID' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Details_SetIsRowChanged(id);' data-required='false'>" + $('#slCostCenter').html() + "</select></td>"
                                                + "<td class='Documented'> <input name='Documented' id='cbDocumented0' type='checkbox'  " + (false ? " checked='checked' " : "") + " /></td>"
                                                + "<td class='SelectedIDsToUpdate hide'> <input name='SelectedIDsToUpdate' id='SelectedIDsToUpdate0' type='checkbox' value='0' /></td></tr>"
                                            ));

                                        //Start Auto Filter
                                        $("#slAccount0").css({ "width": "100%" }).select2();
                                        $("#slSubAccount0").css({ "width": "100%" }).select2();
                                        $("div[tabindex='-1']").removeAttr('tabindex');
                                        //if (i == pTableRows.length - 1) {
                                        debugger;
                                        FillHTMLtblInputs("#tblDetails > tbody");
                                        //}
                                        //});
                                        BindAllCheckboxonTable("tblDetails", "DetailsID", "cbDetailsDeleteHeader");//Parameters(pTableName, pCheckBoxColumnClassName, pCheckBoxHeaderID)
                                        CheckAllCheckbox("HeaderDeleteDetailsID");
                                        if (showDeleteFailMessage) { //sherif: if deletion failed due to foreign key, then this message is shown
                                            swal(strSorry, strDeleteFailMessage);
                                            showDeleteFailMessage = false;
                                        }
                                        $('#txtChargedPerson').prop('disabled', false)
                                        /////////////////////////////////////////////////
                                    }
                                });
                        });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                    },
                        function () { Voucher_ClearAllControls(); },
                        function () { Voucher_DeleteList(); });
                }

            }
            , null);

    }
}

function ApproveSavedPaymentRequestSupplier(A_PaymentRequestID) {
    debugger;
    FormID = 281;
    //LoadViews("PaymentRequest", undefined, undefined, undefined, undefined)
    {
        debugger;
        _IsCustodySettlement = 0;
        pLoggedUserApprovedFromNotifyPaymentRequest = 1;
        // $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
        strBindTableRowsFunctionName = "PaymentRequest_BindTableRows";
        strLoadWithPagingFunctionName = "/api/PaymentRequestSupplier/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

        //var pWhereClause = " WHERE CreatorUserID_Request = " + $("#hLoggedUserID").val() + " AND ID = "+A_PaymentRequestID;
        var pWhereClause = " WHERE ID = " + A_PaymentRequestID;
        var pOrderBy = "ID DESC";
        var pPageNumber = 1;
        var pPageSize = 10;
        var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadView("/ReceiptsAndPayments/Custodies/PaymentRequestSupplier", "div-content", function () {

            $.getScript(strServerURL + ' /Scripts/ReceiptsAndPayments/Custodies/PaymentRequestSupplier.js?' + glbVersion, function () {
                LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    , function (pData) {

                        var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                        $("#slCurrency").html($("#hReadySlCurrencies").html());

                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCustody", pData[2],
                            function () { $("#slFilterCustody").html($("#slCustody").html()) });
                        // FillListFromObject(null, 1, "<--Select-->", "slOperation", pData[3], null);
                        //Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "OperationID", "OperationCode,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                        if (pDefaults.UnEditableCompanyName == "NEW") {
                            if (pLoggedUser.IsAccessAllCharges == true) {
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });

                            } else {
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "OperationID", "OperationCode,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });

                            }
                        }
                        else {
                            Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                        }
                        FillListFromObject(null, 2, "<--Select-->", "slChargeType", pData[4], null);

                        PaymentRequest_BindTableRows(JSON.parse(pData[0]));
                        $('#btn-Approve').removeClass('hide');

                        pLoggedUserApprovedFromNotifyPaymentRequest = 1;
                    });
            });
            if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
        },
            function () { PaymentRequest_ClearAllControls(); },
            function () { PaymentRequest_DeleteList(); });

    }
}

function ApproveSavedPaymentRequest(A_PaymentRequestID) {
    debugger;
    FormID = 281;
    //LoadViews("PaymentRequest", undefined, undefined, undefined, undefined)
    {
        debugger;
        _IsCustodySettlement = 0;
        pLoggedUserApprovedFromNotifyPaymentRequest = 1;
        // $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
        strBindTableRowsFunctionName = "PaymentRequest_BindTableRows";
        strLoadWithPagingFunctionName = "/api/PaymentRequest/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

        //var pWhereClause = " WHERE CreatorUserID_Request = " + $("#hLoggedUserID").val() + " AND ID = "+A_PaymentRequestID;
        var pWhereClause = " WHERE ID = " + A_PaymentRequestID;
        var pOrderBy = "ID DESC";
        var pPageNumber = 1;
        var pPageSize = 10;
        var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadView("/ReceiptsAndPayments/Custodies/PaymentRequest", "div-content", function () {

            $.getScript(strServerURL + ' /Scripts/ReceiptsAndPayments/Custodies/PaymentRequest.js?' + glbVersion, function () {
                LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    , function (pData) {

                        var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                        $("#slCurrency").html($("#hReadySlCurrencies").html());

                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCustody", pData[2],
                            function () { $("#slFilterCustody").html($("#slCustody").html()) });
                        // FillListFromObject(null, 1, "<--Select-->", "slOperation", pData[3], null);
                        //Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "OperationID", "OperationCode,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                        if (pDefaults.UnEditableCompanyName == "NEW") {
                            if (pLoggedUser.IsAccessAllCharges == true) {
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });

                            } else {
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "OperationID", "OperationCode,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });

                            }
                        }
                        else {
                            Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                        }
                        FillListFromObject(null, 2, "<--Select-->", "slChargeType", pData[4], null);

                        PaymentRequest_BindTableRows(JSON.parse(pData[0]));
                        $('#btn-Approve').removeClass('hide');

                        pLoggedUserApprovedFromNotifyPaymentRequest = 1;
                    });
            });
            if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
        },
            function () { PaymentRequest_ClearAllControls(); },
            function () { PaymentRequest_DeleteList(); });

    }
}

function ApproveSavedCustodySettlement(A_PaymentRequestID) {
    debugger;
    _IsCustodySettlement = 1;
    FormID = 283;
    pLoggedUserApprovedFromNotifyPaymentRequest = 1;

    // $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
    strBindTableRowsFunctionName = "PaymentRequest_BindTableRows";
    strLoadWithPagingFunctionName = "/api/PaymentRequest/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

    //var pWhereClause = " WHERE CreatorUserID_Request = " + $("#hLoggedUserID").val() + " AND IsApprovedRequest = 1 AND VoucherID is not null AND ID = "+A_PaymentRequestID;
    var pWhereClause = " WHERE IsApprovedRequest = 1 AND VoucherID is not null AND ID = " + A_PaymentRequestID;
    var pOrderBy = "ID DESC";
    var pPageNumber = 1;
    var pPageSize = 10;
    var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
    LoadView("/ReceiptsAndPayments/Custodies/PaymentRequest", "div-content", function () {

        $.getScript(strServerURL + ' /Scripts/ReceiptsAndPayments/Custodies/PaymentRequest.js?' + glbVersion, function () {
            LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                , function (pData) {

                    $('.hideWithCustodySettlement').removeClass('hide');
                    //$('.m-b-none').html("Custody Settlement - تسوية عهد")
                    $('.lblPayment_Custody').html("Custody Settlement - تسوية عهد")

                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                    $("#slCurrency").html($("#hReadySlCurrencies").html());

                    FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCustody", pData[2],
                        function () { $("#slFilterCustody").html($("#slCustody").html()) });
                    FillListFromObject(null, 1, "<--Select-->", "slOperation", pData[3], null);
                    FillListFromObject(null, 2, "<--Select-->", "slChargeType", pData[4], null);

                    PaymentRequest_BindTableRows(JSON.parse(pData[0]));
                    $('#btn-NewAdd').addClass('hide');
                    $('#btn-Approve').removeClass('hide');
                });
        });
        //if (pDefaults.UnEditableCompanyName == "IST")
        //    $(".classShowForIST").removeClass("hide");
        if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
    },
        function () { PaymentRequest_ClearAllControls(); },
        function () { PaymentRequest_DeleteList(); });

}


function AnswerQuotationChargeRequest(pEmailID, pQuotationRequestID, pQuotationRouteRequestID) {
    debugger;
    UnLoadOperationsSubMenu();
    Quotations_ClearFilters();
    $("#hl-menu-Quotations").parent().siblings().removeClass("active");
    LoadViews("QuotationsEdit", null, pQuotationRequestID, null/*pWhereClauseOverRiding*/, pQuotationRouteRequestID);
    //Routings_EditByDblClick(20174);
}
function FillAccPaymentAlarms(pAlarmRows) {
    debugger;
    var Anchors = "";
    $.each(pAlarmRows, function (i, item) {
        Anchors += ' <a href="#" onclick="OpenAccPaymentFromAlarm(' + item.ID + "," + item.PRType + ');" class="media list-group-item" style="display: block;">';
        Anchors += '    <span class="media-body block m-b-none">ChequeNo:<span>' + item.ChequeOrVisaNo + ' - DueDate:' + ConvertDateFormat(GetDateWithFormatMDY(item.DueDate)) + '</span><br><small class="text-muted">Partner:' + item.PartnerName + '</small></span>';
        Anchors += ' </a> ';
    });
    $("#spanAccPaymentNotificationsCount").text(pAlarmRows.length);
    $("#spanAccPayment1stRowNotifications").text("You have " + (pAlarmRows.length) + " Cheques Notification(s).");
    $("#divAccPaymentNotificationAchors").html(Anchors);
}
function OpenAccPaymentFromAlarm(pAccPaymentID, pPRType) {
    debugger;
    UnLoadOperationsSubMenu();
    Quotations_ClearFilters();
    $("#hl-menu-OperAcc").parent().siblings().removeClass("active");
    $("#hf_CanEdit").val("1");
    var pControlID = (pPRType == constPRTypeReceivable ? "ARPayments" : "APPayments");
    if (pControlID == "ARPayments") {
        glbTransactionType = constTransactionARPayment;
        glbPRType = constPRTypeReceivable;
    }
    else { //APPayments
        glbTransactionType = constTransactionAPPayment;
        glbPRType = constPRTypePayable;
    }
    strBindTableRowsFunctionName = "Payment_BindTableRows";
    strLoadWithPagingFunctionName = "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
    LoadView("/OperAcc/Payment", "div-content", function () {
        $.getScript(strServerURL + '/Scripts/OperAcc/CommonARAndAP/Payment.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
            var pWhereClause = " WHERE PaymentTypeID IS NOT NULL AND IsDeleted=0 AND IsApproved=0 AND PRType = " + glbPRType + " AND ID=" + pAccPaymentID;
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                , function (pData) {
                    Payment_BindTableRows(JSON.parse(pData[0]));
                    FillListFromObject(null, 5/*pCodeOrName*/, "Select Partner", "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                    FillListFromObject(null, 2/*pCodeOrName*/, "Select Treasury", "slPaymentTreasury", pData[3], null);
                    FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                    FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], function () { $("#slPaymentPartnerType").html($("#slPartnerType").html()); });
                    FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                    FillListFromObject(null, 4/*pNameAndCode*/, "Select Charge", "slPaymentChargeType", pData[7], null);
                    //$("#slARFBranch").html($("#hReadySlBranches").html());
                    //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                    $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                    //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                    if (pControlID == "ARPayments") {
                        $("#liAccountsPaymentLink").text("Accounts Receivable");
                        $("#liAccountsPaymentLink").attr("onclick", "LoadViews('AccountsReceivable')");
                        $("#liAccountsPaymentLink1").attr("onclick", "LoadViews('AccountsReceivable')");
                        $("#h3Payment").text("A\\R (Receivables)"); $("#h3Payment").addClass("static-text-primary");
                        $("#h3ModalLblPaymentType").html("A\\R (Receivables)" + '&nbsp;<label id="lblPaymentShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                        $("#h3ModalLblPaymentType").addClass("static-text-primary");
                        $("#divWithHoldingTax").removeClass("hide");
                        //$("#divIsGeneralExpense").addClass("hide");
                    }
                    else { //APPayments
                        $("#liAccountsPaymentLink").text("Accounts Payable");
                        $("#liAccountsPaymentLink").attr("onclick", "LoadViews('AccountsPayable')");
                        $("#liAccountsPaymentLink1").attr("onclick", "LoadViews('AccountsPayable')");
                        $("#h3Payment").text("A\\P (Payables)"); $("#h3Payment").addClass("static-text-danger");
                        $("#h3ModalLblPaymentType").html("A\\P (Payables)" + '&nbsp;<label id="lblPaymentShown" purpose="dynamicLabel" class="static-text-danger"></label>');
                        $("#h3ModalLblPaymentType").addClass("static-text-danger");
                        $("#divWithHoldingTax").addClass("hide");
                        //$("#divIsGeneralExpense").removeClass("hide");
                    }
                    $("#liAccountPaymentType").text($("#h3Payment").text());
                });
        });
    },
        function () { Payment_ClearAllControls(); }, //i insert a new air reservation form directly
        function () { Payment_DeleteList(); });
}

function FillModules(callback) {
    debugger;
    $.ajax({
        type: "POST",
        url: strServerURL + "/api/Security/ModulesData",
        //10/10/2020
        data: JSON.stringify({ pCutlureID: $("#hf_ChangeLanguage").val().trim(), pWhereClause: " WHERE ParentGroupID IS NULL " + (pLoggedUser.CustomerID == 0 ? " AND IsNull(IsForCustomers, 0) = 0  " : " AND IsNull(IsForCustomers, 0) = 1 ") + " AND IsInactive<>1  ", pOrderBy: "  GroupOrderNo ", pOperationFormID: constOperationsFormID, pQuotationFormID: constQuotationsFormID }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            QV = data[2]; QA = data[3]; QE = data[4]; QD = data[5]; OV = data[6]; OA = data[7]; OE = data[8]; OD = data[9];

            QVGen = data[10]; QAGen = data[11]; QEGen = data[12]; QDGen = data[13]; QVPar = data[14]; QAPar = data[15]; QEPar = data[16]; QDPar = data[17];
            QVPac = data[18]; QAPac = data[19]; QEPac = data[20]; QDPac = data[21]; QVRou = data[22]; QARou = data[23]; QERou = data[24]; QDRou = data[25];
            QVCha = data[26]; QACha = data[27]; QECha = data[28]; QDCha = data[29];

            OVGen = data[30]; OAGen = data[31]; OEGen = data[32]; ODGen = data[33]; OVPar = data[34]; OAPar = data[35]; OEPar = data[36]; ODPar = data[37];
            OVPac = data[38]; OAPac = data[39]; OEPac = data[40]; ODPac = data[41]; OVRou = data[42]; OARou = data[43]; OERou = data[44]; ODRou = data[45];
            OVPay = data[46]; OAPay = data[47]; OEPay = data[48]; ODPay = data[49]; OVRec = data[50]; OARec = data[51]; OERec = data[52]; ODRec = data[53];
            OVInv = data[54]; OAInv = data[55]; OEInv = data[56]; ODInv = data[57]; OVDoc = data[58]; OADoc = data[59]; OEDoc = data[60]; ODDoc = data[61];
            OVMas = data[62]; OAMas = data[63]; OEMas = data[64]; ODMas = data[65]; OVShi = data[66]; OAShi = data[67]; OEShi = data[68]; ODShi = data[69];
            OVDocIn = data[70]; OADocIn = data[71]; OEDocIn = data[72]; ODDocIn = data[73];
            OVNot = data[74]; OANot = data[75]; OENot = data[76]; ODNot = data[77];
            OVTra = data[78]; OATra = data[79]; OETra = data[80]; ODTra = data[81];
            CustomerAdd = data[82]; CustomerEdit = data[83]; AgentAdd = data[84]; AgentEdit = data[85];
            OVPurInv = data[86]; OAPurInv = data[87]; OEPurInv = data[88]; ODPurInv = data[89];
            OVDraftInv = data[90]; OADraftInv = data[91]; OEDraftInv = data[92]; ODDraftInv = data[93];
            OVNotif = data[94]; OANotif = data[95]; OENotif = data[96]; ODNotif = data[97];
            OVVeh = data[98]; OAVeh = data[99]; OEVeh = data[100]; ODVeh = data[101];
            OVInt = data[102]; OAInt = data[103]; OEInt = data[104]; ODInt = data[105];
            OVDelivery = data[106]; OADelivery = data[107]; OEDelivery = data[108]; ODDelivery = data[109];
            OVACID = data[110]; OAACID = data[111]; OEACID = data[112]; ODACID = data[113];

            var menuItems = "";
            if ($("#sp-LoginName").text() != "BG EGYPT")
                $.each(JSON.parse(data[0]), function (i, item) {
                    if (item.GroupCode == 'Accounting')
                        IsAccountingActive = true;
                    if (!(item.GroupCode == 'Operations' && !OV) /*&& !(item.GroupCode == 'Quotations' && !QV)*/)
                        menuItems += '<li onclick="topFunction();" ><a id="hl-menu-' + item.GroupCode + '" class="hl-menu-item" href="javascript:void(0);"><i  class="fa ' + item.GroupIconName + ' icon"><b class="bg-primary"></b></i><span>' + item.GroupDecryptedName + '</span></a></li>';
                });
            $("#ulMainMenu").html(menuItems);
            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. This is FillModules() in mainapp.master !", "");
        }
    });
}

function FillGroups(pWhereClause, pActiveGroup, callback1, callback2) {
    $.ajax({
        type: "POST",
        url: strServerURL + "/api/Security/ModulesData",
        data: JSON.stringify({ pCutlureID: $("#hf_ChangeLanguage").val().trim(), pWhereClause: pWhereClause, pOrderBy: "  GroupOrderNo ", pOperationFormID: constOperationsFormID, pQuotationFormID: constQuotationsFormID }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var groupItems = "";
            var ParentGroupCode = "";
            var htmlDivContent = "";
            $.each(JSON.parse(data[0]), function (i, item) {
                //if (item.GroupCode == "Quotations" || item.GroupCode == "Operations")
                if (item.GroupCode == "Operations")
                    //if (item.GroupCode == "Quotations")
                    groupItems += '<a id="tab' + item.GroupCode + '" name="tabs" tab-name="' + item.GroupCode + '" class="btn btn-s-md btn-primary hide ' + (item.GroupCode == pActiveGroup ? ' btn-warning ' : '') + ' btn-rounded"><i class="fa ' + item.GroupIconName + '"></i>&nbsp;' + item.GroupDecryptedName + '</a>';//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';
                else
                    groupItems += '<a id="tab' + item.GroupCode + '" name="tabs" tab-name="' + item.GroupCode + '" class="btn btn-s-md btn-primary ' + (item.GroupCode == pActiveGroup ? ' btn-warning ' : '') + ' btn-rounded"><i class="fa ' + item.GroupIconName + '"></i>&nbsp;' + item.GroupDecryptedName + '</a><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>';
                ParentGroupCode = item.ParentGroupCode; //all are the same, and i just need 1
            });
            htmlDivContent = ' <div id="div-Data"> ';
            htmlDivContent += '     <ul id="ul-breadcrumb" class="breadcrumb no-border no-radius b-b b-light pull-in"> ';
            htmlDivContent += '         <li><a id="hl-homepage" href="javascript:void(0);"><i class="fa fa-home icon-home"></i><span>' + data[1] + '</span> ';
            htmlDivContent += '         </a></li> ';
            htmlDivContent += '         <li class="active">' + ParentGroupCode;
            htmlDivContent += '     </ul> ';
            htmlDivContent += '     <section class="panel panel-default"> ';
            htmlDivContent += '         <header class="panel-heading"> ';
            htmlDivContent += '             <h3 class="m-b-none"> ' + ParentGroupCode;
            htmlDivContent += '             </h3> ';
            htmlDivContent += '         </header> ';
            htmlDivContent += '         <div class="row text-sm wrapper"> ';
            htmlDivContent += '             <div id="div-main-options" class="col-sm-12 m-b-xs"> ';
            htmlDivContent += '             </div> ';
            htmlDivContent += '         </div> ';
            //if (ParentGroupCode == "Quotations" || ParentGroupCode == "Operations")
            if (ParentGroupCode == "Operations")
                //if (ParentGroupCode == "Quotations")
                htmlDivContent += '         <div id="div-Tabs" class="hide"> ';
            else
                htmlDivContent += '         <div id="div-Tabs"> ';
            htmlDivContent += '         </div> ';
            htmlDivContent += '     </section> ';
            htmlDivContent += ' </div> ';
            $("#div-content").html(htmlDivContent);
            $("#div-main-options").html(groupItems);
            $("#hl-homepage").on("click", function () { LoadViews("hl-homepage"); });
            if (callback1 != null && callback1 != undefined)
                callback1();
            if (callback2 != null && callback2 != undefined)
                callback2();
            FillForms(" where 1=1 ", pActiveGroup, function () {
                $("#div-content .hl-menu-item").on("click", function (event) {
                    FormID = $(this).attr("id").split('-')[3];
                    //if (pActiveGroup != "OperationsManagement" && pActiveGroup != "QuotationsManagement")
                    GetPermissions(LoadViews($(this).attr("id").toString().split('-')[2]));
                });
            }, function () {
                $("a[name='tabs']").click(function () {
                    $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning");
                    $(this).addClass("btn-warning");
                });
            }, function () {
                $("#div-Tabs").children().addClass("hide"); $("#sec-" + pActiveGroup).removeClass("hide"); $("#tab" + pActiveGroup).parent().children().removeClass("btn-warning"); $("#tab" + pActiveGroup).addClass("btn-warning");
            }, null //function () { // this function is to open quotations and operations directly
                //    if (pActiveGroup == "Quotations")
                //        $("#hl-menu-QuotationsManagement" + constQuotationsFormID).click();//$("#hl-menu-QuotationsManagement-28").click();
                //    else if (pActiveGroup == "Operations")
                //        $("#hl-menu-OperationsManagement" + constOperationsFormID).click(); //$("#hl-menu-OperationsManagement-29").click();
                //}
            )
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. This is FillGroups() in mainapp.master !", "");
        }
    });
}

function GetPermissions(callbackAddNew, callbackDelete) {
    debugger;
    var data = {
        "pFormID": FormID.toString(),
    };
    $.ajax({
        type: "POST",
        url: strServerURL + "/api/UserPrivileges/LoadAll",
        data: JSON.stringify(data),
        dataType: "json",
        //beforeSend: function () { },
        contentType: "application/json; charset=utf-8",
        success: function (data) {
            if (data[1] != -1) { //session is not expired (data[1]: is the UserID)
                $.each(JSON.parse(data[0]), function (i, item) { //I am sure i ve just 1 row isa coz i serach with form id in the controller
                    if (constAdministratorRoleID == item.RoleID)
                        IsAdminRoleID = true;
                    else
                        IsAdminRoleID = false;

                    if (item.CanDelete) {
                        $("#hf_CanDelete").val("1");
                        if (callbackDelete != null && callbackDelete != undefined) {
                            $('#btn-Delete').on("click", function () { callbackDelete(); });
                        }
                    }
                    else
                        $("#hf_CanDelete").val("0");

                    if (item.CanAdd) {
                        $("#hf_CanAdd").val("1");
                        if (callbackAddNew != null && callbackAddNew != undefined) {
                            $('#btn-NewAdd').on("click", function () { callbackAddNew(); });
                        }
                    }
                    else
                        $("#hf_CanAdd").val("0");

                    if (item.CanEdit)
                        $("#hf_CanEdit").val("1");
                    else
                        $("#hf_CanEdit").val("0");
                });
            }
            else {
                $("#anchorLogout")[0].click();
            }
            //    if (callback != null && callback != undefined) { // the callback here is fn LoadViews()
            //        callback();
            //    }

        },
        error: function (jqXHR, exception) {
            alert('Error when trying to call function [' + pFunctionName + ']. GetPermissions fn in mainapp.master.js');
        }
    });
}

//to show and hide Add and Delete Buttons (to be changed for real security)
function ApplyPermissions(callbackAddNew, callbackDelete) {
    debugger;
    //Add
    if ($("#hf_CanAdd").val() == "1") {
        $("#btn-NewAdd").removeClass("hide");
        $("#btnSavePricing").removeClass("hide");
    }
    //No Add Permission
    else {
        $('#btn-NewAdd').prop('onclick', null);
        $('#btn-NewAdd').on("click", function () { swal(strThreateningMessage, strNoPermissionMessage, "error"); });
        $("#btn-NewAdd").addClass("hide");
        $("#btn-NewAdd").removeAttr("data-target");
        $("#btnSavePricing").addClass("hide");
    }

    //Delete
    if ($("#hf_CanDelete").val() == 1) {
        $("#btn-Delete").removeClass("hide");
        $("#btn-PermanentDelete").removeClass("hide");
    }
    //No Delete Permission
    else {
        $('btn-Delete').prop('onclick', null);
        $('#btn-Delete').on("click", function () { swal(strThreateningMessage, strNoPermissionMessage, "error"); });
        $("#btn-Delete").addClass("hide");
        $("#btn-PermanentDelete").addClass("hide");
    }

    //Edit
    if ($("#hf_CanEdit").val() != 1) {
        if (parent.strBindTableRowsFunctionName != "Batches_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "GoodReceiptNotes_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "SC_DepartmentReturnsVoucher_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "MaterialIssueVouchers_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "SC_OpeningBalance_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "SC_Scrapping_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "SC_ExminationOrders_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "SC_MaterialIssueRequest_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "SC_Inventory_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "SC_OpenCloseMaterialIssueRequest_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "SC_Settlement_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "SC_StoresTransferVoucher_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "SC_ClientReturnsVoucher_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "SC_SupplierReturnsVoucher_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "SL_Invoices_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "PS_Invoices_BindTableRows" &&
            parent.strBindTableRowsFunctionName != "PaymentRequest_BindTableRows"

        ) {
            $("tr").prop('ondblclick', null);
            $('tr').removeAttr('ondblclick');
            $('tr td:not([class]) a').prop('onclick', null);
            $('tr td:not([class]) a').on("click", function () { swal(strThreateningMessage, strNoPermissionMessage, "error"); });
            $('tr td:not([class]) a').removeAttr('href');
            $('tr td:not([class]) a').removeAttr('data-toggle');
        }
        else if (glbCallingControl != "FleetTransportOrder" && glbCallingControl != "OperationsEdit") {
            $("tr td a").removeClass("hide");
        }

        //$("tr").on('dblclick', function () { swal(strThreateningMessage, strNoPermissionMessage, "error"); });
    }
    else if (glbCallingControl != "FleetTransportOrder" && glbCallingControl != "OperationsEdit") {
        $("tr td a").removeClass("hide");
    }



    //if ($("#hf_CanEdit").val() == 1) {
    //    $("tr td a").removeClass("hide");
    //}
    //    //No Delete Permission
    //else {
    //    $('tr td:not([class]) a').prop('onclick', null);
    //    $('tr td:not([class]) a').on("click", function () { swal(strThreateningMessage, strNoPermissionMessage, "error"); });
    //    $('tr td:not([class]) a').removeAttr('href');
    //    $('tr td:not([class]) a').removeAttr('data-toggle');
    //}
}


function FillForms(pWhereClause, pActiveGroup, callback1, callback2, callback3, callbackToOpenDirectly) {
    $.ajax({
        type: "POST",
        url: strServerURL + "/api/Forms/FormsData",
        data: JSON.stringify({ pCutlureID: $("#hf_ChangeLanguage").val().trim(), pWhereClause: pWhereClause, pActiveGroup: pActiveGroup, pOrderBy: " OrderNo " }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var formItems = "";
            if (data[3] > 0) { // data[3] is _GroupsRowCount
                $.each(JSON.parse(data[2]), function (i, itemGroup) {
                    //if (data[4] == itemGroup.GroupCode && itemGroup.GroupCode != "Quotations" && itemGroup.GroupCode != "Operations" && itemGroup.GroupCode != "QuotationsManagement" && itemGroup.GroupCode != "OperationsManagement")//data[4] holds the pActiveGroup value
                    formItems += ' <section id=sec-' + itemGroup.GroupCode + '> ';
                    //else
                    //    formItems += ' <section id=sec-' + itemGroup.GroupCode + ' class = "hide"> ';
                    if (data[1] > 0) { // data[1] is _FormsRowCount
                        $.each(JSON.parse(data[0]), function (i, itemForm) {
                            if (itemGroup.GroupCode == itemForm.GroupCode) {
                                formItems += ' <div class="col-sm-6' /*+ (itemForm.DecryptedCode == 'Cities' || itemForm.DecryptedCode == 'StatisticsByShippingLines' ? ' hide ' : "")*/ + '" style="padding-right: 5px !important; padding-left: 5px !important;"> ';
                                formItems += '   <a id="hl-menu-' + itemForm.DecryptedCode + '-' + itemForm.FormID + '" class="hl-menu-item" style="cursor: pointer";> ';
                                formItems += '      <section class="panel panel-default"> ';
                                formItems += '          <header class="panel-heading font-bold"> ' + itemForm.DecryptedName + ' </header> ';
                                formItems += '          <div class="panel-body"> ';
                                formItems += '              <i class="fa ' + itemForm.IconName + ' fa-4x"></i> ';
                                //formItems += '              <i class="fa ' + itemForm.IconName + ' "></i> ';
                                formItems += '<b>' + itemForm.DecryptedDescription + '</b>';
                                formItems += '          </div> ';
                                formItems += '      </section> ';
                                formItems += '      </a> ';
                                formItems += ' </div> ';
                            } // of if (itemGroup.GroupCode == itemForm.GroupCode)
                        }); // of inner foreach
                        formItems += ' <div class="row"></div> ';
                    } //of if (data[1] > 0)
                    formItems += " </section> ";
                });// of outer for each
            } //of if (data[3] > 0)
            $("#div-Tabs").html(formItems);
            if (callback1 != null && callback1 != undefined)
                callback1();
            if (callback2 != null && callback2 != undefined)
                callback2();
            if (callback3 != null && callback3 != undefined)
                callback3();
            if (callbackToOpenDirectly != null && callbackToOpenDirectly != undefined && (/*pActiveGroup == "Quotations" ||*/ pActiveGroup == "Operations"))
                callbackToOpenDirectly();
            if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                ReverseUIControls();
            }
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. This is FillForms() in mainapp.master !", "");
        }
    });
}

function FadePageCover(pIsIn) {
    if (pIsIn) {
        $("#page-cover-page").css("opacity", 0.6).fadeIn(300);
        $("#page-cover-master").css("opacity", 0.6).fadeIn(300);
    }
    else {
        $("#page-cover-page").fadeOut('slow');
        $("#page-cover-master").fadeOut('slow');
    }
}

function FadePageCover_Customized(pIsIn, TimeInMelliSecond) {
    if (pIsIn) {
        $("#page-cover-page").css("opacity", 0.6).fadeIn(TimeInMelliSecond);
        $("#page-cover-master").css("opacity", 0.6).fadeIn(TimeInMelliSecond);
    }
    else {
        $("#page-cover-page").fadeOut(TimeInMelliSecond);
        $("#page-cover-master").fadeOut(TimeInMelliSecond);
    }
}

function OpenNewTab() {
    //var mywindow = window.open(window.location.href, '_blank');
    window.open(window.location.href);
    //window.location.href = window.location.origin + '/Home';
}
function ChangePassword() {
    debugger;
    if ($("#pwdPassword").val().trim() != $("#pwdConfirmPassword").val().trim())
        swal("Sorry", "Passwords don't match.");
    else if (ValidateForm("form", "ChangePasswordModal")) {
        FadePageCover(true);
        CallPOSTFunctionWithParameters("/api/Users/ChangePassword"
            , { pOldPassword: $("#pwdOldPassword").val().trim(), pNewPassword: $("#pwdPassword").val().trim() }
            , function (pData) {
                debugger;
                if (pData[0]) {
                    swal("Success", "Saved successfully.");
                    jQuery("#ChangePasswordModal").modal("hide");
                }
                else
                    swal("Sorry", "Incorrect password.");
                FadePageCover(false);
            }
            , null);
    }
}
// ******************************************************************************

// Change Menu Location From Left Two Right
function SetNavMenuLocation() {
    switch ($("[id$='hf_ChangeLanguage']").val().trim()) {
        case "ar":
            {
                $("#content").insertBefore($("#nav"));
                break;
            }
    }
}

// Translate From Language To Another
function TranslateString(pTextToTranslate) {
    var strText = pTextToTranslate;
    switch (pTextToTranslate) {
        case "details": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " الخصائص ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Détails ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Details ";
            break;
        }
        case "ACIDDetails": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " ACID Details ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " ACID Details ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " ACID Details ";
            break;
        }

        case "Edit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تعديل ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Éditer ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Edit ";
            break;
        }
        case "YouMustInsertCorrectPercentage": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " يجب إدخال النسبه بالطريقة الصحيحة ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " You Must Insert Correct Percentage ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " You Must Insert Correct Percentage ";
            break;
        }
        case "PrintAssetCard": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " طباعة بطاقة الأصل";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Print Asset Card ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Print Asset Card ";
            break;
        }

        case "YouMustInsertCorrectIntialAmount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " يجب إدخال القيمة الدفترية بالطريقة الصحيحة ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " You Must Insert Correct Intial Amount ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " You Must Insert Correct Intial Amount ";
            break;
        }
        case "Transfer": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " نقل ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Transfer ";
            break;
        }

        case "Restore": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إسترجاع ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Restore ";
            break;
        }
        case "Copy": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " نسخ ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Copier ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Copy ";
            break;
        }
        case "ReceivablesAllocations": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تحصيل الفواتير ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Receivables Allocations ";
            break;
        }
        case "PayablesAllocations": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " سداد تكاليف ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Payables Allocations ";
            break;
        }
        case "SelectAccount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إختر الحساب ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Select Account ";
            break;
        }
        case "Periods": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " الفترات ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Periods ";
            break;
        }
        case "Perc. Log": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " Perc. Log ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Perc. Log "
            break;
        }
        case "Choose file": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إختر الملف ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Choose file ";
            break;
        }
        case "Rate Log": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " Rate Log ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Rate Log "
            break;
        }
        case "MAWBStock": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " MAWB Stock ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " MAWB Stock "
            break;
        }
        case "SelectFromMenu": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "<-- اختر -->";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = ""
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "<--Select-->";
            break;
        }

        case "AUTOGENERATED": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "ينشأ تلقائيا";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = ""
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "AUTO GENERATED";
            break;
        }
        case "CashInVoucher":
        case "CashReceivingVoucher": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إذن استلام نقدى ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Cash Receiving Receipt "
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Cash Receiving Receipt "
            break;
        }
        case "CashOutVoucher":
        case "CashIssueVoucher": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إذن صرف نقدى ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Cash Issue Receipt "
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Cash Issue Receipt "
            break;
        }
        case "ChequeInVoucher":
        case "ChequeReceivingVoucher": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إذن استلام شيكات ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Cheque Receiving Receipt "
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Cheque Receiving Receipt "
            break;
        }
        case "ChequeOutVoucher":
        case "ChequeIssueVoucher": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إذن صرف شيكات ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Cheque Issue Receipt "
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Cheque Issue Receipt "
            break;
        }
        case "PostingVouchers": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " ترحيل المستندات ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " PostingVouchers "
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Posting Vouchers "
            break;
        }
        case "UnpostingVouchers": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " فك ترحيل المستندات ";
            else if ($("#hf_ChangeLanguage").val() == "fr")
                strText = " Unposting Vouchers "
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Unposting Vouchers "
            break;
        }
        case "PostingJVs": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " ترحيل القيود ";

            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Posting JVs "
            break;
        }
        case "UnPostingJVs": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " فك ترحيل القيود ";

            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " UnPosting JVs "
            break;
        }
        case "CodeIsNotCorrectNumber": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " الكود غير صحيح يجب ان يكون عدد ";

            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Code Is Not Correct (It Must be number) "
            break;
        }

        case "RestoringJVs": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إسترجاع القيود ";

            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Restoring JVs "
            break;
        }

        case "Print": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " طباعة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Print "
            break;
        }
        case "PrintForClient": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " طباعة للعميل ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " PrintForClient "
            break;
        }
        case "FA_ErrorBarCode": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " هذا الباركود موجود من قبل يجب إدخال باركود مختلف لنفس الفرع - القسم - الإدارة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " You Must Insert Special BarCode For Same Branch , Department and Devison "
            break;
        }
        case "FA_Asset@Error@IntialAmoun": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تم إدخال القيمة الدفترية بشكل غير صحيح يرجى مراجعتها ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " [Intial Amount] has not Correct value "
            break;
        }
        case "FA_Asset@Error@PurchasingAmount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تم إدخال قيمة الشراء بشكل غير صحيح يرجى مراجعتها ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " [Purchasing Amount] has not Correct value "
            break;
        }
        case "FA_Asset@Error@Qty": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تم إدخال الكمية بشكل غير صحيح يرجى مراجعتها ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " [Qty] has not Correct value "
            break;
        }
        case "FA_Asset@Error@ScrappingAmount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تم إدخال القيمة التخريدية بشكل غير صحيح يرجى مراجعتها ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " [Scrapping Amount] has not Correct value "
            break;
        }
        case "FA_Asset@Error@OpeningDepreciationAmount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تم إدخال قيمة الإهلاك الإبتدائية بشكل غير صحيح يرجى مراجعتها ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " [Opening Depreciation Amount] has not Correct value "
            break;
        }
        case "SelectBranch": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " إختر الفرع";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Select Branch "
            break;
        }

        case "DateOverlap": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " هناك تداخل في التواريخ يجب ادخال فترات لا تتداخل مع فترة أخرة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Range of Date Is Overlaped "
            break;
        }

        case "tblDetailsError": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " يجب إدخال جميع الحقول في الجدول بالأسفل ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " You Must Insert All Values To Below Table "
            break;
        }
        case "Sorry": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " معذرة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Sorry "
            break;
        }
        case "PurchaseDateMust<StartDepreciationDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تاريخ بداية الاهلاك يجب ان يكون اكبر من او يساوي تاريخ الشراء ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Purshaing Date Must <= Start Depreciation Date "
            break;
        }

        case "Done": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " تم ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Done "
            break;
        }
        case "Areyousure?": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " هل أنت متأكد ؟ ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Are you sure ? "
            break;
        }
        case "TheTransactionWillBeDeletedPermanently": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " سوف يتم الغاء العملية نهائيا  ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "The Transaction Will Be Deleted Permanently "
            break;
        }
        case "Areyousure?": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " هل أنت متأكد ؟ ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Are you sure ? "
            break;
        }
        case "Yes,delete!": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = " نعم .. قم بالمسح ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Yes , delete!"
            break;
        }
        case "DateMust>LastDepreciationDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "التاريخ المدخل يجب ان يكون اكبر من تاريخ آخر إهــلاك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Date Must > Last Depreciation Date"
            break;
        }
        case "YourInsertedAmountCauseNegativeValue_D": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "عند مسح القيمة سوف تؤدى الى السحب بمقدار اكبر من القيمة الدفترية الحالية .....تؤدي الى قيمة سالبة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Deleted Amount Cause Negative Value"
            break;
        }
        case "YourInsertedQtyCauseNegativeValue_D": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "عند مسح الكمية سوف تؤدى الى السحب بمقدار اكبر من الكمية الحالية .....تؤدي الى كمية سالبة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Deleted Qty Cause Negative Value"
            break;
        }


        case "YourInsertedAmountCauseNegativeValue_U": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "هذا التعديل في القيمة سوف تؤدى الى السحب بمقدار اكبر من القيمة الدفترية الحالية .....تؤدي الى قيمة سالبة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Updated Amount Cause Negative Value"
            break;
        }
        case "YourInsertedQtyCauseNegativeValue_U": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "هذا التعديل في  الكمية سوف تؤدى الى السحب بمقدار اكبر من الكمية الحالية .....تؤدي الى كمية سالبة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Updated Qty Cause Negative Value"
            break;
        }

        case "YourInsertedAmountCauseNegativeValue_I": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "القيمة سوف تؤدى الى السحب بمقدار اكبر من القيمة الدفترية الحالية .....تؤدي الى قيمة سالبة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Updated Amount Cause Negative Value"
            break;
        }
        case "YourInsertedQtyCauseNegativeValue_I": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الكمية سوف تؤدى الى السحب بمقدار اكبر من الكمية الحالية .....تؤدي الى كمية سالبة ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Updated Qty Cause Negative Value"
            break;
        }
        case "ErrorNumeric": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب إدخال رقم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Insert Numeric Value"
            break;
        }
        case "YourTransactionIsInserted": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تم إدخال العملية بنجاح";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Your Transaction Is Inserted"
            break;
        }
        case "YourTransactionIsUpdate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تم تحديث العملية بنجاح";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Your Transaction Is Updated"
            break;
        }
        case "FromDateMust>ToDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الفترة غير صحيحة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "From Date Must > To Date "
            break;
        }
        case "FromDateMUST>ToDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "فترة التاريخ غير صحيحة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "From Date Must > To Date "
            break;
        }

        case "YouMustSelectBranches": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب أختيار فرع واحد على الأقل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Select at least one Branche"
            break;
        }
        case "YouMustSelectDepartments": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب أختيار قسم واحد على الأقل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Select at least one Department"
            break;
        }
        case "YouMustSelectDivisions": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب أختيار إدارة واحدة على الأقل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Select at least one Division"
            break;
        }
        case "YouMustSelectGroups": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب أختيار مجموعة واحدة على الأقل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Select at least one Group"
            break;
        }
        case "PrintBarCode": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "طباعة الباركود";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = " Print Barcode "
            break;
        }
        case "ErrorInExclusionType30": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "لم يتم إهلاك الفترة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "This Asset Is Not Depreciated";
            break;
        }
        case "YouMustInsertBranch": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب اختيار فرع";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Insert Branch";
            break;
        }
        case "YouMustInsertDivision": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب اختيار إدارة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Insert Division";
            break;
        }
        case "YouMustInsertBranch": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يجب اختيار قسم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "You Must Insert Department";
            break;
        }
        case "Operation": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "العملية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Operation";
            break;
        }
        case "Partner": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الشريك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Partner";
            break;
        }
        case "Inv.No": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم الفاتورة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Inv.No";
            break;
        }
        case "Charge": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "التغيير";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Charge";
            break;
        }
        case "Status": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الحالة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Status";
            break;
        }
        case "Total": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الإجمالي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total";
            break;
        }
        case "Cur": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "العملة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Cur";
            break;
        }
        case "AmountDue": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "م.المستحق";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "AmountDue";
            break;
        }
        case "PaidAmt": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "م.المدفوع";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "PaidAmt";
            break;
        }
        case "Remaining": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "المتبقي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Remaining";
            break;
        }
        case "PayFrom": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مدفوع من";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "PayFrom";
            break;
        }
        case "Ex.Rate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "معدل التغيير";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Ex.Rate";
            break;
        }
        case "AllPartners": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الشركــاء";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "All Partners";
            break;
        }
        case "AllPartnerTypes": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "أنواع الشركــاء";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "All Partner Types";
            break;
        }
        case "CostCenters": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مراكز التكلفة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Cost Centers";
            break;
        }
        case "Inv.Type": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع الفاتورة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Inv.Type";
            break;
        }
        case "ChargeType": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع الشحن";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "ChargeType";
            break;
        }
        case "Quantity": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الكمية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Quantity";
            break;
        }
        case "TaxType": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع الضريبة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "TaxType";
            break;
        }
        case "TaxAmt": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "قيمة الضريبة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "TaxAmt";
            break;
        }
        case "TotalAmount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الإجمالي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "TotalAmount";
            break;
        }
        case "Order": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الطلب";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Order";
            break;
        }
        case "UnitPrice": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "سعر الوحدة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "UnitPrice";
            break;
        }
        case "Auto": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "أوتوماتيك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Auto";
            break;
        }
        case "PrintJV": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "طباعة القيد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Print JV";
            break;
        }
        case "JournalVouchers": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "القيود اليومية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Journal Vouchers";
            break;
        }
        case "JvNo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم القيد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Jv No";
            break;
        }
        case "UserName": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إسم المستخدم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "UserName";
            break;
        }
        case "JVDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تاريخ القيد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "JV Date";
            break;
        }
        case "JournalType": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع اليومية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Journal Type";
            break;
        }
        case "JVType": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع القيد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "JV Type";
            break;
        }
        case "ReceiptNo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم الإيصال";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Receipt No";
            break;
        }
        case "ReceiptDate1": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تاريخ الإيصال";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Receipt Date";
            break;
        }
        case "Notes": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الملاحظات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Notes";
            break;
        }
        case "Account": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الحساب";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Account";
            break;
        }
        case "SubAccount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الحساب التحليلي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Sub Account";
            break;
        }
        case "CostCenter": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مركز التكلفة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Cost Center";
            break;
        }
        case "Debit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مدين";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Debit";
            break;
        }
        case "Credit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "دائن";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Credit";
            break;
        }
        case "LocalDebit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مبلغ مدين";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Local Debit";
            break;
        }
        case "LocalCredit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مبلغ دائن";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "LocalCredit";
            break;
        }
        case "Description": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الوصف";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Description";
            break;
        }
        case "Documented": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "موثق";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Documented";
            break;
        }
        case "DocumentsInfo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "المستندات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Documents Info";
            break;
        }
        case "PreparedBy": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "أُعدت بواسطة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Prepared By";
            break;
        }
        case "ReviewedBy": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تمت المراجعة بواسطة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Reviewed By";
            break;
        }
        case "ApprovedBy": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تم الإعتماد بواسطة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Approved By";
            break;
        }
        case "PrintedOn": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تمت الطباعة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Printed On";
            break;
        }
        case "JournalVouchersTotals": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي القيود اليومية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Journal Vouchers Totals";
            break;
        }

        case "Code": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الكود";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Code";
            break;
        }
        case "VoucherType": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع القيد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Voucher Type";
            break;
        }
        case "AccountName": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الحساب";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Account Name";
            break;
        }
        case "BankName": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إسم البنك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Bank Name";
            break;
        }
        case "DueDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تاريخ الإستحقاق";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Due Date";
            break;
        }
        case "ChequeNo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم الشيك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Cheque No";
            break;
        }
        case "ChequesStatus": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "حالة الشيك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Cheques Status";
            break;
        }
        case "BankAcc": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "حساب البنك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Bank Acc";
            break;
        }
        case "Currency": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "العملة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Currency";
            break;
        }
        case "No": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الرقم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "No.";
            break;
        }
        case "Date": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "التاريخ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Date";
            break;
        }
        case "TransType": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع الحركة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Trans Type";
            break;
        }
        case "ChargedPerson": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "المسلم / المستلم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Charged Person";
            break;
        }
        case "Balance": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الرصيد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Balance";
            break;
        }
        case "Bank": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "البنك :";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Bank :";
            break;
        }
        case "TotalDebitAndCredit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي المدين والدائن :";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total Debit And Credit :";
            break;
        }
        case "EndBalance": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الرصيد الختامي :";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "End Balance :";
            break;
        }
        case "BankJournal": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يومية بنك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Bank Journal";
            break;
        }
        case "Safe": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الخزينة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Safe";
            break;
        }
        case "SafeJournal": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يومية خزينة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Safe Journal";
            break;
        }
        case "BankJournal": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "يومية بنك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Bank Journal";
            break;
        }
        case "Receiver": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "المستلم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Receiver";
            break;
        }
        case "Name": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الإسم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Name";
            break;
        }
        case "Signature": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "التوقيع";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Signature";
            break;
        }
        case "TOTALAMOUNTONLY": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي المبلغ فقط : ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "TOTAL AMOUNT ONLY : ";
            break;
        }

        case "Amount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "المبلغ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Amount";
            break;
        }
        case "PaymentDetails": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تفاصيل الدفع: ";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Payment Details: ";
            break;
        }
        case "OperationCode": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "كود العملية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Operation Code";
            break;
        }
        case "Operations": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "العمليات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Operations";
            break;
        }
        case "General": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "بيانات العملية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "General";
            break;
        }
        case "Partners": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الشركاء";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Partners";
            break;
        }
        case "Packages": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "بيانات المحتوي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Packages";
            break;
        }
        case "Vehicles": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "المركبات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Vehicles";
            break;
        }
        case "Payables": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "المصروفات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Payables";
            break;
        }
        case "Receivables": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الخدمات المقدمة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Receivables";
            break;
        }
        case "Invoices": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الفواتير";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Invoices";
            break;
        }
        case "C/D Notes": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إشعار مدين/دائن";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "C/D Notes";
            break;
        }
        case "Archiving": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الأرشفة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Archiving";
            break;
        }
        case "Tracking": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "التحديثات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Tracking";
            break;
        }
        case "Chat": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "محادثة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Chat";
            break;
        }
        case "Receptionists": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "موظفي الإستقبال";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Receptionists";
            break;
        }
        case "Route&Serv.": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مسار الرحلة والخدمات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Route&Serv.";
            break;
        }
        case "Draft Inv.": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "فاتورة مبدئية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Draft Inv.";
            break;
        }
        case "Docs Out": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الوثائق";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Docs Out";
            break;
        }
        case "Purchase.Inv": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "فاتورة المشتريات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Purchase.Inv";
            break;
        }
        case "Send": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إرسال";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Send";
            break;
        }

        case "Only": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "فقط";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Only";
            break;
        }
        case "TotalAfterTax": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الإجمالي بعد الضريبة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total After Tax";
            break;
        }
        case "ReceiptDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تاريخ الإستلام";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Receipt Date";
            break;
        }
        case "Payment": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الدفع";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Payment";
            break;
        }
        case "SalesItemsTotals": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "أصناف المبيعات (الإجمالي)";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Sales Items (Totals)";
            break;
        }
        case "Item": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الصنف";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Item";
            break;
        }
        case "Qty": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الكمية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Qty";
            break;
        }
        case "AveragePrice": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "متوسط السعر";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Average Price";
            break;
        }
        case "SalesItemsFollowUp": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "متابعة أصناف المبيعات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Sales Items Follow-Up";
            break;
        }
        case "ItemsSalesFollowUp": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "متابعة أصناف المبيعات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Items Sales Follow-Up";
            break;
        }
        case "Customer": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "العميل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Customer";
            break;
        }
        case "Unit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الوحدة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Unit";
            break;
        }
        case "UnitPrice": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "سعر الوحدة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "UnitPrice";
            break;
        }
        case "InvoiceNo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم الفاتورة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Invoice No";
            break;
        }
        case "InvDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تاريخ الفاتورة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Inv.Date";
            break;
        }
        case "SalesInvoicesFollowUpItems": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "متابعة أصناف فواتير المبيعات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Sales Invoices Follow-Up Items";
            break;
        }
        case "InvNo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم الفاتورة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Inv.No";
            break;
        }
        case "TotalItems": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي الأصناف";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total Items";
            break;
        }
        case "TotalServices": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي الخدمات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "TotalServices";
            break;
        }
        case "TotalExpenses": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي المصروفات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total Expenses";
            break;
        }
        case "TotalTaxes": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي الضرائب";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "TotalTaxes";
            break;
        }
        case "TotalDiscount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إجمالي الخصم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total Discount";
            break;
        }
        case "TotalGross": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الإجمالي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Total Gross";
            break;
        }
        case "DetailsNo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم التفاصيل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Details No";
            break;
        }
        case "ItemName": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إسم الصنف";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Item Name";
            break;
        }
        case "SalesItemsFollowUpTotal": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "متابعة أصناف المبيعات (الإجمالي)";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Sales Items Follow-Up (Total)";
            break;
        }
        case "NET": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الصافي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "NET";
            break;
        }
        case "Taxes": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الضرائب";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Taxes";
            break;

        }
        case "Discount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الخصم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Discount";
            break;
        }
        case "SalesInvoicesFollowUp": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "متابعة فواتير المبيعات";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Sales Invoices Follow-Up";
            break;
        }
        case "SupplierName": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إسم المورد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Supplier Name";
            break;
        }
        case "Mail": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إرسال بريد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Mail";
            break;
        }
        case "Print Inv.": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "طباعة فاتورة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Print Inv.";
            break;
        }
        case "Type": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "النوع";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Type";
            break;
        }
        case "Select Vessel": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إختر السفينة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Select Vessel";
            break;
        }
        case "Select Trucker": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "مقاول النقل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Select Trucker";
            break;
        }
        case "Container Type": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "نوع الحاوية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Container Type";
            break;
        }
        case "Container Number": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم الحاوية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Container Number";
            break;
        }
        case "Carrier Seal": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "ختم الناقل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Carrier Seal";
            break;
        }
        case "TareWt(KG)": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الوزن الفارغ(كجم)";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "TareWt(KG)";
            break;
        }
        case "Net Wt(KG)": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الوزن الصافي(كجم)";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Net Wt(KG)";
            break;
        }
        case "GrossWt(KG)": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الوزن الإجمالي(كجم)";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "GrossWt(KG)";
            break;
        }
        case "VGM(KG)": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "التحقق من الكتلة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "VGM(KG)";
            break;
        }
        case "Vol.(CBM)": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "وحدة التخزين";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Vol.(CBM)";
            break;
        }
        case "Profit": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الربح";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Profit";
            break;
        }
        case "Supplier": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "المورد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Supplier";
            break;
        }
        case "SupplierSiteID": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "هوية شبكة المورد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "SupplierSiteID";
            break;
        }
        case "U.Price": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "سعر الوحدة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "U.Price";
            break;
        }
        case "Actual Cost": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "التكلفة الفعلية";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Actual Cost";
            break;
        }
        case "InitSale": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "سعر البيع";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "InitSale";
            break;
        }
        case "SupInvNo": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم فاتورة المورد";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "SupInvNo";
            break;
        }
        case "Rec.No": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رقم التسجيل";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Rec.No";
            break;
        }
        case "IssueDate": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "تاريخ الإصدار";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "IssueDate";
            break;
        }
        case "Upload": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "رفع";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Upload";
            break;
        }
        case "SelectCostCenter": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "اختار مركز التكلفة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Select Cost Center";
            break;
        }
        case "Deduction": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "الخصم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Deduction";
            break;
        }
        case "DeductionAmt": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "قيمة الخصم";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "DeductionAmt";
            break;
        }
        case "SelectSafe": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إختر الخزينة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Select Safe";
            break;
        }
        case "SelectBank": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إختر البنك";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Select Bank";
            break;
        }
        case "SelectCostCenter": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إختر مركز التكلفة";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Select Cost Center";
            break;
        }
        case "SelectSubAccount": {
            if ($("#hf_ChangeLanguage").val() == "ar")
                strText = "إختر الحساب التحليلي";
            else if ($("#hf_ChangeLanguage").val() == "en")
                strText = "Select Sub Account";
            break;
        }


    }
    return strText;
}


function LoadReadyCustomers() {
    if (IsNull(pDefaults.ShowUserSalesmen, "false") == true) {
        CallGETFunctionWithParameters("/api/Customers/LoadAllWithMinimalColumns"
            , {
                pWhereClauseWithMinimalColumns: ($("#sp-LoginName").text() == "BG EGYPT" ? "WHERE Name=N'BG EGYPT'" : "WHERE 1=1" + " AND IsInActive=0 ")
                , pOrderBy: "Name"
            }
            , function (pData) {
                FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "hReadySlCustomers", pData[0], null);
            }
            , null);
    }

}



//
// Load User Controls According to Clicked Link
function LoadViews(pControlID, pRoleID, pUserID, pWhereClauseOverwriting, pQuotationRouteRequestID) {
    debugger;
    HideliChequeAlarm();
    glbCallingControl = pControlID;
    //if (pControlID == "Operations" || pControlID == "Quotatations")
    if (pControlID == "Operations")
        strBindTableRowsFunctionName = pControlID + "Management_BindTableRows";
    else
        strBindTableRowsFunctionName = pControlID + "_BindTableRows";
    $("#div-content").scrollTop(0);
    // Hide The Dashboard DIV Content
    $("#div-main-content").hide();
    //LoadReadyCustomers();
    switch (pControlID) {
        //// Load Default User Control
        //case "Operations":
        //    LoadView("/Operations/OperationsDemo", "div-content", null);
        //    break;
        case "hl-homepage":
        //{
        //    window.location.href = window.location.origin + '/Home';
        //}
        case "Dashboard": {
            debugger;
            //window.open(window.location.href);
            if ($("#sp-LoginName").text() != "BG EGYPT") {
                UnLoadOperationsSubMenu();
                Operations_ClearFilters();
                Quotations_ClearFilters();
                $("#hl-menu-Dashboard").parent().siblings().removeClass("active");
                //$("#hl-menu-Dashboard").parent().addClass("active");
                LoadView("/Home/Dashboard", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/Dashboard/Dashboard.js?' + glbVersion, function () {
                        Dashboard_FillCharts();
                    });
                });
            }
            break;
        }
        case "LocalEmails": {
            debugger;
            //window.open(window.location.href);
            UnLoadOperationsSubMenu();
            Operations_ClearFilters();
            Quotations_ClearFilters();
            $("#hl-menu-LocalEmails").parent().siblings().removeClass("active");
            //$("#hl-menu-Dashboard").parent().addClass("active");
            strBindTableRowsFunctionName = "LocalEmails_BindTableRows";
            strLoadWithPagingFunctionName = "/api/LocalEmails/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            //var pWhereClause = " WHERE IsDeleted=0 AND (ReceiverUserID = " + $("#hLoggedUserID").val() +" OR SenderUserID = " + $("#hLoggedUserID").val() + ")";
            //var pWhereClause = " WHERE IsDeleted=0 AND ReceiverUserID = " + $("#hLoggedUserID").val(); //Default is the received mails
            //var pWhereClause = (pUserID == undefined 
            //                    ? (" WHERE ReceiverUserID = " + $("#hLoggedUserID").val() + "\n")//(" WHERE Receivers LIKE N'%" + $("#hLoggedUserNameNotLogin").val() + "%' ") //Default is the received mails
            //                    : (" WHERE ReceiverUserID = " + $("#hLoggedUserID").val() + " AND ID = " + pUserID)
            //                   );

            var pWhereClause = (pUserID == undefined
                ? (" where  (" + $("#hLoggedUserID").val() + " IN(SELECT CONVERT(INT , value ) from [fn_split]( vwEmailGroup.RelatedUsersIDs , ',') ) )")//(" WHERE Receivers LIKE N'%" + $("#hLoggedUserNameNotLogin").val() + "%' ") //Default is the received mails
                : (" where  (" + $("#hLoggedUserID").val() + " IN(SELECT CONVERT(INT , value ) from [fn_split]( vwEmailGroup.RelatedUsersIDs , ',') ) )" + " AND ( ID = (select top(1) IsNull(e.ParentEmailID , e.ID ) from dbo.Email e where e.ID = " + pUserID + " )  )")
            );





            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy, pIsReceived: true }
            LoadView("/LocalEmails/LocalEmails", "div-content", function () {
                if ($("#hDefaultUnEditableCompanyName").val() == "KDS" || $("#hDefaultUnEditableCompanyName").val() == "NEW") {
                    //SelectOperationTypeModal
                    $("#spanCbIsHouse").text("B/L");
                    $("#spanCbIsMaster").text("Full Vessel");
                }
                LoadView("/MasterData/ModalCheckboxesList", "div-content", null, null, null, true);
                $.getScript(strServerURL + '/Scripts/LocalEmails/LocalEmails.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            LocalEmails_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 2/*pCodeOrName*/, "All Users", "slUser", pData[2], null);

                            $('#slOperationFilterEmail').css({ 'width': '100%' }).select2();
                            $('#slOperationFilterEmail').trigger("change");

                            $('#slRegardingOperation').css({ 'width': '100%' }).select2();
                            $('#slRegardingOperation').trigger("change");
                            $("div[tabindex='-1']").removeAttr('tabindex');
                            if (pUserID != undefined) {
                                $('#slEmailOrAlarm').val("");
                            }


                        });
                });
                CallGETFunctionWithParameters("/api/Operations/LoadOperationsToRestoreInvoices"
                    , { pPageSize: 99999, pWhereClauseToGetOperationsToRestoreInvoices: "WHERE EffectiveOperationCode IS NOT NULL  AND BLType <> 2 AND OperationStageID NOT IN (" + ClosedQuoteAndOperStageID + "," + CancelledQuoteAndOperStageID + ") AND CreationDate > DATEADD(mm,DATEDIFF(mm,0,GETDATE())-12,0)", pOrderBy: "ID DESC" }
                    , function (pData) {
                        FillListFromObject(null, 13, "<--Select-->", "slOperationFilterEmail", pData[0], function () { $("#slRegardingOperation").html($("#slOperationFilterEmail").html()); });
                    }
                    , null);
            });
            break;
        }

        case "MasterData": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", (pDefaults.UnEditableCompanyName == "BAH" ? "WarehousingMasterData" : "Locations"), function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });

            });
            break;
        }

        case "CustomsClearance": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 2 ", "CustomsClearance", function () {
                });
            });
            break;
        }

        case "WarehousingMasterData":
            {
                LoadView("/Home/Groups", "div-content", function () {
                    FillGroups(" where ParentGroupID = 2 ", "WarehousingMasterData", function () {
                    });
                });
                break;
            }

        case "ContainerTrackingGroup":
        case "ContainerTrackingTab": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 8 ", "ContainerTrackingTab", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "XMLTab": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 8 ", "XML", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }

        case "VehicleModule": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 13 ", "VehicleTransaction", function () {
                });
            });
            break;
        }
        case "VehicleReportTab": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 13 ", "VehicleReportTab", function () {
                });
            });
            break;
        }
        case "Pricing": //tab
        case "PricingModule": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 10 ", "PricingTab", function () {
                });
            });
            break;
        }
        case "RequestedServiceGroup": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 59 ", "RequestedServiceTab", function () {
                });
            });
            break;
        }
        case "Administration": {
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 7 ", "Security", function () {
                });
            });
            break;
        }
        case "AccountsReceivable":
        case "OperAcc": {
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 9 ", "AccountsReceivable", function () {
                });
            });
            break;
        }
        case "AccountsPayable": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 9 ", "AccountsPayable", function () {
                });
            });
            break;
        }
        case "Approvals": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 9 ", "Approvals", function () {
                });
            });
            break;
        }
        case "OpenBalance": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 9 ", "OpenBalance", function () {
                });
            });
            break;
        }
        //By commenting the next 2 cases i disabled security for Operations and Quotations till i make my the special security for them
        case "Quotations": { //the same name like in tabs so not repeated in breadcrump region, but in forms its Quotations(plural)
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 3 ", "Quotations", function () {
                });
            });
            break;
        }
        //case "Operations": { //the same name like in tabs so not repeated in breadcrump region, but in forms its Operations(plural)
        //    UnLoadOperationsSubMenu();
        //    LoadView("/Home/Groups", "div-content", function () {
        //        FillGroups(" where ParentGroupID = 4 ", "Operations", function () {
        //        });
        //    });
        //    break;
        //}
        case "3PL":
        case "Warehousing": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 20 ", "WarehousingTransactions", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "WarehousingTransactions": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 20 ", "WarehousingTransactions", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "WarehousingReports": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 20 ", "WarehousingReports", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "AccountingMasterData":
        case "Accounting": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 11 ", "AccountingMasterData", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });

            });
            break;
        }
        case "AccountingTransactions": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 11 ", "AccountingTransactions", function () {
                });

            });
            break;
        }
        case "AccountingReports": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 11 ", "AccountingReports", function () {
                });

            });
            break;
        }
        case "ReceiptsAndPaymentsGroup":
        case "ReceiptsAndPaymentsTransactions": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "RecAndPayTransactions", function () {
                });
            });
            break;
        }
        case "ReceiptsAndPaymentsApprovingAndPosting": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "RecAndPayApprovingAndPosting", function () {
                });
            });
            break;
        }
        case "ReceiptsAndPaymentsReports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "RecAndPayReports", function () {
                });
            });
            break;
        }
        case "ShipLink": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "ShipLink", function () {
                });
            });
            break;
        }
        case "admapp": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 7 ", "admapp", function () {
                });
            });
            break;
        }
        case "ShipLinkMelk": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "ShipLinkMelk", function () {
                });
            });
            break;
        }
        case "ShipLinkEGL": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "ShipLinkEGL", function () {
                });
            });
            break;
        }
        case "YardLink": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "YardLink", function () {
                });
            });
            break;
        }
        case "YardLinkTank": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "YardLinkTank", function () {
                });
            });
            break;
        }
        case "RecAndPaySettlements": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "RecAndPaySettlements", function () {
                });
            });
            break;
        }
        case "Integration": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 12 ", "Integration", function () {
                });
            });
            break;
        }
        case "Statistics"://its breadcrump, but because its default so i put it here
        case "Reports": { //the same name like in tabs so not repeated in breadcrump region, but in forms its Reports(plural)
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 6 ", "Statistics", function () {
                });
            });
            break;
        }

        case "RealEstate":
        case "RE_MasterData": {
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 51 ", "RE_MasterData", function () {
                });
            });
            break;
        }

        case "RE_Transactions": {
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 51 ", "RE_Transactions", function () {
                });
            });
            break;
        }

        case "RE_Reports": {
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 51 ", "RE_Reports", function () {
                });
            });
            break;
        }

        /* region breadcrump*/
        case "Locations": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", "Locations", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });

            });
            break;
        }
        case "Invoicing": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Invoicing").removeClass("hide"); $("#tabInvoicing").parent().children().removeClass("btn-warning"); $("#tabInvoicing").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", "Invoicing", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "TreasuriesAndBanks": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-TreasuriesAndBanks").removeClass("hide"); $("#tabTreasuriesAndBanks").parent().children().removeClass("btn-warning"); $("#tabTreasuriesAndBanks").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", "TreasuriesAndBanks", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "Partners": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Partners").removeClass("hide"); $("#tabPartners").parent().children().removeClass("btn-warning"); $("#tabPartners").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", "Partners", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "Others": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Others").removeClass("hide"); $("#tabOthers").parent().children().removeClass("btn-warning"); $("#tabOthers").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", "Others", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }

        case "Settings": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Settings").removeClass("hide"); $("#tabSettings").parent().children().removeClass("btn-warning"); $("#tabSettings").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 7 ", "Settings", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "Logs": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Logs").removeClass("hide"); $("#tabLogs").parent().children().removeClass("btn-warning"); $("#tabLogs").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 7 ", "Logs", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "Miscellaneous": {
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Miscellaneous").removeClass("hide"); $("#tabMiscellaneous").parent().children().removeClass("btn-warning"); $("#tabMiscellaneous").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 7 ", "Miscellaneous", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "DisbursementLink": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 7 ", "DisbursementLink", function () {
                });
            });
            break;
        }
        case "AdministrationSecurity":
        case "Security": {
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Security").removeClass("hide"); $("#tabSecurity").parent().children().removeClass("btn-warning"); $("#tabSecurity").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 7 ", "Security", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "Statistics": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 6 ", "Statistics", function () {
                });

            });
            break;
        }
        case "OperAccountingReports": {
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 6 ", "OperAccountingReports", function () {
                });

            });
            break;
        }
        case "Quotes": {
            Operations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 6 ", "Quotes", function () {
                });

            });
            break;
        }
        /* EOF region breadcrump*/
        //region Locations/Regions
        case "Regions": {

            strLoadWithPagingFunctionName = "/api/Regions/LoadWithPaging";
            LoadView("/MasterData/Regions", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Locations/Regions.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Regions_BindTableRows(pTabelRows); });
                });
            },
                function () { Regions_ClearAllControls(); },
                function () { Regions_DeleteList(); });
            break;
        }

        //region Locations/Countries
        case "WarehousingCountry":
        case "Countries": {

            strLoadWithPagingFunctionName = "/api/Countries/LoadWithPaging";

            LoadView("/MasterData/Countries", "div-content", function () {

                if (pControlID == "Countries") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Locations')");
                    $("#liTabName").text("Locations");
                    $("#liTabName").attr("onclick", "LoadViews('Locations')");
                    //$("#h3Allocation").text("Receivables Allocations"); $("#h3Allocation").addClass("static-text-primary");
                    //$("#h3ModalLblAllocationType").html("Receivables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                    //$("#h3ModalLblAllocationType").addClass("static-text-primary");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                    //$("#h3Allocation").text("Payables Allocations"); $("#h3Allocation").addClass("static-text-danger");
                    //$("#h3ModalLblAllocationType").html("Payables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-danger"></label>');
                    //$("#h3ModalLblAllocationType").addClass("static-text-danger");
                }
                //$("#liAccountAllocationType").text($("#h3Allocation").text());

                $.getScript(strServerURL + '/Scripts/MasterData/Locations/countries.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Countries_BindTableRows(pTabelRows); });
                });
            },
                function () { Countries_ClearAllControls(); },
                function () { Countries_DeleteList(); });
            break;
        }

        //region Locations/Cities
        case "Cities": {

            strLoadWithPagingFunctionName = "/api/Cities/LoadWithPaging";

            LoadView("/MasterData/Cities", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Locations/Cities.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Cities_BindTableRows(pTabelRows); });
                });
            },
                function () { Cities_ClearAllControls(); },
                function () { Cities_DeleteList(); });
            break;
        }
        case "Rates": {

            strLoadWithPagingFunctionName = "/api/Rates/LoadWithPaging";

            LoadView("/MasterData/Rates", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Locations/Rates.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10,
                        function (pTabelRows) {
                            debugger;
                            LoadAllData();
                            Rates_BindTableRows(pTabelRows);
                        });
                });
            },
                function () { Rates_ClearAllControls(); },
                function () { Rates_DeleteList(); });
            break;
        }
        //region Locations/Ports

        case "Factories":
        case "WarehousingCity":
        case "Ports": {
            strLoadWithPagingFunctionName = "/api/Ports/LoadWithPaging";
            strBindTableRowsFunctionName = "Ports_BindTableRows";
            LoadView("/MasterData/Ports", "div-content", function () {
                if (pControlID == "Factories") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Locations')");
                    $("#liTabName").text("Locations");
                    $("#liTabName").attr("onclick", "LoadViews('Locations')");
                    $(".classShowForFactory").removeClass("hide");
                    $(".classHideForFactory").addClass("hide");
                    glbCallingControl = "Factories";
                    $($('#ul-breadcrumb li')[3]).text("FACTORIES");
                    $("h3").text("FACTORIES");
                    $("#slCountry").attr("onchange", "Ports_FillFactoryCity(0, null);");
                    $("#txtCode").attr("placeholder", "Auto");
                    //$('#slCountry').attr("data-required", "false");

                }
                else {
                    if (pControlID == "Ports") {
                        $("#liGroupName").text("Master Data");
                        $("#liGroupName").attr("onclick", "LoadViews('Locations')");
                        $("#liTabName").text("Locations");
                        $("#liTabName").attr("onclick", "LoadViews('Locations')");
                        //$("#h3Allocation").text("Receivables Allocations"); $("#h3Allocation").addClass("static-text-primary");
                        //$("#h3ModalLblAllocationType").html("Receivables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                        //$("#h3ModalLblAllocationType").addClass("static-text-primary");
                    }
                    else { //Warehousing
                        $("#liGroupName").text("Warehousing");
                        $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                        $("#liTabName").text("Master Data");
                        $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                        //$("#h3Allocation").text("Payables Allocations"); $("#h3Allocation").addClass("static-text-danger");
                        //$("#h3ModalLblAllocationType").html("Payables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-danger"></label>');
                        //$("#h3ModalLblAllocationType").addClass("static-text-danger");
                    }
                }

                //$("#liAccountAllocationType").text($("#h3Allocation").text());

                $.getScript(strServerURL + '/Scripts/MasterData/Locations/Ports.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    Countries_GetList(null, null);
                    //glbCallingControl = "FACTORIES"
                    if (pControlID == "Factories") {
                        glbCallingControl = "Factories";
                        strLoadWithPagingFunctionName = "/api/Ports/LoadWithPaging_Factories";
                    }
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Ports_BindTableRows(pTabelRows); });
                });
            },
                function () { Ports_ClearAllControls(); },
                function () { Ports_DeleteList(); });
            break;
        }

        case "CityRegions": {
            strLoadWithPagingFunctionName = "/api/Ports/LoadWithPaging";
            strBindTableRowsFunctionName = "Ports_BindTableRows";
            LoadView("/MasterData/CityRegions", "div-content", function () {
                if (pControlID == "CityRegions") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Others')");
                    $("#liTabName").text("Locations");
                    $("#liTabName").attr("onclick", "LoadViews('Others')");
                    $(".classShowForFactory").removeClass("hide");
                    $(".classHideForFactory").addClass("hide");
                    glbCallingControl = "Factories";
                    $($('#ul-breadcrumb li')[3]).text("Regions");
                    $("h3").text("Regions");
                    $("#slCountry").attr("onchange", "Ports_FillFactoryCity(0, null);");
                    $("#txtCode").attr("placeholder", "Auto");
                    //$('#slCountry').attr("data-required", "false");

                }
                $.getScript(strServerURL + '/Scripts/MasterData/Locations/CityRegions.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    Countries_GetList(null, null);
                    //glbCallingControl = "FACTORIES"
                    if (pControlID == "Factories") {
                        glbCallingControl = "Factories";
                        strLoadWithPagingFunctionName = "/api/Ports/LoadWithPaging_Factories";
                    }
                    $("#txt-Search").val('Region');
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Ports_BindTableRows(pTabelRows); });
                });
            },
                function () { Ports_ClearAllControls(); },
                function () { Ports_DeleteList(); });
            break;
        }
        case "Runners":
            {
                debugger;
                strBindTableRowsFunctionName = "Custody_BindTableRows";
                strLoadWithPagingFunctionName = "/api/Custody/LoadWithPaging";
                LoadView("/MasterData/Runners", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/MasterData/BanksAccountsAndTreasuries/Runners.js?' + glbVersion, function () {
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Custody_BindTableRows(pTabelRows); });
                    });
                    CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                        , { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                        , function (pData) {
                            var pClientGroup = pData[3];
                            var pSupplierGroup = pData[4];
                            var pClientAndSupplierGroup = pData[5];
                            var pEmployeeGroup = pData[6];
                            var pUser = pData[9];

                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pEmployeeGroup, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slUser", pUser, null);

                            $("#slSubAccount").html('<option value=0>' + TranslateString("AUTOGENERATED") + '</option>');

                            CallGETFunctionWithParameters("/api/Cities/LoadAll", {
                                pWhereClause: "WHERE CountryID=" + pDefaults.DefaultCountryID + "  ORDER BY Name"
                            }
                                , function (pData) {
                                    FillListFromObject(0, 2, TranslateString("SelectFromMenu"), "slCity", pData[0], null);
                                    FadePageCover(false);
                                }
                                , null);
                        }
                        , null);
                    if (IsAccountingActive)
                        $(".classAccountingOption").removeClass("hide");
                    else
                        $(".classAccountingOption").addClass("hide");
                },
                    function () { Custody_ClearAllControls(); },
                    function () { Custody_DeleteList(); });
                break;
            }
        //region Locations/Customers
        case "WarehousingCustomer":
        case "Customers": { // PartnerTypeID = 1

            $.getScript(strServerURL + '/Scripts/MasterData/Partners/Customers.js?' + glbVersion, function () { Customers_Initialize(); });
            break;
        }

        //region Locations/CustomersTemp
        case "CustomersTemp": { // PartnerTypeID = 2
            $.getScript(strServerURL + '/Scripts/MasterData/Partners/CustomersTemp.js?' + glbVersion, function () { CustomersTemp_Initialize(); });
            break;
        }

        //region Locations/Agents
        case "Agents": { // PartnerTypeID = 2
            $.getScript(strServerURL + '/Scripts/MasterData/Partners/Agents.js?' + glbVersion, function () { Agents_Initialize(); });
            break;
        }

        //region Locations/ShippingAgents
        case "ShippingAgents": {  // PartnerTypeID = 3
            $.getScript(strServerURL + '/Scripts/MasterData/Partners/ShippingAgents.js?' + glbVersion, function () { ShippingAgents_Initialize(); });
            break;
        }

        //region Locations/CustomsClearanceAgents
        case "CustomsClearanceAgents": { // PartnerTypeID = 4
            $.getScript(strServerURL + '/Scripts/MasterData/Partners/CustomsClearanceAgents.js?' + glbVersion, function () { CustomsClearanceAgents_Initialize(); });
            break;
        }

        //region Locations/ShippingLines
        case "ShippingLines": { // PartnerTypeID = 5
            $.getScript(strServerURL + '/Scripts/MasterData/Partners/ShippingLines.js?' + glbVersion, function () { ShippingLines_Initialize(); });
            break;
        }

        //region Locations/Airlines
        case "Airlines": { // PartnerTypeID = 6
            $.getScript(strServerURL + '/Scripts/MasterData/Partners/Airlines.js?' + glbVersion, function () { Airlines_Initialize(); });
            break;
        }

        //region Locations/Truckers
        case "Truckers": { // PartnerTypeID = 7
            $.getScript(strServerURL + '/Scripts/MasterData/Partners/Truckers.js?' + glbVersion, function () { Truckers_Initialize(); });
            break;
        }

        //region Locations/Suppliers
        case "Suppliers": { // PartnerTypeID = 8
            $.getScript(strServerURL + '/Scripts/MasterData/Partners/Suppliers.js?' + glbVersion, function () { Suppliers_Initialize(); });
            break;
        }

        //region Invoicing/CreditCardTypes
        case "CreditCardTypes": {

            strLoadWithPagingFunctionName = "/api/CreditCardTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/CreditCardTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/CreditCardTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CreditCardTypes_BindTableRows(pTabelRows); });
                });
            },
                function () { CreditCardTypes_ClearAllControls(); },
                function () { CreditCardTypes_DeleteList(); });
            break;
        }
        //region Invoicing/CustomerCreditLimit
        case "CustomerCreditLimit": {

            strLoadWithPagingFunctionName = "/api/CustomerCreditLimit/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/CustomerCreditLimit", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/CustomerCreditLimit.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CustomerCreditLimit_BindTableRows(pTabelRows); });
                });
            },
                function () { CustomerCreditLimit_ClearAllControls(); },
                function () { CustomerCreditLimit_DeleteList(); });
            break;
        }
        //region Invoicing/PaymentTerms
        case "PaymentTerms": {

            strLoadWithPagingFunctionName = "/api/PaymentTerms/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/PaymentTerms", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/PaymentTerms.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { PaymentTerms_BindTableRows(pTabelRows); });
                });
            },
                function () { PaymentTerms_ClearAllControls(); },
                function () { PaymentTerms_DeleteList(); });
            break;
        }

        //region Invoicing/PurchaseItem
        case "WarehousingProduct":
        case "PurchaseItem": {
            $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/PurchaseItem.js?' + glbVersion, function () { PurchaseItem_Initialize(); });
            break;
        }

        //region Invoicing/InvoiceTypes
        case "InvoiceTypes": {
            strLoadWithPagingFunctionName = "/api/InvoiceTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/InvoiceTypes", "div-content", function () {
                LoadView("/MasterData/ModalCheckboxesList", "div-content", null, null, null, true);
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/InvoiceTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { InvoiceTypes_BindTableRows(pTabelRows); });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { InvoiceTypes_ClearAllControls(); },
                function () { InvoiceTypes_DeleteList(); });
            break;
        }

        //region Invoicing/Incoterms
        case "Incoterms": {

            strLoadWithPagingFunctionName = "/api/Incoterms/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/Incoterms", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/Incoterms.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Incoterms_BindTableRows(pTabelRows); });
                });
            },
                function () { Incoterms_ClearAllControls(); },
                function () { Incoterms_DeleteList(); });
            break;
        }
        //    //region Invoicing/Currencies
        //case "Currencies": {

        //    strLoadWithPagingFunctionName = "/api/Currencies/LoadWithPaging";
        //    //the first parameter in the LoadView() fn. is the route in the RouteConfig
        //    LoadView("/MasterData/Currencies", "div-content", function () {
        //        $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/Currencies.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
        //            LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Currencies_BindTableRows(pTabelRows); });
        //        });
        //    },
        //        function () { Currencies_ClearAllControls(); },
        //        function () { Currencies_DeleteList(); });
        //    break;
        //}
        case "WarehousingCurrency":
        case "Currencies": {
            $("#hl-menu-MasterData").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Currencies_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Currencies/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Code";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/MasterData/Currencies", "div-content", function () {

                if (pControlID == "Currencies") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Invoicing')");
                    $("#liTabName").text("Invoicing");
                    $("#liTabName").attr("onclick", "LoadViews('Invoicing')");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                }
                //$("#liAccountAllocationType").text($("#h3Allocation").text());

                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/Currencies.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            Currencies_BindTableRows(JSON.parse(pData[0]));
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Currencies_ClearAllControls(); },
                function () { Currencies_DeleteList(); });
            break;
        }
        case "TaxeTypes": {
            $("#hl-menu-MasterData").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "TaxeTypes_BindTableRows";
            strLoadWithPagingFunctionName = "/api/TaxeTypes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Code";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/MasterData/TaxeTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/TaxeTypes.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            TaxeTypes_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, "<--Select-->", "slAccount", pAccounts, null);
                            $("#slSubAccount").html('<option value=0>' + TranslateString("SelectFromMenu") + '</option>');
                            if (IsAccountingActive) {
                                $(".classAccountingOption").removeClass("hide");
                                //$("#slAccount").attr("data-required", "true");
                            }
                            else {
                                $(".classAccountingOption").addClass("hide");
                                //$("#slAccount").attr("data-required", "false");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { TaxeTypes_ClearAllControls(); },
                function () { TaxeTypes_DeleteList(); });
            break;
        }
        //region Invoicing/ChargeTypes
        case "WarehousingChargeType":
        case "ChargeTypes": {

            strLoadWithPagingFunctionName = "/api/ChargeTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/ChargeTypes", "div-content", function () {

                if (pDefaults.IsTaxOnItems)
                    $(".classShowForTaxOnItems").removeClass("hide");

                if (pControlID == "ChargeTypes") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Invoicing')");
                    $("#liTabName").text("Invoicing");
                    $("#liTabName").attr("onclick", "LoadViews('Invoicing')");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                }

                $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/ChargeTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { ChargeTypes_BindTableRows(pTabelRows); });
                });
                if (IsAccountingActive)
                    $(".classAccountingOption").removeClass("hide");
                else
                    $(".classAccountingOption").addClass("hide");
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE IsMain=0", pOrderBy: "Name,Code" }
                    , function (pData) {
                        debugger;
                        //JSON.stringify
                        //if (pDefaults.UnEditableCompanyName == "GBL")
                        //{            
                        //    var CurrenctExpensesAccounts = JSON.parse(pData[0]).filter(x=> x.RealAccountCode.substring(0, 1) == '3');
                        //    var CurrenctRevenueAccounts = JSON.parse(pData[0]).filter(x=> x.RealAccountCode.substring(0, 1) == '4');                            
                        //    FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slRevenueAccount", JSON.stringify(CurrenctRevenueAccounts), null);
                        //    FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slExpenseAccount", JSON.stringify(CurrenctExpensesAccounts), null);
                        //}

                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slRevenueAccount", pData[0]
                            , function () { $("#slExpenseAccount").html($("#slRevenueAccount").html()); $("#slReturnAccount").html($("#slRevenueAccount").html()) });


                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slRevenueCostCenter", pData[2]
                            , function () { $("#slExpenseCostCenter").html($("#slRevenueCostCenter").html()) });

                        $("#slRevenueSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                        $("#slExpenseSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                    }
                    , null);
            },
                function () { ChargeTypes_ClearAllControls(); },
                function () { ChargeTypes_DeleteList(); });
            break;
        }
        case "ChargeTypeGroup": {
            $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/ChargeTypeGroup.js?' + glbVersion, function () { ChargeTypeGroup_Initialize(); });
            break;
        }

        //case "Treasuries": {
        //    debugger;
        //    strLoadWithPagingFunctionName = "/api/Treasury/LoadWithPaging";
        //    LoadView("/MasterData/Treasury", "div-content", function () {
        //        $.getScript(strServerURL + '/Scripts/MasterData/BanksAccountsAndTreasuries/Treasury.js?' + glbVersion, function () {
        //            LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Treasury_BindTableRows(pTabelRows); });
        //        });
        //    },
        //        function () { Treasury_ClearAllControls(); },
        //        function () { Treasury_DeleteList(); });
        //    break;
        //}
        case "Treasuries": {
            $("#hl-menu-MasterData").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Treasury_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Treasury/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/MasterData/Treasury", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/BanksAccountsAndTreasuries/Treasury.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pJournalTypes = pData[3];
                            Treasury_BindTableRows(JSON.parse(pData[0]));
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slBranch").html($("#hReadySlBranches").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccounts
                                , null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slInJournalType", pJournalTypes
                                , function () {
                                    $("#slOutJournalType").html($("#slInJournalType").html());
                                });
                            if (IsAccountingActive)
                                $(".classAccountingOption").removeClass("hide");
                            else
                                $(".classAccountingOption").addClass("hide");
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Treasury_ClearAllControls(); },
                function () { Treasury_DeleteList(); });
            break;
        }
        case "BanksAccounts": {
            $("#hl-menu-MasterData").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "BankAccount_BindTableRows";
            strLoadWithPagingFunctionName = "/api/BankAccount/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/MasterData/BankAccount", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/BanksAccountsAndTreasuries/BankAccount.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pJournalTypes = pData[3];
                            BankAccount_BindTableRows(JSON.parse(pData[0]));
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccounts
                                , function () {
                                    $("#slNotesPayable").html($("#slAccount").html());
                                    $("#slNotesPayableUnderCollection").html($("#slAccount").html());
                                    $("#slNotesReceivable").html($("#slAccount").html());
                                    $("#slNotesReceivableUnderCollection").html($("#slAccount").html());
                                    $("#slCollectionExpenses").html($("#slAccount").html());
                                });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slInJournalType", pJournalTypes
                                , function () {
                                    $("#slOutJournalType").html($("#slInJournalType").html());
                                });
                            if (IsAccountingActive)
                                $(".classAccountingOption").removeClass("hide");
                            else
                                $(".classAccountingOption").addClass("hide");
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { BankAccount_ClearAllControls(); },
                function () { BankAccount_DeleteList(); });
            break;
        }
        case "BankTemplates": {
            strBindTableRowsFunctionName = "BankTemplate_BindTableRows";
            strLoadWithPagingFunctionName = "/api/BankTemplate/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/BankTemplate", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/BanksAccountsAndTreasuries/BankTemplate.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { BankTemplate_BindTableRows(pTabelRows); });
                });
            },
                function () { BankTemplate_ClearAllControls(); },
                function () { BankTemplate_DeleteList(); });
            break;
        }
        case "Custodies": {
            debugger;
            strBindTableRowsFunctionName = "Custody_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Custody/LoadWithPaging";
            LoadView("/MasterData/Custody", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/BanksAccountsAndTreasuries/Custody.js?' + glbVersion, function () {
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Custody_BindTableRows(pTabelRows); });
                });
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                    , function (pData) {
                        var pClientGroup = pData[3];
                        var pSupplierGroup = pData[4];
                        var pClientAndSupplierGroup = pData[5];
                        var pEmployeeGroup = pData[6];
                        var pUser = pData[9];

                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pEmployeeGroup, null);
                        FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slUser", pUser, null);

                        $("#slSubAccount").html('<option value=0>' + TranslateString("AUTOGENERATED") + '</option>');
                    }
                    , null);
                if (IsAccountingActive)
                    $(".classAccountingOption").removeClass("hide");
                else
                    $(".classAccountingOption").addClass("hide");
            },
                function () { Custody_ClearAllControls(); },
                function () { Custody_DeleteList(); });
            break;
        }
        //region Invoicing/ContainerTypes
        case "ContainerTypes": {

            strLoadWithPagingFunctionName = "/api/ContainerTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/ContainerTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Others/ContainerTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { ContainerTypes_BindTableRows(pTabelRows); });
                });
            },
                function () { ContainerTypes_ClearAllControls(); },
                function () { ContainerTypes_DeleteList(); });
            break;
        }

        //region Invoicing/PackageTypes
        case "WarehousingPackageType":
        case "PackageTypes": {

            strLoadWithPagingFunctionName = "/api/PackageTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/PackageTypes", "div-content", function () {

                if (pControlID == "PackageTypes") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Others')");
                    $("#liTabName").text("Others");
                    $("#liTabName").attr("onclick", "LoadViews('Others')");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                }

                $.getScript(strServerURL + '/Scripts/MasterData/Others/PackageTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { PackageTypes_BindTableRows(pTabelRows); });
                });
            },
                function () { PackageTypes_ClearAllControls(); },
                function () { PackageTypes_DeleteList(); });
            break;
        }

        //region Invoicing/Commodities
        case "WarehousingCommodity":
        case "Commodities": {

            strLoadWithPagingFunctionName = "/api/Commodities/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/Commodities", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                if (pDefaults.UnEditableCompanyName == "GBL") {
                    $(".classHideForGBL").addClass("hide");
                    $(".classShowForGBL").removeClass("hide");
                }
                if (pControlID == "Commodities") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Others')");
                    $("#liTabName").text("Others");
                    $("#liTabName").attr("onclick", "LoadViews('Others')");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                }
                $.getScript(strServerURL + '/Scripts/MasterData/Others/Commodities.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Commodities_BindTableRows(pTabelRows); });
                });
            },
                function () { Commodities_ClearAllControls(); },
                function () { Commodities_DeleteList(); });
            break;
        }

        //region Invoicing/MoveTypes
        case "MoveTypes":
        case "ServiceDepartmentBinding": {

            strLoadWithPagingFunctionName = "/api/MoveTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/MoveTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Others/MoveTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { MoveTypes_BindTableRows(pTabelRows); });
                    CallGETFunctionWithParameters("/api/NoAccessDepartments/LoadAll", { pWhereClause: "ORDER BY Name" }
                        , function (pData) {
                            _Departments = pData[0];
                            FillListFromObject(null, 2, "<--Select-->", "slDetailsDepartment", _Departments, null);
                        }
                        , null);
                });
                if (pControlID == "MoveTypes") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Others')");
                    $("#liTabName").text("Others");
                    $("#liTabName").attr("onclick", "LoadViews('Others')");
                    $("#liFormName").text("Service Scope");
                    $("#h3Label").text("Service Scope");
                    $(".classHideForMoveTypes").addClass("hide");
                    $(".MainLabelTitle").addClass('hide');
                    //$("#stepsFollowups").attr("style", "display:none;");
                }
                else { //CRM_Clients (i.e. SalesLeadsFollowup)
                    $("#liGroupName").text("Administration");
                    $("#liGroupName").attr("onclick", "LoadViews('Settings')");
                    $("#liTabName").text("Settings");
                    $("#liTabName").attr("onclick", "LoadViews('Settings')");

                    if ($("[id$='hf_ChangeLanguage']").val() == "en") {
                        $("#liFormName").text("Push Notification");
                        $("#h3Label").text("Push Notification");

                    } else {
                        $("#liFormName").text("ربط الأقسام بالخدمات");
                        $("#h3Label").text("ربط الأقسام بالخدمات");
                    }
                    $('.MainLabelTitle').removeClass('hide');
                    $(".classHideForMoveTypes").removeClass("hide");
                }
            },
                function () { MoveTypes_ClearAllControls(); },
                function () { MoveTypes_DeleteList(); });
            break;
        }

        //region Invoicing/Vessels
        case "Vessels": {

            strLoadWithPagingFunctionName = "/api/Vessels/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/Vessels", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/Others/Vessels.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Vessels_BindTableRows(pTabelRows); });
                });
            },
                function () { Vessels_ClearAllControls(); },
                function () { Vessels_DeleteList(); });
            break;
        }

        //region Invoicing/DocumentTypes
        case "DocumentTypes": {

            strLoadWithPagingFunctionName = "/api/DocumentTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/DocumentTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Others/DocumentTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { DocumentTypes_BindTableRows(pTabelRows); });
                });
            },
                function () { DocumentTypes_ClearAllControls(); },
                function () { DocumentTypes_DeleteList(); });
            break;
        }
        case "DocumentsInfo": {

            strLoadWithPagingFunctionName = "/api/DocumentsInfo/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/DocumentsInfo", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Others/DocumentsInfo.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { DocumentsInfo_BindTableRows(pTabelRows); });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { DocumentsInfo_ClearAllControls(); },
                function () { DocumentsInfo_DeleteList(); });
            break;
        }
        //region Invoicing/Template
        case "Templates": {
            strBindTableRowsFunctionName = "Template_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Template/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/Template", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/Others/Template.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Template_BindTableRows(pTabelRows); });
                });
            },
                function () { Template_ClearAllControls(); },
                function () { Template_DeleteList(); });
            break;
        }
        //region Invoicing/TrackingStage
        case "TrackingStages": {

            strLoadWithPagingFunctionName = "/api/TrackingStage/LoadWithPaging";
            strBindTableRowsFunctionName = "TrackingStage_BindTableRows";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/TrackingStage", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/Others/TrackingStage.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { TrackingStage_BindTableRows(pTabelRows); });
                });
            },
                function () { TrackingStage_ClearAllControls(); },
                function () { TrackingStage_DeleteList(); });
            break;
        }
        //------------Trucking By Nour-------------------------------------
        case "Trucking": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Others").removeClass("hide"); $("#tabOthers").parent().children().removeClass("btn-warning"); $("#tabOthers").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 2 ", "Trucking", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }

        case "TRCK_EquipmentModel": {
            debugger;
            strLoadWithPagingFunctionName = "/api/TRCK_EquipmentModel/LoadWithPaging";
            LoadView("/MasterData/TRCK_EquipmentModel", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/MasterData/Trucking/TRCK_EquipmentModel.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { TRCK_EquipmentModel_BindTableRows(pTabelRows); });
                });
            },
                function () { TRCK_EquipmentModel_ClearAllControls(); },
                function () { TRCK_EquipmentModel_DeleteList(); });
            break;
        }

        case "TRCK_Drivers": {
            debugger;
            TRCK_WorkingOnDrivers = 1;
            strLoadWithPagingFunctionName = "/api/TRCK_Drivers/LoadWithPagingWithWhereClause";

            LoadView("/MasterData/TRCK_Drivers", "div-content", function () {
                debugger;

                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                    , function (pData) {
                        var pClientGroup = pData[3];
                        var pEmpGroup = pData[6];
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3 /*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3 /*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pEmpGroup, null);
                        $("#slSubAccount").html('<option value=0>' + 'AUTO GENERATED' + '</option>');
                    }
                    , null);


                $.getScript(strServerURL + '/Scripts/MasterData/Trucking/TRCK_Drivers.js?' + glbVersion, function () {
                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar")
                        $(".Drivers_or_DriverAssistant").html("سائقين")
                    else
                        $(".Drivers_or_DriverAssistant").html("Drivers")
                    LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, " Where IsDriver = 1 ", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { TRCK_Drivers_BindTableRows(pTabelRows); TRCK_Drivers_ClearAllControls(); });
                    // LoadWithPaging               ("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName,                                           , 0                                 , 10                                 , function (pTabelRows) { TRCK_Drivers_BindTableRows(pTabelRows); });
                });
            },
                function () { TRCK_Drivers_ClearAllControls(); },
                function () { TRCK_Drivers_DeleteList(); });
            break;
        }
        case "TRCK_DriverAssistant": {
            debugger;
            TRCK_WorkingOnDrivers = 0;
            strLoadWithPagingFunctionName = "/api/TRCK_Drivers/LoadWithPagingWithWhereClause";

            LoadView("/MasterData/TRCK_Drivers", "div-content", function () {
                debugger;

                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                    , function (pData) {
                        var pClientGroup = pData[3];
                        var pSupplierGroup = pData[4];
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSupplierGroup, null);
                        $("#slSubAccount").html('<option value=0>' + 'AUTO GENERATED' + '</option>');
                    }
                    , null);


                $.getScript(strServerURL + '/Scripts/MasterData/Trucking/TRCK_Drivers.js?' + glbVersion, function () {
                    debugger;//sherif:loadwithpaging fn is callback in $.getscript
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar")
                        $(".Drivers_or_DriverAssistant").html("مساعد سائق")
                    else
                        $(".Drivers_or_DriverAssistant").html("Driver Assistant")
                    LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, " Where IsDriver = 0 ", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { TRCK_Drivers_BindTableRows(pTabelRows); TRCK_Drivers_ClearAllControls(); });
                    // LoadWithPaging               ("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName,                                           , 0                                 , 10                                 , function (pTabelRows) { TRCK_Drivers_BindTableRows(pTabelRows); });
                });
            },
                function () { TRCK_Drivers_ClearAllControls(); },
                function () { TRCK_Drivers_DeleteList(); });
            break;
        }

        case "TRCK_Trailers": {
            debugger;
            $.getScript(strServerURL + '/Scripts/MasterData/Trucking/TRCK_Trailers.js?' + glbVersion, function () { TRCK_Trailers_Initialize(); });
            break;
        }

        case "TRCK_Equipments": {
            debugger;
            $.getScript(strServerURL + '/Scripts/MasterData/Trucking/TRCK_Equipments.js?' + glbVersion, function () { TRCK_Equipments_Initialize(); });
            break;
        }

        //case "TRCK_Equipments": {
        //    debugger;

        //    strLoadWithPagingFunctionName = "/api/TRCK_Equipments/LoadWithPagingWithWhereClause";

        //    LoadView("/MasterData/TRCK_Equipments", "div-content", function () {
        //        debugger;

        //        if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
        //        else $(".classAccountingOption").addClass("hide");
        //        CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
        //            , { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
        //            , function (pData) {
        //                var pClientGroup = pData[3];
        //                var pSupplierGroup = pData[4];
        //                FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
        //                FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
        //                FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSupplierGroup, null);
        //                $("#slSubAccount").html('<option value=0>' + 'AUTO GENERATED' + '</option>');

        //                FillListFromObject_ERP(null, 2/*pCodeOrName*/, "Select Item", "slPurchaseItem", pData[8], null);
        //            }
        //           , null);

        //        $.getScript(strServerURL + '/Scripts/MasterData/Trucking/TRCK_Equipments.js?' + glbVersion, function () {

        //            GetListWithName(null, "/api/TRCK_EquipmentModel/LoadAll", "Select Model", "slEquipmentModel");
        //            GetListWithName(null, "/api/Countries/LoadAll", "Select Country", "slOriginCountry");
        //            GetListWithNameAndWhereClause(null, "/api/Suppliers/LoadAll", "Select Insurance Company", "slInsuranceCompany", " WHERE IsInactive = 0 ORDER BY Name ", function () { });
        //            GetListWithNameAndWhereClause(null, "/api/Suppliers/LoadAll", "Select Service Center", "slServiceCenter", " WHERE IsInactive = 0 ORDER BY Name ", function () { });
        //            GetListWithName(null, "/api/TRCK_Trailers/LoadAll", "Select Trailer", "slTrailers");

        //            debugger;//sherif:loadwithpaging fn is callback in $.getscript
        //            LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { TRCK_Equipments_BindTableRows(pTabelRows); TRCK_Equipments_ClearAllControls(); });

        //        });
        //    },
        //        function () { TRCK_Equipments_ClearAllControls(); },
        //        function () { TRCK_Equipments_DeleteList(); });
        //    break;
        //}
        //------------End Trucking By Nour-------------------------------------
        //kk
        case "CustomsItems": {
            debugger;
            strLoadWithPagingFunctionName = "/api/CustomsItems/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/CustomsItems", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/CustomsClearance/CustomsItems.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10,
                        function (pTabelRows) {
                            debugger;
                            CustomsItems_BindTableRows(pTabelRows);
                        });
                });
            },
                function () { CustomsItems_ClearAllControls(); },
                function () { CustomsItems_DeleteList(); });
            break;
        }
        case "Authorizations":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/Authorizations/LoadWithPaging";
                var pWhereClause = " WHERE 1=1";
                var pOrderBy = "ID DESC";
                var pPageNumber = 1;
                var pPageSize = 10;
                var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pSearchKey: "" };// pWhereClause: pWhereClause, pOrderBy: pOrderBy };
                //the first parameter in the LoadView() fn. is the route in the RouteConfig
                LoadView("/MasterData/Authorizations", "div-content", function () {
                    //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                    $.getScript(strServerURL + '/Scripts/MasterData/CustomsClearance/Authorizations.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total",
                            strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters,
                            function (pTabelRows) {
                                debugger;
                                FillListFromObject(null, 2, "Select Customer"/*"Select Equip."*/, "slCustomers", pTabelRows[2], null);
                                Authorizations_BindTableRows(JSON.parse(pTabelRows[0]));
                                LoadDates();
                            });
                    });
                },
                    function () { Authorizations_ClearAllControls(); },
                    function () { Authorizations_DeleteList(); });
                break;
            }
        //region Invoicing/Network
        case "Network": {

            strLoadWithPagingFunctionName = "/api/Network/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/MasterData/Network", "div-content", function () {
                //LoadView("/MasterData/a view with just a modal", "div-content", true);//sherif: incase of calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/MasterData/Others/Network.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Network_BindTableRows(pTabelRows); });
                });
            },
                function () { Network_ClearAllControls(); },
                function () { Network_DeleteList(); });
            break;
        }

        //region Pricing/Pricing
        case "PricingRequest":
        case "PricingForm": {
            debugger;
            $.getScript(strServerURL + '/Scripts/PricingModule/PricingTab/Pricing.js?' + glbVersion, function () { Pricing_Initialize(pUserID, pRoleID); });
            break;
        }

        //region Pricing/PricingSettings
        case "PricingSettings": {
            intPricingType = constPricingOcean;
            strBindTableRowsFunctionName = "PricingSettings_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Pricing/PricingSettings_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            LoadView("/Pricing/PricingSettings", "div-content", function () {
                //LoadView("/Pricing/PricingSettings", "div-content", null, null, null, true);//sherif: calling a partial view with only modal called from different places
                $.getScript(strServerURL + '/Scripts/PricingModule/PricingTab/PricingSettings.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE PricingTypeID=" + intPricingType;
                    var pOrderBy = "ChargeTypeName";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsReturnObjectArrayForPricingSettings: true, pPricingTypeID: intPricingType, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pPricingSettings = pData[0];
                            var pChargeType = pData[2];
                            $("#slPricingType").val(intPricingType);
                            FillListFromObject(null, (pDefaults.IsRepeatChargeTypeName ? 4 : 2), "<--Select-->"/*"Select ChargeType"*/, "slChargeType", pChargeType, null);
                            PricingSettings_BindTableRows(JSON.parse(pPricingSettings));
                        });
                });
            },
                function () { PricingSettings_ClearAllControls(); },
                function () { PricingSettings_DeleteList(); });
            break;
        }

        //region Settings/Branches
        case "Branches": {

            strLoadWithPagingFunctionName = "/api/Branches/LoadWithPaging";

            LoadView("/Administration/Branches", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/Branches.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Branches_BindTableRows(pTabelRows); });
                });
            },
                function () { Branches_ClearAllControls(); },
                function () { Branches_DeleteList(); });
            break;
        }

        case "LicenseExpireDateAlarmsUsers":
            {
                debugger
                LoadView("/Administration/LicenseExpireDateAlarmsUsers", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/Administration/Settings/LicenseExpireDateAlarmsUsers.js?' + glbVersion, function () {
                        IntializePage();
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                });
                break;
            }
        case "FA_Departments": {

            strLoadWithPagingFunctionName = "/api/FA_Departments/LoadWithPaging";

            LoadView("/Administration/FA_Departments", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/FA_Departments.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_Departments_BindTableRows(pTabelRows); });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { FA_Departments_ClearAllControls(); },
                function () { FA_Departments_DeleteList(); });
            break;
        }
        case "FA_Devisons": {

            strLoadWithPagingFunctionName = "/api/FA_Devisons/LoadWithPaging";

            LoadView("/Administration/FA_Devisons", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/FA_Devisons.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_Devisons_BindTableRows(pTabelRows); });
                });
            },
                function () { FA_Devisons_ClearAllControls(); },
                function () { FA_Devisons_DeleteList(); });
            break;
        }
        //region Settings/Defaults
        case "Defaults": {

            strLoadWithPagingFunctionName = "/api/Defaults/LoadAll"; // I am sure i ve just one row isa

            LoadView("/Administration/Defaults", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/Defaults.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadAll(strLoadWithPagingFunctionName, " WHERE 1=1 ", function (pTabelRows) { Defaults_BindTableRows(pTabelRows); });
                });
            },
                function () { Defaults_ClearAllControls(); },
                function () { Defaults_DeleteList(); });
            break;
        }

        case "NoAccessDepartments":
        case "DepartmentChargeBinding": {
            strBindTableRowsFunctionName = "NoAccessDepartments_BindTableRows";
            strLoadWithPagingFunctionName = "/api/NoAccessDepartments/LoadAll"; // I am sure i ve just one row isa

            LoadView("/Administration/NoAccessDepartments", "div-content", function () {
                if (pControlID == "NoAccessDepartments") {
                    $("#liGroupName").text("Administration");
                    $("#liGroupName").attr("onclick", "LoadViews('Settings');");
                    $("#liTabName").text("Settings");
                    $("#liTabName").attr("onclick", "LoadViews('Settings');");
                    $("#liFormName").text("Departments");
                    if ($("[id$='hf_ChangeLanguage']").val() == "en") {
                        $("#h3Label").text("Departments");
                    }
                    else {
                        $("#h3Label").text("الأقسام");
                    }
                    $(".classHideForDepartments").addClass("hide");
                    //$("#stepsFollowups").attr("style", "display:none;");
                }
                else {
                    $("#liGroupName").text("Administration");
                    $("#liGroupName").attr("onclick", "LoadViews('Settings');");
                    $("#liTabName").text("Settings");
                    $("#liTabName").attr("onclick", "LoadViews('Settings');");

                    if ($("[id$='hf_ChangeLanguage']").val() == "en") {
                        $("#liFormName").text("Departments Charges Binding");
                        $("#h3Label").text("Departments Charges Binding");
                    }
                    else {
                        $("#liFormName").text("ربط الأقسام ببنود المصاريف");
                        $("#h3Label").text("ربط الأقسام ببنود المصاريف");
                    }
                    $(".classHideForDepartments").removeClass("hide");
                }
                $.getScript(strServerURL + '/Scripts/Administration/Settings/NoAccessDepartments.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    //LoadAll(strLoadWithPagingFunctionName, "ORDER BY Name, LocalName", function (pTabelRows) { NoAccessDepartments_BindTableRows(pTabelRows); });
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { NoAccessDepartments_BindTableRows(pTabelRows); });
                });
                GetListAsCheckboxesWithVariousParameters("/api/ChargeTypes/LoadAllWithMinimalColumns", { pWhereClauseWithMinimalColumns: "WHERE 1=1" }, "divCheckboxesList", "cbAddedItemID", null/*function () { FadePageCover(false); }*/, (pDefaults.IsRepeatChargeTypeName ? 3 : 1), "col-sm-3");
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { NoAccessDepartments_ClearAllControls(); },
                function () { NoAccessDepartments_DeleteList(); });
            break;
        }

        case "MergeDuplicate": {
            //  strLoadWithPagingFunctionName = "/api/MergeDuplicate/LoadWithPaging";
            LoadView("/Administration/MergeDuplicate", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/MergeDuplicate.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CRM_Sources_BindTableRows(pTabelRows); });
                    // Fill_Items();
                });
            },
                function () { /*Fill_Items();*/ },
                function () {/* Fill_Items();*/ });
            break;
        }
        //region Security/Roles
        case "Roles": {

            strLoadWithPagingFunctionName = "/api/Roles/LoadWithPaging";

            LoadView("/Administration/Roles", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Security/Roles.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Roles_BindTableRows(pTabelRows); });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Roles_ClearAllControls(); },
                function () { Roles_DeleteList(); });
            break;
        }
        //region Logs/OperationChargeLog
        case "OperationsChargesLogs": {

            FadePageCover(true);
            LoadView("/Administration/OperationChargeLog", "div-content", function () {
                CallGETFunctionWithParameters("/api/OperationChargeLog/GetOperationChargeLogFilters", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 1, null, "slOperation", data[0], null);
                        $("#txtFromOpenDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToOpenDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); });
                $.getScript(strServerURL + '/Scripts/Administration/Logs/OperationChargeLog.js');
                $("#hl-homepage").on("click", function () { LoadViews("hl-homepage"); });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            });

            break;
        }
        case "HousesLogs": {

            FadePageCover(true);
            LoadView("/Administration/HousesLogs", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Logs/HousesLogs.js', function() {
                    GetListWithCodeAndWhereClauseWithMultiAttrs(null, "POL,POD,TransportType,ShipmentType", "/api/Operations/LoadAll", "Select Master Operation"
                        , "slMasterOperations"
                        , " WHERE 1=1 AND BLType=" + constMasterBLType + " "
                        , function () {
                            IntializeOperationAutoCompleteSearch();
                            ConfigureAfterOperationChangeEvent();

                            FadePageCover(false);
                        });

                    $("#txtFromOpenDate").val(getTodaysDateInddMMyyyyFormat());
                    $("#txtToOpenDate").val(getTodaysDateInddMMyyyyFormat());
                });

                

                $("#hl-homepage").on("click", function () { LoadViews("hl-homepage"); });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            });

            break;
        }
        //region DisbursementLink
        case "UserLink": {
            debugger;
            strLoadWithPagingFunctionName = "/api/UserLink/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1 ";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 50;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Administration/UserLink", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/DisbursementLink/UserLink.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pTabelRows = JSON.parse(pData[0]);
                            var pDasUsers = pData[2];
                            var pUseres = pData[3];

                            UserLink_BindTableRows(pTabelRows);
                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slUserDas", pDasUsers, null);
                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slUsers", pUseres, null);
                        });
                });
            },
                function () { UserLink_ClearAllControls(); },
                function () { UserLink_DeleteList(); });
            break;
        }

        //region Miscellaneous/DeletedInvoices
        case "DeletedInvoices": {

            strLoadWithPagingFunctionName = "/api/Invoices/LoadAll";

            LoadView("/Administration/DeletedInvoices", "div-content", function () {
                CallGETFunctionWithParameters("/api/Operations/LoadOperationsToRestoreInvoices"
                    , { pPageSize: 99999, pWhereClauseToGetOperationsToRestoreInvoices: "WHERE BLType <> 2 AND OperationStageID NOT IN (" + ClosedQuoteAndOperStageID + "," + CancelledQuoteAndOperStageID + ") AND CreationDate > DATEADD(mm,DATEDIFF(mm,0,GETDATE())-15,0)", pOrderBy: "ID DESC" }
                    , function (pData) {
                        FillListFromObject(null, 13, null, "slOperation", pData[0], function () { FadePageCover(false); });
                    }
                    , null);
                $.getScript(strServerURL + '/Scripts/Administration/Miscellaneous/DeletedInvoices.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    //LoadWithPagingWithWhereClauseAndOrderBy("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, " WHERE IsDeleted = 1 ", " InvoiceNumber, InvoiceTypeName, OperationCode ", 0, 10, function (data) { DeletedInvoices_BindTableRows(JSON.parse(data[0])); });
                    DeletedInvoices_LoadWithPagingWithWhereClauseAndOrderBy();
                });
            },
                null, //function () { DeletedInvoices_ClearAllControls(); },
                null); //function () { DeletedInvoices_DeleteList(); });
            break;
        }
        case "Creditlimitexceptionperiod": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Creditlimitexceptionperiod_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Creditlimitexceptionperiod/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "customerName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Administration/Creditlimitexceptionperiod", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Miscellaneous/Creditlimitexceptionperiod.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            Creditlimitexceptionperiod_BindTableRows(JSON.parse(pData[0]));
                            $("#txtDate").val(getTodaysDateInddMMyyyyFormat());
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { SystemOptions_ClearAllControls(); },
                function () { JVTypes_DeleteList(); });
            break;
        }

        case "TransferContainer":
        case "ContainerTracking": {
            strBindTableRowsFunctionName = "ContainerTracking_BindTableRows";
            $.getScript(strServerURL + '/Scripts/ContainerTrackingGroup/ContainerTracking/ContainerTracking.js?' + glbVersion, function () { ContainerTracking_Initialize(); });
            break;
        }

        case "VehicleTracking": {
            $.getScript(strServerURL + '/Scripts/ContainerTrackingGroup/ContainerTracking/VehicleTracking.js?' + glbVersion, function () { VehicleTracking_Initialize(); });
            break;
        }

        case "SetOperationStage": {
            debugger;
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/ContainerTrackingGroup/ContainerTracking/SetOperationStage.js?' + glbVersion, function () { SetOperationStage_Initialize(); });
            break;
        }

        case "DepotReports": {
            $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "DepotReports_BindTableRows";
            strLoadWithPagingFunctionName = "/api/DepotReports/DepotReports_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            //var pWhereClause = "WHERE IsTracked=1";
            //var pOrderBy = "OperationID DESC, ContainerNumber DESC";
            //var pPageNumber = 1;
            //var pPageSize = 10;
            //var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ContainerTrackingGroup/ContainerTrackingTab/DepotReports", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ContainerTrackingGroup/ContainerTracking/DepotReports.js?' + glbVersion, function () {
                    //LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                    //    , function (pData) {
                    //    });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null, //function () { DepotReports_ClearAllControls(); },
                null //function () { DepotReports_DeleteList(); }
            );
            break;
        }
        case "ShippingOrders":
        case "RoutingOrders": {
            debugger;
            //FadePageCover(true);
            //$.getScript(strServerURL + '/Scripts/Operations/Operations/Operations.js?' + glbVersion, function () {
            //    OperationsManagement_Initialize(pWhereClauseOverwriting);
            //});

            $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
            $("#hl-menu-ContainerTrackingGroup").parent().addClass("active");
            strLoadWithPagingFunctionName = "/api/Operations/LoadWithWhereClause";

            strBindTableRowsFunctionName = "HousesOrders_BindTableRows";
            LoadView("/ContainerTrackingGroup/ContainerTrackingTab/HousesOrders", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ContainerTrackingGroup/ContainerTracking/HousesOrders.js?' + glbVersion, function () {
                    HousesOrders_Initialize();
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null, //function () { ShippingOrders_ClearAllControls(); },
                null //function () { ShippingOrders_DeleteList(); }
            );
            break;
        }
        case "OperationsACIDDetails": {
            debugger;
            strLoadWithPagingFunctionName = "/api/OperationsACIDDetails/LoadWithPaging";
            LoadView("/ContainerTrackingGroup/ContainerTrackingTab/OperationsACIDDetails", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ContainerTrackingGroup/ContainerTracking/OperationsACIDDetails.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { OperationsACIDDetails_BindTableRows(pTabelRows); });
                });
            },
                function () { OperationsACIDDetails_ClearAllControls(); },
                function () {  });
            break;
        }


        case "XMLFileBL": {
            strBindTableRowsFunctionName = "XMLFileBL_BindTableRows";
            $.getScript(strServerURL + '/Scripts/ContainerTrackingGroup/XML/XMLFileBL.js?' + glbVersion, function () { XMLFileBL_Initialize(); });
            break;
        }
        case "XMLIABOriginalStandardInvoice": {
            strBindTableRowsFunctionName = "XMLIABOriginalStandardInvoice_BindTableRows";
            $.getScript(strServerURL + '/Scripts/ContainerTrackingGroup/XML/XMLIABOriginalStandardInvoice.js?' + glbVersion, function () { XMLIABOriginalStandardInvoice_Initialize(); });
            break;
        }

        case "TruckingOrders": { //Supplier
            debugger;
            // $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "TruckingOrders_BindTableRows";
            strLoadWithPagingFunctionName = "/api/TruckingOrders/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            glbFormCalled = constFrmTruckingOrdersSupplier;

            var pWhereClause = " WHERE RoutingTypeID=60 AND IsApproved=0 AND IsOwnedByCompany=0 AND IsFleet=0 ";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/TR/Transactions/TruckingOrders", "div-content", function () {
                LoadView("/MasterData/ModalSelectCharges", "div-content"
                    , function () {
                        if (pDefaults.IsTaxOnItems)
                            $(".classShowForTaxOnItems").removeClass("hide");
                        else
                            $(".classShowForTaxOnHeader").removeClass("hide");

                        if (pDefaults.UnEditableCompanyName == "GBL")
                            $(".classShowForGBL").removeClass("hide");
                        else if (pDefaults.UnEditableCompanyName == "ELI")
                            $(".classShowForELI").removeClass("hide");

                    }, null, null, true);
                $.getScript(strServerURL + ' /Scripts/TR/Transactions/TruckingOrders.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            var pUser = pData[8];

                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTrailerTruckingOrder", pData[2], function () { $("#slFilterTrailer").html($("#slTrailerTruckingOrder").html()); });
                            FillListFromObject(null, 2, "<--Select-->", "slDriverTruckingOrder", pData[3], null);
                            FillListFromObject(null, 2, "<--Select-->", "slDriverAssistantTruckingOrder", pData[4], null);
                            FillListFromObject(null, 2, "<--Select-->", "slRoutingsLoadingZoneTruckingOrder", pData[7], null);
                            FillListFromObject(null, 2, "<--Select-->", "slRoutingsFirstCuringAreaTruckingOrder", pData[7], null);
                            FillListFromObject(null, 2, "<--Select-->", "slRoutingsSecondCuringAreaTruckingOrder", pData[7], null);
                            FillListFromObject(null, 2, "<--Select-->", "slRoutingsThirdCuringAreaTruckingOrder", pData[7], null);
                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slEquipmentTruckingOrder", pData[6], null);

                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTruckingOrderGateInPortTruckingOrder", pData[7], null);
                            FillListFromObject(null, 2, "<--Select-->", "slFilterCreator", pUser, null);
                            $("#slFilterCustomer").html($("#hReadySlCustomers").html());

                            $("#slTruckingOrderGateOutPortTruckingOrder").html($("#slTruckingOrderGateInPortTruckingOrder").html());
                            $("#slFilterEquipment").html($("#slEquipmentTruckingOrder").html());
                            GetListWithNameAndWhereClause(0, '/api/Truckers/LoadAll', 'Select Trucker', "slFilterTrucker", ' WHERE 1=1 ORDER BY Name');
                            ApplySelectListSearch();

                            TruckingOrders_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                //if (pDefaults.UnEditableCompanyName == "IST")
                //    $(".classShowForIST").removeClass("hide");

                CallGETFunctionWithParameters("/api/routings/LoadAll"
                    , {
                        pWhereClause: "WHERE TruckingOrderCode IS NOT NULL AND IsFleet=0 AND IsOwnedByCompany=0 AND RoutingTypeID=" + TruckingOrderRoutingTypeID
                        , pOrderBy: "ID DESC"
                    }
                    , function (pData) {
                        Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[0], "ID", "OperationCode,ClientName,TruckingOrderCode", ' --> ', "<--Select-->", "#slFilterTruckingOrder", null, "ID", function () { ApplySelectListSearch(); });
                    }
                    , null);

                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Routing_ClearAllControls(); },
                function () { Routing_DeleteList(); });
            break;
        }
        case "TruckingOrdersOwnFleet": {
            debugger;
            // $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "TruckingOrders_BindTableRows";
            strLoadWithPagingFunctionName = "/api/TruckingOrders/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            glbFormCalled = constFrmTruckingOrdersOwnFleet;

            var pWhereClause = "WHERE RoutingTypeID=60 AND IsApproved=0 AND IsOwnedByCompany=1 AND IsFleet=0 ";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/TR/Transactions/TruckingOrdersOwnFleet", "div-content", function () {
                if (pDefaults.UnEditableCompanyName == "CAP")
                    $(".classShowForCAP").removeClass("hide");
                else if (pDefaults.UnEditableCompanyName == "ELI")
                    $(".classShowForELI").removeClass("hide");
                LoadView("/MasterData/ModalSelectCharges", "div-content", function () {
                    if (pDefaults.IsTaxOnItems) $(".classShowForTaxOnItems").removeClass("hide");
                    else $(".classShowForTaxOnHeader").removeClass("hide");
                    if (pDefaults.UnEditableCompanyName == "GBL") {
                        $(".classShowForGBL").removeClass("hide");
                        if (pLoggedUser.Name == "AHMED MOHAMED MONIER") {
                            $("#txtTruckLastCounter").removeAttr("disabled");
                            $("#txtTruckCounterTruckingOrder").removeAttr("disabled");
                        }
                    }
                    $.getScript(strServerURL + ' /Scripts/TR/Transactions/TruckingOrders.js?' + glbVersion, function () {
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                var pUser = pData[8];

                                //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTrailerTruckingOrder", pData[2], function () { $("#slFilterTrailer").html($("#slTrailerTruckingOrder").html()); });
                                //FillListFromObject(null, 2, "<--Select-->", "slDriverTruckingOrder", pData[3], null);
                                //FillListFromObject(null, 2, "<--Select-->", "slDriverAssistantTruckingOrder", pData[4], null);
                                //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slEquipmentTruckingOrder", pData[6], null);
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[2], "ID", "Name,LicenseStatus", ' ', "<--Select-->", "#slTrailerTruckingOrder", null, "", function () { $("#slFilterTrailer").html($("#slTrailerTruckingOrder").html()); });
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Name,LicenseStatus", ' ', "<--Select-->", "#slDriverTruckingOrder", null, "", null);
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[4], "ID", "Name,LicenseStatus", ' ', "<--Select-->", "#slDriverAssistantTruckingOrder", null, "", null);
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[6], "ID", "Name,LicenseStatus", ' ', "<--Select-->", "#slEquipmentTruckingOrder", null, "", null);
                                FillListFromObject(null, 2, "<--Select-->", "slRoutingsLoadingZoneTruckingOrder", pData[7], null);
                                FillListFromObject(null, 2, "<--Select-->", "slRoutingsFirstCuringAreaTruckingOrder", pData[7], null);
                                FillListFromObject(null, 2, "<--Select-->", "slRoutingsSecondCuringAreaTruckingOrder", pData[7], null);
                                FillListFromObject(null, 2, "<--Select-->", "slRoutingsThirdCuringAreaTruckingOrder", pData[7], null);

                                FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTruckingOrderGateInPortTruckingOrder", pData[7], null);
                                FillListFromObject(null, 2, "<--Select-->", "slFilterCreator", pUser, null);

                                $("#slTruckingOrderGateOutPortTruckingOrder").html($("#slTruckingOrderGateInPortTruckingOrder").html());
                                $("#slFilterEquipment").html($("#slEquipmentTruckingOrder").html());
                                $("#slFilterCustomer").html($("#hReadySlCustomers").html());
                                ApplySelectListSearch();

                                TruckingOrders_BindTableRows(JSON.parse(pData[0]));
                            });
                    });
                }, null, null, true);
                //if (pDefaults.UnEditableCompanyName == "IST")
                //    $(".classShowForIST").removeClass("hide");
                CallGETFunctionWithParameters("/api/routings/LoadAll"
                    , {
                        pWhereClause: "WHERE TruckingOrderCode IS NOT NULL AND IsFleet=0 AND IsOwnedByCompany=1 AND RoutingTypeID=" + TruckingOrderRoutingTypeID
                        , pOrderBy: "ID DESC"
                    }
                    , function (pData) {
                        Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[0], "ID", "OperationCode,ClientName,TruckingOrderCode", ' --> ', "<--Select-->", "#slFilterTruckingOrder", null, "ID", function () { ApplySelectListSearch(); });
                    }
                    , null);

                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Routing_ClearAllControls(); },
                function () { Routing_DeleteList(); });
            break;
        }

        case "FleetApprovedTransportOrder":
        case "FleetQuotation": {
            $.getScript(strServerURL + '/Scripts/Quotations/Quotations/Quotations.js?' + glbVersion, function () { FleetQuotation_Initialize(); });
            break;
        }

        case "FleetTransportOrder":
        case "FleetTransportOrderSupplier": {
            $.getScript(strServerURL + '/Scripts/TR/Transactions/TruckingOrders.js?' + glbVersion, function () { FleetTransportOrder_Initialize(); });
            break;
        }

        case "Quotations":
        case "QuotationsManagement":
        case "QuotationApproval": {
            FadePageCover(true);
            strBindTableRowsFunctionName = "Quotations_BindTableRows";
            $.getScript(strServerURL + '/Scripts/Quotations/Quotations/Quotations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                Quotations_Initialize();
            });
            break;
        }

        case "QuotationsEdit":
        case "QuotationsEdit_Approval": {
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Quotations/Quotations/Quotations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                QuotationsEdit_Initialize(pUserID, pQuotationRouteRequestID);// pUserID holds pEditedQuotationID
            });
            break;
        }

        case "QuotationsDashboard":
            {
                debugger;
                FadePageCover(true);
                LoadView("/Quotations/QuotationsDashboard", "div-content", function () {
                    CallGETFunctionWithParameters("/api/QuotationsDashboard/FillFilter", null
                        , function (d) { //if i need filters then Re-Enable what i need
                            GetListYears($("#slYearsCRMdashboard").val(), null, "slYearsCRMdashboard", null, null);
                            Fill_SelectInputAfterLoadData(d[1], 'ID', 'Username', '<-- All -->', '#slSalesRep_search', '');
                            ShowDashboard();

                            if (d[4] == 0) {
                                $('#btn-ShowDashboard').prop('disabled', true);
                                $('#slSalesRep_search').prop('disabled', true);
                            }

                            else {
                                $('#slSalesRep_search').prop('disabled', false);
                                $('#btn-ShowDashboard').prop('disabled', false);
                            }

                        }
                        , function () { FadePageCover(false); $("#hl-menu-Quotations").parent().addClass("active"); });
                    $.getScript(strServerURL + '/Scripts/Quotations/Dashboard/QuotationsDashboard.js');
                });
                break;
            }

        //region Operations/OperationsManagement
        //case "Operations": {
        //    debugger;
        //    Operations_ClearFilters();
        //    Quotations_ClearFilters();
        //    LoadView("/Home/Groups", "div-content", function () {
        //        //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
        //        //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
        //        FillGroups(" where ParentGroupID = 4 ", "Operations", function () {
        //            //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
        //        });

        //    });
        //    break;
        //}

        case "CustomClearanceModule":
        case "CCModule":
        case "Operations":
        case "OperationsManagement":
        case "BLDocuments":
        case "TransferHouse": {
            debugger;
            //SetAsideSearchControls(1);
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Operations/Operations/Operations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                OperationsManagement_Initialize(pWhereClauseOverwriting);
            });
            break;
        }


        case "OperationsEdit": {
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Operations/Operations/Operations.js?' + glbVersion, function () {//sherif:pUserID here holds the OperationID
                OperationsEdit_Initialize(pUserID/*used to hold pOperationID*/);
            });
            $.getScript(strServerURL + '/Scripts/Operations/Operations/Invoices.js');
            break;
        }

        //region Security/RolePrivileges
        case "RolePrivileges": {

            strLoadWithPagingFunctionName = "/api/RolePrivileges/LoadWithPaging";

            LoadView("/Administration/RolePrivileges", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Security/RolePrivileges.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { RolePrivileges_BindTableRows(pTabelRows); }, pRoleID);
                });
            },
                function () { RolePrivileges_ClearAllControls(); },
                function () { RolePrivileges_DeleteList(); });
            break;
        }
        //region Security/Users
        case "Users": {

            strLoadWithPagingFunctionName = "/api/Users/LoadWithPaging";

            LoadView("/Administration/Users", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Security/Users.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Users_BindTableRows(pTabelRows); });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Users_ClearAllControls(); },
                function () { Users_DeleteList(); });
            break;
        }
        //region Security/UserPrivileges
        case "UserPrivileges": {

            strLoadWithPagingFunctionName = "/api/UserPrivileges/LoadWithPaging";

            LoadView("/Administration/UserPrivileges", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Security/UserPrivileges.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { UserPrivileges_BindTableRows(pTabelRows); }, null, pUserID);
                });
            },
                function () { UserPrivileges_ClearAllControls(); },
                function () { UserPrivileges_DeleteList(); });
            break;
        }

        //region Quotes/ProfitStatistics
        case "ProfitStatistics": {
            debugger;
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Reports/Statistics/ProfitStatistics.js', function () { ProfitStatistics_Initialize(); });
            break;
        }
        case "BusinessVolume": {
            debugger;
            $("#hl-menu-Reports").parent().addClass("active");
            strBindTableRowsFunctionName = "CommissionTarget_BindTableRows";
            strLoadWithPagingFunctionName = "/api/BusinessVolume/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "TargetYear DESC, SalesmanName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Reports/BusinessVolume", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/BusinessVolume.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var TodaysDate = new Date();
                            var CurrentYear = TodaysDate.getUTCFullYear();
                            var pSalesman = pData[2];
                            var pTargetType = pData[3];
                            FillListFromObject(null, 2, "<--Select-->", "slFilterSalesman", pSalesman, null);
                            FillListFromObject(constTargetTypeByInvoiceFixedAmount, 2, "<--Select-->", "slFilterTargetType", pTargetType, null);
                            GetListYears(CurrentYear, null, "slFilterTargetYear", null
                                , function () { $("#slFilterTargetYear").html($("#slTargetYear").html()); $("#slFilterTargetYear").prepend("<option value=''><--Select--></option>"); $("#slFilterTargetYear").val(""); }
                                , parseInt(CurrentYear + 1));
                            //$("#slTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            $("#slFilterFromTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            $("#slFilterToTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            CommissionTarget_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { CommissionTarget_ClearAllControls(); },
                function () { CommissionTarget_DeleteList(); });
            break;
        }
        //region Quotes/ProfitabilityReport
        case "ProfitabilityReport": {
            debugger;
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Reports/Statistics/ProfitabilityReport.js', function () { ProfitabilityReport_Initialize(); });
            break;
        }
        //region Quotes/TrailerProfitability
        case "TrailerProfitability": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/TrailerProfitability", "div-content", function () {
                CallGETFunctionWithParameters("/api/TrailerProfitability/GetStatisticsFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        //FillListFromObject(null, 2, "All Salesmen", "slSalesman", data[0], null);
                        FillListFromObject(null, 2, "<--Select-->", "slTrailer", data[0], null);
                        FillListFromObject(null, 2, "<--Select-->", "slChargeType", data[1], null);
                        //FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        //$("#slCustomer").html($("#hReadySlCustomers").html());
                        //FillListFromObject(null, 2, "All Booking Parties", "slBookingParty", data[2], null);
                        //$("#slBookingParty").html($("#hReadySlCustomers").html());
                        //FillListFromObject(null, 1, "All Currencies", "slCurrency", data[3], null);
                        //FillListFromObject(null, 2, "All States", "slOperationStages", data[4], null);
                        //FillListFromObject(null, 1, "All Operations", "slOperation", data[5], null);
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/TrailerProfitability.js');
            });
            break;
        }
        case "TruckingOrderReport": {
            debugger;
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/TR/Reports/TruckingOrderReport.js', function () { TruckingOrderReport_Initialize(); });
            break;
        }
        case "TruckingOrderReportForSupplier": {
            debugger;
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/TR/Reports/TruckingOrderReportForSupplier.js', function () { TruckingOrderReportForSupplier_Initialize(); });
            break;
        }
        case "TripIncentiveReport": {
            debugger;
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/TR/Reports/TripIncentiveReport.js', function () { TripIncentiveReport_Initialize(); });
            break;
        }

        case "DailyShipmentsReport": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/DailyShipments", "div-content", function () {
                CallGETFunctionWithParameters("/api/DailyShipments/GetDailyShipmentsFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "All Salesmen", "slSalesman", data[0], null);
                        FillListFromObject(null, 2, "All Branches", "slBranch", data[1], null);
                        //FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        $("#slCustomer").html($("#hReadySlCustomers").html());
                        FillListFromObject(null, 1, "All Currencies", "slCurrency", data[3], null);
                        FillListFromObject(null, 2, "All Operation States", "slOperationStages", data[4], null);
                        $("#txtFromOpenDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToOpenDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/DailyShipments.js');
            });
            break;
        }

        case "BLStatistics":
        case "OperationsStatistics": {
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Reports/Statistics/OperationsStatistics.js', function () { OperationsStatistics_Initialize(); });
            break;
        }
        case "CustomersReport": {
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Reports/Statistics/CustomersReport.js', function () { CustomersReport_Initialize(); });
            break;
        }
        case "DynamicsCRMLog": {
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Reports/Statistics/DynamicsCRMLog.js', function () { DynamicsCRMLog_Initialize(); });
            break;
        }
        case "CustomsClearanceReport": {
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Reports/Statistics/CustomsClearanceReport.js', function () { CustomsClearanceReport_Initialize(); });
            break;
        }
        //region Reports/ContainerTrackingReport
        case "ContainerTrackingReport": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/ContainerTrackingReport", "div-content", function () {
                CallGETFunctionWithParameters("/api/ContainerTrackingReport/GetContainerTrackingReportFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        var pPorts = data[0];
                        var pShippingLine = data[1];
                        debugger;
                        ////FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slSalesman", data[0], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCreator", data[0], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[1], null);
                        ////FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        $("#slCustomer").html($("#hReadySlCustomers").html());
                        $("#slBookingParty").html($("#hReadySlCustomers").html());
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slPOL", pPorts, null);
                        ////FillListFromObject(null, 2, "All Booking Parties", "slBookingParty", data[2], null);
                        //$("#slBookingParty").html($("#hReadySlCustomers").html());
                        //FillListFromObject(null, 1, "All Currencies", "slCurrency", data[3], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slOperationStages", data[4], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slShippingLine", pShippingLine, null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slVessel", data[6], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTrackingStage", data[7], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCommodity", data[8], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slAgent", data[9], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slNetwork", data[10], null);
                        //$("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtFromDateSelectOperations").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDateSelectOperations").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/ContainerTrackingReport.js');
                //GetListAsCheckboxesWithVariousParameters("/api/Operations/LoadAll", {pWhereClause:"WHERE DirectionType<>1 AND TransportType<>2 AND ShipmentType<>2 AND BLType<>2"}, "divCheckboxesList", "cbAddedItemID", null, 2, "col-sm-2");
            });
            break;
        }


        //region Reports/QuotationsStatistics
        case "QuotationsStatistics": {
            debugger;
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Reports/Statistics/QuotationsStatistics.js', function () { QuotationsStatistics_Initialize(); });
            break;
        }

        //region Reports/TEUsStatisticss
        case "TEUsStatistics": {
            debugger;
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Reports/Statistics/TEUsStatistics.js', function () { TeuStatistics_Initialize(); });
            break;
        }
        //region Reports/FlexiTankStatus
        case "FlexiTankStatus": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/FlexiTankStatus", "div-content", function () {
                CallGETFunctionWithParameters("/api/FlexiTankStatus/GetFlexiTankStatusFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slSalesman", data[0], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCreator", data[0], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[1], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCountryPOL", data[12]
                        //    , function(){ $("#slCountryPOD").html($("#slCountryPOL").html());});
                        ////FillListFromObject(null, 2, "All Customers", "slCustomer", data[2], null);
                        //$("#slCustomer").html($("#hReadySlCustomers").html());
                        ////FillListFromObject(null, 2, "All Booking Parties", "slBookingParty", data[2], null);
                        //$("#slBookingParty").html($("#hReadySlCustomers").html());
                        ////GetListYears(null, null, "slYearsOperationStatistics", null,null);
                        //FillListFromObject(null, 1, "All Currencies", "slCurrency", data[3], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slOperationStages", data[4], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slShippingLine", data[5], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slVessel", data[6], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTrackingStage", data[7], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCommodity", data[8], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slAgent", data[9], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slNetwork", data[10], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slMoveType", data[11], null);
                        //FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCustomsClearanceAgent", data[13], null);
                        $("#txtGuranteeLetterFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtGuranteeLetterToDate").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtFromCloseDate").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtToCloseDate").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtFromDateSelectOperations").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtToDateSelectOperations").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/Statistics/FlexiTankStatus.js');
            });
            break;
        }

        case "ChargesWithoutInvoicesReport": {
            debugger;
            FadePageCover(true);
            glbCallingControl = pControlID;
            LoadView("/Reports/ChargesWithoutInvoicesReport", "div-content", function () {
                //$("#liFormName").text("تقرير بنود الخدمات بدون فاتورة");

                CallGETFunctionWithParameters("/api/ChargesWithoutInvoicesReport/GetChargesWithoutInvoicesReportFilter", null
                    , function (data) {
                        debugger;

                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[0], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slClient", data[1], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slPOD", data[2], function(){
                            $("#slPOL").html($("#slPOD").html());
                        });
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slChargeType", data[3], null);
                        FillListFromObject(null, 1, TranslateString("SelectFromMenu"), "slOperations", data[4], null);

                        $("#txtFromDate").val('01/01/2023');
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () {
                        FadePageCover(false);
                        $("#hl-menu-Reports").parent().addClass("active");
                    }
                );

                $.getScript(strServerURL + '/Scripts/Reports/Statistics/ChargesWithoutInvoicesReport.js');
            });
            break;
        }

        case "InvoicesReports": {
            debugger;
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/InvoicesReports.js', function () { InvoicesReports_Initialize(); });
            break;
        }
        //region OperAccountingReports/PayablesReports
        case "PayablesReports": {
            debugger;
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/PayablesReports.js', function () { PayablesReports_Initialize(); });
            break;
        }
        //region OperAccountingReports/AccNotesReports
        case "AccNotesReports": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/AccNotesReports", "div-content", function () {
                CallGETFunctionWithParameters("/api/AccNotesReports/FillFilter", null
                    , function (data) {
                        //data[0]:Branches //data[1]:Partners //data[2]:TaxTypes //data[3]:DiscountTypes
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[0], null);
                        FillListFromObject(null, 5, TranslateString("SelectFromMenu"), "slPartner", data[1], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slVATType", data[2], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slDiscountType", data[3], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu")/*"Select Pay. Type"*/, "slPartnerType", data[4], null);
                        $("#slCurrency").html("<option value=''>" + TranslateString("SelectFromMenu") + "</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        //FillListFromObject(null, 5/*pCodeOrName*/, "Select Partner", "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/AccNotesReports.js');
            });
            break;
        }
        //region OperAccountingReports/ChequesReports
        case "ChequesReports": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/ChequesReports", "div-content", function () {
                CallGETFunctionWithParameters("/api/ChequesReports/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "All", "slBranch", data[0], null);
                        FillListFromObject(null, 5, "All", "slPartner", data[1], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, "All", "slPartnerType", data[2], null);
                        FillListFromObject(null, 7, "All", "slBankAccount", data[3], null);
                        $("#slCurrency").html("<option value=''>All</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/ChequesReports.js');
            });
            break;
        }
        //region OperAccountingReports/AgingReports
        case "AgingReports": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/AgingReports", "div-content", function () {
                CallGETFunctionWithParameters("/api/AgingReports/FillFilter", null
                    , function (data) { //if i need filters then Re-Enable what i need
                        ////data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        //debugger;
                        ////FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        //FillListFromObject(null, 2, "All", "slBranch", data[0], null);
                        //FillListFromObject(null, 5, "All", "slPartner", data[1], null);
                        //FillListFromObject(null, 1/*pCodeOrName*/, "All", "slPartnerType", data[2], null);
                        //FillListFromObject(null, 7, "All", "slBankAccount", data[3], null);
                        //$("#slCurrency").html("<option value=''>All</option>");
                        //$("#slCurrency").append($("#hReadySlCurrencies").html());
                        //$("#slCurrency").val($("").html());
                        //$("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        //$("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/AgingReports.js');
            });
            break;
        }
        //region OperAccountingReports/PartnersStatements
        case "PartnersStatements": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/PartnersStatements", "div-content", function () {
                CallGETFunctionWithParameters("/api/PartnersStatements/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "<--All Branches-->", "slBranch", data[0], null);
                        FillListFromObject(null, 5, "<--Select Partner-->", "slPartner", data[1], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", data[2], null);
                        $("#slCurrency").html("<option value=''>All Currencies</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/PartnersStatements.js');
            });
            break;
        }
        //region OperAccountingReports/CustodyStatement
        case "CustodyStatement": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/CustodyStatement", "div-content", function () {
                CallGETFunctionWithParameters("/api/CustodyStatement/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "<--All Branches-->", "slBranch", data[0], null);
                        FillListFromObject(null, 5, "<--Select Partner-->", "slPartner", data[1], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, null/*"All PartnerTypes"*//*"Select Pay. Type"*/, "slPartnerType", data[2], null);
                        $("#slCurrency").html("<option value=''>All Currencies</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/CustodyStatement.js');
            });
            break;
        }
        //region OperAccountingReports/AllocationStatement
        case "AllocationStatement": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/AllocationStatement", "div-content", function () {
                CallGETFunctionWithParameters("/api/AllocationStatement/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "<--All Branches-->", "slBranch", data[0], null);
                        FillListFromObject(null, 5, "<--Select Partner-->", "slPartner", data[1], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", data[2], null);
                        $("#slCurrency").html("<option value=''>All Currencies</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/AllocationStatement.js');
            });
            break;
        }
        //region OperAccountingReports/BanksStatements
        case "BanksStatements": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/BanksStatements", "div-content", function () {
                CallGETFunctionWithParameters("/api/BanksStatements/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[0], null);
                        FillListFromObject(null, 5, TranslateString("SelectFromMenu"), "slPartner", data[1], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slPartnerType", data[2], null);
                        FillListFromObject(null, 7, TranslateString("SelectFromMenu"), "slBankAccount", data[3], null);
                        $("#slCurrency").html("<option value=''>All Currencies</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/BanksStatements.js');
            });
            break;
        }
        //region OperAccountingReports/TreasuriesStatements
        case "TreasuriesStatements": {
            debugger;
            FadePageCover(true);
            LoadView("/Reports/TreasuriesStatements", "div-content", function () {
                CallGETFunctionWithParameters("/api/TreasuriesStatements/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slBranch", data[0], null);
                        FillListFromObject(null, 5, TranslateString("SelectFromMenu"), "slPartner", data[1], null);
                        FillListFromObject(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu")/*"Select Pay. Type"*/, "slPartnerType", data[2], null);
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slTreasury", data[3], null);
                        $("#slCurrency").html("<option value=''>All Currencies</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/Reports/AccountingReports/TreasuriesStatements.js');
            });
            break;
        }
        //region AccountsReceivable/ARPayment and APPayment
        case "APPayments":
        case "ARPayments": {
            debugger;
            ShowliChequeAlarm();
            if (pControlID == "ARPayments") {
                glbTransactionType = constTransactionARPayment;
                glbPRType = constPRTypeReceivable;
            }
            else { //APPayments
                glbTransactionType = constTransactionAPPayment;
                glbPRType = constPRTypePayable;
            }
            strBindTableRowsFunctionName = "Payment_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/Payment", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/CommonARAndAP/Payment.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE PaymentTypeID IS NOT NULL AND IsDeleted=0 AND IsApproved=0 AND PRType = " + glbPRType;
                    var pOrderBy = "ID DESC";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            Payment_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 5/*pCodeOrName*/, "Select Partner", "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                            FillListFromObject(null, 2/*pCodeOrName*/, "Select Treasury", "slPaymentTreasury", pData[3], null);
                            FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], function () { $("#slPaymentPartnerType").html($("#slPartnerType").html()); });
                            FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                            FillListFromObject(null, 4/*pNameAndCode*/, "Select Charge", "slPaymentChargeType", pData[7], null);
                            //$("#slARFBranch").html($("#hReadySlBranches").html());
                            //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                            $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                            //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                            if (pControlID == "ARPayments") {
                                $("#liAccountsPaymentLink").text("Accounts Receivable");
                                $("#liAccountsPaymentLink").attr("onclick", "LoadViews('AccountsReceivable')");
                                $("#liAccountsPaymentLink1").attr("onclick", "LoadViews('AccountsReceivable')");
                                $("#h3Payment").text("A\\R (Receivables)"); $("#h3Payment").addClass("static-text-primary");
                                $("#h3ModalLblPaymentType").html("A\\R (Receivables)" + '&nbsp;<label id="lblPaymentShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                                $("#h3ModalLblPaymentType").addClass("static-text-primary");
                                $("#divWithHoldingTax").removeClass("hide");
                                //$("#divIsGeneralExpense").addClass("hide");
                            }
                            else { //APPayments
                                $("#liAccountsPaymentLink").text("Accounts Payable");
                                $("#liAccountsPaymentLink").attr("onclick", "LoadViews('AccountsPayable')");
                                $("#liAccountsPaymentLink1").attr("onclick", "LoadViews('AccountsPayable')");
                                $("#h3Payment").text("A\\P (Payables)"); $("#h3Payment").addClass("static-text-danger");
                                $("#h3ModalLblPaymentType").html("A\\P (Payables)" + '&nbsp;<label id="lblPaymentShown" purpose="dynamicLabel" class="static-text-danger"></label>');
                                $("#h3ModalLblPaymentType").addClass("static-text-danger");
                                $("#divWithHoldingTax").addClass("hide");
                                //$("#divIsGeneralExpense").removeClass("hide");
                            }
                            $("#liAccountPaymentType").text($("#h3Payment").text());
                        });
                });
            },
                function () { Payment_ClearAllControls(); }, //i insert a new air reservation form directly
                function () { Payment_DeleteList(); });
            break;
        }
        //region OpenBalance/PartnerOpenBalance
        case "PartnerOpenBalance": {
            debugger;
            strBindTableRowsFunctionName = "PartnerOpenBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payment/PartnerOpenBalance_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/PartnerOpenBalance", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/OpenBalance/PartnerOpenBalance.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE TransactionType IN(" + constTransactionOpenCreditBalance + "," + constTransactionOpenDebitBalance + ")";
                    var pOrderBy = "PartnerTypeCode,PartnerName";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjectsForPartnerOpenBalance: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            PartnerOpenBalance_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 5/*pCodeOrName*/, "Select Partner", "slPartner", pData[2], function () { /*$("#slPaymentPartner").html($("#slPartner").html());*/ }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                            FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[3], null);
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slAccPartnerBalanceCurrency").html($("#hReadySlCurrencies").html());
                            $("#slCurrency").prepend("<option value='' selected>Select Currency</option>");
                        });
                });
            },
                function () { PartnerOpenBalance_FillModal(0); }, //i insert a new air reservation form directly
                function () { PartnerOpenBalance_DeleteList(); });
            break;
        }
        //region OpenBalance/BankOpenBalance
        case "BankOpenBalance": {
            debugger;
            strBindTableRowsFunctionName = "BankOpenBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payment/BankOpenBalance_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/BankOpenBalance", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/OpenBalance/BankOpenBalance.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE PaymentTypeID IS NULL AND BankAccountID IS NOT NULL";
                    var pOrderBy = "AccountName";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjectsForBankOpenBalance: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            BankOpenBalance_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slBank", pData[2], function () { /*$("#slPaymentPartner").html($("#slPartner").html());*/ }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                            $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                            //    FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[3], null);
                            //    FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            //    FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], function () { $("#slPaymentPartnerType").html($("#slPartnerType").html()); });
                            //    FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                            //    FillListFromObject(null, 4/*pNameAndCode*/, "Select Charge", "slPaymentChargeType", pData[7], null);
                            //    //$("#slARFBranch").html($("#hReadySlBranches").html());
                            //    //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                            //    $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                        });
                });
            },
                function () { BankOpenBalance_FillModal(0); }, //i insert a new air reservation form directly
                function () { BankOpenBalance_DeleteList(); });
            break;
        }
        //region OpenBalance/TreasuryOpenBalance
        case "TreasuryOpenBalance": {
            debugger;
            strBindTableRowsFunctionName = "TreasuryOpenBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payment/TreasuryOpenBalance_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/TreasuryOpenBalance", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/OpenBalance/TreasuryOpenBalance.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE PaymentTypeID IS NULL AND TreasuryID IS NOT NULL";
                    var pOrderBy = "TreasuryName";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjectsForTreasuryOpenBalance: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            TreasuryOpenBalance_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTreasury", pData[2], function () { /*$("#slPaymentPartner").html($("#slPartner").html());*/ }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                            $("#slCurrency").prepend("<option value='' selected>Select Currency</option>");
                            //    FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[3], null);
                            //    FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            //    FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], function () { $("#slPaymentPartnerType").html($("#slPartnerType").html()); });
                            //    FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                            //    FillListFromObject(null, 4/*pNameAndCode*/, "Select Charge", "slPaymentChargeType", pData[7], null);
                            //    //$("#slARFBranch").html($("#hReadySlBranches").html());
                            //    //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                            //    $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                        });
                });
            },
                function () { TreasuryOpenBalance_FillModal(0); }, //i insert a new air reservation form directly
                function () { TreasuryOpenBalance_DeleteList(); });
            break;
        }

        //region AccountsReceivable/Allocation
        case "ReceivablesAllocations":
        case "PayablesAllocations": {
            debugger;
            var pWhereClause = "";
            if (pControlID == "ReceivablesAllocations") {
                glbTransactionType = constTransactionReceivableAllocation;
                pWhereClause = " WHERE UnAllocatedReceivables IS NOT NULL AND PartnerTypeID=" + constCustomerPartnerTypeID;
            }
            else {
                glbTransactionType = constTransactionPayableAllocation;
                pWhereClause = " WHERE (UnAllocatedPayables IS NOT NULL OR PartnerTypeID=" + constCustodyPartnerTypeID + ") AND PartnerTypeID=" + constSupplierPartnerTypeID + ")";
            }
            strBindTableRowsFunctionName = "ARAllocation_Partners_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payment/ARAllocation_Partners_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/ARAllocation", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/AccountsReceivable/ARAllocation.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pOrderBy = " PartnerTypeID, Name ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseAllocation_Partners: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            if (pControlID == "ReceivablesAllocations") {
                                ARAllocation_Partners_BindTableRows(JSON.parse(pData[0]));
                            }
                            else if (pControlID == "A_PayablesAllocations") {
                                ARAllocation_Partners_BindTableRows(JSON.parse(pData[4]));
                            }
                            FillListFromObject(null, 5/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                            FillListFromObject(pControlID == "ReceivablesAllocations" ? constCustomerPartnerTypeID : constSupplierPartnerTypeID, 1/*pCodeOrName*/, null/*"Select Partner Type"*/, "slPartnerType", pData[3], null);
                            //FillListFromObject(null, 2/*pCodeOrName*/, "Select Treasury", "slPaymentTreasury", pData[3], null);
                            //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            ////$("#slARFBranch").html($("#hReadySlBranches").html());
                            //$("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                            if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                            if (pControlID == "ReceivablesAllocations") {
                                $("#liAccountsAllocationLink").text(TranslateString("Accounts Receivable"));
                                $("#liAccountsAllocationLink").attr("onclick", "LoadViews('AccountsReceivable')");
                                $("#liAccountsAllocationLink1").attr("onclick", "LoadViews('AccountsReceivable')");
                                $("#h3Allocation").text(TranslateString("ReceivablesAllocations")); $("#h3Allocation").addClass("static-text-primary");
                                $("#h3ModalLblAllocationType").html("Receivables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                                $("#h3ModalLblAllocationType").addClass("static-text-primary");
                            }
                            else { //APPayments
                                $("#liAccountsAllocationLink").text("Accounts Payable");
                                $("#liAccountsAllocationLink").attr("onclick", "LoadViews('AccountsPayable')");
                                $("#liAccountsAllocationLink1").attr("onclick", "LoadViews('AccountsPayable')");
                                $("#h3Allocation").text(TranslateString("PayablesAllocations")); $("#h3Allocation").addClass("static-text-danger");
                                $("#h3ModalLblAllocationType").html("Payables Allocation" + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-danger"></label>');
                                $("#h3ModalLblAllocationType").addClass("static-text-danger");
                            }
                            $("#liAccountAllocationType").text($("#h3Allocation").text());
                        });
                });
            },
                function () { ARAllocation_ClearAllControls(); }, //i insert a new air reservation form directly
                function () { ARAllocation_DeleteList(); });
            break;
        }

        //region Approvals/PaymentsApprovals
        case "PaymentsApprovals": {
            debugger;
            strBindTableRowsFunctionName = "PaymentApproval_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/PaymentApproval", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/Approval/PaymentApproval.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE IsDeleted=0 AND IsApproved=0  AND IsRefused=0 ";
                    var pOrderBy = " ID DESC ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            PaymentApproval_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 5/*pCodeOrName*/, "All Partners", "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                            FillListFromObject(null, 2/*pCodeOrName*/, "Select Treasury", "slPaymentTreasury", pData[3], null);
                            FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], null);
                            FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                            FillListFromObject(null, 4/*pNameAndCode*/, "Select Expense", "slPaymentChargeType", pData[7], null);
                            //$("#slARFBranch").html($("#hReadySlBranches").html());
                            //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                            $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                            //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                        });
                });
            },
                function () { Approval_ClearAllControls(); }, //i insert a new air reservation form directly
                function () { Approval_DeleteList(); });
            break;
        }
        case "AccountingOperationsPayablesApprovals":
        case "OperationsPayablesApprovals": {
            debugger;
            strBindTableRowsFunctionName = "OperationPayableApproval_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payables/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/OperationPayableApproval", "div-content", function () {
                if (pDefaults.UnEditableCompanyName == "OCE" || pDefaults.UnEditableCompanyName == "CHM" || pDefaults.UnEditableCompanyName == "IST")
                    $(".classShowForTank").removeClass("hide");
                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                $.getScript(strServerURL + '/Scripts/OperAcc/Approval/OperationPayableApproval.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE IsDeleted=0 AND IsApproved=0  AND AccNoteID IS NULL ";
                    if (pDefaults.UnEditableCompanyName == "GBL")
                        pWhereClause += " AND SupplierInvoiceNo IS NOT NULL AND SupplierInvoiceNo<>'N/A' AND CostAmount>0 " + "\n";
                    var pOrderBy = " OperationID DESC ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            OperationPayableApproval_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 5/*pCodeOrName*/, "All Partners", "slPartner", pData[2], null/*function () { $("#slPaymentPartner").html($("#slPartner").html()); }*/); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                            FillListFromObject(null, 5/*pCodeOrName*/, "Select Custody", "slSelectCustody", pData[2]
                                , function () {
                                    $("#slSelectCustody option[PartnerTypeID!=" + constCustodyPartnerTypeID + "][value!=''" + "]").addClass("hide");
                                });
                            //FillListFromObject(null, 1/*pCodeOrName*/, "All Oper.s", "slOperation", pData[3], null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectCostCenter"), "slCostCenter", pData[6], null);
                            //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], null);
                            FillListFromObject_ERP(null, 2, TranslateString("SelectSafe"), "slSafes", pData[7], null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectBank"), "slBanks", pData[8], null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectAccount"), "slAccount", pData[9], null);
                            //FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                            //$("#slARFBranch").html($("#hReadySlBranches").html());
                            //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                            $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSubAccount").html('<option>' + TranslateString("SelectSubAccount") + '</option>');
                            //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                            if (pControlID == "AccountingOperationsPayablesApprovals") {
                                $("#liOperAcc").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                                $("#liApprovals").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            }
                            else {
                                $("#liOperAcc").attr("onclick", "LoadViews('Approvals');");
                                $("#liApprovals").attr("onclick", "LoadViews('Approvals');");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Approval_ClearAllControls(); },
                function () { Approval_DeleteList(); });
            break;
        }
        case "AccountingOperationsPayablesApprovalsTax": {
            debugger;
            strBindTableRowsFunctionName = "AccountingOperationsPayablesApprovalsTax_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payables/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/Administration/AccountingOperationsPayablesApprovalsTax", "div-content", function () {
                if (pDefaults.UnEditableCompanyName == "OCE" || pDefaults.UnEditableCompanyName == "CHM" || pDefaults.UnEditableCompanyName == "IST")
                    $(".classShowForTank").removeClass("hide");
                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                $.getScript(strServerURL + '/Scripts/Administration/admapp/AccountingOperationsPayablesApprovalsTax.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript

                    var pWhereClause = "";
                    if ($("#hDefaultUnEditableCompanyName").val() == "CHM") {
                        //pWhereClause = " WHERE IsDeleted=0  AND id in(select originid from ForwardingTransChemTax.dbo.taxlink where originid is not null and notes='Payables' AND JVID IS NULL)  AND AccNoteID IS NULL ";
                        pWhereClause = " WHERE IsDeleted=0  AND id not in(select originid from ForwardingTransChemTax.dbo.taxlink where originid is not null and notes='Payables' AND JVID IS not NULL)  AND AccNoteID IS NULL ";

                    }
                    else if ($("#hDefaultUnEditableCompanyName").val() == "OCE") {
                        pWhereClause = " WHERE IsDeleted=0  AND id not in(select originid from ForwardingTROTax.dbo.taxlink where originid is not null and notes='Payables' AND JVID IS not NULL)  AND AccNoteID IS NULL ";
                    }
                    if (pDefaults.UnEditableCompanyName == "GBL")
                        pWhereClause += " AND SupplierInvoiceNo IS NOT NULL AND SupplierInvoiceNo<>'N/A' AND CostAmount>0 " + "\n";
                    var pOrderBy = " ID DESC ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            AccountingOperationsPayablesApprovalsTax_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 5/*pCodeOrName*/, "All Partners", "slPartner", pData[2], null/*function () { $("#slPaymentPartner").html($("#slPartner").html()); }*/); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                            FillListFromObject(null, 5/*pCodeOrName*/, "Select Custody", "slSelectCustody", pData[2]
                                , function () {
                                    $("#slSelectCustody option[PartnerTypeID!=" + constCustodyPartnerTypeID + "][value!=''" + "]").addClass("hide");
                                });
                            //FillListFromObject(null, 1/*pCodeOrName*/, "All Oper.s", "slOperation", pData[3], null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectCostCenter"), "slCostCenter", pData[6], null);
                            //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], null);
                            FillListFromObject_ERP(null, 2, TranslateString("SelectSafe"), "slSafes", pData[7], null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectBank"), "slBanks", pData[8], null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectAccount"), "slAccount", pData[9], null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectAccount"), "slAccountCharge", pData[9], null);

                            //FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                            //$("#slARFBranch").html($("#hReadySlBranches").html());
                            //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                            $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSubAccount").html('<option>' + TranslateString("SelectSubAccount") + '</option>');
                            //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                            if (pControlID == "AccountingOperationsPayablesApprovalsTax") {
                                $("#liOperAcc").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                                $("#liApprovals").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            }
                            else {
                                $("#liOperAcc").attr("onclick", "LoadViews('Approvals');");
                                $("#liApprovals").attr("onclick", "LoadViews('Approvals');");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Approval_ClearAllControls(); },
                function () { Approval_DeleteList(); });
            break;
        }
        case "OperationPayableStatues": {
            debugger;
            strBindTableRowsFunctionName = "OperationPayableStatues_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Payables/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/OperationPayableStatues", "div-content", function () {
                if (pDefaults.UnEditableCompanyName == "OCE" || pDefaults.UnEditableCompanyName == "CHM" || pDefaults.UnEditableCompanyName == "IST")
                    $(".classShowForTank").removeClass("hide");
                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                $.getScript(strServerURL + '/Scripts/OperAcc/Approval/OperationPayableStatues.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    //  var pWhereClause = " WHERE IsDeleted=0  AND AccNoteID IS NULL ";
                    var pWhereClause = " WHERE IsDeleted=0  ";

                    if (pDefaults.UnEditableCompanyName == "GBL")
                        pWhereClause += " AND SupplierInvoiceNo IS NOT NULL AND SupplierInvoiceNo<>'N/A' AND CostAmount>0 " + "\n";
                    var pOrderBy = " OperationID DESC ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            OperationPayableStatues_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 5/*pCodeOrName*/, "All Partners", "slPartner", pData[2], null/*function () { $("#slPaymentPartner").html($("#slPartner").html()); }*/); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                            FillListFromObject(null, 5/*pCodeOrName*/, "Select Custody", "slSelectCustody", pData[2]
                                , function () {
                                    $("#slSelectCustody option[PartnerTypeID!=" + constCustodyPartnerTypeID + "][value!=''" + "]").addClass("hide");
                                });
                            //FillListFromObject(null, 1/*pCodeOrName*/, "All Oper.s", "slOperation", pData[3], null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectCostCenter"), "slCostCenter", pData[6], null);
                            //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], null);
                            FillListFromObject_ERP(null, 2, TranslateString("SelectSafe"), "slSafes", pData[7], null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectBank"), "slBanks", pData[8], null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectAccount"), "slAccount", pData[9], null);
                            //FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                            //$("#slARFBranch").html($("#hReadySlBranches").html());
                            //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                            $("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSubAccount").html('<option>' + TranslateString("SelectSubAccount") + '</option>');
                            //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                            if (pControlID == "AccountingOperationsPayablesApprovals") {
                                $("#liOperAcc").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                                $("#liApprovals").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            }
                            else {
                                $("#liOperAcc").attr("onclick", "LoadViews('Approvals');");
                                $("#liApprovals").attr("onclick", "LoadViews('Approvals');");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Approval_ClearAllControls(); },
                function () { Approval_DeleteList(); });
            break;
        }

        case "AccountingInvoicesApprovals":
        case "FirstStepDraftInvoiceApproval":
        case "DraftInvoicesApprovals":
        case "InvoiceStatusForm":
        //case "LCLInvoices":
        case "InvoicesApprovals": {
            debugger;
            $.getScript(strServerURL + '/Scripts/OperAcc/Approval/InvoiceApproval.js?' + glbVersion, function () { InvoiceApproval_Initialize(); });
            break;
        }

        case "InvoicesApprovalTax": {
            debugger;
            $.getScript(strServerURL + '/Scripts/Administration/admapp/InvoiceApprovalTax.js?' + glbVersion, function () { InvoiceApprovalTax_Initialize(); });
            break;
        }

        case "TraOperationTanks": {
            debugger;

            LoadView("/OperAcc/TankPayablesAndReceivables", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/OperAcc/Approval/TankPayablesAndReceivables.js?', function () {//sherif:loadwithpaging fn is callback in $.getscript

                });
            },
                function () { },
                function () { });
            break;
        }

        case "AccountingPurchaseInvoicesApprovals": {
            debugger;
            strBindTableRowsFunctionName = "PurchaseInvoiceApproval_BindTableRows";
            strLoadWithPagingFunctionName = "/api/PurchaseInvoice/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/PurchaseInvoiceApproval", "div-content", function () {
                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                //if ($("#hDefaultUnEditableCompanyName").val() == "IST" || $("#hDefaultUnEditableCompanyName").val() == "KML" || $("#hDefaultUnEditableCompanyName").val() == "KDS" || $("#hDefaultUnEditableCompanyName").val() == "NEW") {
                //    $("#slEditInvoiceAddressTypes").attr("data-required", "false");
                //}
                //else {
                //    $("#slEditInvoiceAddressTypes").attr("data-required", "true");
                //}
                $.getScript(strServerURL + '/Scripts/OperAcc/Approval/PurchaseInvoiceApproval.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    //var pWhereClause = " WHERE IsDeleted=0 AND IsApproved=0 AND OperationStageID NOT IN (" + ClosedQuoteAndOperStageID + "," + CancelledQuoteAndOperStageID + ")";
                    var pWhereClause = " WHERE IsDeleted=0 AND IsApproved=0 ";
                    //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
                    var pOrderBy = "ID";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            GetListWithNameAndWhereClause(null, "/api/BankTemplate/LoadAll", "<--Select Bank Template-->", "slBankTemplate", "ORDER BY Name", null);
                            PurchaseInvoiceApproval_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 5/*pCodeOrName*/, "<--All Clients-->", "slPartnerClients", pData[2]
                                , null/*function () { $("#slPaymentPartner").html($("#slPartner").html()); }*/); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                            FillListFromObject(null, 5/*pCodeOrName*/, "<--All Suppliers-->", "slPartnerSuppliers", pData[2]
                                , null/*function () { $("#slPaymentPartner").html($("#slPartner").html()); }*/); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/

                            //FillListFromObject(null, 1/*pCodeOrName*/, "All Oper.s", "slOperation", pData[3], null);
                            //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            FillListFromObject(null, 1/*pCodeOrName*/, "<--Select Client Type-->"/*"Select Pay. Type"*/, "slPartnerTypeClients", pData[3], null);
                            FillListFromObject(null, 1/*pCodeOrName*/, "<--Select Supplier Type-->"/*"Select Pay. Type"*/, "slPartnerTypeSuppliers", pData[3], null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center-->", "slCostCenter", pData[4], null);
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Inv.Type-->", "slInvoiceType", pData[7], null);
                            //FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                            $("#slBranch").append($("#hReadySlBranches").html()); $("#slBranch").val("");
                            $("#slPurchaseInvoiceCurrency").html($("#hReadySlCurrencies").html());
                            //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                            if (pControlID == "AccountingPurchaseInvoicesApprovals") {
                                $("#liOperAcc").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                                $("#liApprovals").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            }
                            else {
                                $("#liOperAcc").attr("onclick", "LoadViews('Approvals');");
                                $("#liApprovals").attr("onclick", "LoadViews('Approvals');");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Approval_ClearAllControls(); },
                function () { Approval_DeleteList(); });
            break;
        }

        case "AccountingAccNotesApprovals":
        case "AccNotesApprovals": {
            debugger;
            strBindTableRowsFunctionName = "AccNoteApproval_BindTableRows";
            strLoadWithPagingFunctionName = "/api/AccNote/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/OperAcc/AccNoteApproval", "div-content", function () {
                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                $.getScript(strServerURL + '/Scripts/OperAcc/Approval/AccNoteApproval.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE IsDeleted=0 AND IsApproved=0 ";
                    //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
                    var pOrderBy = " ID DESC ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            AccNoteApproval_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 5/*pCodeOrName*/, "All Partners", "slPartner", pData[2]
                                , null/*function () { $("#slPaymentPartner").html($("#slPartner").html()); }*/); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/

                            //FillListFromObject(null, 1/*pCodeOrName*/, "All Oper.s", "slOperation", pData[3], null);
                            //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center-->", "slCostCenter", pData[6], null);
                            GetListWithNameAndWhereClause(null, "/api/BankTemplate/LoadAll", "<--Select Bank Template-->", "slBankTemplate", "ORDER BY Name", null);
                            //FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                            //$("#slARFBranch").html($("#hReadySlBranches").html());
                            //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                            $("#slEditAccNoteCurrency").html($("#hReadySlCurrencies").html());
                            //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                            if (pControlID == "AccountingAccNotesApprovals") {
                                $("#liOperAcc").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                                $("#liApprovals").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            }
                            else {
                                $("#liOperAcc").attr("onclick", "LoadViews('Approvals');");
                                $("#liApprovals").attr("onclick", "LoadViews('Approvals');");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Approval_ClearAllControls(); },
                function () { Approval_DeleteList(); });
            break;
        }
        case "AccountingAccNotesApprovalsTax": {
            debugger;
            strBindTableRowsFunctionName = "AccountingAccNotesApprovalsTax_BindTableRows";
            strLoadWithPagingFunctionName = "/api/AccNote/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/Administration/AccountingAccNotesApprovalsTax", "div-content", function () {
                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                $.getScript(strServerURL + '/Scripts/Administration/admapp/AccountingAccNotesApprovalsTax.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = "where 1=1 and ";
                    if ($("#hDefaultUnEditableCompanyName").val() == "CHM") {
                        pWhereClause += " IsDeleted=0 AND ID NOT IN(SELECT T.OriginID FROM ForwardingTransChemTax.dbo.TaxLink T WHERE Notes='AccNote' AND JVID IS NOT NULL AND OriginID IS NOT NULL)";
                    }
                    else if ($("#hDefaultUnEditableCompanyName").val() == "OCE") {
                        pWhereClause += " IsDeleted=0 AND ID NOT IN(SELECT T.OriginID FROM ForwardingTROTax.dbo.TaxLink T WHERE Notes='AccNote' AND JVID IS NOT NULL AND OriginID IS NOT NULL)";
                    }
                    //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
                    var pOrderBy = " ID DESC ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            AccountingAccNotesApprovalsTax_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 5/*pCodeOrName*/, "All Partners", "slPartner", pData[2]
                                , null/*function () { $("#slPaymentPartner").html($("#slPartner").html()); }*/); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/

                            //FillListFromObject(null, 1/*pCodeOrName*/, "All Oper.s", "slOperation", pData[3], null);
                            //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center-->", "slCostCenter", pData[6], null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center-->", "slAccountCharge", pData[7], null);

                            GetListWithNameAndWhereClause(null, "/api/BankTemplate/LoadAll", "<--Select Bank Template-->", "slBankTemplate", "ORDER BY Name", null);
                            //FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                            //$("#slARFBranch").html($("#hReadySlBranches").html());
                            //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                            $("#slEditAccNoteCurrency").html($("#hReadySlCurrencies").html());
                            //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                            if (pControlID == "AccountingAccNotesApprovals") {
                                $("#liOperAcc").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                                $("#liApprovals").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            }
                            else {
                                $("#liOperAcc").attr("onclick", "LoadViews('Approvals');");
                                $("#liApprovals").attr("onclick", "LoadViews('Approvals');");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Approval_ClearAllControls(); },
                function () { Approval_DeleteList(); });
            break;
        }
        //region Accounting/MasterData
        case "ChartOfAccounts": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ChartOfAccounts_AppendToTree";
            strLoadWithPagingFunctionName = "/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE AccLevel=1";
            var pOrderBy = "Account_Number";
            var pPageNumber = 1;
            var pPageSize = 9999;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/ChartOfAccounts", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/ChartOfAccounts.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            ChartOfAccounts_AppendToTree("0", JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ChartOfAccounts_FillModal(1, 0); },
                function () { ChartOfAccounts_DeleteList(); });
            break;
        }
        //region Accounting/MasterData
        case "ChartOfLinkingAccounts": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ChartOfLinkingAccounts_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ChartOfLinkingAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE SubAccLevel=1";
            var pOrderBy = "SubAccount_Number";
            var pPageNumber = 1;
            var pPageSize = 9999;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/ChartOfLinkingAccounts", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/ChartOfLinkingAccounts.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            ChartOfLinkingAccounts_AppendToTree("0", JSON.parse(pData[0]));
                            FillDivWithCheckboxes("divCbAccounts", pData[2], "classCbAllAccounts", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                            //FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        });
                });
                //if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                //    //$("#divCbShowSelectedItemsOnly").addClass("float-right"); //it causes txtName in EnCulture to act as readlyonly!!!!!
                //    $(".swapChildrenClass:not(.reversed)").reverseChildren();
                //}
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ChartOfLinkingAccounts_FillModal(1, 0); },
                function () { ChartOfLinkingAccounts_DeleteList(); });
            break;
        }
        //region Accounting/MasterData
        case "CostCenters": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CostCenters_AppendToTree";
            strLoadWithPagingFunctionName = "/api/CostCenters/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE CCLevel=1";
            var pOrderBy = "CostCenterNumber";
            var pPageNumber = 1;
            var pPageSize = 9999;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/CostCenters", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/CostCenters.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            CostCenters_AppendToTree("0", JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { CostCenters_FillModal(1, 0); },
                function () { CostCenters_DeleteList(); });
            break;
        }

        case "SubAccountsPrivilege": {

            strLoadWithPagingFunctionName = "/api/SubAccountsPrivilege/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1 ";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 50;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/SubAccountsPrivilege", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/SubAccountsPrivilege.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pTabelRows = JSON.parse(pData[0]);
                            var pSubAccounts = pData[2];
                            var pUseres = pData[3];

                            SubAccountsPrivilege_BindTableRows(pTabelRows);

                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slSubAccount", pSubAccounts, null);

                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slUsers", pUseres, null);
                        });
                });
            },
                function () { Sec_UserSafes_ClearAllControls(); },
                function () { Sec_UserSafes_DeleteList(); });
            break;
        }

        case "A_Investmentcostcenters":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/Investmentcostcenters/LoadWithPaging";
                LoadView("/Accounting/MasterData/Investmentcostcenters", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/Accounting/MasterData/Investmentcostcenters.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where 1=1";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Investmentcostcenters/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SL_ClientDbtCrdtNotes_BindTableRows(pTabelRows); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/Investmentcostcenters/IntializeData",
                            data: { pDate: ConvertDateFormat(getTodaysDateInddMMyyyyFormat()), pOnlyCurrency: false },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'CostCenterName', 'SELECT CostCenter', '#slCostCenterID', '');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'CostCenterName', 'SELECT CostCenter', '#slCostCenterID2', '');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'CostCenterName', 'SELECT CostCenter', '#slCostCenterID3', '');

                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { SL_ClientDbtCrdtNotes_ClearAllControls(); },
                    function () { SL_ClientDbtCrdtNotes_DeleteList(); });
                break;

            }

        case "JVTypes": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "JVTypes_BindTableRows";
            strLoadWithPagingFunctionName = "/api/JVTypes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/JVTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/JVTypes.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            JVTypes_BindTableRows(JSON.parse(pData[0]));
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { JVTypes_ClearAllControls(); },
                function () { JVTypes_DeleteList(); });
            break;
        }
        case "JournalTypes": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "JournalTypes_BindTableRows";
            strLoadWithPagingFunctionName = "/api/JournalTypes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/JournalTypes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/JournalTypes.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            JournalTypes_BindTableRows(JSON.parse(pData[0]));
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { JournalTypes_ClearAllControls(); },
                function () { JournalTypes_DeleteList(); });
            break;
        }
        case "ExchangeRates": {
            debugger;
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strLoadWithPagingFunctionName = "/api/DailyExchangeRate/LoadWithPaging";
            strBindTableRowsFunctionName = "DailyExchangeRate_BindTableRows";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/Accounting/MasterData/DailyExchangeRate", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/DailyExchangeRate.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 1, 10, function (pTabelRows) { DailyExchangeRate_BindTableRows(pTabelRows); });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { DailyExchangeRate_ClearAllControls(); },
                function () { DailyExchangeRate_DeleteList(); });
            break;
        }
        case "OpnJVNo": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "OpnJVNo_BindTableRows";
            strLoadWithPagingFunctionName = "/api/OpnJVNo/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/OpnJVNo", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/OpnJVNo.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            OpnJVNo_BindTableRows(JSON.parse(pData[0]));
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { OpnJVNo_ClearAllControls(); },
                function () { OpnJVNo_DeleteList(); });
            break;
        }

        //region Accounting/MasterData -----------------------------------------------------------------------------------------------------------------
        case "JVDefaults": {

            strLoadWithPagingFunctionName = "/api/JVDefaults/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1 ";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 50;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/JVDefaults", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/JVDefaults.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pTabelRows = JSON.parse(pData[0]);
                            var pJVTypes = pData[2];
                            var pJournalTypes = pData[3];

                            JVDefaults_BindTableRows(pTabelRows);

                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slJournalType", pJournalTypes, null);
                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slJVType", pJVTypes, null);
                        });
                });
            },
                function () { JVDefaults_ClearAllControls(); },
                function () { JVDefaults_DeleteList(); });
            break;
        }
        case "Budgets":
            {
                strLoadWithPagingFunctionName = "/api/Budgets/LoadWithPaging";
                LoadView("/Accounting/MasterData/Budgets", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/Accounting/MasterData/Budgets.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Budgets_BindTableRows(pTabelRows); });

                        //$.ajax({
                        //    type: "GET",
                        //    url: strServerURL + "api/Budgets/IntializeData",
                        //    data: { pID: null },
                        //    contentType: "application/json; charset=utf-8",
                        //    dataType: "json",
                        //    success: function (d) {
                        //        Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#slAccountID', '');
                        //        // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#slSubAccountID', '');
                        //        // Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#hidden_slAccountID', '');
                        //        // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#hidden_slSubAccountID', '');
                        //        FadePageCover(false);
                        //    },
                        //    error: function (jqXHR, exception) {
                        //        debugger;
                        //        swal("Sorry", "Please, try again. This is print region !", "error");
                        //        FadePageCover(false);
                        //    }
                        //});
                    });
                },
                    function () { Budgets_ClearAllControls(); },
                    function () { Budgets_DeleteList(); });
                break;

            }
        case "Sec_UserSafes": {

            strLoadWithPagingFunctionName = "/api/Sec_UserSafes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1 ";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 50;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Administration/Sec_UserSafes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/Sec_UserSafes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pTabelRows = JSON.parse(pData[0]);
                            var pSafes = pData[2];
                            var pUseres = pData[3];

                            Sec_UserSafes_BindTableRows(pTabelRows);

                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slSafes", pSafes, null);
                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slUsers", pUseres, null);
                        });
                });
            },
                function () { Sec_UserSafes_ClearAllControls(); },
                function () { Sec_UserSafes_DeleteList(); });
            break;
        }

        case "SystemOptions": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "SystemOptions_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SystemOptions/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "OptionArName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Administration/SystemOptions", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/SystemOptions.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            SystemOptions_BindTableRows(JSON.parse(pData[0]));
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { SystemOptions_ClearAllControls(); },
                function () { JVTypes_DeleteList(); });
            break;
        }
        case "FA_UserBranches": {

            strLoadWithPagingFunctionName = "/api/FA_UserBranches/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1 ";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 50;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Administration/FA_UserBranches", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Administration/Settings/FA_UserBranches.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pTabelRows = JSON.parse(pData[0]);
                            var pBranches = pData[2];
                            var pUseres = pData[3];

                            FA_UserBranches_BindTableRows(pTabelRows);

                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slBranches", pBranches, null);
                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slUsers", pUseres, null);
                        });
                });
            },
                function () { FA_UserBranches_ClearAllControls(); },
                function () { FA_UserBranches_DeleteList(); });
            break;
        }
        //"Accounting/MasterData/A_Fiscal_Year"
        case "FiscalYears": {
            strLoadWithPagingFunctionName = "/api/A_Fiscal_Year/LoadWithPaging";
            LoadView("/Accounting/MasterData/A_Fiscal_Year", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/A_Fiscal_Year.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { A_Fiscal_Year_BindTableRows(pTabelRows); });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*CRM_Sources_ClearAllControls();*/ },
                function () { /*CRM_Sources_DeleteList();*/ });
            break;
        }
        case "CashFlow": {
            $("#hl-menu-MasterData").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CashFlow_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CashFlow/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/MasterData/CashFlow", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/MasterData/CashFlow.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            CashFlow_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select CashFlow-->", "slCashFlow", pData[2], null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[3], null);

                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { CashFlow_ClearAllControls(); },
                function () { CashFlow_DeleteList(); });
            break;
        }
        //region Accounting/Transactions
        case "AccountingAccNotesApprovalsReportTax": {
            debugger;
            strBindTableRowsFunctionName = "AccountingAccNotesApprovalsReportTax_BindTableRows";
            strLoadWithPagingFunctionName = "/api/AccNote/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/Accounting/Transactions/AccountingAccNotesApprovalsReportTax", "div-content", function () {
                if (IsAccountingActive) $(".classAccountingOption").removeClass("hide");
                else $(".classAccountingOption").addClass("hide");
                $.getScript(strServerURL + '/Scripts/Accounting/Transactions/AccountingAccNotesApprovalsReportTax.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pWhereClause = " WHERE IsDeleted=0 and IsApproved = 1 ";
                    //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
                    var pOrderBy = " ID DESC ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            AccountingAccNotesApprovalsReportTax_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 5/*pCodeOrName*/, "All Partners", "slPartner", pData[2]
                                , null/*function () { $("#slPaymentPartner").html($("#slPartner").html()); }*/); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/

                            //FillListFromObject(null, 1/*pCodeOrName*/, "All Oper.s", "slOperation", pData[3], null);
                            //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            FillListFromObject(null, 1/*pCodeOrName*/, "All PartnerTypes"/*"Select Pay. Type"*/, "slPartnerType", pData[5], null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center-->", "slCostCenter", pData[6], null);
                            GetListWithNameAndWhereClause(null, "/api/BankTemplate/LoadAll", "<--Select Bank Template-->", "slBankTemplate", "ORDER BY Name", null);
                            //FillListFromObject(null, 7/*pCodeOrName*/, "Select Bank Account", "slPaymentBankAccount", pData[6], null);
                            //$("#slARFBranch").html($("#hReadySlBranches").html());
                            //$("#slARFCurrency").html($("#hReadySlCurrencies").html());
                            $("#slEditAccNoteCurrency").html($("#hReadySlCurrencies").html());
                            //if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                            //if (pControlID == "AccountingAccNotesApprovals") {
                            //    $("#liOperAcc").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            //    $("#liApprovals").attr("onclick", "LoadViews('ReceiptsAndPaymentsApprovingAndPosting');");
                            //}
                            //else {
                            $("#liOperAcc").attr("onclick", "LoadViews('Approvals');");
                            $("#liApprovals").attr("onclick", "LoadViews('Approvals');");
                            //}
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Approval_ClearAllControls(); },
                function () { Approval_DeleteList(); });
            break;
        }
        case "PostingVouchersReportTax": {
            $("#hl-menu-Administration").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "PostingVouchersReportTax_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = "";
            if (pControlID == "PostingVouchersReportTax") {
                glbFormCalled = constFrmPosting;
                pWhereClause = "WHERE Posted = 1 and IsLiner <> 1 AND VoucherType=" + constVoucherCashIn;
            }
            else if (pControlID == "PostingVouchersReportTax") {
                glbFormCalled = constFrmUnPosting;
                pWhereClause = "WHERE IsLiner <> 1 AND VoucherType=" + constVoucherCashIn;
            }
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/Transactions/PostingVouchersReportTax", "div-content", function () {
                $("#liPost_Unpost_VoucherTax").text(TranslateString(pControlID));
                $("#h3Post_Unpost_VoucherTax").text($("#liPost_Unpost_Voucher").text());
                $.getScript(strServerURL + '/Scripts/Accounting/Transactions/PostingVouchersReportTax.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccount = pData[2];
                            var pSafe = pData[3];
                            var pTax = pData[4];
                            var pCostCenter = pData[5];
                            PostingVouchersReportTax_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, function () { $("#slSafe").html($("#slSearchSafe").html()); });
                            FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenter, null);
                            $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            $("#txtJVDate").val(pFormattedTodaysDate);
                            if (glbFormCalled == constFrmPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-Post").removeClass("hide");
                                $(".showForPosting").removeClass("hide");
                                $(".hideForPosting").addClass("hide");
                            }
                            else if (glbFormCalled == constFrmUnPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-UnPost").removeClass("hide");
                                $(".showForPosting").addClass("hide");
                                $(".hideForPosting").removeClass("hide");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Post_Unpost_Voucher_ClearAllControls();*/ },
                function () { /*Post_Unpost_Voucher_DeleteList();*/ });
            break;
        }

        case "InvoicesApprovalReportsTax": {
            debugger;
            $.getScript(strServerURL + '/Scripts/Accounting/Transactions/InvoicesApprovalReportsTax.js?' + glbVersion, function () { InvoicesApprovalReportsTax_Initialize(); });
            break;
        }

        case "JournalVouchers": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "JournalVouchers_BindTableRows";
            strLoadWithPagingFunctionName = "/api/JournalVouchers/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE Deleted=0 ";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/Transactions/JournalVouchers", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Transactions/JournalVouchers.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pJournalTypes = pData[3];
                            var pJVTypes = pData[4];
                            var pCostCenters = pData[5];
                            var pBranchs = pData[6];
                            var pOperations = pData[7];
                            JournalVouchers_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchJVType", pJVTypes, function () {
                                $("#slJVType").html($("#slSearchJVType").html());
                                $("#slSearchJVTypePrint").html($("#slSearchJVType").html());
                            });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchJournalType", pJournalTypes, function () {
                                $("#slJournalType").html($("#slSearchJournalType").html());
                                $("#slSearchJournalTypePrint").html($("#slSearchJournalType").html());
                            });



                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenters, null);

                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slBranch", pBranchs, null);
                            // $("#slBranch").html($("#hReadySlBranches").html());
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slBranch", pBranchDefaults, null);



                            FillListFromObject_ERP(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slOperation", pOperations, null);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { JournalVouchers_ClearAllControls(); },
                function () { JournalVouchers_DeleteList('F'); }); //the parameter 'F':NotPermanentDelete, 'D':PermanentDelete
            break;
        }
        case "OpenCloseFiscalYear":
            {
                LoadView("/Accounting/Transactions/OpenCloseFiscalYear", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/Accounting/Transactions/OpenCloseFiscalYear.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { },
                    function () { });
                break;
            }

        case "PostingJVs":
        case "UnPostingJVs":
        case "RestoringJVs": {
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Post_Restore_Unpost_JVs_BindTableRows";
            strLoadWithPagingFunctionName = "/api/JournalVouchers/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = "";
            if (pControlID == "PostingJVs") {
                glbFormCalled = constFrmPosting;
                pWhereClause = "WHERE Deleted=0 AND Posted=0 AND IsSysJv=0";
            }
            else if (pControlID == "UnPostingJVs") {
                glbFormCalled = constFrmUnPosting;
                pWhereClause = "WHERE Posted=1 and Deleted=0 AND IsSysJv=0";
            }
            else if (pControlID == "RestoringJVs") {
                glbFormCalled = constFrmRestoring;
                pWhereClause = "WHERE Deleted=1 and IsSysJv = 0";
            }

            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Accounting/Transactions/Post_Restore_Unpost_JVs", "div-content", function () {
                $("#liPost_Restore_Unpost_JVs").text(TranslateString(pControlID));
                $("#h3Post_Restore_Unpost_JVs").text($("#liPost_Restore_Unpost_JVs").text());
                $.getScript(strServerURL + '/Scripts/Accounting/Transactions/Post_Restore_Unpost_JVs.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pJournalTypes = pData[3];
                            var pJVTypes = pData[4];
                            Post_Restore_Unpost_JVs_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchJVType", pJVTypes, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchJournalType", pJournalTypes, null);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            if (glbFormCalled == constFrmPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-Post").removeClass("hide");
                            }
                            else if (glbFormCalled == constFrmUnPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-UnPost").removeClass("hide");
                            }
                            else if (glbFormCalled == constFrmRestoring) {
                                if ($("#hf_CanEdit").val() == "1")
                                    $("#btn-Restore").removeClass("hide");
                                if ($("#hf_CanDelete").val() == "1")
                                    $("#btn-PermanentDelete-MaunalShow").removeClass("hide");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Post_Restore_Unpost_JVs_ClearAllControls();*/ },
                function () { /*Post_Restore_Unpost_JVs_DeleteList();*/ });
            break;
        }
        case "PostingJVsTax":
        case "UnPostingJVsTax": {
            $("#hl-menu-Administration").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Post_Restore_Unpost_JVsTax_BindTableRows";
            strLoadWithPagingFunctionName = "/api/JournalVouchers/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = "";
            if (pControlID == "PostingJVsTax") {
                glbFormCalled = constFrmPosting;
                pWhereClause = "WHERE Deleted=0 AND Posted=0 AND IsSysJv=0 AND 1=41414";
            }
            else if (pControlID == "UnPostingJVsTax") {
                glbFormCalled = constFrmUnPosting;
                pWhereClause = "WHERE Posted=1 and Deleted=0 AND IsSysJv=0 AND 1=41414";
            }


            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Administration/Post_Restore_Unpost_JVsTax", "div-content", function () {
                $("#liPost_Restore_Unpost_JVs").text(TranslateString(pControlID));
                $("#h3Post_Restore_Unpost_JVs").text($("#liPost_Restore_Unpost_JVs").text());
                $.getScript(strServerURL + '/Scripts/Administration/admapp/Post_Restore_Unpost_JVsTax.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pJournalTypes = pData[3];
                            var pJVTypes = pData[4];
                            Post_Restore_Unpost_JVsTax_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchJVType", pJVTypes, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchJournalType", pJournalTypes, null);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            if (glbFormCalled == constFrmPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-Post").removeClass("hide");
                            }
                            else if (glbFormCalled == constFrmUnPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-UnPost").removeClass("hide");
                            }
                            else if (glbFormCalled == constFrmRestoring) {
                                if ($("#hf_CanEdit").val() == "1")
                                    $("#btn-Restore").removeClass("hide");
                                if ($("#hf_CanDelete").val() == "1")
                                    $("#btn-PermanentDelete-MaunalShow").removeClass("hide");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Post_Restore_Unpost_JVs_ClearAllControls();*/ },
                function () { /*Post_Restore_Unpost_JVs_DeleteList();*/ });
            break;
        }
        case "A_AccountLink":
            {
                strBindTableRowsFunctionName = "A_AccountLink_BindTableRows";
                strLoadWithPagingFunctionName = "/api/A_AccountLink/LoadRows";
                LoadView("/Accounting/Transactions/A_AccountLink", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/Accounting/Transactions/A_AccountLink.js'
                        , function () {
                            CallGETFunctionWithParameters("/api/A_AccountLink/IntializeData"
                                , {}
                                , function (pData) {
                                    Fill_SelectInputAfterLoadData(pData[0], "ID", "Account_Name", TranslateString("SelectFromMenu"), "#hslExpensesAccountID", null);
                                    Fill_SelectInputAfterLoadData(pData[1], "ID", "Account_Name", TranslateString("SelectFromMenu"), "#hslRevenueAccountID", null);
                                    Fill_SelectInputAfterLoadData(pData[0], "ID", "Account_Name", TranslateString("SelectFromMenu"), "#slExpensesAccountID", null);
                                    Fill_SelectInputAfterLoadData(pData[1], "ID", "Account_Name", TranslateString("SelectFromMenu"), "#slRevenueAccountID", null);
                                    setTimeout(function () {
                                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { A_AccountLink_BindTableRows(pTabelRows); });
                                    }, 30);
                                    FadePageCover(false);
                                }
                                , null);
                        });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { A_AccountLink_ClearAllControls(); },
                    function () { A_AccountLinkDeleteList(); });
                break;
            }
        case "SystemAccount":
            {
                strBindTableRowsFunctionName = "SystemAccount_BindTableRows";
                strLoadWithPagingFunctionName = "/api/SystemAccount/LoadAll";
                LoadView("/Accounting/Transactions/SystemAccount", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/Accounting/Transactions/SystemAccount.js'
                        , function () {
                            CallGETFunctionWithParameters("/api/SystemAccount/IntializeData"
                                , {}
                                , function (pData) {
                                    Fill_SelectInputAfterLoadData(pData[0], "ID", "Account_Name", TranslateString("SelectAccount"), "#hslSystemAccountID", null);
                                    setTimeout(function () {
                                        LoadAll(strLoadWithPagingFunctionName, "where 1=1", function (pTabelRows) { SystemAccount_BindTableRows(pTabelRows); });
                                    }, 30);
                                    FadePageCover(false);
                                }
                                , null);
                        });
                },
                    function () { SystemAccount_ClearAllControls(); },
                    function () { SystemAccountDeleteList(); });
                break;
            }
        case "BudgetsFiscal":
            {
                strLoadWithPagingFunctionName = "/api/BudgetsFiscal/LoadWithPaging";
                LoadView("/Accounting/Transactions/BudgetsFiscal", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/Accounting/Transactions/BudgetsFiscal.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { BudgetsFiscal_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/BudgetsFiscal/IntializeData",
                            data: { pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Account -->', '#hidden_slAccount', '');
                                // Fill_SelectInputAfterLoadData(d[1], 'ID', 'Fiscal_Year_Name', '<-- select Fiscal Year -->', '#slFiscalYearID', '');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- select Budgets -->', '#slBudgetID', '');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { BudgetsFiscal_ClearAllControls(); },
                    function () { BudgetsFiscal_DeleteList(); });
                break;

            }
        case "A_ARAllocationWithVoucher": {
            debugger;
            ////strBindTableRowsFunctionName = "IncomeStatement_BindTableRows";
            //strLoadWithPagingFunctionName = "/api/IncomeStatement/LoadRows";
            LoadView("/Accounting/A_ARAllocationWithVoucher", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Transactions/A_ARAllocationWithVoucher.js', function () { A_ARAllocationWithVoucher_Initialize(); });
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "A_APAllocationWithVoucher": {
            debugger;
            ////strBindTableRowsFunctionName = "IncomeStatement_BindTableRows";
            //strLoadWithPagingFunctionName = "/api/IncomeStatement/LoadRows";
            LoadView("/Accounting/A_APAllocationWithVoucher", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Transactions/A_APAllocationWithVoucher.js', function () { A_APAllocationWithVoucher_Initialize(); });
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        //region Accounting/Reports
        case "AccountLedger": {
            debugger;
            strBindTableRowsFunctionName = "AccountLedger_BindTableRows";
            strLoadWithPagingFunctionName = "/api/AccountLedger/LoadRows";
            LoadView("/Accounting/Reports/AccountLedger", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/AccountLedger.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/AccountLedger/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pAccount = pData[0];
                                var pJournalType = pData[1];
                                var pCostCenter = pData[2];
                                var pAccountGroups = pData[3]
                                var pBranch = pData[4]

                                FillDivWithCheckboxes("divCbAccount", pAccount, "nameCbAccount", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbJournalType", pJournalType, "nameCbJournalType", 5, null);
                                FillDivWithCheckboxes("divCbBranch", pBranch, "nameCbBranch", 5, null);
                                FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);

                                Fill_SelectInputAfterLoadData(pAccountGroups, "RealAccountCode", "Account_Name", TranslateString("SelectFromMenu"), "#slAccountsGroups", null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                if ($("#hDefaultUnEditableCompanyName").val() == "FAI")
                                    $("#secJournalType").removeClass("hide");
                                else {
                                    $("#cbCheckAllJournalTypes").prop("checked", true);
                                    $("#secJournalType").addClass("hide");
                                }
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "AccountLedgerByCurrency": {
            debugger;
            strBindTableRowsFunctionName = "AccountLedgerByCurrency_BindTableRows";
            strLoadWithPagingFunctionName = "/api/AccountLedgerByCurrency/LoadRows";
            LoadView("/Accounting/Reports/AccountLedgerByCurrency", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/AccountLedgerByCurrency.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/AccountLedgerByCurrency/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");

                                var pCurrency = pData[0];
                                var pAccount = pData[1];
                                var pJournalType = pData[2];
                                var pBranch = pData[3];
                                var pCostCenter = pData[4];

                                FillDivWithCheckboxes("divCbAccount", pAccount, "nameCbAccount", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbJournalType", pJournalType, "nameCbJournalType", 5, null);

                                FillDivWithCheckboxes("divCbBranch", pBranch, "nameCbBranch", 5, null);
                                FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);


                                // FillDivWithCheckboxes("divCbCurrency", pCurrency, "nameCbCurrency", 5, null);
                                FillListFromObject(null, 1, "All Currencies", "slCurrency", pCurrency, null);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);

                                if ($("#hDefaultUnEditableCompanyName").val() == "FAI")
                                    $("#secJournalType").removeClass("hide");
                                else {
                                    $("#cbCheckAllJournalTypes").prop("checked", true);
                                    $("#secJournalType").addClass("hide");
                                }
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SubAccountBalanceByCurrency": {
            debugger;
            strBindTableRowsFunctionName = "SubAccountBalanceByCurrency_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SubAccountBalanceByCurrency/LoadRows";
            LoadView("/Accounting/Reports/SubAccountBalanceByCurrency", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/SubAccountBalanceByCurrency.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SubAccountBalanceByCurrency/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pSubAccount = pData[0];
                                var pCostCenter = pData[1];
                                var pSubAccountGroup = pData[2];
                                var pBranch = pData[3];

                                FillDivWithCheckboxes("divCbSubAccount", pSubAccount, "nameCbSubAccount", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                FillDivWithCheckboxes("divCbBranch", pBranch, "nameCbBranch", 5, null);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSubAccountGroup, null);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }

        case "SubAccountLedger": {
            debugger;
            glbCallingControl = "SubAccountLedger";
            strBindTableRowsFunctionName = "SubAccountLedger_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SubAccountLedger/LoadRows";
            LoadView("/Accounting/Reports/SubAccountLedger", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/SubAccountLedger.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SubAccountLedger/FillSearchControls"
                            , { glbCallingControl: glbCallingControl }
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pSubAccount = pData[0];
                                var pCostCenter = pData[1];
                                var pSubAccountGroup = pData[2];
                                var pCurrency = pData[3];
                                var pBranch = pData[4]

                                GetListWithNameAndWhereClause(null, "/api/BankTemplate/LoadAll", "<--Select Bank Template-->", "slBankTemplate", "ORDER BY Name", null);

                                FillDivWithCheckboxes("divCbSubAccount", pSubAccount, "nameCbSubAccount", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                FillDivWithCheckboxes("divCbBranch", pBranch, "nameCbBranch", 5, null);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSubAccountGroup, null);
                                FillListFromObject(null, 1, TranslateString("SelectFromMenu"), "slCurrency", pCurrency, null);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "AccountStatement": {
            debugger;
            glbCallingControl = "AccountStatement";
            strBindTableRowsFunctionName = "SubAccountLedger_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SubAccountLedger/LoadRows";
            LoadView("/Reports/AccountStatement", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/SubAccountLedger.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SubAccountLedger/FillSearchControls"
                            , { glbCallingControl: glbCallingControl }
                            , function (pData) {
                                $("#hl-menu-Reports").parent().addClass("active");
                                $("#hl-menu-Reports").parent().siblings().removeClass("active");
                                var pSubAccount = pData[0];
                                var pCostCenter = pData[1];
                                var pSubAccountGroup = pData[2];
                                var pCurrency = pData[3];

                                FillDivWithCheckboxes("divCbSubAccount", pSubAccount, "nameCbSubAccount", 4/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSubAccountGroup, null);
                                //FillListFromObject(null, 1, "All Currencies", "slCurrency", pCurrency, null);
                                $("#slCurrency").html($("#hReadySlCurrencies").html());

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }

        case "TrialBalance": {
            debugger;
            strBindTableRowsFunctionName = "TrialBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/TrialBalance/LoadRows";
            LoadView("/Accounting/Reports/TrialBalance", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/TrialBalance.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/TrialBalance/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                var pAccount = pData[0];
                                var pCostCenter = pData[1];
                                var pGroups = pData[2];
                                var pAccountLevels = pData[3];
                                var pBranch = pData[4];
                                var pCurrency = pData[5];

                                FillDivWithCheckboxes("divCbAccount", pAccount, "nameCbAccount", OptionNameCodeAccount == "true" ? 4 : 3/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                FillDivWithCheckboxes("divCbBranch", pBranch, "nameCbBranch", 5, null);
                                FillListFromObject_ERP(7, 2/*pName*/, null, "slAccountLevel", pAccountLevels, null);
                                FillListFromObject(null, 1, "All Currencies", "slCurrency", pCurrency, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                Fill_SelectInputAfterLoadData(pGroups, "ID", "Account_Name", TranslateString("SelectFromMenu"), "#slAccountsGroups", null);
                                FadePageCover(false);

                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SubAccountTrialBalance": {
            debugger;
            strBindTableRowsFunctionName = "SubAccountTrialBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SubAccountTrialBalance/LoadRows";
            LoadView("/Accounting/Reports/SubAccountTrialBalance", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/SubAccountTrialBalance.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SubAccountTrialBalance/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                var pSubAccount = pData[0];
                                var pSubAccountGroup = pData[1];
                                var pCostCenter = pData[2];
                                var pBranch = pData[3];
                                var pCurrency = pData[4];

                                FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbBranch", pBranch, "nameCbBranch", 5/*NameAndCode*/, null);
                                FillDivWithCheckboxes("divCbSubAccount", pSubAccount, "nameCbSubAccount", 4/*NameAndCode*/, null);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSubAccountGroup, null);
                                FillListFromObject(null, 1, "All Currencies", "slCurrency", pCurrency, null);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "BalanceSheet": {
            debugger;
            strBindTableRowsFunctionName = "BalanceSheet_BindTableRows";
            strLoadWithPagingFunctionName = "/api/BalanceSheet/LoadRows";
            LoadView("/Accounting/Reports/BalanceSheet", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/BalanceSheet.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/BalanceSheet/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pAccountLevels = pData[0];
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                //$("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FillListFromObject_ERP(7, 2/*pName*/, null, "slAccountLevel", pAccountLevels, null);
                                FillListFromObject(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCurrency", pData[1], null);
                                FillListFromObject(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slBranch", pData[2], null);
                                FillListFromObject(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[3], null);

                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "IncomeStatement": {
            debugger;
            strBindTableRowsFunctionName = "IncomeStatement_BindTableRows";
            strLoadWithPagingFunctionName = "/api/IncomeStatement/LoadRows";
            LoadView("/Accounting/Reports/IncomeStatement", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/IncomeStatement.js', function () { IncomeStatement_Initialize(); });
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "Rep_A_MonthlyAnalysis": {
            debugger;
            strBindTableRowsFunctionName = "Rep_A_MonthlyAnalysis_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Rep_A_MonthlyAnalysis/LoadRows";
            LoadView("/Accounting/Reports/Rep_A_MonthlyAnalysis", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/Rep_A_MonthlyAnalysis.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/Rep_A_MonthlyAnalysis/FillSearchControls"
                            , { WhereCondition: "WHERE IsMain=1" }
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pAccount = pData[0];
                                var pSubAccountGroup = pData[1];
                                // var pJournalType = pData[1];
                                // var pCostCenter = pData[2];
                                //  FillDivWithCheckboxes("divCbAccount", pAccount, "nameCbAccount", 4/*NameAndCode*/, null);
                                // FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                //  FillDivWithCheckboxes("divCbJournalType", pJournalType, "nameCbJournalType", 5, null);

                                Fill_SelectInputAfterLoadData(pAccount, "RealAccountCode", "Account_Name", TranslateString("SelectFromMenu"), "#slAccountsGroups", null);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountsGroups", pSubAccountGroup, null);

                                var nowY = new Date().getFullYear(), options = "";

                                for (var Y = nowY; Y >= 2016; Y--) {
                                    options += "<option>" + Y + "</option>";
                                }

                                $("#slFirstYear").append(options);
                                $("#slSecondYear").append(options);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                if ($("#hDefaultUnEditableCompanyName").val() == "ONE")
                                    $("#secJournalType").removeClass("hide");
                                else {
                                    $("#cbCheckAllJournalTypes").prop("checked", true);
                                    $("#secJournalType").addClass("hide");
                                }
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "BudgetDetailsReport": {
            debugger;
            LoadView("/Accounting/Reports/BudgetDetailsReport", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/BudgetDetailsReport.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/BudgetDetailsReport/IntializeData"
                            , {}
                            , function (pData) {
                                $("#hl-menu-BudgetDetailsReport").parent().addClass("active");
                                // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var FiscalYears = pData[0];
                                var Budgets = pData[1];
                                Fill_SelectInputAfterLoadData(FiscalYears, 'ID', 'Fiscal_Year_Name', TranslateString("SelectFromMenu"), '#slFiscalYearID', '');
                                Fill_SelectInputAfterLoadData(Budgets, 'ID', 'Name', TranslateString("SelectFromMenu"), '#slBudgetsID', '');
                                FillDivWithCheckboxes("divCbBudget", Budgets, "nameCbBudgets", 5, null);
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "CashFlowReport": {
            debugger;
            strBindTableRowsFunctionName = "BalanceSheet_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CashFlowReport/LoadRows";
            LoadView("/Accounting/Reports/CashFlow", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Reports/CashFlow.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/CashFlowReport/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pAccountLevels = pData[0];
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FillListFromObject_ERP(null, 2/*pName*/, null/*TranslateString("SelectFromMenu")*/, "slAccountLevel", pAccountLevels, null);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        //region ReceiptsAndPayments/Transactions
        case "CashReceivingVoucher":
        case "CashIssueVoucher": {
            IsCashIssueReceiptFromSettlement = 0;
            A_PaymentRequestID_ForVoucherID = 0;
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Voucher_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            if (pControlID == "CashReceivingVoucher") {
                glbFormCalled = constVoucherCashIn;
            }
            else if (pControlID == "CashIssueVoucher") {
                glbFormCalled = constVoucherCashOut;
            }

            var pWhereClause = "WHERE VoucherType=" + glbFormCalled;
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/Transactions/CashVoucher", "div-content", function () {
                $("#li_InOrOut").text(TranslateString(pControlID));
                $("#h3_InOrOut").text($("#li_InOrOut").text());
                $("#h3Modal").html('<span>' + $("#li_InOrOut").text() + '</span><label id="lblShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Transactions/CashVoucher.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccount = pData[2];
                            var pSafe = pData[3];
                            var pTax = pData[4];
                            var pCostCenter = pData[5];
                            Voucher_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();

                            var pBranchs = pData[7];
                            var pOperations = pData[8];

                            FillListFromObject(null, (pDefaults.IsRepeatChargeTypeName ? 4 : 2), "<--Select-->", "slChargeType", pData[14], null);

                            if (pData[9] != null && pData[9] != "") {
                                FillListFromObject_ERP(null, 13/*pName*/, "Select Job", "slDisbursementJobs", pData[9], null);

                            }
                            if (pData[10] != null && pData[10] != "") {
                                FillListFromObject_ERP(null, 2, "<--Select-->", "slHouse", pData[10], null);

                            }
                            FillListFromObject_ERP(null, 2, "<--Select-->", "slTruckingOrder", pData[13], null);

                            if (pData[7] != null && pData[7] != "") {
                                FillListFromObject_ERP(null, 2, "<--Select-->", "slBranch", pData[7], null);

                            }
                            if (pData[12] != null && pData[10] != "") {
                                FillListFromObject_ERP(null, 2, "<--Select-->", "slSalesMan", pData[12], null);

                            }
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slBranch", pBranchs, null);
                            if (pOperations != null && pOperations != "") {
                                FillListFromObject_ERP(null, 14/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slOperation", pOperations, null);
                            }
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, function () { $("#slSafe").html($("#slSearchSafe").html()); });
                            FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectCostCenter"), "slCostCenter", pCostCenter,
                                function () { $("#slAllocationCostCenter").html($("#slCostCenter").html()); $("#slOfficialAllocationCostCenter").html($("#slCostCenter").html()); });
                            $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            if (glbFormCalled == constVoucherCashIn) {
                                $("#thIsCash").addClass("hide");
                                $(".showForCashIssue").addClass("hide");
                                $(".hideForCashIssue").removeClass("hide");
                                $(".hideForCashReceiving").addClass("hide");
                                $(".ShowForCashReceiving").removeClass("hide");
                                //in details
                                $("#thInvoiceNumber").removeClass("hide");
                                $("#lblVoucherDate").html('Receipt Date');
                                if ($("#hDefaultUnEditableCompanyName").val() == "SAF") {
                                    //$("#txtChargedPerson").removeAttr("data-required");
                                    // $("#txtChargedPerson").prop("disabled", "disabled");
                                    $("#btn-AddDetailsNew").html(' <i class="fa fa-plus"></i><b>&nbsp;Paid in advance&nbsp;</b>');
                                }
                            }
                            else if (glbFormCalled == constVoucherCashOut) {

                                $(".hideForCashReceiving").removeClass("hide");
                                $("#thIsCash").removeClass("hide");
                                $(".showForCashIssue").removeClass("hide");
                                //$(".hideForCashIssue").addClass("hide");
                                $(".hideForCashIssue").removeClass("hide");
                                //in details
                                $("#thInvoiceNumber").addClass("hide");

                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Voucher_ClearAllControls(); },
                function () { Voucher_DeleteList(); });
            break;
        }

        case "ChequeReceivingVoucher":
        case "ChequeIssueVoucher": {
            IsChequeIssueReceiptFromSettlement = 0;
            A_PaymentRequestID_ForVoucherID = 0;
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Voucher_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            if (pControlID == "ChequeReceivingVoucher") {
                glbFormCalled = constVoucherChequeIn;
            }
            else if (pControlID == "ChequeIssueVoucher") {
                glbFormCalled = constVoucherChequeOut;
            }
            var pWhereClause = "WHERE VoucherType=" + glbFormCalled;
            var pOrderBy = $("#hDefaultUnEditableCompanyName").val() == "KDS" ? " ISNUMERIC(code) DESC,Try_Parse(code AS numeric) DESC,ID  DESC" : "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/Transactions/ChequeVoucher", "div-content", function () {
                $("#li_InOrOut").text(TranslateString(pControlID));
                $("#h3_InOrOut").text($("#li_InOrOut").text());
                $("#h3Modal").html('<span>' + $("#li_InOrOut").text() + '</span><label id="lblShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Transactions/ChequeVoucher.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccount = pData[2];
                            var pSafe = pData[3];
                            var pTax = pData[4];
                            var pCostCenter = pData[5];
                            var pBank = pData[6];
                            Voucher_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();

                            var SelectSafe = TranslateString("SelectFromMenu");
                            if ($('#hReadySlOptions option[value="55"]').attr("OptionValue") == "true")
                                SelectSafe = "";

                            if ($("#hDefaultUnEditableCompanyName").val() != "SAF") {
                                SelectSafe = TranslateString("SelectFromMenu");
                            }
                            var pBranchs = pData[7];
                            var pOperations = pData[8];
                            if (pData[9] != null && pData[9] != "") {
                                FillListFromObject_ERP(null, 13/*pName*/, "Select Job", "slDisbursementJobs", pData[9], null);

                            }
                            if (pData[10] != null && pData[10] != "") {
                                FillListFromObject_ERP(null, 2, "<--Select-->", "slHouse", pData[10], null);

                            }
                            if (pData[7] != null && pData[7] != "") {
                                FillListFromObject_ERP(null, 2, "<--Select-->", "slBranch", pData[7], null);

                            }
                            if (pData[12] != null && pData[10] != "") {
                                FillListFromObject_ERP(null, 2, "<--Select-->", "slSalesMan", pData[12], null);

                            }
                         //   FillListFromObject_ERP(null, 2, "<--Select-->", "slTruckingOrder", pData[13], null);
                            
                            var option = '<option value="0">' + "<--Select-->" + '</option>';
                            $("#" + "slTruckingOrder").append(option);

                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slBranch", pBranchs, null);
                            if (pOperations != null && pOperations != "") {
                                FillListFromObject_ERP(null, 14/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slOperation", pOperations, null);
                            }
                            // FillListFromObject_ERP(null, 1/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slOperation", pOperations, null);
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);

                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchBank", pBank, function () { $("#slBank").html($("#slSearchBank").html()); });
                            FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectCostCenter"), "slCostCenter", pCostCenter,
                                function () { $("#slAllocationCostCenter").html($("#slCostCenter").html()); $("#slOfficialAllocationCostCenter").html($("#slCostCenter").html()); });

                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, SelectSafe, "slSearchSafe", pSafe, function () { $("#slSafe").html($("#slSearchSafe").html()); });


                            $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            if (glbFormCalled == constVoucherChequeIn) {
                                $(".showForChequeIssue").addClass("hide");
                                $(".hideForChequeIssue").removeClass("hide");
                                $(".hideForChequeReceiving").addClass("hide");
                                $(".showForChequeReceiving").removeClass("hide");

                            }
                            else if (glbFormCalled == constVoucherChequeOut) {
                                $(".showForChequeIssue").removeClass("hide");
                                $(".showForChequeReceiving").addClass("hide");
                                //$(".hideForChequeIssue").addClass("hide");
                                $(".hideForChequeIssue").removeClass("hide");
                                $(".hideForChequeReceiving").removeClass("hide");
                                if ($("#hDefaultUnEditableCompanyName").val() == "SAF") {
                                    $('#bDeposit').html('');
                                    $('#bPO').html('Transfer');
                                    var option = "";
                                    option += '<option value="' + 0 + '" selected >' + '<--Select-->' + '</option>';
                                    option += '<option value="' + 10 + '"  >' + 'Cheque' + '</option>';
                                    option += '<option value="' + 20 + '"  >' + 'Deposit' + '</option>';
                                    option += '<option value="' + 30 + '"  >' + 'Transfer' + '</option>';
                                    $("#slSearchChequeOrDepositOrPO").html(option);
                                }

                            }
                            $(".hideForReciprocalBank").addClass("hide");
                            if ($("#hDefaultUnEditableCompanyName").val() != "SAF")
                                $(".showForIsCheque").removeClass("hide");

                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Voucher_ClearAllControls(); },
                function () { Voucher_DeleteList(); });
            break;
        }

        case "OperationsPayablesAndReceivables": {
            FadePageCover(true);
            glbFormCalled = pControlID;
            strLoadWithPagingFunctionName = "/api/Operations/LoadAllForCombo";
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            LoadView("/ReceiptsAndPayments/Transactions/OperationsPayablesAndReceivables", "div-content", function () {
                LoadView("/MasterData/ModalSelectCharges", "div-content", function () { $("#slPayableBillTo").parent().addClass("hide"); $("#btn-SetDefaultNote").parent().addClass("hide"); }, null, null, true);//sherif: calling a partial view with only modal called from different places
                LoadView("/Quotations/QuotationsEdit", "divHidden", function () { $("#divHidden").children().addClass("hide"); }, null, null, true);

                //$.getScript(strServerURL + '/Scripts/Quotations/Quotations/QuotationCharges.js');//sherif: to load the js file of the appended partial view
                $.getScript(strServerURL + '/Scripts/Quotations/Quotations/Quotations.js?' + glbVersion, function () {//sherif:pUserID here holds the QuotationID
                    CallGETFunctionWithParameters(strLoadWithPagingFunctionName
                        , { pPageSize: 5000, pWhereClauseForCombo: "WHERE BLType<>" + constHouseBLType, pOrderBy: "ID DESC" }
                        , function (pData) {
                            var _Operation = pData[0];
                            FillListFromObject(null, 1, "<--Select-->", "slFilterOperation", _Operation, null);
                            FadePageCover(false);
                        }
                        , null);
                });
            }
                , null//function () { QuotationsEdit_ClearAllControls(); }
                , null//function () { QuotationsEdit_DeleteList(); }
            );
            break;
        }

        case "PostingVouchers":
        case "UnpostingVouchers": {
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Post_Unpost_Voucher_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = "";
            if (pControlID == "PostingVouchers") {
                glbFormCalled = constFrmPosting;
                if (pDefaults.UnEditableCompanyName == 'NEW')
                    pWhereClause = "WHERE Posted=0 and IsLiner <> 1 and 1 <> 1  ";
                else
                    pWhereClause = "WHERE Posted=0 and IsLiner <> 1 AND VoucherType=" + constVoucherCashIn;
            }
            else if (pControlID == "UnpostingVouchers") {
                glbFormCalled = constFrmUnPosting;
                if (pDefaults.UnEditableCompanyName == 'NEW')
                    pWhereClause = "WHERE Posted=1 and IsLiner <> 1 and 1 <> 1 ";
                else
                    pWhereClause = "WHERE Posted=1 and IsLiner <> 1 AND VoucherType=" + constVoucherCashIn;
            }
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ApprovingAndPosting/Post_Unpost_Voucher", "div-content", function () {
                $("#liPost_Unpost_Voucher").text(TranslateString(pControlID));
                $("#h3Post_Unpost_Voucher").text($("#liPost_Unpost_Voucher").text());
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ApprovingAndPosting/Post_Unpost_Voucher.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccount = pData[2];
                            var pSafe = pData[3];
                            var pTax = pData[4];
                            var pCostCenter = pData[5];
                            var pUserForms = JSON.parse(pData[15]);

                            Post_Unpost_Voucher_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, function () { $("#slSafe").html($("#slSearchSafe").html()); });
                            FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenter, null);
                            $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            $("#txtJVDate").val(pFormattedTodaysDate);
                            if (glbFormCalled == constFrmPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-Post").removeClass("hide");
                                $(".showForPosting").removeClass("hide");
                                $(".hideForPosting").addClass("hide");
                            }
                            else if (glbFormCalled == constFrmUnPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-UnPost").removeClass("hide");
                                $(".showForPosting").addClass("hide");
                                $(".hideForPosting").removeClass("hide");
                            }

                            if (pDefaults.UnEditableCompanyName == 'NEW') {
                                $('#slSearchVoucherType').html('');
                                if (pUserForms.some(code => code.ImageName === 'CashReceivingVoucher' && code.CanView === true))
                                    $("#slSearchVoucherType").prepend("<option value=10>" + TranslateString("CashReceivingVoucher") + "</option>");
                                if (pUserForms.some(code => code.ImageName === 'CashIssueVoucher' && code.CanView === true))
                                    $("#slSearchVoucherType").prepend("<option value=20>" + TranslateString("CashIssueVoucher") + "</option>");
                                if (pUserForms.some(code => code.ImageName === 'ChequeReceivingVoucher' && code.CanView === true))
                                    $("#slSearchVoucherType").prepend("<option value=30>" + TranslateString("ChequeReceivingVoucher") + "</option>");
                                if (pUserForms.some(code => code.ImageName === 'ChequeIssueVoucher' && code.CanView === true))
                                    $("#slSearchVoucherType").prepend("<option value=40>" + TranslateString("ChequeIssueVoucher") + "</option>");
                            }

                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Post_Unpost_Voucher_ClearAllControls();*/ },
                function () { /*Post_Unpost_Voucher_DeleteList();*/ });
            break;
        }

        case "PostingVouchersTax":
        case "UnpostingVouchersTax": {
            $("#hl-menu-Administration").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Post_Unpost_VoucherTax_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = "";
            if (pControlID == "PostingVouchersTax") {
                glbFormCalled = constFrmPosting;
                if ($("#hDefaultUnEditableCompanyName").val() == "CHM") {
                    pWhereClause = "WHERE  IsLiner <> 1 and id not in(select originid from ForwardingTransChemTax.dbo.taxlink where originid is not null and notes='A_Voucher' AND JVID IS NOT NULL) AND VoucherType=" + constVoucherCashIn;
                }
                else if ($("#hDefaultUnEditableCompanyName").val() == "OCE") {
                    pWhereClause = "WHERE  IsLiner <> 1 and id not in(select originid from ForwardingTROTax.dbo.taxlink where originid is not null and notes='A_Voucher' AND JVID IS NOT NULL) AND VoucherType=" + constVoucherCashIn;
                }


            }
            else if (pControlID == "UnpostingVouchersTax") {
                glbFormCalled = constFrmUnPosting;
                if ($("#hDefaultUnEditableCompanyName").val() == "CHM") {
                    pWhereClause = "WHERE IsLiner <> 1 and id in(select originid from ForwardingTransChemTax.dbo.taxlink where originid is not null and notes='A_Voucher' AND JVID IS NOT NULL) AND VoucherType=" + constVoucherCashIn;
                }
                else if ($("#hDefaultUnEditableCompanyName").val() == "OCE") {
                    pWhereClause = "WHERE IsLiner <> 1 and id in(select originid from ForwardingTROTax.dbo.taxlink where originid is not null and notes='A_Voucher' AND JVID IS NOT NULL) AND VoucherType=" + constVoucherCashIn;
                }
            }
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Administration/Post_Unpost_VoucherTax", "div-content", function () {
                $("#liPost_Unpost_VoucherTax").text(TranslateString(pControlID));
                $("#h3Post_Unpost_VoucherTax").text($("#liPost_Unpost_Voucher").text());
                $.getScript(strServerURL + '/Scripts/Administration/admapp/Post_Unpost_VoucherTax.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccount = pData[2];
                            var pSafe = pData[3];
                            var pTax = pData[4];
                            var pCostCenter = pData[5];
                            Post_Unpost_VoucherTax_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, function () { $("#slSafe").html($("#slSearchSafe").html()); });
                            FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenter, null);
                            $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            $("#txtJVDate").val(pFormattedTodaysDate);
                            if (glbFormCalled == constFrmPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-Post").removeClass("hide");
                                $(".showForPosting").removeClass("hide");
                                $(".hideForPosting").addClass("hide");
                            }
                            else if (glbFormCalled == constFrmUnPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-UnPost").removeClass("hide");
                                $(".showForPosting").addClass("hide");
                                $(".hideForPosting").removeClass("hide");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Post_Unpost_Voucher_ClearAllControls();*/ },
                function () { /*Post_Unpost_Voucher_DeleteList();*/ });
            break;
        }

        case "PostingReceivablePayableNotes": {
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "PostingReceivablePayableNotes_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Voucher/ChequeStatus_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = "WHERE Posted=1 AND UnderCollection=0 AND Collected=0  AND Returned=0";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseChequeStatus: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ApprovingAndPosting/PostingReceivablePayableNotes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ApprovingAndPosting/PostingReceivablePayableNotes.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pSafe = pData[2];
                            var pBank = pData[3];
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchBank", pBank, function () { $("#slBank").html($("#slSearchBank").html()); });
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, null);
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val(pFormattedTodaysDate);
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            PostingReceivablePayableNotes_BindTableRows(JSON.parse(pData[0]));
                            if ($("#hf_CanEdit").val() == "1") {
                                $("#btn-Approve").removeClass("hide");
                            }
                            else if ($("#hf_CanEdit").val() == "1") {
                                $("#btn-Approve").removeClass("hide");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Post_Unpost_Voucher_ClearAllControls();*/ },
                function () { /*Post_Unpost_Voucher_DeleteList();*/ });
            break;
        }
        case "PostingUnderCollectNotes": {
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "PostingUnderCollectNotes_BindTableRows";
            strLoadWithPagingFunctionName = "/api/Voucher/ChequeStatus_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = "WHERE Posted=1 AND UnderCollection=1 AND Collected=0 AND ToSafe=0 AND Returned=0";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseChequeStatus: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ApprovingAndPosting/PostingUnderCollectNotes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ApprovingAndPosting/PostingUnderCollectNotes.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pSafe = pData[2];
                            var pBank = pData[3];
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 5/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchBank", pBank, null);
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, null);
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            PostingUnderCollectNotes_BindTableRows(JSON.parse(pData[0]));
                            if ($("#hf_CanEdit").val() == "1") {
                                $("#btn-Approve").removeClass("hide");
                                $("#btn-Return").removeClass("hide");
                            }
                            else if ($("#hf_CanEdit").val() == "1") {
                                $("#btn-Approve").removeClass("hide");
                                $("#btn-Return").removeClass("hide");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Post_Unpost_Voucher_ClearAllControls();*/ },
                function () { /*Post_Unpost_Voucher_DeleteList();*/ });
            break;
        }
        //region ReceiptsAndPayments/Reports
        case "BanksJournal": {
            debugger;
            strBindTableRowsFunctionName = "BanksJournal_BindTableRows";
            strLoadWithPagingFunctionName = "/api/BanksJournal/LoadRows";
            LoadView("/ReceiptsAndPayments/Reports/BanksJournal", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Reports/BanksJournal.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/BanksJournal/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-ReceiptsAndPaymentsGroup").parent().addClass("active");
                                $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
                                var pBank = pData[0];
                                var pCurrency = pData[1];
                                FillDivWithCheckboxes("divCbBank", pBank, "nameCbBank", 5/*Name*/, null);
                                FillDivWithCheckboxes("divCbCurrency", pCurrency, "nameCbCurrency", 1/*Code*/, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SafesJournal": {
            debugger;
            strBindTableRowsFunctionName = "SafesJournal_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SafesJournal/LoadRows";
            LoadView("/ReceiptsAndPayments/Reports/SafesJournal", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Reports/SafesJournal.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SafesJournal/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-ReceiptsAndPaymentsGroup").parent().addClass("active");
                                $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
                                var pSafe = pData[0];
                                var pCurrency = pData[1];
                                FillDivWithCheckboxes("divCbSafe", pSafe, "nameCbSafe", 5/*Name*/, null);
                                FillDivWithCheckboxes("divCbCurrency", pCurrency, "nameCbCurrency", 1/*Code*/, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "ChequesStatusReports": {
            debugger;
            FadePageCover(true);
            LoadView("/ReceiptsAndPayments/Reports/ChequesStatueReports", "div-content", function () {
                CallGETFunctionWithParameters("/api/ChequesStatueReports/FillFilter", null
                    , function (data) {
                        //data[0]:Salesman //data[1]:Branches //data[2]:Customers //data[3]:Currencies //data[4]:Oper.States
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "All", "slBranch", data[0], null);
                        //  FillListFromObject(null, 5, "All", "slPartner", data[1], null);
                        //   FillListFromObject(null, 1/*pCodeOrName*/, "All", "slPartnerType", data[2], null);
                        FillListFromObject(null, 2, "All", "slBankAccount", data[1], null);
                        $("#slCurrency").html("<option value=''>All</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                //parameters (pStrFnName, pStrFirstRow, pListName, pWhereClause)
                //FillListWithNames("/api/NoAccessQuoteAndOperStages/LoadAll", "ALL STATES", "ulOperationStages", " WHERE IsOperationStage = 1 AND IsInActive = 0 ORDER BY ViewOrder ");
                ////FillListWithNames("/api/NoAccessReportTypes/LoadAll", "Select Report Type", "ulReportTypes", " ORDER BY ViewOrder ");
                //FillListWithNamesWithoutFirstRow(constPdfReportTypeID, "/api/NoAccessReportTypes/LoadAll", "ulReportTypes", " ORDER BY ViewOrder ");
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Reports/ChequesReports.js');
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            });
            break;
        }
        case "CashPosition": {
            debugger;
            FadePageCover(true);
            LoadView("/ReceiptsAndPayments/Reports/CashPosition", "div-content", function () {
                CallGETFunctionWithParameters("/api/CashPosition/FillFilter", null
                    , function (data) {
                        debugger;
                        //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                        FillListFromObject(null, 2, "All", "slBranch", data[0], null);
                        //  FillListFromObject(null, 5, "All", "slPartner", data[1], null);
                        //   FillListFromObject(null, 1/*pCodeOrName*/, "All", "slPartnerType", data[2], null);
                        FillListFromObject(null, 2, "All", "slBankAccount", data[1], null);
                        $("#slCurrency").html("<option value=''>All</option>");
                        $("#slCurrency").append($("#hReadySlCurrencies").html());
                        $("#slCurrency").val($("").html());
                        $("#txtFromDate").val(getTodaysDateInddMMyyyyFormat());
                        $("#txtToDate").val(getTodaysDateInddMMyyyyFormat());
                    }
                    , function () { FadePageCover(false); $("#hl-menu-Reports").parent().addClass("active"); });
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Reports/CashPosition.js');
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            });
            break;
        }
        //YardLinkTank
        case "YardLinkTankClients": {
            debugger;
            $("#hl-menu-YardLinkTankClients").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "YardLinkTankClients_BindTableRows";
            strLoadWithPagingFunctionName = "/api/YardLinkTankClients/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name, ArName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/YardLinkTank/YardLinkTankClients", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/YardLinkTank/YardLinkTankClients.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pClientsGroups = pData[2];
                            YardLinkTankClients_BindTableRows(JSON.parse(pData[0]));
                            //$("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slClientGroup", pClientsGroups, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { YardLinkTankClients_Save(); },
                function () { YardLinkTankClients_DeleteList(); });
            break;
        }

        case "YardLinkTankInvoicePosting": {
            debugger;
            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
            $("#hl-menu-YardLinkTank").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "YardLinkTankInvoicePosting_BindTableRows";
            strLoadWithPagingFunctionName = "/api/YardLinkTankInvoicePosting/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";


            // var pWhereClause = " WHERE IssueDate >= '2000/01/01' AND IssueDate<='" + GetDateWithFormatyyyyMMdd(pFormattedTodaysDate) + " 23:59:59'";

            //pWhereClause += " AND ID NOT IN (SELECT Shipping_InvoiceID from SL_InvoiceJvs WHERE JVID2 IS NULL)";
            var pWhereClause = " WHERE JVID IS NULL";


            //pWhereClause += ($("#hDefaultUnEditableCompanyName").val() != "ONE" ? " AND IsAudited=1 " : "");
            var pOrderBy = "IssueDate";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/YardLinkTank/YardLinkTankInvoicePosting", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/YardLinkTank/YardLinkTankInvoicePosting.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pInvoiceType = pData[3];
                            var pSafe = pData[4];
                            var pVessel = pData[5];
                            YardLinkTankInvoicePosting_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slVoyageAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slInvoiceType", pInvoiceType, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slSafe", pSafe, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slVessel", pVessel, null);
                            if ($("#hf_CanEdit").val() == 1)
                                //if ($("#cbIsApproved").prop("checked") == true) {
                                //    $("#btn-Post").removeClass("hide");


                                //}
                                //else {
                                //    $("#btn-UNPost").removeClass("hide");

                                //}
                                if ($("#hDefaultUnEditableCompanyName").val() == "ONE" || $("#hDefaultUnEditableCompanyName").val() == "KDS" || $("#hDefaultUnEditableCompanyName").val() == "NEW") {
                                    $("#btn-Post").attr("onclick", "YardLinkTankInvoicePosting_LinkRevenueItems();");
                                }
                                else {
                                    $("#btn-Post").attr("onclick", "YardLinkTankInvoicePosting_Post(false);");
                                }
                        });
                });
                //if ($("#hDefaultUnEditableCompanyName").val() != "ONE")
                //    $("#txtSearchFrom").val(pFormattedTodaysDate);
                //else
                //    $("#txtSearchFrom").val(pFormattedTodaysDate);
                // $("#txtSearchFrom").val("01/01/2000");


                // $("#txtSearchTo").val(pFormattedTodaysDate);
                // $("#txtJVDate").val(pFormattedTodaysDate);
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { YardLinkTankInvoicePosting_Save(); },
                function () { YardLinkTankInvoicePosting_DeleteList(); });
            break;
        }
        case "YardLinkTankCreditPosting": {
            debugger;
            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
            $("#hl-menu-YardLinkTank").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "YardLinkTankCreditPosting_BindTableRows";
            strLoadWithPagingFunctionName = "/api/YardLinkTankCreditPosting/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";


            // var pWhereClause = " WHERE IssueDate >= '2000/01/01' AND IssueDate<='" + GetDateWithFormatyyyyMMdd(pFormattedTodaysDate) + " 23:59:59'";

            //pWhereClause += " AND ID NOT IN (SELECT Shipping_InvoiceID from SL_InvoiceJvs WHERE JVID2 IS NULL)";
            var pWhereClause = " WHERE JVID IS NULL";


            //pWhereClause += ($("#hDefaultUnEditableCompanyName").val() != "ONE" ? " AND IsAudited=1 " : "");
            var pOrderBy = "CrdtDate";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/YardLinkTank/YardLinkTankCreditPosting", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/YardLinkTank/YardLinkTankCreditPosting.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pInvoiceType = pData[3];
                            var pSafe = pData[4];
                            var pVessel = pData[5];
                            YardLinkTankCreditPosting_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slVoyageAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slInvoiceType", pInvoiceType, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slSafe", pSafe, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slVessel", pVessel, null);
                            if ($("#hf_CanEdit").val() == 1)
                                //if ($("#cbIsApproved").prop("checked") == true) {
                                //    $("#btn-Post").removeClass("hide");


                                //}
                                //else {
                                //    $("#btn-UNPost").removeClass("hide");

                                //}
                                if ($("#hDefaultUnEditableCompanyName").val() == "ONE" || $("#hDefaultUnEditableCompanyName").val() == "KDS" || $("#hDefaultUnEditableCompanyName").val() == "NEW") {
                                    $("#btn-Post").attr("onclick", "YardLinkTankCreditPosting_LinkRevenueItems();");
                                }
                                else {
                                    $("#btn-Post").attr("onclick", "YardLinkTankCreditPosting_Post(false);");
                                }
                        });
                });
                //if ($("#hDefaultUnEditableCompanyName").val() != "ONE")
                //    $("#txtSearchFrom").val(pFormattedTodaysDate);
                //else
                //    $("#txtSearchFrom").val(pFormattedTodaysDate);
                // $("#txtSearchFrom").val("01/01/2000");


                // $("#txtSearchTo").val(pFormattedTodaysDate);
                // $("#txtJVDate").val(pFormattedTodaysDate);
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { YardLinkTankCreditPosting_Save(); },
                function () { YardLinkTankCreditPosting_DeleteList(); });
            break;
        }

        /////////
        ///////////YardLink
        case "YardLinkClients": {
            debugger;
            $("#hl-menu-YardLinkClients").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "YardLinkClients_BindTableRows";
            strLoadWithPagingFunctionName = "/api/YardLinkClients/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name, ArName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/YardLink/YardLinkClients", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/YardLink/YardLinkClients.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pClientsGroups = pData[2];
                            YardLinkClients_BindTableRows(JSON.parse(pData[0]));
                            //$("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slClientGroup", pClientsGroups, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { YardLinkClients_Save(); },
                function () { YardLinkClients_DeleteList(); });
            break;
        }
        case "YardInvoicePosting": {
            debugger;
            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "YardInvoicePosting_BindTableRows";
            strLoadWithPagingFunctionName = "/api/YardInvoicePosting/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";


            // var pWhereClause = " WHERE IssueDate >= '2000/01/01' AND IssueDate<='" + GetDateWithFormatyyyyMMdd(pFormattedTodaysDate) + " 23:59:59'";

            //pWhereClause += " AND ID NOT IN (SELECT Shipping_InvoiceID from SL_InvoiceJvs WHERE JVID2 IS NULL)";
            var pWhereClause = " WHERE JVID IS NULL";

            //pWhereClause += ($("#hDefaultUnEditableCompanyName").val() != "ONE" ? " AND IsAudited=1 " : "");
            var pOrderBy = "IssueDate";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/YardLink/YardInvoicePosting", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/YardLink/YardInvoicePosting.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pInvoiceType = pData[3];
                            var pSafe = pData[4];
                            var pVessel = pData[5];
                            YardInvoicePosting_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slVoyageAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slInvoiceType", pInvoiceType, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slSafe", pSafe, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slVessel", pVessel, null);
                            if ($("#hf_CanEdit").val() == 1)
                                //if ($("#cbIsApproved").prop("checked") == true) {
                                //    $("#btn-Post").removeClass("hide");


                                //}
                                //else {
                                //    $("#btn-UNPost").removeClass("hide");

                                //}
                                if ($("#hDefaultUnEditableCompanyName").val() == "ONE" || $("#hDefaultUnEditableCompanyName").val() == "KDS" || $("#hDefaultUnEditableCompanyName").val() == "NEW") {
                                    $("#btn-Post").attr("onclick", "YardInvoicePosting_LinkRevenueItems();");
                                }
                                else {
                                    $("#btn-Post").attr("onclick", "YardInvoicePosting_Post(false);");
                                }
                        });
                });
                //if ($("#hDefaultUnEditableCompanyName").val() != "ONE")
                //    $("#txtSearchFrom").val(pFormattedTodaysDate);
                //else
                //    $("#txtSearchFrom").val(pFormattedTodaysDate);
                // $("#txtSearchFrom").val("01/01/2000");


                // $("#txtSearchTo").val(pFormattedTodaysDate);
                // $("#txtJVDate").val(pFormattedTodaysDate);
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { YardInvoicePosting_Save(); },
                function () { YardInvoicePosting_DeleteList(); });
            break;
        }
        /////////////////
        ///////////shiplinkmelk
        case "SL_Clients": {
            debugger;
            $("#hl-menu-ShipLinkMelk").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Clients_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SL_Clients/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID,Name DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLinkMelk/SL_Clients", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLinkMelk/SL_Clients.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pSL_Clients = JSON.parse(pData[0]);

                            Clients_BindTableRows(pSL_Clients);
                            $.ajax({
                                type: "GET",
                                url: strServerURL + "api/SL_Clients/IntializeData",
                                data: { pDate: ConvertDateFormat(getTodaysDateInddMMyyyyFormat()), pOnlyCurrency: false },
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                success: function (d) {
                                    Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', 'Select Bank', '#slBank', '');
                                    Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', 'Select Group', '#slSubAccountGroup', '');
                                    Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', 'Select Group', '#slClientsSubAccountGroupSearch', '');


                                    FadePageCover(false);
                                },
                                error: function (jqXHR, exception) {
                                    debugger;
                                    swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                                    FadePageCover(false);
                                }
                            });
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Clients_ClearAllControls(); },
                function () { Clients_DeleteList(); });
            break;
        }
        case "ShipLinkClientsMelk": {
            debugger;
            $("#hl-menu-ShipLinkMelk").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkClientsMelk_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkClientsMelk/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name, ArName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLinkMelk/ShipLinkClientsMelk", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLinkMelk/ShipLinkClientsMelk.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pClientsGroups = pData[2];
                            ShipLinkClientsMelk_BindTableRows(JSON.parse(pData[0]));
                            //$("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slClientGroup", pClientsGroups, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkClientsMelk_Save(); },
                function () { ShipLinkClientsMelk_DeleteList(); });
            break;
        }
        case "ShipLinkMelkCurrencyClientLinking": {
            $("#hl-menu-ShipLinkMelk").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkMelkCurrencyClientLinking_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkMelkCurrencyClientLinking/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "CurrencyCode";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLinkMelk/ShipLinkMelkCurrencyClientLinking", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLinkMelk/ShipLinkMelkCurrencyClientLinking.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            ShipLinkMelkCurrencyClientLinking_BindTableRows(JSON.parse(pData[0]));
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, "<--Select-->", "slAccount", pAccounts, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkMelkCurrencyClientLinking_ClearAllControls(); },
                function () { ShipLinkMelkCurrencyClientLinking_DeleteList(); });
            break;
        }
        case "ShipLinkMelkRevenueItems": {
            $("#hl-menu-ShipLinkMelk").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkMelkRevenueItems_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkMelkRevenueItems/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID desc";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLinkMelk/ShipLinkMelkRevenueItems", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLinkMelk/ShipLinkMelkRevenueItems.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            ShipLinkMelkRevenueItems_BindTableRows(JSON.parse(pData[0]));
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, "<--Select-->", "slAccount", pAccounts, null);
                        });
                    $.ajax({
                        type: "GET",
                        url: strServerURL + "api/ShipLinkMelkRevenueItems/IntializeData",
                        data: { pDate: ConvertDateFormat(getTodaysDateInddMMyyyyFormat()), pOnlyCurrency: false },
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (pData) {
                            var pAccounts = pData[2];
                            var pSubAccounts = pData[3];
                            var pCostCenters = pData[4];
                            var pRevenueItems = pData[5];
                            var pVoyageAccountID = pData[6];
                            // FillListFromObject_ERP(pVoyageAccountID, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slRevenueAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slRevenueAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slCostCenter", pCostCenters, null);
                            FillListFromObject_ERP(null, 15/*pCodeOrName*/, TranslateString("<--Select-->"), "slShiplinkItem", pRevenueItems, null);
                            FillListFromObject_ERP(null, 15/*pCodeOrName*/, TranslateString("<--Select-->"), "slItemSearch", pRevenueItems, null);
                            $("#slItemSearch").val("0");
                            $("#slShiplinkItem").val("0");



                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slAccountSearch", pAccounts, null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slCostCenterSearch", pCostCenters, null);

                            //FillListFromObject_ERP(pVoyageAccountID, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slAccountSearch", pAccounts, null);

                            // FillListFromObject_ERP(pVoyageAccountID, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slTypeSearch", pAccounts, null);
                            // Fill_SelectInputAfterLoadData(pCostCenters, 'ID', 'Name', '<--Select-->', '#slCostCenterSearch', '');



                            //FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slCostCenter", pCostCenters, null);
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slRevenueItem", pRevenueItems, null);
                            if ($("#hf_CanEdit").val() == 1)
                                $("#btn-Save").removeClass("hide");
                            // ShipLinkRevenueItems_BindTableRows(JSON.parse(pData[0]));

                            if ($("#hDefaultUnEditableCompanyName").val() == "ONE") {
                                $(".classVoyageAccount").removeClass("hide");
                                $("#slVoyageAccount").attr("data-required", "true");
                                $("#thVoyageSubAccountID").removeClass("hide");
                                $("#thRevenueSubAccountID20").addClass("hide");
                                $("#thRevenueSubAccountID40").addClass("hide");
                                $("#thLine").addClass("hide");
                            }
                            else {
                                $(".classVoyageAccount").addClass("hide");
                                $("#slVoyageAccount").attr("data-required", "false");
                                $("#thVoyageSubAccountID").addClass("hide");
                                $("#thRevenueSubAccountID20").removeClass("hide");
                                $("#thRevenueSubAccountID40").removeClass("hide");
                                $("#thLine").removeClass("hide");

                            }
                            FadePageCover(false);
                        },
                        error: function (jqXHR, exception) {
                            debugger;
                            swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                            FadePageCover(false);
                        }
                    });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkMelkRevenueItems_ClearAllControls(); },
                function () { ShipLinkMelkRevenueItems_DeleteList(); });
            break;
        }
        case "Payments": {
            $("#hl-menu-ShipLinkMelk").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "A_Payments_BindTableRows";
            strLoadWithPagingFunctionName = "/api/A_Payments/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLinkMelk/A_Payments", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLinkMelk/A_Payments.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {

                            A_Payments_BindTableRows(JSON.parse(pData[0]));

                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { A_Payments_ClearAllControls(); },
                function () { A_Payments_DeleteList(); });
            break;
        }
        case "UserShippingLink": {
            $("#hl-menu-ShipLinkMelk").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "UserShippingLink_BindTableRows";
            strLoadWithPagingFunctionName = "/api/UserShippingLink/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLinkMelk/UserShippingLink", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLinkMelk/UserShippingLink.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {

                            var pTabelRows = JSON.parse(pData[0]);
                            var pDasUsers = pData[2];
                            var pUseres = pData[3];

                            UserShippingLink_BindTableRows(pTabelRows);
                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slUserDas", pDasUsers, null);
                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slUsers", pUseres, null);

                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { UserShippingLink_ClearAllControls(); },
                function () { UserShippingLink_DeleteList(); });
            break;
        }
        /////////////////////
        ///////////shiplinkEGL
        case "ShipLinkClientsEGL": {
            debugger;
            $("#hl-menu-ShipLinkEGL").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkClientsEGL_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkClientsEGL/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name, ArName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLinkEGL/ShipLinkClientsEGL", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLinkEGL/ShipLinkClientsEGL.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pClientsGroups = pData[2];
                            ShipLinkClientsEGL_BindTableRows(JSON.parse(pData[0]));
                            //$("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slClientGroup", pClientsGroups, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkClientsEGL_Save(); },
                function () { ShipLinkClientsEGL_DeleteList(); });
            break;
        }
        case "ShipLinkEGLRevenueItems": {
            $("#hl-menu-ShipLinkEGL").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkEGLRevenueItems_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkEGLRevenueItems/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID desc";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLinkEGL/ShipLinkEGLRevenueItems", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLinkEGL/ShipLinkEGLRevenueItems.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            ShipLinkEGLRevenueItems_BindTableRows(JSON.parse(pData[0]));
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, "<--Select-->", "slAccount", pAccounts, null);
                        });
                    $.ajax({
                        type: "GET",
                        url: strServerURL + "api/ShipLinkEGLRevenueItems/IntializeData",
                        data: { pDate: ConvertDateFormat(getTodaysDateInddMMyyyyFormat()), pOnlyCurrency: false },
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (pData) {
                            var pAccounts = pData[2];
                            var pSubAccounts = pData[3];
                            var pCostCenters = pData[4];
                            var pRevenueItems = pData[5];
                            var pVoyageAccountID = pData[6];
                            // FillListFromObject_ERP(pVoyageAccountID, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slRevenueAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slRevenueAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slCostCenter", pCostCenters, null);
                            FillListFromObject_ERP(null, 15/*pCodeOrName*/, TranslateString("<--Select-->"), "slShiplinkItem", pRevenueItems, null);
                            FillListFromObject_ERP(null, 15/*pCodeOrName*/, TranslateString("<--Select-->"), "slItemSearch", pRevenueItems, null);
                            $("#slItemSearch").val("0");
                            $("#slShiplinkItem").val("0");



                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slAccountSearch", pAccounts, null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slCostCenterSearch", pCostCenters, null);

                            //FillListFromObject_ERP(pVoyageAccountID, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slAccountSearch", pAccounts, null);

                            // FillListFromObject_ERP(pVoyageAccountID, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slTypeSearch", pAccounts, null);
                            // Fill_SelectInputAfterLoadData(pCostCenters, 'ID', 'Name', '<--Select-->', '#slCostCenterSearch', '');



                            //FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slCostCenter", pCostCenters, null);
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slRevenueItem", pRevenueItems, null);
                            if ($("#hf_CanEdit").val() == 1)
                                $("#btn-Save").removeClass("hide");
                            // ShipLinkRevenueItems_BindTableRows(JSON.parse(pData[0]));

                            if ($("#hDefaultUnEditableCompanyName").val() == "ONE") {
                                $(".classVoyageAccount").removeClass("hide");
                                $("#slVoyageAccount").attr("data-required", "true");
                                $("#thVoyageSubAccountID").removeClass("hide");
                                $("#thRevenueSubAccountID20").addClass("hide");
                                $("#thRevenueSubAccountID40").addClass("hide");
                                $("#thLine").addClass("hide");
                            }
                            else {
                                $(".classVoyageAccount").addClass("hide");
                                $("#slVoyageAccount").attr("data-required", "false");
                                $("#thVoyageSubAccountID").addClass("hide");
                                $("#thRevenueSubAccountID20").removeClass("hide");
                                $("#thRevenueSubAccountID40").removeClass("hide");
                                $("#thLine").removeClass("hide");

                            }
                            FadePageCover(false);
                        },
                        error: function (jqXHR, exception) {
                            debugger;
                            swal("Oops!", "Please, contact your technical support!  this is print region !", "error");
                            FadePageCover(false);
                        }
                    });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkEGLRevenueItems_ClearAllControls(); },
                function () { ShipLinkEGLRevenueItems_DeleteList(); });
            break;
        }
        case "PaymentsEGL": {
            $("#hl-menu-ShipLinkEGL").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "A_PaymentsEGL_BindTableRows";
            strLoadWithPagingFunctionName = "/api/A_PaymentsEGL/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLinkEGL/A_PaymentsEGL", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLinkEGL/A_PaymentsEGL.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {

                            A_PaymentsEGL_BindTableRows(JSON.parse(pData[0]));

                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { A_PaymentsEGL_ClearAllControls(); },
                function () { A_PaymentsEGL_DeleteList(); });
            break;
        }
        case "UserShippingLinkEGL": {
            $("#hl-menu-ShipLinkMelk").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "UserShippingLinkEGLController";
            strLoadWithPagingFunctionName = "/api/UserShippingLinkEGL/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLinkEGL/UserShippingLinkEGL", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLinkEGL/UserShippingLinkEGL.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {

                            var pTabelRows = JSON.parse(pData[0]);
                            var pDasUsers = pData[2];
                            var pUseres = pData[3];

                            UserShippingLinkEGL_BindTableRows(pTabelRows);
                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slUserDas", pDasUsers, null);
                            FillListFromObject_ERP(null, 2, TranslateString("SelectFromMenu"), "slUsers", pUseres, null);

                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { UserShippingLinkEGL_ClearAllControls(); },
                function () { UserShippingLinkEGL_DeleteList(); });
            break;
        }




        //////////

        //region ShipLink/MasterData
        case "ShipLinkClients": {
            debugger;
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "UserShippingLink_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkClients/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name, ArName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkClients", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkClients.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pClientsGroups = pData[2];
                            UserShippingLink(JSON.parse(pData[0]));
                            //$("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slClientGroup", pClientsGroups, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkClients_Save(); },
                function () { ShipLinkClients_DeleteList(); });
            break;
        }
        case "ShipLinkCurrencyClientLinking": {
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkCurrencyClientLinking_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkCurrencyClientLinking/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "CurrencyCode";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkCurrencyClientLinking", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkCurrencyClientLinking.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            ShipLinkCurrencyClientLinking_BindTableRows(JSON.parse(pData[0]));
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, "<--Select-->", "slAccount", pAccounts, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkCurrencyClientLinking_ClearAllControls(); },
                function () { ShipLinkCurrencyClientLinking_DeleteList(); });
            break;
        }

        case "ShipLinkRevenueItems": { //LoadAll not paging (pagesize is replaced by 9999 in controller)
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkRevenueItems_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkRevenueItems/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkRevenueItems", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkRevenueItems.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pSubAccounts = pData[3];
                            var pCostCenters = pData[4];
                            var pRevenueItems = pData[5];
                            var pVoyageAccountID = pData[6];
                            FillListFromObject_ERP(pVoyageAccountID, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slVoyageAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slVoyageSubAccount", pSubAccounts, null);
                            //FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slCostCenter", pCostCenters, null);
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slRevenueItem", pRevenueItems, null);
                            if ($("#hf_CanEdit").val() == 1)
                                $("#btn-Save").removeClass("hide");
                            ShipLinkRevenueItems_BindTableRows(JSON.parse(pData[0]));
                            debugger;
                            if ($("#hDefaultUnEditableCompanyName").val() == "ONE" || $("#hDefaultUnEditableCompanyName").val() == "KDS" || $("#hDefaultUnEditableCompanyName").val() == "NEW") {
                                $(".classVoyageAccount").removeClass("hide");
                                $("#slVoyageAccount").attr("data-required", "true");
                                $("#thVoyageSubAccountID").removeClass("hide");
                                $("#thRevenueSubAccountID20").addClass("hide");
                                $("#thRevenueSubAccountID40").addClass("hide");
                                $("#thLine").addClass("hide");
                            }
                            else {
                                $(".classVoyageAccount").addClass("hide");
                                $("#slVoyageAccount").attr("data-required", "false");
                                $("#thVoyageSubAccountID").addClass("hide");
                                $("#thRevenueSubAccountID20").removeClass("hide");
                                $("#thRevenueSubAccountID40").removeClass("hide");
                                $("#thLine").removeClass("hide");

                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                //function () { ShipLinkRevenueItems_ClearAllControls(); },
                function () { ShipLinkRevenueItems_NewRow(); },
                function () { ShipLinkRevenueItems_DeleteList(); });
            break;
        }
        case "ShipLinkInvoicePosting": {
            debugger;
            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkInvoicePosting_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkInvoicePosting/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            //if ($("#hDefaultUnEditableCompanyName").val() != "ONE")
            if ($("#hDefaultUnEditableCompanyName").val() != "KDS")

                var pWhereClause = " WHERE IssueDate >= GetDateWithFormatyyyyMMdd(pFormattedTodaysDate) AND IssueDate<='" + GetDateWithFormatyyyyMMdd(pFormattedTodaysDate) + " 23:59:59'";
            else
                var pWhereClause = " WHERE IssueDate >= '2000/01/01' AND IssueDate<='" + GetDateWithFormatyyyyMMdd(pFormattedTodaysDate) + " 23:59:59'";

            //pWhereClause += " AND ID NOT IN (SELECT Shipping_InvoiceID from SL_InvoiceJvs WHERE JVID2 IS NULL)";
            pWhereClause += " AND JVID2 IS NULL";
            pWhereClause += " AND 1=0"; //I don't want to retrieve data at the begining
            pWhereClause += ($("#hDefaultUnEditableCompanyName").val() != "ONE" ? " AND IsAudited=1 " : "");
            var pOrderBy = "IssueDate,PaymentDate";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkInvoicePosting", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkInvoicePosting.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pInvoiceType = pData[3];
                            var pSafe = pData[4];
                            var pVessel = pData[5];
                            ShipLinkInvoicePosting_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("<--Select-->"), "slVoyageAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slInvoiceType", pInvoiceType, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slSafe", pSafe, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("<--Select-->"), "slVessel", pVessel, null);
                            if ($("#hf_CanEdit").val() == 1)
                                $("#btn-Post").removeClass("hide");
                            if ($("#hDefaultUnEditableCompanyName").val() == "ONE" || $("#hDefaultUnEditableCompanyName").val() == "KDS" || $("#hDefaultUnEditableCompanyName").val() == "NEW") {
                                $("#btn-Post").attr("onclick", "ShipLinkInvoicePosting_LinkRevenueItems();");
                            }
                            else {
                                $("#btn-Post").attr("onclick", "ShipLinkInvoicePosting_Post(false);");
                            }
                        });
                });
                if ($("#hDefaultUnEditableCompanyName").val() != "ONE")
                    $("#txtSearchFrom").val(pFormattedTodaysDate);
                else
                    $("#txtSearchFrom").val(pFormattedTodaysDate);
                // $("#txtSearchFrom").val("01/01/2000");


                $("#txtSearchTo").val(pFormattedTodaysDate);
                $("#txtJVDate").val(pFormattedTodaysDate);
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkInvoicePosting_Save(); },
                function () { ShipLinkInvoicePosting_DeleteList(); });
            break;
        }
        case "ShipLinkInvoiceUnposting": {
            debugger;
            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkInvoiceUnposting_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkInvoiceUnposting/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE JVDate >= '2000/01/01' AND JVDate<='" + GetDateWithFormatyyyyMMdd(pFormattedTodaysDate) + " 23:59:59'";
            var pOrderBy = "ID";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkInvoiceUnposting", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkInvoiceUnposting.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pInvoiceType = pData[2];
                            ShipLinkInvoiceUnposting_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject_ERP(null, 2, TranslateString("<--Select-->"), "slInvoiceType", pInvoiceType, null);
                            if ($("#hf_CanEdit").val() == 1)
                                $("#btn-Unpost").removeClass("hide");
                        });
                });
                $("#txtSearchFrom").val("01/01/2000");
                $("#txtSearchTo").val(pFormattedTodaysDate);
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkInvoiceUnposting_Save(); },
                function () { ShipLinkInvoiceUnposting_DeleteList(); });
            break;
        }

        case "ShipLinkInvoiceTypeToJournal": {
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkInvoiceTypeToJournal_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkInvoiceTypeToJournal/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "InvoiceTypeName, JournalTypeName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkInvoiceTypeToJournal", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkInvoiceTypeToJournal.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pJournalTypes = pData[3];
                            var pJVTypes = pData[4];
                            var pInvoiceTypes = pData[5];
                            var pLines = pData[6];


                            ShipLinkInvoiceTypeToJournal_BindTableRows(JSON.parse(pData[0]));
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, "<--Select-->", "slAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slJournalType", pJournalTypes, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slJVType", pJVTypes, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slInvoiceType", pInvoiceTypes, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slLine", pLines, null);


                            if ($("#hDefaultUnEditableCompanyName").val() == "ONE" || $("#hDefaultUnEditableCompanyName").val() == "KDS" || $("#hDefaultUnEditableCompanyName").val() == "NEW"
                                || $("#hDefaultUnEditableCompanyName").val() == "EGL") {
                                $("#thLine").addClass("hide");
                                $("#thSubAccount").addClass("hide");
                                $("#slSubAccount").addClass("hide");
                                $("#slLine").addClass("hide");
                                $("#lblLine").addClass("hide");
                                $("#lblSubAccount").addClass("hide");
                                $('#slLine').attr("data-required", "false");

                                $("#thJournalType").removeClass("hide");
                                $("#JournalTypeName").removeClass("hide")
                                $("#slJournalType").removeClass("hide")
                                $('#lblJournalType').attr("data-required", "true");

                                $("#thJVType").removeClass("hide");
                                $("#JournalTypeName").removeClass("hide");
                                $("#slJVType").removeClass("hide");
                                $('#lblJVType').attr("data-required", "true");

                            }
                            else {
                                $("#thLine").removeClass("hide");
                                $("#thSubAccount").removeClass("hide");
                                $("#slLine").removeClass("hide");
                                $("#slSubAccount").removeClass("hide");
                                $("#lblLine").removeClass("hide")
                                $("#lblSubAccount").removeClass("hide")
                                $('#slLine').attr("data-required", "true");

                                $("#thJournalType").addClass("hide");
                                $("#JournalTypeName").addClass("hide");
                                $("#slJournalType").addClass("hide");
                                $('#slJournalType').attr("data-required", "false");
                                $("#lblJournalType").addClass("hide");

                                $("#thJVType").addClass("hide");
                                $("#JournalTypeName").addClass("hide");
                                $("#slJVType").addClass("hide");
                                $('#slJVType').attr("data-required", "false");
                                $("#lblJVType").addClass("hide");
                            }


                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkInvoiceTypeToJournal_ClearAllControls(); },
                function () { ShipLinkInvoiceTypeToJournal_DeleteList(); });


            break;
        }
        case "ShipLinkInvoiceTypeToJournalPayment": {
            $("#hl-menu-ShipLink").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ShipLinkInvoiceTypeToJournal_Payment_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ShipLinkInvoiceTypeToJournal_Payment/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "InvoiceTypeName, JournalTypeName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/ShipLink/ShipLinkInvoiceTypeToJournal_Payment", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/ShipLink/ShipLinkInvoiceTypeToJournal_Payment.js', function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pJournalTypes = pData[3];
                            var pJVTypes = pData[4];
                            var pInvoiceTypes = pData[5];
                            ShipLinkInvoiceTypeToJournal_Payment_BindTableRows(JSON.parse(pData[0]));
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, "<--Select-->", "slAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slJournalType", pJournalTypes, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slJVType", pJVTypes, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slInvoiceType", pInvoiceTypes, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ShipLinkInvoiceTypeToJournal_Payment_ClearAllControls(); },
                function () { ShipLinkInvoiceTypeToJournal_Payment_DeleteList(); });
            break;
        }
        case "PaymentRequest": {
            debugger;
            _IsCustodySettlement = 0;
            // $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "PaymentRequest_BindTableRows";
            strLoadWithPagingFunctionName = "/api/PaymentRequest/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = pLoggedUser.IsAccessAllCharges ? "WHERE 1=1" : " WHERE CreatorUserID_Request = " + $("#hLoggedUserID").val();
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/Custodies/PaymentRequest", "div-content", function () {

                $.getScript(strServerURL + ' /Scripts/ReceiptsAndPayments/Custodies/PaymentRequest.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {

                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            $("#slCurrency").html($("#hReadySlCurrencies").html());

                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCustody", pData[2],
                                function () { $("#slFilterCustody").html($("#slCustody").html()) });
                            //FillListFromObject(null, 1, "<--Select-->", "slOperation", pData[3], null);

                            if (pDefaults.UnEditableCompanyName == "NEW") {
                                if (pLoggedUser.IsAccessAllCharges == true) {
                                    Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                                } else {
                                    Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "OperationID", "OperationCode,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                                }
                            }
                            else {
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                            }
                            FillListFromObject(null, (pDefaults.IsRepeatChargeTypeName ? 4 : 2), "<--Select-->", "slChargeType", pData[4], null);
                            FillListFromObject(null, (pDefaults.IsRepeatChargeTypeName ? 4 : 2), "<--Select-->", "slChargeType", pData[4], null);


                            FillListFromObject_ERP(null, 2, "<--Select-->", "slHouse", pData[5], null);
                            // FillListFromObject_ERP(null, 2, "<--Select-->", "slCertificateNumber", pData[6], null);
                            FillListFromObject_ERP(null, 2, "<--Select-->", "slServiceCategory", pData[9], null);
                            FillListFromObject_ERP(null, 2, "<--Select-->", "slPaymentCombo", pData[10], null);

                            PaymentRequest_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                //if (pDefaults.UnEditableCompanyName == "IST")
                //    $(".classShowForIST").removeClass("hide");
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { PaymentRequest_ClearAllControls(); },
                function () { PaymentRequest_DeleteList(); });
            break;
        }
        case "PaymentRequestSupplier": {
            debugger;
            _IsCustodySettlement = 0;
            // $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "PaymentRequestSupplier_BindTableRows";
            strLoadWithPagingFunctionName = "/api/PaymentRequestSupplier/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = pLoggedUser.IsAccessAllCharges ? "WHERE 1=1" : " WHERE CreatorUserID_Request = " + $("#hLoggedUserID").val();
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/Custodies/PaymentRequestSupplier", "div-content", function () {

                $.getScript(strServerURL + ' /Scripts/ReceiptsAndPayments/Custodies/PaymentRequestSupplier.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {

                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            $("#slCurrency").html($("#hReadySlCurrencies").html());

                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCustody", pData[2],
                                function () { $("#slFilterCustody").html($("#slCustody").html()) });
                            //FillListFromObject(null, 1, "<--Select-->", "slOperation", pData[3], null);

                            if (pDefaults.UnEditableCompanyName == "NEW") {
                                if (pLoggedUser.IsAccessAllCharges == true) {
                                    Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                                } else {
                                    Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "OperationID", "OperationCode,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                                }
                            }
                            else {
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                            }
                            FillListFromObject(null, (pDefaults.IsRepeatChargeTypeName ? 4 : 2), "<--Select-->", "slChargeType", pData[4], null);
                            FillListFromObject_ERP(null, 2, "<--Select-->", "slHouse", pData[5], null);
                            // FillListFromObject_ERP(null, 2, "<--Select-->", "slCertificateNumber", pData[6], null);
                            FillListFromObject_ERP(null, 2, "<--Select-->", "slTruckingOrder", pData[7], null);
                            PaymentRequest_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                //if (pDefaults.UnEditableCompanyName == "IST")
                //    $(".classShowForIST").removeClass("hide");
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { PaymentRequest_ClearAllControls(); },
                function () { PaymentRequest_DeleteList(); });
            break;
        }
        case "ExchangeMovement": {
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ExchangeMovement_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ExchangeMovement/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            //var pWhereClause = "WHERE (VoucherType=20  OR VoucherType=40 )  AND Posted=1 AND PaymentRequestID != 0 AND ID NOT IN (SELECT voucherID FROM A_ExchangeMovement)";
            var pWhereClause = "WHERE (VoucherType=20  OR VoucherType=40 )  AND Posted=1 AND ID NOT IN (SELECT voucherID FROM A_ExchangeMovement)";

            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/Custodies/ExchangeMovement", "div-content", function () {
                $("#liExchangeMovement").text(TranslateString(pControlID));
                $("#h3ExchangeMovement").text($("#liExchangeMovement").text());
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Custodies/ExchangeMovement.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccount = pData[2];
                            var pSafe = pData[3];
                            var pTax = pData[4];
                            var pCostCenter = pData[5];
                            var pBank = pData[6];

                            ExchangeMovement_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, null);
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchBank", pBank, null);


                            FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenter, null);

                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCustody", pData[9],
                                function () { $("#slFilterCustody").html($("#slCustody").html()) });

                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slSuppliers", pData[13],
                                function () { $("#slFilterCustody").html($("#slSuppliers").html()) });
                            //FillListFromObject(null, 1, "<--Select-->", "slOperation", pData[3], null);

                            Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[8], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });

                            FillListFromObject(null, (pDefaults.IsRepeatChargeTypeName ? 4 : 2), "<--Select-->", "slChargeType", pData[10], null);
                            FillListFromObject_ERP(null, 2, "<--Select-->", "slHouse", pData[11], null);
                            FillListFromObject_ERP(null, 2, "<--Select-->", "slTruckingOrder", pData[12], null);

                            $("#movementType").val("ExchangeMovement");
                            $(".ReceiptMovement").addClass("hide");

                            $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            $("#txtJVDate").val(pFormattedTodaysDate);
                            if (glbFormCalled == constFrmPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-Post").removeClass("hide");
                                $(".showForPosting").removeClass("hide");
                                $(".hideForPosting").addClass("hide");
                            }
                            else if (glbFormCalled == constFrmUnPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-UnPost").removeClass("hide");
                                $(".showForPosting").addClass("hide");
                                $(".hideForPosting").removeClass("hide");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Post_Unpost_Voucher_ClearAllControls();*/ },
                function () { /*Post_Unpost_Voucher_DeleteList();*/ });
            break;
        }
        case "ReceiptMovement": {
            $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "ExchangeMovement_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ExchangeMovement/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            //var pWhereClause = "WHERE (VoucherType=10  OR VoucherType=30 )  AND Posted=1 AND PaymentRequestID != 0 AND ID NOT IN (SELECT voucherID FROM A_ExchangeMovement)";
            var pWhereClause = "WHERE (VoucherType=10  OR VoucherType=30 )  AND Posted=1 AND ID NOT IN (SELECT voucherID FROM A_ExchangeMovement)";

            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/Custodies/ExchangeMovement", "div-content", function () {
                $("#liExchangeMovement").text(TranslateString(pControlID));
                $("#h3ExchangeMovement").text($("#liExchangeMovement").text());
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Custodies/ExchangeMovement.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccount = pData[2];
                            var pSafe = pData[3];
                            var pTax = pData[4];
                            var pCostCenter = pData[5];
                            var pBank = pData[6];
                            ExchangeMovement_BindTableRows(JSON.parse(pData[0]));
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pAccount, null);
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchSafe", pSafe, null);
                            FillListFromObject_ERP(null, 8/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSearchBank", pBank, null);

                            FillListFromObject_ERP(null, 7/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slTax", pTax, function () { $("#slTax2").html($("#slTax").html()); });
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pCostCenter, null);

                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCustody", pData[9],
                                function () { $("#slFilterCustody").html($("#slCustody").html()) });

                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slSuppliers", pData[13],
                                function () { $("#slFilterCustody").html($("#slSuppliers").html()) });
                            //FillListFromObject(null, 1, "<--Select-->", "slOperation", pData[3], null);

                            Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[8], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });

                            FillListFromObject(null, (pDefaults.IsRepeatChargeTypeName ? 4 : 2), "<--Select-->", "slChargeType", pData[10], null);
                            FillListFromObject_ERP(null, 2, "<--Select-->", "slHouse", pData[11], null);
                            FillListFromObject_ERP(null, 2, "<--Select-->", "slTruckingOrder", pData[12], null);
                            $(".ExchangeMovement").addClass("hide");

                            $("#movementType").val("ReceiptMovement");
                            $(".lblPayment_Custody").text("Receiving Confirm");
                            if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                                $(".lblPayment_Custody").text("حركة القبض");

                            } else {
                                $(".lblPayment_Custody").text("Receiving Confirm");
                            }
                            $("#slSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").html($("#hReadySlCurrencies").html());
                            $("#slSearchCurrency").prepend("<option value=0>" + TranslateString("SelectFromMenu") + "</option>"); //coz this is search so i might need to add get all currencies
                            $("#slSearchCurrency").val(0);
                            $("#txtSearchFrom").val("01/01/2000");
                            $("#txtSearchTo").val(pFormattedTodaysDate);
                            $("#txtJVDate").val(pFormattedTodaysDate);
                            if (glbFormCalled == constFrmPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-Post").removeClass("hide");
                                $(".showForPosting").removeClass("hide");
                                $(".hideForPosting").addClass("hide");
                            }
                            else if (glbFormCalled == constFrmUnPosting && $("#hf_CanEdit").val() == "1") {
                                $("#btn-UnPost").removeClass("hide");
                                $(".showForPosting").addClass("hide");
                                $(".hideForPosting").removeClass("hide");
                            }
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Post_Unpost_Voucher_ClearAllControls();*/ },
                function () { /*Post_Unpost_Voucher_DeleteList();*/ });
            break;
        }

        case "CustodySettlement": {
            debugger;
            _IsCustodySettlement = 1;

            // $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "PaymentRequest_BindTableRows";
            strLoadWithPagingFunctionName = "/api/PaymentRequest/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE " + (pLoggedUser.IsAccessAllCharges ? ("") : (" CreatorUserID_Request = " + $("#hLoggedUserID").val() + " AND ")) + "  IsApprovedRequest = 1 AND VoucherID is not null";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/Custodies/PaymentRequest", "div-content", function () {

                $.getScript(strServerURL + ' /Scripts/ReceiptsAndPayments/Custodies/PaymentRequest.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {

                            $('.hideWithCustodySettlement').removeClass('hide');
                            //$('.m-b-none').html("Custody Settlement - تسوية عهد")
                            if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                                $('.lblPayment_Custody').html("تسوية عهد")

                            } else {
                                $('.lblPayment_Custody').html("Custody Settlement")

                            }

                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            $("#slCurrency").html($("#hReadySlCurrencies").html());

                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCustody", pData[2],
                                function () { $("#slFilterCustody").html($("#slCustody").html()) });
                            //FillListFromObject(null, 1, "<--Select-->", "slOperation", pData[3], null);
                            //Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                            if (pDefaults.UnEditableCompanyName == "NEW") {
                                if (pLoggedUser.IsAccessAllCharges == true) {
                                    Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });

                                } else {
                                    Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "OperationID", "OperationCode,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });

                                }
                            }
                            else {
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pData[3], "ID", "Code,VesselName,ActualArrivalString", ' --> ', "<--Select-->", "#slOperation", null, "", function () { });
                            }
                            FillListFromObject(null, 2, "<--Select-->", "slChargeType", pData[4], null);
                            FillListFromObject(null, 2, "<--Select-->", "slHouse", pData[5], null);
                            //FillListFromObject(null, 2, "<--Select-->", "slCertificateNumber", pData[6], null);
                            FillListFromObject(null, 2, "<--Select-->", "slTruckingOrder", pData[7], null);
                            FillListFromObject(null, 2, "<--Select-->", "slPartenerType", pData[8], null);
                            PaymentRequest_BindTableRows(JSON.parse(pData[0]));
                            $('#btn-NewAdd').addClass('hide');
                        });
                });
                //if (pDefaults.UnEditableCompanyName == "IST")
                //    $(".classShowForIST").removeClass("hide");
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { PaymentRequest_ClearAllControls(); },
                function () { PaymentRequest_DeleteList(); });
            break;
        }
        case "SettelmentSupplierDrivers": {
            debugger;
            _IsCustodySettlement = 1;

            // $("#hl-menu-ContainerTrackingGroup").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "SettelmentSupplierDrivers_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SettelmentSupplierDrivers/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE CreatorUserID_Request = " + $("#hLoggedUserID").val() + " AND isnull(IsApprovedSettlement,0) = 1 AND VoucherID is not null and  isnull(PartenerID,0)<>0";
            var pOrderBy = "r.ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/Custodies/SettelmentSupplierDrivers", "div-content", function () {

                $.getScript(strServerURL + ' /Scripts/ReceiptsAndPayments/Custodies/SettelmentSupplierDrivers.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {

                            $('.hideWithCustodySettlement').removeClass('hide');
                            //$('.m-b-none').html("Custody Settlement - تسوية عهد")
                            //$('.lblPayment_Custody').html("Custody Settlement - تسوية عهد")
                            if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                                $('.lblPayment_Custody').html("تسوية عهد")

                            } else {
                                $('.lblPayment_Custody').html("Custody Settlement")

                            }
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            $("#slCurrency").html($("#hReadySlCurrencies").html());

                            FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slCustody", pData[2],
                                function () { $("#slFilterCustody").html($("#slCustody").html()) });
                            FillListFromObject(null, 1, "<--Select-->", "slOperation", pData[3], null);
                            FillListFromObject(null, 2, "<--Select-->", "slChargeType", pData[4], null);
                            FillListFromObject(null, 2, "<--Select-->", "slHouse", pData[5], null);
                            FillListFromObject(null, 2, "<--Select-->", "slCertificateNumber", pData[6], null);
                            FillListFromObject(null, 2, "<--Select-->", "slTruckingOrder", pData[7], null);
                            FillListFromObject(null, 2, "<--Select-->", "slPartenerType", pData[8], null);
                            PaymentRequest_BindTableRows(JSON.parse(pData[0]));
                            $('#btn-NewAdd').addClass('hide');
                        });
                });
                //if (pDefaults.UnEditableCompanyName == "IST")
                //    $(".classShowForIST").removeClass("hide");
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { PaymentRequest_ClearAllControls(); },
                function () { PaymentRequest_DeleteList(); });
            break;
        }
        case "CustudyBalance": {
            debugger;
            $("#hl-menu-Accounting").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CustudyBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CustudyBalance/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/ReceiptsAndPayments/Custodies/CustudyBalance", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Custodies/CustudyBalance.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            CustudyBalance_BindTableRows(JSON.parse(pData[0]));
                            //FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select Cost Center Type-->", "slCostCenterType", pData[2], null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { CustudyBalance_ClearAllControls(); },
                function () { CustudyBalance_DeleteList(); });
            break;
        }
        case "PaymentRequestIntegration": {
            debugger;
            $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Integration/PaymentRequestIntegration.js?' + glbVersion, function () { PaymentRequestIntegration_Initialize(0); });
            break;
        }
        case "CustodySettlementIntegration": {
            debugger;
            $.getScript(strServerURL + '/Scripts/ReceiptsAndPayments/Integration/PaymentRequestIntegration.js?' + glbVersion, function () { PaymentRequestIntegration_Initialize(1); });
            break;
        }
        case "Warehouse":
            {
                $.getScript(strServerURL + '/Scripts/Warehousing/MasterData/Warehouse.js?' + glbVersion, function () { Warehouse_Initialize(); });
                break;
            }

        case "MainWarehouse": {
            $.getScript(strServerURL + '/Scripts/Warehousing/MasterData/MainWarehouse.js?' + glbVersion, function () { MainWarehouse_Initialize(); });
            break;
        }

        case "WarehouseNotes": {
            $("#hl-menu-Warehousing").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "WarehouseNotes_BindTableRows";
            strLoadWithPagingFunctionName = "/api/WarehouseNotes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Name";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/Warehousing/MasterData/WarehouseNotes", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Warehousing/MasterData/WarehouseNotes.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            WarehouseNotes_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { WarehouseNotes_ClearAllControls(); },
                function () { WarehouseNotes_DeleteList(); });
            break;
        }
        case "WarehousingChargeTypes": {

            strLoadWithPagingFunctionName = "/api/WarehousingChargeTypes/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/Warehousing/MasterData/WarehousingChargeTypes", "div-content", function () {

                $.getScript(strServerURL + '/Scripts/Warehousing/MasterData/WarehousingChargeTypes.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { WarehousingChargeTypes_BindTableRows(pTabelRows); });
                });
                if (IsAccountingActive)
                    $(".classAccountingOption").removeClass("hide");
                else
                    $(".classAccountingOption").addClass("hide");
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE IsMain=0", pOrderBy: "Name,Code" }
                    , function (pData) {
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slRevenueAccount", pData[0]
                            , function () { $("#slExpenseAccount").html($("#slRevenueAccount").html()); $("#slReturnAccount").html($("#slRevenueAccount").html()); });
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slRevenueCostCenter", pData[2]
                            , function () { $("#slExpenseCostCenter").html($("#slRevenueCostCenter").html()) });
                        $("#slRevenueSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                        $("#slExpenseSubAccount").html("<option value=0>" + TranslateString("SelectFromMenu") + "</option>");
                    }
                    , null);
            },
                function () { WarehousingChargeTypes_ClearAllControls(); },
                function () { WarehousingChargeTypes_DeleteList(); });
            break;
        }

        case "Area": {
            $.getScript(strServerURL + '/Scripts/Warehousing/MasterData/Area.js?' + glbVersion, function () { Area_Initialize(); });
            break;
        }

        case "Row": {
            $.getScript(strServerURL + '/Scripts/Warehousing/MasterData/Row.js?' + glbVersion, function () { Row_Initialize(); });
            break;
        }

        case "WarehousingContract": {
            $.getScript(strServerURL + '/Scripts/Warehousing/Transactions/Contract.js?' + glbVersion, function () { Contract_Initialize(); });
            break;
        }

        case "ReceiveProduct": {
            $.getScript(strServerURL + '/Scripts/Warehousing/Transactions/Receive.js?' + glbVersion, function () { Receive_Initialize(); });
            break;
        }


        case "VehicleService": {
            $.getScript(strServerURL + '/Scripts/Warehousing/Transactions/VehicleService.js?' + glbVersion, function () { VehicleService_Initialize(); });
            break;
        }


        case "TransferProducts":
        case "WH_MoveProduct": {
            $.getScript(strServerURL + '/Scripts/Warehousing/Transactions/TransferProducts.js?' + glbVersion, function () { TransferProducts_Initialize(); });
            break;
        }

        case "PDI": {
            $.getScript(strServerURL + '/Scripts/Warehousing/Transactions/PDI.js?' + glbVersion, function () { PDI_Initialize(); });
            break;
        }

        case "AgingAdjustment": {
            $.getScript(strServerURL + '/Scripts/Warehousing/Transactions/AgingAdjustment.js?' + glbVersion, function () { AgingAdjustment_Initialize(); });
            break;
        }

        case "WarehousingPickup": {
            $.getScript(strServerURL + '/Scripts/Warehousing/Transactions/Pickup.js?' + glbVersion, function () { Pickup_Initialize(); });
            break;
        }

        case "WarehousingInvoice": {
            $.getScript(strServerURL + '/Scripts/Warehousing/Transactions/WHInvoice.js?' + glbVersion, function () { WHInvoice_Initialize(); });
            break;
        }

        case "Inventory": {
            $.getScript(strServerURL + '/Scripts/Warehousing/Reports/Inventory.js?' + glbVersion, function () { Inventory_Initialize(); });
            break;
        }

        case "ProductLog": {
            $.getScript(strServerURL + '/Scripts/Warehousing/Reports/ProductLog.js?' + glbVersion, function () { ProductLog_Initialize(); });
            break;
        }
        case "StockLedger": {
            $.getScript(strServerURL + '/Scripts/Warehousing/Reports/StockLedger.js?' + glbVersion, function () { StockLedger_Initialize(); });
            break;
        }
        case "VehicleReport": {
            debugger;
            FadePageCover(true);
            $.getScript(strServerURL + '/Scripts/Warehousing/Reports/VehicleReport.js', function () { VehicleReport_Initialize(); });
            break;
        }
        case "AreaLocationsChart": {
            debugger;
            FadePageCover(true);
            LoadView("/Warehousing/Reports/AreaLocationsChart", "div-content", function () {
                CallGETFunctionWithParameters("/api/AreaLocationsChart/FillFilter", null
                    , function (pData) {
                        Fill_SelectInputAfterLoadData(pData[0], 'ID', 'Code', 'select Warehouses', '#slWarehouses', '');
                        //  Fill_SelectInputAfterLoadData(pData[1], 'ID', 'Name', 'select Complaint', '#slComplaint', '');
                    }
                    , function () { FadePageCover(false); $("#hl-menu-3PL").parent().addClass("active"); });
                $.getScript(strServerURL + '/Scripts/Warehousing/Reports/AreaLocationsChart.js');
            });
            break;
        }
        case "CRM": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 15 ", "CRMDashboard", function () {

                });

            });
            break;
        }
        case "Quotations": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 3 ", "Quotations", function () {
                });
            });
            break;
        }

        case "CRMSalesmen": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Locations").removeClass("hide"); $("#tabLocations").parent().children().removeClass("btn-warning"); $("#tabLocations").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 15 ", "CRMSalesmen", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }

        case "CRMBasicData": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 15 ", "CRMBasicData", function () {

                });

            });
            break;
        }
        case "CRMClientGroup": {
            debugger;

            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 15 ", "CRMClientGroup", function () {

                });

            });
            break;
        }
        case "CRMDashboard": {
            debugger;

            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 15 ", "CRMDashboard", function () {

                });

            });
            break;
        }
        case "CRM_Actions": {
            debugger;
            strLoadWithPagingFunctionName = "/api/CRM_Actions/LoadWithPaging";

            LoadView("/CRM/CRM_Actions", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMBasicData/CRM_Actions.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CRM_Actions_BindTableRows(pTabelRows); });
                    pParametersWithValues = {
                        pWhereClause: " Where Id < 2"
                    };
                    CallGETFunctionWithParameters("/api/CRM_Actions/LoadAll", pParametersWithValues
                        , function (pData) {
                            debugger;

                            FillListFromObject(null, 1, "<--Select-->", "slPipeLineStages", pData[1], null);

                        }, null);
                });
            },
                function () { CRM_Actions_ClearAllControls(); },
                function () { CRM_Actions_DeleteList(); });
            break;
        }

        case "CRM_Sources": {
            strLoadWithPagingFunctionName = "/api/CRM_Sources/LoadWithPaging";
            LoadView("/CRM/CRM_Sources", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMBasicData/CRM_Sources.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CRM_Sources_BindTableRows(pTabelRows); });
                });
            },
                function () { CRM_Sources_ClearAllControls(); },
                function () { CRM_Sources_DeleteList(); });
            break;
        }
        case "CRM_Clients": //(i.e. SalesLeadsFollowup)
        case "CRMSalesLeadsForm":
            {
                glbCallingControl = pControlID;
                strLoadWithPagingFunctionName = "/api/CRM_Clients/LoadWithPaging";
                strBindTableRowsFunctionName = "CRM_Clients_BindTableRows";
                LoadView("/CRM/CRM_Clients", "div-content", function () {
                    $("#slClientType").html('<option value=0><--Select--></option><option value="10">Distributor</option><option value="20">Vendor</option><option value="30">Manufacturer</option><option value="40">Agent</option><option value="50">Reseller</option><option value="60">End User</option>');
                    if (pDefaults.UnEditableCompanyName == "NIL") {
                        $("#slLeadStatus").html('<option value=0><--Select--></option><option value="30">New CLient</option><option value="40">VIP CLient</option><option value="50">Normal Client</option><option value="60">Old Client</option>');
                        $(".classHideForNIL").addClass("hide");
                    }
                    else
                        $("#slLeadStatus").html('<option value=0><--Select--><option value="1">WON</option><option value="2">LOST</option>');
                    CallGETFunctionWithParameters("/api/CRM_Clients/LoadModalData", { pLoadDataDummyParameter: "Dummy" }
                        , function (pData) {
                            debugger;
                            var pCommodity = pData[0];
                            var pContainerType = pData[1];
                            var pActivity = pData[2];
                            var pPaymentTerm = pData[3];
                            var pPipeLineStage = pData[4];
                            var pUser = pData[5];
                            var pCountries = pData[6];
                            var pIndustryTypes = pData[9];

                            FillListFromObject(null, 2, "<--Select-->", "slCommodity", pCommodity, null);
                            FillListFromObject(null, 1, "<--Select-->", "slContainerType", pContainerType, null);
                            FillListFromObject(null, 1, "<--Select-->", "slContainerTypeProfitValue", pContainerType, null);
                            FillListFromObject(null, 2, "<--Select-->", "slActivity", pActivity, null);
                            FillListFromObject(null, 19, "<--Select-->", "slPipeLineStage", pPipeLineStage, null);
                            FillListFromObject(null, 19, "<--Select-->", "slPipeLineStageProfitValue", pPipeLineStage, null);

                            FillListFromObject(null, 2, "<--Select-->", "slPaymentTerm", pPaymentTerm, null);
                            FillListFromObject(null, 2, "<--Select-->", "slPorts", pData[7], null);
                            FillListFromObject(null, 2, "<--Select-->", "slFollowUpSalesRep", pUser,
                                function () {
                                    $("#slFollowUpSalesRep2").html($("#slFollowUpSalesRep").html());
                                    $('#slCustomersFollowUpSalesRep_Customer').html($('#slFollowUpSalesRep').html())
                                    $('#slCustomersFollowUpSalesRep2_Customer').html($('#slFollowUpSalesRep').html())
                                });
                            FillListFromObject(null, 2, "<--Select-->", "slFromCountry", pCountries, function () { $("#slToCountry").html($("#slFromCountry").html()); $("#slCountryServices").html($("#slFromCountry").html()) });
                            //FillListFromObject(null, 1, "<--Select-->", "slCurrencyProfitValue", pData[8], null);

                            $("#slCurrencyProfitValue").html($("#hReadySlCurrencies").html());
                            $("#slCostCurrency").html($("#hReadySlCurrencies").html());
                            $("#slRevenueCurrency").html($("#hReadySlCurrencies").html());
                            $("#slMarginAmountCurrency").html($("#hReadySlCurrencies").html());
                            $("#slGrossMarginCurrency").html($("#hReadySlCurrencies").html());
                            $("#slCustomer").html($("#hReadySlCustomers").html());

                            FillListFromObject(null, 2, "<--Select-->", "slPortsGeneral", pData[7], null);
                            FillListFromObject(null, 2, "<--Select-->", "slPaymentTermProfitValue", pPaymentTerm, null);
                            FillListFromObject(null, 2, "<--Select-->", "slIndustryType", pIndustryTypes, null);

                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slCurrency").val($("#hDefaultCurrencyID").val());
                            $("#txtStartingDate").val(getTodaysDateInddMMyyyyFormat());
                            $("#txtClosingExpectedDate").val(getTodaysDateInddMMyyyyFormat());
                        }
                        , null);
                    LoadView("/MasterData/ModalCheckboxesList", "div-content", null, null, null, true);
                    if (pControlID == "CRMSalesLeadsForm") {
                        $("#liGroupName").text("Basic Data");
                        $("#liGroupName").attr("onclick", "LoadViews('CRM')");
                        $("#liTabName").text("Sales Leads");
                        $("#liTabName").attr("onclick", "LoadViews('CRM')");
                        $("#liFormName").text("Sales Leads");
                        $("#h3Label").text("Sales Leads");
                        $("#stepsFollowups").attr("style", "display:none;");
                        $('#btnTransferToActualCustomer').addClass('hide');
                    }
                    else { //CRM_Clients (i.e. SalesLeadsFollowup)
                        $("#liGroupName").text("CRM");
                        $("#liGroupName").attr("onclick", "LoadViews('CRMClientGroup')");
                        $("#liTabName").text("Follow-up");
                        $("#liTabName").attr("onclick", "LoadViews('CRMClientGroup')");
                        $("#liFormName").text("Sales leads follow up");
                        $("#h3Label").text("Follow-up Sales Leads");
                        $('#btnTransferToActualCustomer').removeClass('hide');
                    }
                    $.getScript(strServerURL + '/Scripts/CRM/CRMClientGroup/CRM_Clients.js?' + glbVersion, function () {
                        var pWhereClause = 'Where 1 = 1';
                        var pOrderBy = " ID DESC ";
                        var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: pWhereClause }
                        LoadWithPagingWithWhereClauseAndOrderBy("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/vwCRM_Clients/LoadWithPagingWithWhereClause", pWhereClause, 'ID DESC', 1, 10
                            , function (pData) {
                                //  console.log(pData[0]);
                                CRM_Clients_BindTableRows(JSON.parse(pData[0]));

                                //$('#btnTransferToActualCustomer').addClass('hide');
                            });


                    });
                },
                    function () { CRM_Clients_ClearAllControls(); },
                    function () { CRM_Clients_DeleteList(); });
                break;
            }
        case "CRMIndustryType": {
            debugger;
            strLoadWithPagingFunctionName = "/api/CRMIndustryType/LoadWithPaging";
            LoadView("/CRM/CRMIndustryType", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMBasicData/CRMIndustryType.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CRM_IndustryType_BindTableRows(pTabelRows); });
                });
            },
                function () { CRM_IndustryType_ClearAllControls(); },
                function () { CRM_IndustryType_DeleteList(); });
            break;
        }
        case "CRMComplaintName": {
            debugger;
            strLoadWithPagingFunctionName = "/api/CRMComplaintName/LoadWithPaging";
            LoadView("/CRM/CRMComplaintName", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMBasicData/CRMComplaintName.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { CRM_ComplaintName_BindTableRows(pTabelRows); });
                });
            },
                function () { CRM_ComplaintName_ClearAllControls(); },
                function () { CRM_ComplaintName_DeleteList(); });
            break;
        }
        case "SetubSalesLead": {
            $("#hl-menu-SetubSalesLeads").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "SetubSalesLead_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CRM_Clients/Complaint_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            debugger;
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/CRM_SetubSalesLead", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMBasicData/CRM_SetubSalesLead.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {

                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { SetubSalesLead_ClearAllControls(); },
                function () { SetubSalesLead_DeleteList(); });
            break;
        }
        case "CRMCustomersFollowUp":
            {
                debugger;
                glbCallingControl = pControlID;
                strLoadWithPagingFunctionName = "/api/CRMCustomersFollowUp/LoadWithPaging";
                strBindTableRowsFunctionName = "CRM_CustomersFollowUp_BindTableRows";
                LoadView("/CRM/CRMCustomersFollowUp", "div-content", function () {
                    $("#slClientType").html('<option value=0><--Select--></option><option value="10">Distributor</option><option value="20">Vendor</option><option value="30">Manufacturer</option><option value="40">Agent</option><option value="50">Reseller</option><option value="60">End User</option>');
                    if (pDefaults.UnEditableCompanyName == "NIL") {
                        $("#slLeadStatus").html('<option value=0><--Select--></option><option value="30">New CLient</option><option value="40">VIP CLient</option><option value="50">Normal Client</option><option value="60">Old Client</option>');
                        $(".classHideForNIL").addClass("hide");
                    }
                    else
                        $("#slLeadStatus").html('<option value=0><--Select--><option value="1">WON</option><option value="2">LOST</option>');
                    CallGETFunctionWithParameters("/api/CRMCustomersFollowUp/LoadModalData", { pLoadDataDummyParameter: "Dummy" }
                        , function (pData) {
                            debugger;
                            var pCommodity = pData[0];
                            var pContainerType = pData[1];
                            var pActivity = pData[2];
                            var pPaymentTerm = pData[3];
                            var pPipeLineStage = pData[4];
                            var pUser = pData[5];
                            var pCountries = pData[6];
                            FillListFromObject(null, 2, "<--Select-->", "slCommodity", pCommodity, null);
                            FillListFromObject(null, 1, "<--Select-->", "slContainerType", pContainerType, null);
                            FillListFromObject(null, 2, "<--Select-->", "slActivity", pActivity, null);
                            FillListFromObject(null, 19, "<--Select-->", "slPipeLineStage", pPipeLineStage, null);
                            FillListFromObject(null, 19, "<--Select-->", "slPipeLineStageProfitValue", pPipeLineStage, null);

                            FillListFromObject(null, 2, "<--Select-->", "slPaymentTerm", pPaymentTerm, null);
                            FillListFromObject(null, 2, "<--Select-->", "slPorts", pData[7], null);
                            FillListFromObject(null, 2, "<--Select-->", "slFollowUpSalesRep", pUser, function () { $("#slFollowUpSalesRep2").html($("#slFollowUpSalesRep").html()) });
                            FillListFromObject(null, 2, "<--Select-->", "slFromCountry", pCountries, function () { $("#slToCountry").html($("#slFromCountry").html()); $("#slCountryServices").html($("#slFromCountry").html()) });
                            FillListFromObject(null, 1, "<--Select-->", "slCurrencyProfitValue", pData[8], null);

                            $("#slCurrencyProfitValue").html($("#hReadySlCurrencies").html());
                            $("#slCostCurrency").html($("#hReadySlCurrencies").html());
                            $("#slRevenueCurrency").html($("#hReadySlCurrencies").html());
                            $("#slMarginAmountCurrency").html($("#hReadySlCurrencies").html());
                            $("#slGrossMarginCurrency").html($("#hReadySlCurrencies").html());

                            FillListFromObject(null, 2, "<--Select-->", "slPaymentTermProfitValue", pPaymentTerm, null);
                            $("#slCurrency").html($("#hReadySlCurrencies").html());
                            $("#slCurrency").val($("#hDefaultCurrencyID").val());
                            $("#txtStartingDate").val(getTodaysDateInddMMyyyyFormat());
                            $("#txtClosingExpectedDate").val(getTodaysDateInddMMyyyyFormat());
                        }
                        , null);
                    LoadView("/MasterData/ModalCheckboxesList", "div-content", null, null, null, true);
                    if (pControlID == "CRMSalesLeadsForm") {
                        $("#liGroupName").text("Basic Data");
                        $("#liGroupName").attr("onclick", "LoadViews('CRM')");
                        $("#liTabName").text("Sales Leads");
                        $("#liTabName").attr("onclick", "LoadViews('CRM')");
                        $("#liFormName").text("Sales Leads");
                        $("#h3Label").text("Sales Leads");
                        $("#stepsFollowups").attr("style", "display:none;");
                    }
                    else { //CRM_Clients (i.e. SalesLeadsFollowup)
                        $("#liGroupName").text("CRM");
                        $("#liGroupName").attr("onclick", "LoadViews('CRMClientGroup')");
                        $("#liTabName").text("Follow-up");
                        $("#liTabName").attr("onclick", "LoadViews('CRMClientGroup')");
                        $("#liFormName").text("Sales leads follow up");
                        $("#h3Label").text("Follow-up Sales Leads");
                    }
                    $.getScript(strServerURL + '/Scripts/CRM/CRMClientGroup/CRMCustomersFollowUp.js?' + glbVersion, function () {
                        var pWhereClause = 'Where 1 = 1';
                        var pOrderBy = " ID DESC ";
                        var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: pWhereClause }
                        LoadWithPagingWithWhereClauseAndOrderBy("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/vwCRMCustomersFollowUp/LoadWithPagingWithWhereClause", pWhereClause, 'Name', 1, 10
                            , function (pData) {
                                //  console.log(pData[0]);
                                CRM_Clients_BindTableRows(JSON.parse(pData[0]));

                            });


                    });
                },
                    function () { CRM_Clients_ClearAllControls(); },
                    function () { CRM_Clients_DeleteList(); });
                break;
            }

        case "Complaints": {
            $("#hl-menu-Complaints").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "Complaint_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CRM_Clients/Complaint_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            debugger;
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/CRM_Complaint", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMClientGroup/CRM_Complaint.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pUserList = pData[2];
                            FillListFromObject(null, 2, "<--Select-->", "slComplaintDetailsSalesRep", pUserList, function () { 
                                $("#slComplaintDetailsSalesRep2").html($("#slComplaintDetailsSalesRep").html());
                                $("#slFilterUsers").html($("#slComplaintDetailsSalesRep").html());
                            });
                            Complaint_BindTableRows(JSON.parse(pData[0]));
                            $("#slCustomer").html($("#hReadySlCustomers").html());
                            Fill_SelectInputAfterLoadData(pData[3], 'ID', 'Name', 'select status', '#slStatus', '');
                            Fill_SelectInputAfterLoadData(pData[3], 'ID', 'Name', 'select status', '#slStatusDetails', '');
                            Fill_SelectInputAfterLoadData(pData[6], 'ID', 'Name', 'select Complaint', '#slComplaint', '');

                            FillListFromObject(null, 1, TranslateString("SelectFromMenu"), "slOperationForHeader", pData[7], function () { });

                            $("#slComplaintDetailsSalesRep2").html($("#slComplaintDetailsSalesRep").html());
                            Complaint_SetPermissions();
                            //FillListFromObject(null, 1, "<--Select-->", "slCustomer", pCustomerList, null);
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { Complaint_ClearAllControls(); },
                function () { Complaint_DeleteList(); });
            break;
        }
        case "CRMprivilege": {
            $("#hl-menu-Complaints").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CRMprivilege_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CRMprivilege/IntializeData";
            debugger;
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/CRMprivilege", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMClientGroup/CRMprivilege.js?' + glbVersion, function () {
                    CallGETFunctionWithParameters("/api/CRMprivilege/LoadAll", { pWhereClause: " Where 1=1" }
                        , function (pData) { //if i need filters then Re-Enable what i need
                            CRMprivilege_BindTableRows(JSON.parse(pData[0]));
                            BindUsers();
                        }
                        , function () { FadePageCover(false); $("#hl-menu-CRM").parent().addClass("active"); });

                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { },
                function () { });
            break;
        }
        case "CRM_PipeLineStage": {
            debugger;
            $("#hl-menu-Complaints").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CRM_PipeLineStage_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CRM_PipeLineStage/IntializeData";
            debugger;
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/CRM_PipeLineStage", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMClientGroup/CRM_PipeLineStage.js?' + glbVersion, function () {

                    strLoadWithPagingFunctionName = "/api/CRM_PipeLineStage/LoadWithPaging";
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 1, 10,
                        function (pTabelRows) {
                            CRM_PipeLineStage_BindTableRows(pTabelRows);
                        });

                    CallGETFunctionWithParameters("/api/CRM_PipeLineStage/LoadAll", { pWhereClause: " Where 1=1" }
                        , function (pData) { //if i need filters then Re-Enable what i need
                            //CRM_PipeLineStage_BindTableRows(JSON.parse(pData[0]));
                            //BindUsers(); 
                            Fill_SelectInputAfterLoadData(pData[1], 'ID', 'Name', 'select User', '#slSalesMan', '');
                            Fill_SelectInputAfterLoadData(pData[2], 'ID', 'Name', 'select Client', '#slClientName', '');
                            Fill_SelectInputAfterLoadData(pData[3], 'ID', 'Name', 'select Pipe line', '#slPipeLineStageName', '');
                            if (pData[4])
                                $('#slSalesMan').prop('disabled', false);
                            else
                                $('#slSalesMan').prop('disabled', true);
                        }
                        , function () { FadePageCover(false); $("#hl-menu-CRM").parent().addClass("active"); });

                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { },
                function () { });
            break;
        }
        case "CRM_activitiesLog": {
            debugger;
            $("#hl-menu-Complaints").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CRM_activitiesLog_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CRM_activitiesLog/IntializeData";
            debugger;
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/CRM_activitiesLog", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMClientGroup/CRM_activitiesLog.js?' + glbVersion, function () {

                    strLoadWithPagingFunctionName = "/api/CRM_activitiesLog/LoadWithPaging";
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 1, 10,
                        function (pTabelRows) {
                            CRM_activitiesLog_BindTableRows(pTabelRows);
                        });

                    CallGETFunctionWithParameters("/api/CRM_activitiesLog/LoadAll", { pWhereClause: " Where 1=1" }
                        , function (pData) { //if i need filters then Re-Enable what i need
                            //CRM_activitiesLog_BindTableRows(JSON.parse(pData[0]));
                            //BindUsers();
                            Fill_SelectInputAfterLoadData(pData[1], 'ID', 'Name', 'select User', '#slSalesMan', '');
                            Fill_SelectInputAfterLoadData(pData[2], 'ID', 'Name', 'select Client', '#slClientName', '');
                            Fill_SelectInputAfterLoadData(pData[3], 'ID', 'Name', 'select Activity', '#slActivity', '');
                            if (pData[4])
                                $('#slSalesMan').prop('disabled', false);
                            else
                                $('#slSalesMan').prop('disabled', true);

                        }
                        , function () { FadePageCover(false); $("#hl-menu-CRM").parent().addClass("active"); });

                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { },
                function () { });
            break;
        }
        case "CRM_SetupInvalidSalesLeadMonths": {
            debugger;
            $("#hl-menu-Complaints").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CRM_activitiesLog_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CRM_activitiesLog/IntializeData";
            debugger;
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "ID DESC";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/CRM_SetupInvalidSalesLeadMonths", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMClientGroup/CRM_SetupInvalidSalesLeadMonths.js?' + glbVersion, function () {

                    strLoadWithPagingFunctionName = "/api/CRM_SetupInvalidSalesLeadMonths/LoadWithPaging";
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 1, 10,
                        function (pTabelRows) {
                            CRM_SetupInvalidSalesLeadMonths_BindTableRows(pTabelRows);
                        });


                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { },
                function () { });
            break;
        }

        case "CRMSalesMen": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 15 ", "CRMSalesMen", function () {
                });
            });
            break;
        }
        //  CRM / CRMSalesMen / CRM_SalesMenTarget
        case "CRM_SalesMenTarget": {
            strLoadWithPagingFunctionName = "/api/vwCRM_SalesMenTarget/LoadWithPaging";
            LoadView("/CRM/CRM_SalesMenTarget", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMSalesMen/CRM_SalesMenTarget.js?' + glbVersion, function () {
                    var pWhereClause = "Where 1=1";
                    var pOrderBy = "ID DESC";
                    var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: pWhereClause }
                    LoadWithPagingWithWhereClauseAndOrderBy("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/vwCRM_SalesMenTarget/LoadWithPagingWithWhereClause", pWhereClause, 'ID', 1, 10
                        , function (pData) {
                            //  console.log(pData[0]);
                            CRM_SalesMenTarget_BindTableRows(JSON.parse(pData[0]));
                            FillListFromObject(null, 2, "Select Action", "hidden_slActions", pData[2], null);
                        });
                });
            },
                function () { CRM_SalesMenTarget_ClearAllControls(); },
                function () { CRM_SalesMenTarget_DeleteList(); });
            break;
        }

        case "SalesmenTargets":
        case "CommissionTarget": {
            $("#hl-menu-CRM").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CommissionTarget_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CommissionTarget/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "TargetYear DESC, SalesmanName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/CommissionTarget", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMSalesMen/CommissionTarget.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var TodaysDate = new Date();
                            var CurrentYear = TodaysDate.getUTCFullYear();
                            var pSalesman = pData[2];
                            var pTargetType = pData[3];
                            FillListFromObject(null, 2, "<--Select-->", "slSalesman", pSalesman, function () { $("#slFilterSalesman").html($("#slSalesman").html()); });
                            FillListFromObject(constTargetTypeByInvoiceFixedAmount, 2, null/*first row*/, "slTargetType", pTargetType, function () { $("#slFilterTargetType").html($("#slTargetType").html()); $("#slFilterTargetType").prepend("<option value=''><--Select--></option>"); $("#slFilterTargetType").val(""); });
                            GetListYears(CurrentYear, null, "slTargetYear", null
                                , function () { $("#slFilterTargetYear").html($("#slTargetYear").html()); $("#slFilterTargetYear").prepend("<option value=''><--Select--></option>"); $("#slFilterTargetYear").val(""); }
                                , parseInt(CurrentYear + 1));
                            //$("#slTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            $("#slFilterFromTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            $("#slFilterToTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            CommissionTarget_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { CommissionTarget_ClearAllControls(); },
                function () { CommissionTarget_DeleteList(); });
            break;
        }

        case "SalesmenCommissions": {
            $("#hl-menu-CRM").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "CommissionTarget_BindTableRows";
            strLoadWithPagingFunctionName = "/api/CommissionTarget/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";

            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "TargetYear DESC, SalesmanName";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/CRM/SalesmenCommissions", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/CRM/CRMSalesMen/CommissionTarget.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var TodaysDate = new Date();
                            var CurrentYear = TodaysDate.getUTCFullYear();
                            var pSalesman = pData[2];
                            var pTargetType = pData[3];
                            FillListFromObject(null, 2, "<--Select-->", "slFilterSalesman", pSalesman, null);
                            FillListFromObject(constTargetTypeByInvoiceFixedAmount, 2, null/*first row*/, "slFilterTargetType", pTargetType, null);
                            GetListYears(CurrentYear, null, "slFilterTargetYear", null
                                , null
                                , parseInt(CurrentYear + 1));
                            //$("#slTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            $("#slFilterFromTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            $("#slFilterToTargetMonth").html("<option value=''><--Select--></option> <option value=1>January</option> <option value=2>February</option> <option value=3>March</option> <option value=4>April</option> <option value=5>Mai</option> <option value=6>June</option> <option value=7>July</option> <option value=8>August</option> <option value=9>September</option> <option value=10>October</option> <option value=11>November</option> <option value=12>December</option>");
                            //CommissionTarget_BindTableRows(JSON.parse(pData[0]));
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            }
                , null //function () { CommissionTarget_ClearAllControls(); }
                , null //function () { CommissionTarget_DeleteList(); }
            );
            break;
        }
        case "CRMReports": {
            debugger;

            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 15 ", "CRMReports", function () {

                });

            });
            break;
        }
        case "ClientFollowUpReport": {
            debugger;
            FadePageCover(true);
            LoadView("/CRM/vwCRM_ClientsFollowReport", "div-content", function () {
                CallGETFunctionWithParameters("/api/vwCRM_ClientsFollowReport/FillFilter", null
                    , function (d) { //if i need filters then Re-Enable what i need
                        Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- All -->', '#slActionType_Search', '');
                        Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- All -->', '#slSource_search', '');
                        Fill_SelectInputAfterLoadData(d[1], 'ID', 'Username', '<-- All -->', '#slSalesRep_search', '');
                        Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', '<-- All -->', '#slCOEnName_search', '');
                    }
                    , function () { FadePageCover(false); $("#hl-menu-CRM").parent().addClass("active"); });
                $.getScript(strServerURL + '/Scripts/CRM/CRMReports/vwCRM_ClientsFollowReport.js');
            });
            break;
        }
        case "CRMSalesReport": {
            debugger;
            FadePageCover(true);
            LoadView("/CRM/CRMSalesReport", "div-content", function () {
                CallGETFunctionWithParameters("/api/CRMSalesReport/FillFilter", null
                    , function (d) { //if i need filters then Re-Enable what i need
                        Fill_SelectInputAfterLoadData(d[1], 'ID', 'Username', '<-- All -->', '#slSalesRep_search', '');
                    }
                    , function () { FadePageCover(false); $("#hl-menu-CRM").parent().addClass("active"); });
                $.getScript(strServerURL + '/Scripts/CRM/CRMReports/CRMSalesReport.js');
            });
            break;
        }
        case "ClientFollowUpDashboard": {
            debugger;
            FadePageCover(true);
            LoadView("/CRM/ClientFollowUpDashboard", "div-content", function () {
                CallGETFunctionWithParameters("/api/vwCRM_ClientsFollowUpDashboard/FillFilter", null
                    , function (d) { //if i need filters then Re-Enable what i need
                        GetListYears($("#slYearsCRMdashboard").val(), null, "slYearsCRMdashboard", null, null);
                        //Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- All -->', '#slActionType_Search', '');
                        //Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- All -->', '#slSource_search', '');
                        Fill_SelectInputAfterLoadData(d[1], 'ID', 'Username', '<-- All -->', '#slSalesRep_search', '');
                        //Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', '<-- All -->', '#slCOEnName_search', '');
                        //ShowDashboard();

                        if (d[4] == 0) {
                            $('#btn-ShowDashboard').prop('disabled', true);
                            $('#slSalesRep_search').prop('disabled', true);
                        }

                        else {
                            $('#slSalesRep_search').prop('disabled', false);
                            $('#btn-ShowDashboard').prop('disabled', false);
                        }

                    }
                    , function () { FadePageCover(false); $("#hl-menu-CRM").parent().addClass("active"); });
                $.getScript(strServerURL + '/Scripts/CRM/CRMReports/vwCRM_ClientsFollowUpDashboard.js');
            });
            break;
        }
        case "SC": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 16 ", "SC_MasterData", function () {

                });

            });
            break;
        }
        case "LoadingandDischarging": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 57 ", "LoadingandDischargingOperations", function () {

                });

            });
            break;
        }
        case "SC_MasterData": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 16 ", "SC_MasterData", function () {

                });

            });
            break;
        }
        case "I_ItemsGroups": {
            strBindTableRowsFunctionName = "PurchaseItem_BindTableRows";
            strLoadWithPagingFunctionName = "/api/I_ItemsGroups/LoadWithPaging";
            //the first parameter in the LoadView() fn. is the route in the RouteConfig
            LoadView("/SC/I_ItemsGroups", "div-content", function () {

                if (pControlID == "PurchaseItem") {
                    $("#liGroupName").text("Master Data");
                    $("#liGroupName").attr("onclick", "LoadViews('Invoicing')");
                    $("#liTabName").text("Invoicing");
                    $("#liTabName").attr("onclick", "LoadViews('Invoicing')");
                }
                else { //Warehousing
                    $("#liGroupName").text("Warehousing");
                    $("#liGroupName").attr("onclick", "LoadViews('Warehousing')");
                    $("#liTabName").text("Master Data");
                    $("#liTabName").attr("onclick", "LoadViews('Warehousing')");
                }

                $.getScript(strServerURL + '/Scripts/SC/SC_MasterData/I_ItemsGroups.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    $("#slCurrency").html($("#hReadySlCurrencies").html());
                    LoadWithPagingWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 1, 2000
                        , function (pData) {
                            var pLengthUnit = pData[2];
                            var pWeightUnit = pData[3];
                            var pVolumeUnit = pData[4];
                            var pCommodity = pData[5];
                            var pPackageType = pData[6];
                            var pIMOClass = pData[7];
                            var pWH_Area = pData[8];
                            var ItemsType = pData[9];
                            var ItemsGroup = pData[10];
                            var ReturnedItem = pData[11];
                            Fill_SelectInputAfterLoadData(ItemsType, "ID", "Name", "Select Item Type", "#slItemType", '');
                            Fill_SelectInputAfterLoadData(ItemsGroup, "ID", "Name", "Select Item Group", "#slItemGroup", '');

                            FillListFromObject(pDefaults.LengthUnitID, 1, null/*pStrFirstRow*/, "slLengthUnit", pLengthUnit, null);
                            FillListFromObject(pDefaults.WeightUnitID, 1, null/*pStrFirstRow*/, "slWeightUnit", pWeightUnit, null);
                            FillListFromObject(pDefaults.VolumeUnitID, 1, null/*pStrFirstRow*/, "slVolumeUnit", pVolumeUnit, null);
                            FillListFromObject(null, 2, "<--Select-->", "slCommodity", pCommodity, null);
                            FillListFromObject(null, 2, "<--Select-->", "slPackageType", pPackageType
                                , function () { $("#slPackageTypeBarCode").html($("#slPackageType").html()); $("#slToPackageType").html($("#slPackageType").html()); $("#slFromPackageType").html($("#slPackageType").html()); });
                            FillListFromObject(null, 9, "<--Select-->", "slIMOClass", pIMOClass, null);
                            FillListFromObject(null, 2, "<--Select-->", "slPreferredArea", pWH_Area, null);
                            FillListFromObject(null, 2, "<--Select-->", "slReturnedItem", ReturnedItem, null);

                            console.log(JSON.parse(pData[0]))
                            console.log(ConvertDataToTree(JSON.parse(pData[0])))
                            DrawTree(JSON.parse(pData[0]))

                            //************************* Tree ****************************
                            //var FT = $.ui.fancytree;

                            //// attach to instance 1 and 3
                            //$("#tree1, #tree3").fancytree({
                            //    checkbox: true,
                            //    selectMode: 1,
                            //    activate: function (event, data) {
                            //        var node = data.node;
                            //        FT.debug("activate: event=", event, ", data=", data);
                            //        if (!$.isEmptyObject(node.data)) {
                            //            alert("custom node data: " + JSON.stringify(node.data));
                            //        }
                            //    },
                            //    lazyLoad: function (event, data) {
                            //        // we can't `return` values from an event handler, so we
                            //        // pass the result as `data.result` attribute:
                            //        data.result = { url: "ajax-sub2.json" };
                            //    }
                            //    // }).on("fancytreeactivate", function(event, data){
                            //    //   $.ui.fancytree.debug("fancytreeactivate: event=", event, ", data=", data);
                            //    //   return false;
                            //});

                            //**********************************************************************

                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { PurchaseItem_ClearAllControls(); },
                function () { PurchaseItem_DeleteList(); });
            break;
        }
        case "StoresAccounts":
            {
                strLoadWithPagingFunctionName = "/api/SC_Stores/LoadWithPaging";
                LoadView("/SC/StoresAccounts", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_MasterData/StoresAccounts.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SC_Stores/IntializeData",
                            data: { pStoresNamesOnly: "false" },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#slStoreAccountID', '');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Sales Account -->', '#slSalesAccountID', '');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select operation Account -->', '#slOperationAccountID', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'CostCenterName', '<-- select cost center -->', '#slCostCenterID', '');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'StoreName', '<-- select store name -->', '#hidden_slstoresnames', '');

                                //hidden_slstoresnames

                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Stores_ClearAllControls(); },
                    function () { SC_Stores_DeleteList(); });
                break;

            }
        case "ItemsInquiry":
            {
                strLoadWithPagingFunctionName = "/api/SC_MasterData/ItemsInquiry";
                LoadView("/SC/ItemsInquiry", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_MasterData/ItemsInquiry.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        IntializePage();
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { },
                    function () { });
                break;

            }
        case "SC_Transactions": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 16 ", "SC_Transactions", function () {

                });

            });
            break;
        }

        case "SC_DepartmentReturnsVoucher":
            {

                LoadView("/SC/SC_DepartmentReturnsVoucher", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_DepartmentReturnsVoucher.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript

                        IntializePage();

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }


        case "SC_Maintenance": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 16 ", "SC_Maintenance", function () {

                });

            });
            break;
        }

        case "GoodReceiptNotes":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/GoodReceiptNotes", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/GoodReceiptNotes.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 10 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SC_Transactions/FillInvoicesAndRelatedData",
                            data: { pTransactionTypeID: "10", pID: null, IsForwarding_Invoice: false },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                //IntializeData()
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '');
                                Fill_SelectInputAfterLoadData_DynamicTypesCustomizedForPS_Invoice(d[1], 'ID', 'InvoiceNo', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- SELECT UNIT -->', '#hidden_slUnits', '');
                                //Fill_SelectInputAfterLoadData(d[2], 'ID', 'StoreName', '<-- select store name -->', '#hidden_slstoresnames', '');
                                // $('#txtFromDate_Filter').val(getTodaysDateInddMMyyyyFormat());
                                // $('#txtToDate_Filter').val(getTodaysDateInddMMyyyyFormat());

                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "MaterialIssueVouchers":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/MaterialIssueVouchers", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/MaterialIssueVouchers.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 20 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });
                        IntializePage()

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "SC_ItemCard": {
            debugger;

            LoadView("/SC/SC_ItemCard", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SC/SC_Reports/SC_ItemCard.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SC_Reports/FillFilter"
                            , {}
                            , function (pData) {
                                $("#hl-menu-SC").parent().addClass("active");
                                // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pStores = pData[0];
                                var pItems = pData[1];
                                // var pCostCenter = pData[2];
                                FillDivWithCheckboxes_DynamicFiled("divCbStores", pStores, "nameCbStores", "StoreName", null);
                                //  FillDivWithCheckboxes_DynamicFiled("divCbItems", pItems, "nameCbItems", "Name", null);

                                FillDivWithCheckboxes_DynamicWithMultiFields("divCbItems", pItems, "nameCbItems", "Code,Name", null);


                                //   FillDivWithCheckboxes("divCbJournalType", pJournalType, "nameCbJournalType", 5, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                //if ($("#hDefaultUnEditableCompanyName").val() == "ONE")
                                //    $("#secJournalType").removeClass("hide");
                                //else {
                                //    $("#cbCheckAllJournalTypes").prop("checked", true);
                                //    $("#secJournalType").addClass("hide");
                                //}
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }

        case "MaterialIssueVouchersFollowUp": {
            debugger;

            LoadView("/SC/MaterialIssueVouchersFollowUp", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SC/SC_Reports/MaterialIssueVouchersFollowUp.js'
                    , function () {
                        FadePageCover(true);

                        IntializeData();

                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null,
                null);
            break;
        }

        case "SC_ItemsCardQty": {
            debugger;

            LoadView("/SC/SC_ItemsCardQty", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SC/SC_Reports/SC_ItemCardQty.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SC_Reports/FillFilter"
                            , {}
                            , function (pData) {
                                $("#hl-menu-SC").parent().addClass("active");
                                // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pStores = pData[0];
                                var pItems = pData[1];
                                // var pCostCenter = pData[2];
                                FillDivWithCheckboxes_DynamicFiled("divCbStores", pStores, "nameCbStores", "StoreName", null);
                                // FillDivWithCheckboxes_DynamicFiled("divCbItems", pItems, "nameCbItems", "Name", null);
                                FillDivWithCheckboxes_DynamicWithMultiFields("divCbItems", pItems, "nameCbItems", "Code,Name", null);
                                //   FillDivWithCheckboxes("divCbJournalType", pJournalType, "nameCbJournalType", 5, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                //if ($("#hDefaultUnEditableCompanyName").val() == "ONE")
                                //    $("#secJournalType").removeClass("hide");
                                //else {
                                //    $("#cbCheckAllJournalTypes").prop("checked", true);
                                //    $("#secJournalType").addClass("hide");
                                //}
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }

        case "SC_GoodsReceiptNotesFollowUp": {
            debugger;

            LoadView("/SC/SC_GoodsReceiptNotesFollowUp", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SC/SC_Reports/SC_GoodsReceiptNotesFollowUp.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SC_Reports/FillFilter"
                            , {}
                            , function (pData) {
                                $("#hl-menu-SC").parent().addClass("active");
                                // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pStores = pData[0];
                                var pItems = pData[1];
                                //  var pCostCenters = pData[2]; // CostCenterName
                                //  var pCustomers = pData[3];
                                var pSuppliers = pData[4];
                                // var pCostCenter = pData[2];
                                FillDivWithCheckboxes_DynamicFiled("divCbStores", pStores, "nameCbStores", "StoreName", null);
                                FillDivWithCheckboxes_DynamicFiled("divCbItems", pItems, "nameCbItems", "Name", null);
                                FillDivWithCheckboxes_DynamicFiled("divCbSuppliers", pSuppliers, "nameCbSuppliers", "Name", null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //}
                                FadePageCover(false);
                            }
                            , null);
                    });
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }


        case "SC_StockBalance": {
            debugger;

            LoadView("/SC/SC_StockBalance", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SC/SC_Reports/SC_StockBalance.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SC_Reports/FillFilter"
                            , {}
                            , function (pData) {
                                $("#hl-menu-SC").parent().addClass("active");
                                // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var pStores = pData[0];
                                var pItems = pData[1];
                                // var pCostCenter = pData[2];
                                FillDivWithCheckboxes_DynamicFiled("divCbStores", pStores, "nameCbStores", "StoreName", null);
                                //  FillDivWithCheckboxes_DynamicFiled("divCbItems", pItems, "nameCbItems", "Name", null);
                                FillDivWithCheckboxes_DynamicWithMultiFields("divCbItems", pItems, "nameCbItems", "Code,Name", null);
                                //   FillDivWithCheckboxes("divCbJournalType", pJournalType, "nameCbJournalType", 5, null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                //FillListFromObject(null, 2/*pCodeOrName*/, "Select Vessel", "slVessel", pData[0], null);
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                //if ($("#hDefaultUnEditableCompanyName").val() == "ONE")
                                //    $("#secJournalType").removeClass("hide");
                                //else {
                                //    $("#cbCheckAllJournalTypes").prop("checked", true);
                                //    $("#secJournalType").addClass("hide");
                                //}
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SC_Approving": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 16 ", "SC_Approving", function () {

                });

            });
            break;
        }

        case "SC_OutgoingItemsReport":
            {
                debugger;

                LoadView("/SC/SC_OutgoingItemsReport", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/SC/SC_Reports/SC_OutgoingItemsReport.js'
                        , function () {
                            FadePageCover(true);
                            //CallGETFunctionWithParameters("/api/SC_OutgoingItemsReport/FillFilter"
                            //    , {}
                            //    , function (pData) {
                            //        $("#hl-menu-SC").parent().addClass("active");
                            //        var Requests = pData[0];
                            //        FillDivWithCheckboxes_DynamicFiled("divCbRequests", Requests, "nameCbRequests", "Code", null);
                            //        var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            //        $("#txtFromDate").val(pFormattedTodaysDate);
                            //        $("#txtToDate").val(pFormattedTodaysDate);

                            //        FadePageCover(false);
                            //    }
                            //    , null);
                            var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                            $("#txtFromDate").val(pFormattedTodaysDate);
                            $("#txtToDate").val(pFormattedTodaysDate);
                            FadePageCover(false);

                        });
                },
                    null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                    null/*function () { PrintArrivalNotification_DeleteList(); }*/);
                break;
            }
        case "SC_ApproveTransaction":
            {
                strLoadWithPagingFunctionName = "/api/SC_Approving/LoadWithWhereClause";
                LoadView("/SC/SC_ApproveTransaction", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Approving/SC_ApproveTransaction.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where isnull(JV_ID,0) <> 1   AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_ApproveTransaction_BindTableRows(pTabelRows); });
                        IntializePage();

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () {/* SC_Transactions_DeleteList();*/ });
                break;

            }
        case "SC_UnApproveTransaction":
            {
                strLoadWithPagingFunctionName = "/api/SC_Approving/LoadWithWhereClause";
                LoadView("/SC/SC_UnApproveTransaction", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Approving/SC_UnApproveTransaction.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where isnull(JV_ID,0) <> 1   AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_ApproveTransaction_BindTableRows(pTabelRows); });

                        IntializePage();
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () {/* SC_Transactions_DeleteList();*/ });
                break;
            }
        case "SC_ApproveTransactionTax":
            {
                strLoadWithPagingFunctionName = "/api/SC_Approving/LoadWithWhereClause";
                LoadView("/Administration/SC_ApproveTransactionTax", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/Administration/admapp/SC_ApproveTransactionTax.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where isnull(JV_ID,0) <> 1   AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_ApproveTransaction_BindTableRows(pTabelRows); });
                        IntializePageATax();

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () {/* SC_Transactions_DeleteList();*/ });
                break;

            }
        case "SC_UnApproveTransactionTax":
            {
                strLoadWithPagingFunctionName = "/api/SC_Approving/LoadWithWhereClause";
                LoadView("/Administration/SC_UnApproveTransactionTax", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/Administration/admapp/SC_UnApproveTransactionTax.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where isnull(JV_ID,0) <> 1   AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_ApproveTransaction_BindTableRows(pTabelRows); });

                        IntializePageUATax();
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () {/* SC_Transactions_DeleteList();*/ });
                break;
            }

        case "SC_Inventory":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_Inventory", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_Inventory.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        IntializePage();
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }

        case "SC_Settlement":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_Settlement", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_Settlement.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 110 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "110", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                               // $('#hidden_slItems').html($('#hReadySlItems').html());
                               // Fill_SelectInputAfterLoadData_WithMultiAttr(d[3], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                Fill_SelectInputAfterLoadData_WithAttr(d[3], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');

                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'CostCenterName', '<-- SELECT Cost Center -->', '#slCostCenter', '');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- SELECT UNIT -->', '#hidden_slUnits', '');

                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, press Ctrl+Shft+R, and if the problem persists contact your technical support! This is print region !", "");
                                FadePageCover(false);
                            }
                        });


                        $("#txtDate").datepicker().on('changeDate'
                            , function () {
                                $(this).datepicker('hide');
                                CalcQtyAndAveragePrice(false);

                            });
                        $("#txtDate").datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });


                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }

        case "PS_Reports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 30 ", "PS_Reports", function () {
                });
            });
            break;
        }
        case "PS_SupplierAccountStatementReport": {
            debugger;
            strBindTableRowsFunctionName = "TrialBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/PS_SupplierAccountStatementReport/LoadRows";
            LoadView("/Purchasing/PS_SupplierAccountStatementReport", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/PS/PS_Reports/PS_SupplierAccountStatementReport.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/PS_SupplierAccountStatementReport/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-Accounting").parent().addClass("active");
                                var pAccount = pData[0];
                                var pMainAccount = pData[1];
                                var pCurrency = pData[2];

                                FillDivWithCheckboxes("divCbAccount", pAccount, "nameCbAccount", 5/*NameAndCode*/, null);
                                //FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                //  FillDivWithCheckboxesJob("divCbJob", pJob, "nameCbJob", 6, null);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccountsGroup", pMainAccount, null);
                                Fill_SelectInputAfterLoadData(pCurrency, 'ID', 'Code', TranslateString("SelectFromMenu"), '#slCurrency', '');
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SC_Reports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 16 ", "SC_Reports", function () {
                });
            });
            break;
        }

        case "SC_TransactionsGroup":
            {
                debugger;
                LoadView("/Home/Groups", "div-content", function () {
                    FillGroups(" where ParentGroupID = 16 ", "SC_TransactionsGroup", function () {
                    });
                });
                break;
            }
        case "SL_Reports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 25 ", "SL_Reports", function () {
                });
            });
            break;
        }
        case "PS_Approving": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 30 ", "PS_Approving", function () {
                });
            });
            break;
        }
        case "SL_Approving": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 25 ", "SL_Approving", function () {
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            });
            break;
        }

        case "SC_OpeningBalance":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_OpeningBalance", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_OpeningBalance.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 30 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "30", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');
                                Fill_SelectInputAfterLoadData(d[5], 'ID', 'PurchaseInvoice_OpeningBalanceInfo', '<-- select Opening Balance Flexi -->', '#slOpeningBalanceFlexi', '');
                                //hidden_slUnits
                                // Fill_SelectInputAfterLoadData(d[4], 'ID', 'InvoiceNo', '<-- select Sales Invoice -->', '#slInvoices', '');
                                //Fill_SelectInputAfterLoadData(d[2], 'ID', 'StoreName', '<-- select store name -->', '#hidden_slstoresnames', '');
                                // $('#txtFromDate_Filter').val(getTodaysDateInddMMyyyyFormat());
                                // $('#txtToDate_Filter').val(getTodaysDateInddMMyyyyFormat());

                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "SC_Scrapping":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_Scrapping", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_Scrapping.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript


                        IntializePage();
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "SC_ExminationOrders":
            {

                LoadView("/SC/SC_ExminationOrders", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_ExminationOrders.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript

                        IntializePage();

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "SC_ClientReturnsVoucher":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_ClientReturnsVoucher", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_ClientReturnsVoucher.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 40 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "40", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', '<-- select Customer -->', '#slCustomers', '');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');

                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "SC_SupplierReturnsVoucher":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_SupplierReturnsVoucher", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_SupplierReturnsVoucher.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 50 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "50", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', '<-- select Supplier -->', '#slSuppliers', '');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');

                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;
            }
        case "SC_StoresTransferVoucher":
            {

                //  CHECK EGL COMPANY  
               if (pDefaults.UnEditableCompanyName == "EGL") 
                {
                    
                    strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClauseEGL";
                }
                else {
                  
                    strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                }
              
                LoadView("/SC/SC_StoresTransferVoucher", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_StoresTransferVoucher.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 80 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "80", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'StoreName', '<-- select Store -->', '#slFromStore', '', 'IsBrokenStore,CostCenterID');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'StoreName', '<-- select Store -->', '#slToStore', '', 'IsBrokenStore,CostCenterID');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "SC_MaterialIssueRequest":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_MaterialIssueRequest", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_MaterialIssueRequest.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 70 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "70", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                // Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(d[0], 'ID', 'Code,Name', " - ", '<-- select Items -->', '#hidden_slItems', '', 'Price,ItemUnits');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slFromStore', '');
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slToStore', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');
                                //hidden_slUnits
                                // Fill_SelectInputAfterLoadData(d[4], 'ID', 'InvoiceNo', '<-- select Sales Invoice -->', '#slInvoices', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', '<-- select Customer -->', '#slCustomers', '');
                                // $('#txtFromDate_Filter').val(getTodaysDateInddMMyyyyFormat());
                                // $('#txtToDate_Filter').val(getTodaysDateInddMMyyyyFormat());

                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }


        case "PR": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 35 ", "PR_MasterData", function () {

                });

            });
            break;
        }
        case "PR_MasterData": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 35 ", "PR_MasterData", function () {

                });

            });
            break;
        }
        case "PR_Stages":
            {
                strLoadWithPagingFunctionName = "/api/PR_Stages/LoadWithPaging";
                LoadView("/PR/PR_Stages", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PR/PR_MasterData/PR_Stages.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { PR_Stages_BindTableRows(pTabelRows); });

                        //$.ajax({
                        //    type: "GET",
                        //    url: strServerURL + "api/SC_Stores/IntializeData",
                        //    data: { pStoresNamesOnly: "false" },
                        //    contentType: "application/json; charset=utf-8",
                        //    dataType: "json",
                        //    success: function (d) {
                        //        Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#slStoreAccountID', '');
                        //        Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Sales Account -->', '#slSalesAccountID', '');
                        //        Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select operation Account -->', '#slOperationAccountID', '');
                        //        Fill_SelectInputAfterLoadData(d[1], 'ID', 'CostCenterName', '<-- select cost center -->', '#slCostCenterID', '');
                        //        Fill_SelectInputAfterLoadData(d[2], 'ID', 'StoreName', '<-- select store name -->', '#hidden_slstoresnames', '');

                        //        //hidden_slstoresnames

                        //        FadePageCover(false);
                        //    },
                        //    error: function (jqXHR, exception) {
                        //        debugger;
                        //        swal("Sorry", "Please, try again. This is print region !", "error");
                        //        FadePageCover(false);
                        //    }
                        //});
                    });
                },
                    function () { PR_Stages_ClearAllControls(); },
                    function () { PR_Stages_DeleteList(); });
                break;

            }
        case "PR_ProductStages":
            {
                strLoadWithPagingFunctionName = "/api/PR_ProductStages/LoadWithPaging";
                LoadView("/PR/PR_ProductStages", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PR/PR_MasterData/PR_ProductStages.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { PR_ProductStages_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/PR_ProductStages/IntializeData",
                            data: { pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(d[0], 'ID', 'Code,Name', " - ", '<-- select Items -->', '#hidden_slItems', '', 'Price,ItemUnits,Volume');

                                //  Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'Price,ItemUnits,Volume');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'StoreName', '<-- select Store -->', '#hidden_slStores', '');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', '<-- select Stages -->', '#hidden_slStages', '');
                                FadePageCover(false);

                                $('#slProductID').css({ 'width': '100%' }).select2();
                                $('#slProductID').trigger("change");
                                $("div[tabindex='-1']").removeAttr('tabindex');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { PR_ProductStages_ClearAllControls(); },
                    function () { PR_ProductStages_DeleteList(); });
                break;

            }
        case "Batches":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/PR/Batches", "div-content", function () {
                    FadePageCover(true);
                    $.getScript(strServerURL + '/Scripts/PR/PR_Transactions/Batches.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        FadePageCover(true);
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 90 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });
                        FadePageCover(true);
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "90", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(d[0], 'ID', 'Code,Name', " - ", '<-- select Items -->', '#hidden_slItems', '', 'Price,ItemUnits,Volume');
                                // Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'StoreName', '<-- select Store -->', '#slFromStore', '', 'IsBrokenStore,IsRawStore,IsUnderOperationStore,IsFinalProductStore');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'StoreName', '<-- select Store -->', '#slToStore', '', 'IsBrokenStore,IsRawStore,IsUnderOperationStore,IsFinalProductStore');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', '<-- select Line -->', '#slLines', '');
                                //  Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#slFinalProduct', '', 'ItemUnits');
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(d[0], 'ID', 'Code,Name', " - ", '<-- select Items -->', '#slFinalProduct', '', 'ItemUnits');

                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- select Stage -->', '#hidden_slStages', '');

                                FadePageCover(false);



                                $('#slFinalProduct').css({ 'width': '100%' }).select2();
                                $('#slFinalProduct').trigger("change");
                                $('#slFinalProduct').addClass('IsAutoSelect');
                                $("div[tabindex='-1']").removeAttr('tabindex');

                                // 
                                // });


                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { SC_Transactions_ClearAllControls(); },
                    function () { SC_Transactions_DeleteList(); });
                break;

            }
        case "PR_Approving": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 35 ", "PR_Approving", function () {

                });

            });
            break;
        }

        //case "SL_MasterData": {
        //    debugger;
        //    LoadView("/Home/Groups", "div-content", function () {
        //        FillGroups(" where ParentGroupID = 25 ", "SL_MasterData", function () {

        //        });

        //    });
        //    break;
        //}
        case "PR_ApproveTransaction":
            {
                strLoadWithPagingFunctionName = "/api/PR_Approving/LoadWithWhereClause";
                LoadView("/PR/PR_ApproveTransaction", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PR/PR_Approving/PR_ApproveTransaction.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where isnull(JV_ID,0) <> 1   AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_ApproveTransaction_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SC_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                // Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- select Items -->', '#slItems', '');
                                Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'Name', '<-- select Trans. Types -->', '#slTransactionsTypes', '90', false);
                                Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                //  Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');

                                $('#slPSInvoices').addClass("hide");
                                $('#slTransactionsTypes').prop("disabled", true)
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () {/* SC_Transactions_DeleteList();*/ });
                break;

            }
        case "PR_UnApproveTransaction":
            {
                strLoadWithPagingFunctionName = "/api/PR_Approving/LoadWithWhereClause";
                LoadView("/PR/PR_UnApproveTransaction", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PR/PR_Approving/PR_UnApproveTransaction.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where isnull(JV_ID,0) <> 1   AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_ApproveTransaction_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SC_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                //  Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- select Items -->', '#slItems', '');
                                Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'Name', '<-- select Trans. Types -->', '#slTransactionsTypes', '90', false);
                                Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                // Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                $('#slPSInvoices').addClass("hide");
                                $('#slTransactionsTypes').prop("disabled", true)
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () {/* SC_Transactions_DeleteList();*/ });
                break;
            }
        case "I_PriceList":
            {
                strLoadWithPagingFunctionName = "/api/I_PriceList/LoadWithPaging";
                LoadView("/SL_MasterData/I_PriceList", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SL/SL_MasterData/I_PriceList.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { I_PriceList_BindTableRows(pTabelRows); });

                        //$.ajax({
                        //    type: "GET",
                        //    url: strServerURL + "api/I_PriceList/IntializeData",
                        //    data: { pID: null },
                        //    contentType: "application/json; charset=utf-8",
                        //    dataType: "json",
                        //    success: function (d) {
                        //        Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '' , 'Name');
                        //        Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', '<-- select SubAccount -->', '#hidden_slPriceList', '' , 'Name');
                        //        Fill_SelectInputAfterLoadData_WithMultiAttr(d[2], 'ID', 'Name', '<-- select Store Account -->', '#hidden_slPriceListItems', '', 'PriceListID,ItemID');
                        //        // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#hidden_slSubAccountID', '');

                        //        //hidden_slItems
                        //        //hidden_slPriceList
                        //        //hidden_slPriceListItems

                        //        FadePageCover(false);
                        //    },
                        //    error: function (jqXHR, exception) {
                        //        debugger;
                        //        swal("Sorry", "Please, try again. This is print region !", "error");
                        //        FadePageCover(false);
                        //    }
                        //});
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { I_PriceList_ClearAllControls(); },
                    function () { I_PriceList_DeleteList(); });
                break;

            }
        case "SL_SalesMan": {
            debugger;
            strBindTableRowsFunctionName = "SL_SalesMan_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SL_SalesMan/LoadWithPaging";
            LoadView("/SL_MasterData/SL_SalesMan", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SL/SL_MasterData/SL_SalesMan.js?' + glbVersion, function () {
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { SL_SalesMan_BindTableRows(pTabelRows); });
                });
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "Name,Code" }
                    , function (pData) {
                        var pClientGroup = pData[3];
                        var pSupplierGroup = pData[4];
                        var pClientAndSupplierGroup = pData[5];
                        var pEmployeeGroup = pData[6];
                        var pUser = pData[9];

                        FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pClientGroup, null);
                        FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slUser", pUser, null);

                        $("#slSubAccount").html('<option value=0>' + TranslateString("AUTOGENERATED") + '</option>');
                    }
                    , null);
                if (IsAccountingActive)
                    $(".classAccountingOption").removeClass("hide");
                else
                    $(".classAccountingOption").addClass("hide");
            },
                function () { SL_SalesMan_ClearAllControls(); },
                function () { SL_SalesMan_DeleteList(); });
            break;
        }
        case "SL_CustomerCategories": {
            debugger;
            strBindTableRowsFunctionName = "SL_CustomerCategories_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SL_CustomerCategories/LoadWithPaging";
            LoadView("/SL_MasterData/SL_CustomerCategories", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SL/SL_MasterData/SL_CustomerCategories.js?' + glbVersion, function () {
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { SL_CustomerCategories_BindTableRows(pTabelRows); });
                });
                CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned"
                    , { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: 1, pPageSize: 99999, pWhereClause: "WHERE 1=0", pOrderBy: "ID,Code" }
                    , function (pData) {
                        //var pClientGroup = pData[3];
                        //var pSupplierGroup = pData[4];
                        //var pClientAndSupplierGroup = pData[5];
                        //var pEmployeeGroup = pData[6];
                        //var pUser = pData[9];

                        //FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccount", pData[0], null);
                        //FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slCostCenter", pData[2], null);
                        //FillListFromObject_ERP(null, 4/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pClientGroup, null);
                        //FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slUser", pUser, null);

                        //$("#slSubAccount").html('<option value=0>' + TranslateString("AUTOGENERATED") + '</option>');
                    }
                    , null);
                //if (IsAccountingActive)
                //    $(".classAccountingOption").removeClass("hide");
                //else
                //    $(".classAccountingOption").addClass("hide");
            },
                function () { SL_CustomerCategories_ClearAllControls(); },
                function () { SL_CustomerCategories_DeleteList(); });
            break;
        }
        case "SL_LinkPriceListWithPaymentMethod": {
            debugger;
            strBindTableRowsFunctionName = "SL_LinkPriceListWithPaymentMethod_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SL_LinkPriceListWithPaymentMethod/LoadWithPaging";
            LoadView("/SL_MasterData/SL_LinkPriceListWithPaymentMethod", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SL/SL_MasterData/SL_LinkPriceListWithPaymentMethod.js?' + glbVersion, function () {
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { SL_LinkPriceListWithPaymentMethod_BindTableRows(pTabelRows); });
                });
                $.ajax({
                    type: "GET",
                    url: strServerURL + "/api/SL_LinkPriceListWithPaymentMethod/LoadAll",
                    data: { pWhereClause: null },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (d) {

                        Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentTermsID', '', 'Name');
                        FillListFromObject(null, 2, TranslateString("SelectFromMenu"), "slPriceListID", d[1], null);

                    },
                    error: function (jqXHR, exception) {
                        debugger;
                        swal("Sorry", "Please, try again. This is print region !", "");
                        FadePageCover(false);


                    }
                });
            },
                function () { SL_LinkPriceListWithPaymentMethod_ClearAllControls(); },
                function () { SL_LinkPriceListWithPaymentMethod_DeleteList(); });
            break;
        }
        case "SL_Regions": {
            debugger;
            strBindTableRowsFunctionName = "SL_Regions_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SL_Regions/LoadWithPaging";
            LoadView("/SL_MasterData/SL_Regions", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SL/SL_MasterData/SL_Regions.js?' + glbVersion, function () {
                    LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { SL_Regions_BindTableRows(pTabelRows); });
                });


            },
                function () { SL_Regions_ClearAllControls(); },
                function () { SL_Regions_DeleteList(); });
            break;
        }
        case "SC_OpenCloseMaterialIssueRequest":
            {
                strLoadWithPagingFunctionName = "/api/SC_Transactions/LoadWithWhereClause";
                LoadView("/SC/SC_OpenCloseMaterialIssueRequest", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SC/SC_Transactions/SC_OpenCloseMaterialIssueRequest.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 70 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SC_Transactions/IntializeData",
                            data: { pTransactionTypeID: "70", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithAttr(d[0], 'ID', 'Name', '<-- select Items -->', '#hidden_slItems', '', 'ItemUnits');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slFromStore', '');
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slToStore', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- select Unit -->', '#hidden_slUnits', '');
                                //hidden_slUnits
                                // Fill_SelectInputAfterLoadData(d[4], 'ID', 'InvoiceNo', '<-- select Sales Invoice -->', '#slInvoices', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', '<-- select Customer -->', '#slCustomers', '');
                                // $('#txtFromDate_Filter').val(getTodaysDateInddMMyyyyFormat());
                                // $('#txtToDate_Filter').val(getTodaysDateInddMMyyyyFormat());

                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }
        case "SL": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 25 ", "SL_MasterData", function () {

                });

            });
            break;
        }
        case "PS": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 30 ", "PS_Transactions", function () {

                });

            });
            break;
        }
        case "SL_MasterData": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 25 ", "SL_MasterData", function () {

                });

            });
            break;
        }
        case "SL_Transactions": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 25 ", "SL_Transactions", function () {

                });

            });
            break;
        }
        case "PS_Transactions": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 30 ", "PS_Transactions", function () {

                });

            });
            break;
        }
        case "Services":
            {
                strLoadWithPagingFunctionName = "/api/Services/LoadWithPaging";
                LoadView("/MasterData/Services", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/Services.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Services_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/Services/IntializeData",
                            data: { pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#slAccountID', '');
                                // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#slSubAccountID', '');
                                // Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#hidden_slAccountID', '');
                                // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#hidden_slSubAccountID', '');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { Services_ClearAllControls(); },
                    function () { Services_DeleteList(); });
                break;

            }
        case "Expenses":
            {
                strLoadWithPagingFunctionName = "/api/Expenses/LoadWithPaging";
                LoadView("/MasterData/Expenses", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/MasterData/Invoicing/Expenses.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { Expenses_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/Expenses/IntializeData",
                            data: { pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#slAccountID', '');
                                // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#slSubAccountID', '');
                                // Fill_SelectInputAfterLoadData(d[0], 'ID', 'Account_Name', '<-- select Store Account -->', '#hidden_slAccountID', '');
                                // Fill_SelectInputAfterLoadData(d[1], 'ID', 'SubAccount_Name', '<-- select SubAccount -->', '#hidden_slSubAccountID', '');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { Expenses_ClearAllControls(); },
                    function () { Expenses_DeleteList(); });
                break;

            }
        case "SL_Invoices":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/SL_Invoices/LoadWithPaging";
                LoadView("/SL/SL_Invoices", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SL/SL_Transactions/SL_Invoices.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        IntializePage();
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SL_Invoices_ClearAllControls(); },
                    function () { SL_Invoices_DeleteList(); });
                break;

            }



        case "SL_ApproveInvoice":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/SL_Invoices/LoadWithPaging";
                LoadView("/SL/SL_ApproveInvoice", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SL/SL_Approving/SL_ApproveInvoice.js?' + glbVersion, function () {
                        var WhereClause = "Where ISNULL(IsDeleted , 0) = 0 and isnull(IsApproved , 0 ) = 0";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Approving/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SL_ApproveInvoice_BindTableRows(pTabelRows); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SL_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                console.log('approving data');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL CUSTOMERS -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SL_ApproveInvoice_ClearAllControls(); },
                    function () { SL_ApproveInvoice_DeleteList(); });
                break;

            }

        case "SL_UnApproveInvoice":
            {
                strLoadWithPagingFunctionName = "/api/SL_Approving/LoadWithPaging";
                LoadView("/SL/SL_UnApproveInvoice", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SL/SL_Approving/SL_UnApproveInvoice.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        // var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1 and isnull(IsApproved , 0 ) = 1 and id NOT IN (SELECT st2.SLInvoiceID FROM SC_Transactions AS st2 WHERE st2.TransactionTypeID in(20,40))";
                        var WhereClause = "Where ISNULL(IsDeleted , 0) = 0 and ISNULL(IsApproved , 0) = 1 and( (TransactionID is null AND id NOT IN (SELECT st2.SLInvoiceID FROM SC_Transactions AS st2 WHERE IsNull( st2.IsDeleted , 0 ) = 0 and  st2.TransactionTypeID in(20,40))) or (TransactionID is not null AND id NOT IN (SELECT st2.SLInvoiceID FROM SC_Transactions AS st2 WHERE IsNull( st2.IsDeleted , 0 ) = 0 and st2.TransactionTypeID in(40))) )";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Approving/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SL_UnApproveInvoice_BindTableRows(pTabelRows); SL_UnApproveInvoice_ClearAllControls(); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SL_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL CUSTOMERS -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SL_UnApproveInvoice_ClearAllControls(); },
                    function () { SL_UnApproveInvoice_DeleteList(); });
                break;

            }

        case "PS_ApproveInvoice":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/PS_Approving/LoadWithPaging";
                LoadView("/PS/PS_ApproveInvoice", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Approving/PS_ApproveInvoice.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1 and isnull(IsApproved , 0 ) = 0";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_Approving/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { PS_ApproveInvoice_BindTableRows(pTabelRows); PS_ApproveInvoice_ClearAllControls(); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/PS_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL Suppliers -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');

                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- Select -->', '#slDebitTax', '');
                                Fill_SelectInputAfterLoadData(d[5], 'ID', 'Name', '<-- Select-->', '#slCreditTax', '');

                                $('#slClients_Filter').select2();

                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_ApproveInvoice_ClearAllControls(); },
                    function () { PS_ApproveInvoice_DeleteList(); });
                break;

            }
        case "PS_UnApproveInvoiceTax":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/PS_Approving/LoadWithPaging";
                LoadView("/Administration/PS_UnApproveInvoiceTax", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/Administration/admapp/PS_UnApproveInvoiceTax.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where id in (select originid from ForwardingTransChemTax.dbo.taxlink where originid is not null and notes = 'PS_Invoices' AND JVID IS NOT NULL) and ISNULL(IsDeleted , 0) <> 1  and (IsNull(TransactionsCount , 0) = 0 or isnull( IsFromTrans , 0 ) =1) and id NOT IN(SELECT st.PurchaseInvoiceID FROM SC_Transactions AS st WHERE st.PurchaseInvoiceID IS NOT NULL AND st.TransactionTypeID=50)";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_Approving/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { PS_UnApproveInvoiceTax_BindTableRows(pTabelRows); PS_UnApproveInvoiceTax_ClearAllControls(); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/PS_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL Suppliers -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_UnApproveInvoiceTax_ClearAllControls(); },
                    function () { PS_UnApproveInvoiceTax_DeleteList(); });
                break;

            }

        case "PS_ApproveInvoiceTax":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/PS_Approving/LoadWithPaging";
                LoadView("/Administration/PS_ApproveInvoiceTax", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/Administration/admapp/PS_ApproveInvoiceTax.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where id not in (select originid from ForwardingTransChemTax.dbo.taxlink where originid is not null and notes = 'PS_Invoices' AND JVID IS NOT NULL) and ISNULL(IsDeleted , 0) <> 1";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_Approving/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { PS_ApproveInvoiceTax_BindTableRows(pTabelRows); PS_ApproveInvoiceTax_ClearAllControls(); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/PS_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL Suppliers -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');

                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', '<-- Select -->', '#slDebitTax', '');
                                Fill_SelectInputAfterLoadData(d[5], 'ID', 'Name', '<-- Select-->', '#slCreditTax', '');

                                $('#slClients_Filter').select2();

                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_ApproveInvoiceTax_ClearAllControls(); },
                    function () { PS_ApproveInvoiceTax_DeleteList(); });
                break;

            }
        case "PS_ApproveQuotation":
            {
                strLoadWithPagingFunctionName = "/api/PS_ApproveQuotation/LoadWithPaging";
                LoadView("/PS/PS_ApproveQuotation", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Approving/PS_ApproveQuotation.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        // var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1 and isnull(IsApproved , 0 ) = 0";
                        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_ApproveQuotation/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { PS_ApproveQuotation_BindTableRows(pTabelRows); PS_ApproveQuotation_ClearAllControls(); });


                        IntializeData();

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { },
                    function () { });
                break;

            }
        case "PS_ApprovePurchasingRequest":
            {
                strLoadWithPagingFunctionName = "/api/PS_ApprovePurchasingRequest/LoadWithPaging";
                LoadView("/PS/PS_ApprovePurchasingRequest", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Approving/PS_ApprovePurchasingRequest.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1 and isnull(IsApproved , 0 ) = 0";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_ApprovePurchasingRequest/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { PS_ApprovePurchasingRequest_BindTableRows(pTabelRows); PS_ApprovePurchasingRequest_ClearAllControls(); });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_ApprovePurchasingRequest_ClearAllControls(); },
                    function () { PS_ApprovePurchasingRequest_DeleteList(); });
                break;

            }
        case "PS_ApprovePurchasingOrders":
            {
                strLoadWithPagingFunctionName = "/api/PS_ApprovePurchasingOrders/LoadWithPaging";
                LoadView("/PS/PS_ApprovePurchasingOrders", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Approving/PS_ApprovePurchasingOrders.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1 and isnull(IsApproved , 0 ) = 0";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_ApprovePurchasingOrders/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { PS_ApprovePurchasingOrders_BindTableRows(pTabelRows); PS_ApprovePurchasingOrders_ClearAllControls(); });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_ApprovePurchasingOrders_ClearAllControls(); },
                    function () { PS_ApprovePurchasingOrders_DeleteList(); });
                break;

            }

        case "PS_ApproveSupplyOrders":
            {
                strLoadWithPagingFunctionName = "/api/PS_ApproveSupplyOrders/LoadWithPaging";
                LoadView("/PS/PS_ApproveSupplyOrders", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Approving/PS_ApproveSupplyOrders.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1 and isnull(IsApproved , 0 ) = 0";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_ApproveSupplyOrders/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { PS_ApproveSupplyOrders_BindTableRows(pTabelRows); PS_ApproveSupplyOrders_ClearAllControls(); });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_ApproveSupplyOrders_ClearAllControls(); },
                    function () { PS_ApproveSupplyOrders_DeleteList(); });
                break;

            }

        case "PS_UnApproveInvoice":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/PS_Approving/LoadWithPaging";
                LoadView("/PS/PS_UnApproveInvoice", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Approving/PS_UnApproveInvoice.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1 and isnull(IsApproved , 0 ) = 1 and (IsNull(TransactionsCount , 0) = 0 or isnull( IsFromTrans , 0 ) =1) and id NOT IN(SELECT st.PurchaseInvoiceID FROM SC_Transactions AS st WHERE st.PurchaseInvoiceID IS NOT NULL AND st.TransactionTypeID=50)";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_Approving/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { PS_UnApproveInvoice_BindTableRows(pTabelRows); PS_UnApproveInvoice_ClearAllControls(); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/PS_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL Suppliers -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_UnApproveInvoice_ClearAllControls(); },
                    function () { PS_UnApproveInvoice_DeleteList(); });
                break;

            }
        case "PS_Invoices":
            {
                strLoadWithPagingFunctionName = "/api/PS_Invoices/LoadWithPaging";
                LoadView("/PS/PS_Invoices", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Transactions/PS_Invoices.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript

                        IntializePage();

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_Invoices_ClearAllControls(); },
                    function () { PS_Invoices_DeleteList(); });
                break;

            }

        case "PS_PurchasingRequest":
            {
                strLoadWithPagingFunctionName = "/api/PS_PurchasingRequest/LoadWithPaging";
                LoadView("/PS/PS_PurchasingRequest", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Transactions/PS_PurchasingRequest.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        IntializePage()

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_PurchasingRequest_ClearAllControls },
                    function () { PS_PurchasingRequest_DeleteList(); });
                break;

            }
        case "PS_Quotations":
            {
                strLoadWithPagingFunctionName = "/api/PS_Quotations/LoadWithPaging";
                LoadView("/PS/PS_Quotations", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Transactions/PS_Quotations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        IntializePage()

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_Quotations_ClearAllControls },
                    function () { PS_Quotations_DeleteList(); });
                break;

            }
        case "PS_PurchasingOrders":
            {
                strLoadWithPagingFunctionName = "/api/PS_PurchasingOrders/LoadWithPaging";
                LoadView("/PS/PS_PurchasingOrders", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Transactions/PS_PurchasingOrders.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        IntializePage()

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_PurchasingOrders_ClearAllControls },
                    function () { PS_PurchasingOrders_DeleteList(); });
                break;

            }
        case "PS_SupplyOrders":
            {
                strLoadWithPagingFunctionName = "/api/PS_SupplyOrders/LoadWithPaging";
                LoadView("/PS/PS_SupplyOrders", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/PS/PS_Transactions/PS_SupplyOrders.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        IntializePage()

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { PS_SupplyOrders_ClearAllControls },
                    function () { PS_SupplyOrders_DeleteList(); });
                break;

            }
        case "LD_Storage":
            {
                debugger
                strLoadWithPagingFunctionName = "/api/LD_Storage/LoadWithWhereClause";
                LoadView("/LoadingandDischarging/LD_Storage", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/LoadingandDischarging/LoadingandDischargingOperations/LD_Storage.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        IntializePage(20);
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }
        case "LoadingandDischargingData":
            {
                debugger
                strLoadWithPagingFunctionName = "/api/LoadingandDischargingData/LoadWithWhereClause";
                LoadView("/LoadingandDischarging/LoadingandDischargingData", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/LoadingandDischarging/LoadingandDischargingOperations/LoadingandDischargingData.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        IntializePage(20);
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }
        case "LD_Transport":
            {
                debugger
                strLoadWithPagingFunctionName = "/api/LoadingandDischargingData/LoadWithWhereClause";
                LoadView("/LoadingandDischarging/LoadingandDischargingData", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/LoadingandDischarging/LoadingandDischargingOperations/LoadingandDischargingData.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        IntializePage(10);
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }
        case "LD_Workers":
            {
                debugger
                strLoadWithPagingFunctionName = "/api/LD_Workers/LoadWithWhereClause";
                LoadView("/LoadingandDischarging/LD_Workers", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/LoadingandDischarging/LoadingandDischargingOperations/LD_Workers.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        IntializePage();
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { /*SC_Transactions_ClearAllControls();*/ },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }

        case "SL_ServicesReports": {
            debugger;
            LoadView("/SL/SL_ServicesReports", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SL/SL_Reports/SL_ServicesReports.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SL_Reports/IntializeData"
                            , {}
                            , function (pData) {
                                $("#hl-menu-SL").parent().addClass("active");
                                // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var Clients = pData[0];
                                FillDivWithCheckboxes_DynamicFiled("divCbCustomers", Clients, "nameCbCustomers", "Name", null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SL_ItemsReports":
            {
                debugger;
                LoadView("/SL/SL_ItemsReports", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/SL/SL_Reports/SL_ItemsReports.js'
                        , function () {
                            FadePageCover(true);
                            CallGETFunctionWithParameters("/api/SL_Reports/IntializeData"
                                , {}
                                , function (pData) {
                                    $("#hl-menu-SL").parent().addClass("active");
                                    // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                    var Clients = pData[0];
                                    FillDivWithCheckboxes_DynamicFiled("divCbCustomers", Clients, "nameCbCustomers", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbItems", pData[1], "nameCbItems", "Name", null);
                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    $("#txtFromDate").val(pFormattedTodaysDate);
                                    $("#txtToDate").val(pFormattedTodaysDate);
                                    FadePageCover(false);
                                }
                                , null);
                        });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                    null/*function () { PrintArrivalNotification_DeleteList(); }*/);
                break;
            }
        case "SL_SalesReports":
            {
                debugger;
                LoadView("/SL/SL_SalesReports", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/SL/SL_Reports/SL_SalesReports.js'
                        , function () {
                            FadePageCover(true);
                            CallGETFunctionWithParameters("/api/SL_Reports/IntializeData"
                                , {}
                                , function (pData) {
                                    $("#hl-menu-SL").parent().addClass("active");
                                    // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                    var Clients = pData[0];
                                    FillDivWithCheckboxes_DynamicFiled("divCbCustomers", Clients, "nameCbCustomers", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbItems", pData[1], "nameCbItems", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbSalesMen", pData[2], "nameCbSalesMen", "Name", null);
                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    $("#txtFromDate").val(pFormattedTodaysDate);
                                    $("#txtToDate").val(pFormattedTodaysDate);
                                    FadePageCover(false);
                                }
                                , null);
                        });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                    null/*function () { PrintArrivalNotification_DeleteList(); }*/);
                break;
            }
        case "PS_ServicesReports": {
            debugger;
            LoadView("/PS/PS_ServicesReports", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/PS/PS_Reports/PS_ServicesReports.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/PS_Reports/IntializeData"
                            , {}
                            , function (pData) {
                                $("#hl-menu-PS").parent().addClass("active");
                                // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                var Suppliers = pData[0];
                                FillDivWithCheckboxes_DynamicFiled("divCbSuppliers", Suppliers, "nameCbSuppliers", "Name", null);
                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "PS_ItemsReports":
            {
                debugger;
                LoadView("/PS/PS_ItemsReports", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/PS/PS_Reports/PS_ItemsReports.js'
                        , function () {
                            FadePageCover(true);
                            CallGETFunctionWithParameters("/api/PS_Reports/IntializeData"
                                , {}
                                , function (pData) {
                                    $("#hl-menu-PS").parent().addClass("active");
                                    // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                    var Suppliers = pData[0];
                                    FillDivWithCheckboxes_DynamicFiled("divCbSuppliers", Suppliers, "nameCbSuppliers", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbItems", pData[1], "nameCbItems", "Name", null);
                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    $("#txtFromDate").val(pFormattedTodaysDate);
                                    $("#txtToDate").val(pFormattedTodaysDate);
                                    FadePageCover(false);
                                }
                                , null);
                        });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                    null/*function () { PrintArrivalNotification_DeleteList(); }*/);
                break;
            }
        case "PS_PurchasingReports":
            {
                debugger;
                LoadView("/PS/PS_PurchasingReports", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/PS/PS_Reports/PS_PurchasingReports.js'
                        , function () {
                            FadePageCover(true);
                            CallGETFunctionWithParameters("/api/PS_Reports/IntializeData"
                                , {}
                                , function (pData) {
                                    $("#hl-menu-PS").parent().addClass("active");
                                    // $("#hl-menu-Accounting").parent().siblings().removeClass("active");
                                    var Suppliers = pData[0];
                                    FillDivWithCheckboxes_DynamicFiled("divCbSuppliers", Suppliers, "nameCbSuppliers", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbItems", pData[1], "nameCbItems", "Name", null);
                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    $("#txtFromDate").val(pFormattedTodaysDate);
                                    $("#txtToDate").val(pFormattedTodaysDate);
                                    FadePageCover(false);
                                }
                                , null);
                        });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                    null/*function () { PrintArrivalNotification_DeleteList(); }*/);
                break;
            }

        case "UnapprovingAllocations":
            {
                // strLoadWithPagingFunctionName = "/api/OperAcc/DeleteAllocations";
                //Approvals
                //OperAcc
                LoadView("/Accounting/UnapprovingAllocations", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/Accounting/Transactions/UnapprovingAllocations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        //  LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where TransactionTypeID = 20 AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/A_ARAllocation/UnapprovingAllocations_IntializeData",
                            data: { 'PartenertTypeID': "-1" },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<--  Partener Type -->', '#slPartnerType', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<--  Currency -->', '#hiddenslCurrecies', '');
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[2], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices', '', false);
                                //  Fill_SelectInputAfterLoadData_DynamicTypes(d[1], 'ID', 'InvoiceNumber', '<-- select PS.Invoice -->', '#slPSInvoices_Filter', '', false);
                                // Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- select Store -->', '#slStores', '');
                                //Fill_SelectInputAfterLoadData(d[2], 'ID', 'StoreName', '<-- select store name -->', '#hidden_slstoresnames', '');
                                // $('#txtFromDate_Filter').val(getTodaysDateInddMMyyyyFormat());
                                // $('#txtToDate_Filter').val(getTodaysDateInddMMyyyyFormat());

                                ////hidden_slstoresnames

                                //FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () {
                        //$.each($('#slPartnerType option'), function (i, option)
                        //{
                        //    console.log($(option).val())


                        //});
                    },
                    function () { });
                break;

            }

        case "UnapprovingPayableAllocations":
            {
                debugger;
                LoadView("/Accounting/UnapprovingPayableAllocations", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/Accounting/Transactions/UnapprovingPayableAllocations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/A_ARAllocation/UnapprovingAllocations_IntializeData",
                            data: { 'PartenertTypeID': "-1" },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<--  Partener Type -->', '#slPartnerType', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<--  Currency -->', '#hiddenslCurrecies', '');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { },
                    function () { });
                break;

            }

        case "ClientDbtCrdtNotes":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/ClientDbtCrdtNotes/LoadWithPaging";
                LoadView("/SL/ClientDbtCrdtNotes", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SL/SL_Transactions/ClientDbtCrdtNotes.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where 1=1";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/ClientDbtCrdtNotes/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SL_ClientDbtCrdtNotes_BindTableRows(pTabelRows); SL_ClientDbtCrdtNotes_ClearAllControls(); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/ClientDbtCrdtNotes/IntializeData",
                            data: { pDate: ConvertDateFormat(getTodaysDateInddMMyyyyFormat()), pOnlyCurrency: false },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                //[0] clients , //[1] currencies ,//[2] paymentmethod ,//[3] stores ,//[4] costecenter ,
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL CUSTOMERS -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', 'Select Client', '#slClientID', '');
                                //-------
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[1], 'ID', 'Code', null, '#slCurrencyID', '', 'ExchangeRate');
                                //-------
                                // Fill_SelectInputAfterLoadData_WithAttr(d[2], 'InvoiceTypeID', 'InvoiceTypeName', null, '#slPaymentMethodID', '', 'InvoiceTypeName');
                                //Fill_SelectInputAfterLoadData_WithAttr(d[11], 'ID', 'InvoiceNo', 'Select Invoice', '#slInvoice', '');
                                //------
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'StoreName', '<-- SELECT STORE -->', '#slStores', '');
                                //------
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'CostCenterName', '<-- SELECT CostCenter  -->', '#slCostCenter_ID', '');
                                //------
                                Fill_SelectInputAfterLoadData_WithAttr(d[5], 'ID', 'Name', '<----------- ITEMS ---------->', '#hidden_slItems', '', 'Price');
                                Fill_SelectInputAfterLoadData_WithAttr(d[6], 'ID', 'Name', '<-- SELECT TAXES  -->', '#hidden_slTaxes', '', 'CurrentPercentage');
                                Fill_SelectInputAfterLoadData(d[7], 'ID', 'Name', '<---------- SERVICES -------->', '#hidden_slServices', '');
                                Fill_SelectInputAfterLoadData(d[8], 'ID', 'Name', '<-- SELECT EXPENSES  -->', '#hidden_slExpenses', '');
                                //  Fill_SelectInputAfterLoadData(d[9], 'DisbursementJob_ID', 'JobNumber', '<-- SELECT JobNumber  -->', '#slDisbursementJobs', '');
                                Fill_SelectInputAfterLoadData(d[9], 'BankID', 'BankNameEn', 'Select Bank', '#slBank', '');
                                console.log(d[11].length);
                                Fill_SelectInputAfterLoadData(d[11], 'ID', 'Account_EnName', 'SELECT Account', '#hidden_slAccounts', '');
                                $('#wasata').hide()

                                $('#txtInvoiceDate').val(getTodaysDateInddMMyyyyFormat());


                                $("#txtInvoiceDate").datepicker().on('changeDate'
                                    , function () {
                                        $(this).datepicker('hide');
                                        RecalculateExchangeRate();

                                    });
                                $("#txtInvoiceDate").datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });

                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SL_ClientDbtCrdtNotes_ClearAllControls(); },
                    function () { SL_ClientDbtCrdtNotes_DeleteList(); });
                break;

            }
        case "SL_Payments":
            {
                debugger;
                $("#hl-menu-ReceiptsAndPaymentsGroup").parent().siblings().removeClass("active");
                //$("#hl-menu-SL").parent().addClass("active");
                strBindTableRowsFunctionName = "Payments_BindTableRows";

                var pWhereClause = "Where 1=1";

                debugger;
                LoadView("/SL/SL_Payments", "div-content", function () {
                    debugger;
                    strLoadWithPagingFunctionName = "/api/SL_Payments/LoadWithPaging";
                    //$.getScript(strServerURL + '/Scripts/SL/SL_Transactions/SL_Payments.js', function () {
                    //    LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, 0, 10, function (pTableRows) {
                    //        $("#txtsearchPaymentDate").val(getTodaysDateInddMMyyyyFormat());
                    //        Payments_BindTableRows(pTableRows);
                    //        if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();

                    //    });
                    //});
                    $.getScript(strServerURL + '/Scripts/SL/SL_Transactions/SL_Payments.js', function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var WhereClause = "Where 1=1";
                        //LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim()
                        //    , function (pTabelRows)
                        //    {
                        //        $("#txtsearchPaymentDate").val(getTodaysDateInddMMyyyyFormat());
                        //        Payments_BindTableRows(pTableRows);
                        //        if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        //    });
                    });
                },
                    function () { Payments_ClearAllControls(); },
                    function () { Payments_DeleteList(); });
                break;
            }

        case "SL_ClientAccountStatementReport": {
            debugger;
            strBindTableRowsFunctionName = "TrialBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/SL_ClientAccountStatementReport/LoadRows";
            LoadView("/SL/SL_ClientAccountStatementReport", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SL/SL_Reports/SL_ClientAccountStatementReport.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/SL_ClientAccountStatementReport/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-SL").parent().addClass("active");
                                var pAccount = pData[0];
                                var pMainAccount = pData[1];
                                var pCurrency = pData[2];

                                FillDivWithCheckboxes("divCbAccount", pAccount, "nameCbAccount", 5/*NameAndCode*/, null);
                                //FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                //  FillDivWithCheckboxesJob("divCbJob", pJob, "nameCbJob", 6, null);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccountsGroup", pMainAccount, null);
                                Fill_SelectInputAfterLoadData(pCurrency, 'ID', 'Code', TranslateString("SelectFromMenu"), '#slCurrency', '');
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "ClientPaid": {
            debugger;
            strBindTableRowsFunctionName = "TrialBalance_BindTableRows";
            strLoadWithPagingFunctionName = "/api/ClientPaid/LoadRows";
            LoadView("/SL/ClientPaid", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/SL/SL_Reports/ClientPaid.js'
                    , function () {
                        FadePageCover(true);
                        CallGETFunctionWithParameters("/api/ClientPaid/FillSearchControls"
                            , {}
                            , function (pData) {
                                $("#hl-menu-SL").parent().addClass("active");
                                var pAccount = pData[0];
                                var pMainAccount = pData[1];
                                var pCurrency = pData[2];

                                FillDivWithCheckboxes("divCbAccount", pAccount, "nameCbAccount", 5/*NameAndCode*/, null);
                                //FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                //  FillDivWithCheckboxesJob("divCbJob", pJob, "nameCbJob", 6, null);

                                var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                $("#txtFromDate").val(pFormattedTodaysDate);
                                $("#txtToDate").val(pFormattedTodaysDate);
                                FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slAccountsGroup", pMainAccount, null);
                                Fill_SelectInputAfterLoadData(pCurrency, 'ID', 'Code', TranslateString("SelectFromMenu"), '#slCurrency', '');
                                //$("#slVoyage").html("<option value='0'>Select Voy.</option>");
                                FadePageCover(false);
                            }
                            , null);
                    });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                null/*function () { PrintArrivalNotification_DeleteList(); }*/);
            break;
        }
        case "SL_ApproveSL_DbtCrdtNotes":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/SL_Invoices/LoadWithPaging";
                LoadView("/SL/SL_ApproveSL_DbtCrdtNotes", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SL/SL_Approving/SL_ApproveSL_DbtCrdtNotes.js?' + glbVersion, function () {
                        //var WhereClause = "Where ISNULL(IsDeleted , 0) = 0 and isnull(IsApproved , 0 ) = 0";
                        var WhereClause = "Where  isnull(IsApproved , 0 ) = 0";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_ApprovingClientDbtCrdtNotes/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SL_ApproveInvoice_BindTableRows(pTabelRows); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SL_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                console.log('approving data');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL CUSTOMERS -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SL_ApproveInvoice_ClearAllControls(); },
                    function () { SL_ApproveInvoice_DeleteList(); });
                break;

            }
        case "SL_UnApproveSL_DbtCrdtNotes":
            {
                debugger;
                strLoadWithPagingFunctionName = "/api/SL_Invoices/LoadWithPaging";
                LoadView("/SL/SL_UnApproveSL_DbtCrdtNotes", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/SL/SL_Approving/SL_UnApproveSL_DbtCrdtNotes.js?' + glbVersion, function () {
                        //var WhereClause = "Where ISNULL(IsDeleted , 0) = 0 and isnull(IsApproved , 0 ) = 0";
                        var WhereClause = "Where isnull(IsApproved , 0 ) = 1";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_ApprovingClientDbtCrdtNotes/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SL_UnApproveInvoice_BindTableRows(pTabelRows); });
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/SL_Approving/IntializeData",
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                console.log('approving data');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', '<-- ALL CUSTOMERS -->', '#slClients_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Code', '<-- ALL CURRENCIES -->', '#slCurrency_Filter', '');
                                Fill_SelectInputAfterLoadData_WithAttr(d[2], 'ID', 'Name', null, '#slPaymentMethodID', '', 'Name');
                                FadePageCover(false);
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
                },
                    function () { SL_ApproveInvoice_ClearAllControls(); },
                    function () { SL_ApproveInvoice_DeleteList(); });
                break;

            }
        case "A_ReceivablesAllocations":
        case "A_PayablesAllocations": {
            debugger;
            var pWhereClause = "";
            if (pControlID == "A_ReceivablesAllocations") {
                glbTransactionType = constTransactionReceivableAllocation;
                pWhereClause = " WHERE UnAllocatedReceivables IS NOT NULL";
                console.log(pWhereClause);
            }
            else {
                glbTransactionType = constTransactionPayableAllocation;
                pWhereClause = " WHERE UnAllocatedPayables IS NOT NULL ";//OR PartnerTypeID=" + constCustodyPartnerTypeID + " OR PartnerTypeID = " + constSupplierPartnerTypeID;
                console.log(pWhereClause);
            }
            strBindTableRowsFunctionName = "A_ARAllocation_Partners_BindTableRows";
            strLoadWithPagingFunctionName = "/api/A_ARAllocation/ARAllocation_Partners_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            LoadView("/Accounting/A_ARAllocation", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Transactions/A_ARAllocation.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                    var pOrderBy = " PartnerTypeID, Name ";
                    var pPageNumber = 1;
                    var pPageSize = 10;
                    var pControllerParameters = { pIsLoadArrayOfObjects: true, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseAllocation_Partners: pWhereClause, pOrderBy: pOrderBy }
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            A_ARAllocation_Partners_BindTableRows(JSON.parse(pData[0]));
                            //if (pControlID == "ReceivablesAllocations") {
                            //    A_ARAllocation_Partners_BindTableRows(JSON.parse(pData[0]));
                            //}
                            //else {
                            //    A_ARAllocation_Partners_BindTableRows(JSON.parse(pData[4]));
                            //}

                            FillListFromObject(null, 5/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slPartner", pData[2], function () { $("#slPaymentPartner").html($("#slPartner").html()); }); /*function () { $("#slARFAirline").html($("#slARFSupplier").html()); $("#slARFAirline option[ServiceID!=" + constServiceAirlines + "][value!=''" + "]").addClass("hide"); }*/
                            FillListFromObject((pControlID == "A_ReceivablesAllocations" ? constCustomerPartnerTypeID : null), 1/*pCodeOrName*/, TranslateString("SelectFromMenu")/*"Select Pay. Type"*/, "slPartnerType", pData[3], null);
                            //FillListFromObject(null, 2/*pCodeOrName*/, "Select Treasury", "slPaymentTreasury", pData[3], null);
                            //FillListFromObject(null, 2/*pCodeOrName*/, null/*"Select Pay. Type"*/, "slPaymentType", pData[4], null);
                            ////$("#slARFBranch").html($("#hReadySlBranches").html());
                            //$("#slPaymentDetailsCurrency").html($("#hReadySlCurrencies").html());
                            ////if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass").reverseChildren();
                            if (pControlID == "A_ReceivablesAllocations") {
                                $("#liAccountsAllocationLink").text("Accounts Receivable");
                                $("#txtbreadcrumb").text(TranslateString("ReceivablesAllocations"));
                                // $("#liAccountsAllocationLink").attr("onclick", "LoadViews('AccountsReceivable')");
                                //  $("#liAccountsAllocationLink1").attr("onclick", "LoadViews('AccountsReceivable')");
                                $("#h3Allocation").text(TranslateString("ReceivablesAllocations")); $("#h3Allocation").addClass("static-text-primary");
                                $("#h3ModalLblAllocationType").html(TranslateString("ReceivablesAllocations") + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-primary"></label>');
                                $("#h3ModalLblAllocationType").addClass("static-text-primary");
                            }
                            else { //APPayments
                                $("#liAccountsAllocationLink").text("Accounts Payable");
                                $("#txtbreadcrumb").text(TranslateString("PayablesAllocations"));
                                //  $("#liAccountsAllocationLink").attr("onclick", "LoadViews('AccountsPayable')");
                                //  $("#liAccountsAllocationLink1").attr("onclick", "LoadViews('AccountsPayable')");
                                $("#h3Allocation").text(TranslateString("PayablesAllocations")); $("#h3Allocation").addClass("static-text-danger");
                                $("#h3ModalLblAllocationType").html(TranslateString("PayablesAllocations") + '&nbsp;<label id="lblAllocationShown" purpose="dynamicLabel" class="static-text-danger"></label>');
                                $("#h3ModalLblAllocationType").addClass("static-text-danger");
                            }
                            $("#liAccountAllocationType").text($("#h3Allocation").text());
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { ARAllocation_ClearAllControls(); }, //i insert a new air reservation form directly
                function () { ARAllocation_DeleteList(); });
            break;
        }
        case "ForeignCurrencyRevaluation": {
            LoadView("/Accounting/Transactions/ForeignCurrencyRevaluation", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/Accounting/Transactions/ForeignCurrencyRevaluation.js?' + glbVersion, function () {
                    Fill_Accounts();
                    $("#slCurrency").html($("#hReadySlCurrencies").html());
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { /*Fill_Accounts();*/ },
                function () {/* Fill_Items();*/ });
            break;
        }

        case "RS_Projects": {
            $("#hl-menu-MasterData").parent().siblings().removeClass("active");
            strBindTableRowsFunctionName = "RS_Projects_BindTableRows";
            strLoadWithPagingFunctionName = "/api/RS_Projects/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
            var pWhereClause = " WHERE 1=1";
            var pOrderBy = "Code";
            var pPageNumber = 1;
            var pPageSize = 10;
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadView("/RealEstate/RS_Projects", "div-content", function () {
                $.getScript(strServerURL + '/Scripts/RealEstate/MasterData/RS_Projects.js?' + glbVersion, function () {
                    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                        , function (pData) {
                            var pAccounts = pData[2];
                            var pCostCenter = pData[3];
                            var pProjectType = pData[4];
                            var pCustomer = pData[5];

                            RS_Projects_BindTableRows(JSON.parse(pData[0]));
                            //$("#slCurrency").html($("#hReadySlCurrencies").html());
                            //$("#slBranch").html($("#hReadySlBranches").html());
                            FillListFromObject_ERP(null, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, "<--Select-->", "slAccount", pAccounts, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slCostCenter", pCostCenter, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slProjectType", pProjectType, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "slClient", pCustomer, null);
                            FillListFromObject_ERP(null, 2/*pCodeOrName*/, "<--Select-->", "hidden_slClient", pCustomer, null);

                            //if (IsAccountingActive)
                            //    $(".classAccountingOption").removeClass("hide");
                            //else
                            //    $(".classAccountingOption").addClass("hide");
                        });
                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapChildrenClass:not(.reversed)").reverseChildren();
            },
                function () { RS_Projects_ClearAllControls(); },
                function () { RS_Projects_DeleteList(); });
            break;
        }

        //#region----------------Container Freight Station CFS        -------------------------------
        case "ContainerFreightStation": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 40 ", "ContainerFreightStationTariff", function () { });
            });
            break;
        }
        case "ContainerFreightStationTariff": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Others").removeClass("hide"); $("#tabOthers").parent().children().removeClass("btn-warning"); $("#tabOthers").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 40 ", "ContainerFreightStationTariff", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }

        case "WH_FCL_Tariff":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_FCL_Tariff_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_FCL_Tariffs/WH_FCL_Tariffs_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerFreightStation/WH_FCL_Tariffs", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Tariff/WH_FCL_Tariff.js', function () {
                        var pWhereClause = "WHERE 1=1";
                        var pOrderBy = "ID DESC";
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                WH_FCL_Tariff_Inti(pData);
                                WH_FCL_Tariff_Details_Inti(pData)
                            });
                    });
                },
                    function () { WH_FCL_Tariff_ClearAllControls(); });
                break;
            }


        case "WH_CSL_Tariff":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_CSL_Tariff_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_CSL_Tariffs/WH_CSL_Tariffs_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerFreightStation/WH_CSL_Tariffs", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Tariff/WH_CSL_Tariff.js', function () {
                        var pWhereClause = "WHERE 1=1";
                        var pOrderBy = "ID ASC";
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                WH_CSL_Tariff_Inti(pData);
                                WH_CSL_Tariff_Details_Inti(pData)
                            });
                    });
                },
                    function () { WH_CSL_Tariff_ClearAllControls(); });
                break;
            }

        case "ContainerFreightStationTransactions": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 40 ", "ContainerFreightStationTransactions", function () {
                });
            });
            break;
        }

        case "WH_CFS_GateIn":
            {
                debugger;
                LoadView("/ContainerFreightStation/Transactions/WH_CFS_GateIn", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Transactions/WH_CFS_GateIn.js',
                        function () {
                            WH_CFS_GateInInit();
                        });
                },
                    function () { },
                    function () { });
                break;
            }

        case "WH_CFS_GateInInventory":
            {
                debugger;
                LoadView("/ContainerFreightStation/Transactions/WH_CFS_GateInInventory", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Transactions/WH_CFS_GateInInventory.js',
                        function () {
                            WH_CFS_GateInInventoryInit();
                        });
                },
                    function () { },
                    function () { });
                break;
            }

        case "WH_CFS_Invoices":
            {
                debugger;
                LoadView("/ContainerFreightStation/Transactions/WH_CFS_Invoices", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Transactions/WH_CFS_Invoices.js',
                        function () {
                            WH_CFS_InvoicesInit();
                        });
                },
                    function () { },
                    function () { });
                break;
            }

        case "WH_CFS_ReleaseOrders":
            {
                debugger;
                LoadView("/ContainerFreightStation/Transactions/WH_CFS_ReleaseOrders", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Transactions/WH_CFS_ReleaseOrders.js',
                        function () {
                            WH_CFS_ReleaseOrdersInit();
                        });
                },
                    function () { },
                    function () { });
                break;
            }

        case "ContainerFreightStationReports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 40 ", "ContainerFreightStationReports", function () {
                });
            });
            break;
        }

        case "WH_ManifestReport":
            {
                debugger;
                LoadView("/ContainerFreightStation/Reports/WH_ManifestReport", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Reports/WH_ManifestReport.js',
                        function () {
                            WH_ManifestReportInit();
                        });
                },
                    function () { },
                    function () { });
                break;
            }

        case "WH_CFS_WarehouseStatistics":
            {
                debugger;
                LoadView("/ContainerFreightStation/Reports/WH_WarehouseStatistics", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/ContainerFreightStation/Reports/WH_WarehouseStatistics.js',
                        function () {
                            WH_WarehouseStatisticsInit();
                        });
                },
                    function () { },
                    function () { });
                break;
            }

        //#endregion----------------End OF Container Freight Station CFS -------------------------------

        //#region----------------Container Yard CY        -------------------------------
        case "ContainerYard": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 50 ", "ContainerYardTariff", function () { });
            });
            break;
        }

        case "ContainerYardTariff": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Others").removeClass("hide"); $("#tabOthers").parent().children().removeClass("btn-warning"); $("#tabOthers").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 50 ", "ContainerYardTariff", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }


        case "WH_MTY_Tariff":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_MTY_Tariff_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_MTY_Tariffs/WH_MTY_Tariffs_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerYard/WH_MTY_Tariffs", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerYard/Tariff/WH_MTY_Tariff.js', function () {
                        var pWhereClause = "WHERE 1=1";
                        var pOrderBy = "ID DESC";
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                WH_MTY_Tariff_Inti(pData);
                                WH_MTY_Tariff_Details_Inti(pData)
                            });
                    });
                },
                    function () { WH_MTY_Tariff_ClearAllControls(); });
                break;
            }

        case "ContainerYardTransactions": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Others").removeClass("hide"); $("#tabOthers").parent().children().removeClass("btn-warning"); $("#tabOthers").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 50 ", "ContainerYardTransactions", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }

        case "WH_CntrStock":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_CntrStock_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_CntrStocks/WH_CntrStocks_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerYard/WH_CntrStocks", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerYard/Transactions/WH_CntrStock.js', function () {
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        var pWhereClause = "WHERE 1=1 and isOwn=1 and id not in (select  WH_CntrStockID from WH_Hire where ishire=1 and (select count(*) from WH_Hire wh where wh.ishire=0 and wh.id>WH_Hire.id)=0) ";
                        var pOrderBy = "ID DESC";
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                WH_CntrStock_Inti(pData);
                                WH_Hire_Inti(pData);
                            });
                    });
                },
                    function () { WH_CntrStock_ClearAllControls(); });
                break;
            }

        case "WH_MTY_GateIn":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_MTY_GateIn_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_MTY_GateIn/WH_MTY_GateIn_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerYard/WH_MTY_GateIn", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerYard/Transactions/WH_MTY_GateIn.js', function () {
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        var pWhereClause = "WHERE 1=1 and StorageEndDate is null and OperationID is null";
                        var pOrderBy = "ID DESC";
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                WH_MTY_GateIn_Inti(pData);
                            });
                    });
                },
                    function () { WH_MTY_GateIn_ClearAllControls(); });
                break;
            }

        case "WH_MTY_Inventory":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_MTY_Inventory_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_MTY_Inventory/WH_MTY_Inventory_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerYard/WH_MTY_Inventory", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerYard/Transactions/WH_MTY_Inventory.js', function () {
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        var pWhereClause = "WHERE 1=1 and StorageEndDate is null and OperationID is null";
                        var pOrderBy = "ID DESC";
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                WH_MTY_Inventory_Inti(pData);
                            });
                    });
                },
                    function () { WH_MTY_Inventory_ClearAllControls(); });
                break;
            }

        case "WH_MTY_GateOut":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_MTY_GateOut_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_MTY_GateOut/WH_MTY_GateOut_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerYard/WH_MTY_GateOut", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerYard/Transactions/WH_MTY_GateOut.js', function () {
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        var pWhereClause = "WHERE 1=1 and StorageEndDate is not null and OperationID is null";
                        var pOrderBy = "StorageEndDate DESC";
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                WH_MTY_GateOut_Inti(pData);
                            });
                    });
                },
                    function () { WH_MTY_GateOut_ClearAllControls(); });
                break;
            }

        case "ContainerYardReports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                //$("#div-content .hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").toString().split('-')[2]); });
                //$("#div-Tabs").children().addClass("hide"); $("#sec-Others").removeClass("hide"); $("#tabOthers").parent().children().removeClass("btn-warning"); $("#tabOthers").addClass("btn-warning");
                FillGroups(" where ParentGroupID = 50 ", "ContainerYardReports", function () {
                    //$("a[name='tabs']").click(function () { $("#div-Tabs").children().addClass("hide"); $("#sec-" + $(this).attr("tab-name")).removeClass("hide"); $(this).parent().children().removeClass("btn-warning"); $(this).addClass("btn-warning"); });
                });
            });
            break;
        }
        case "WH_MTY_Reports":
            {
                debugger;
                // //
                /////alert('HELLOOOOO');
                //glbDirectionType = "";
                //function name to bind table in js
                strBindTableRowsFunctionName = "WH_MTY_Reports_BindTableRows";
                //path/controllername/action
                strLoadWithPagingFunctionName = "/api/WH_MTY_Reports/WH_MTY_ReportsCbo_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
                // view url in route
                LoadView("/ContainerYard/WH_MTY_Reports", "div-content", function () {
                    // form js path
                    $.getScript(strServerURL + '/Scripts/ContainerYard/Reports/WH_MTY_Reports.js', function () {
                        var pPageNumber = 1;
                        var pPageSize = 10;
                        var pWhereClause = "WHERE 1=1";
                        var pOrderBy = "ID DESC";
                        //var pSearchKey = null;
                        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("", "", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters
                            , function (pData) {
                                //WH_MTY_Reports(pData);
                            });
                    });
                },
                    function () { WH_MTY_Reports_ClearAllControls(); });
                break;
            }
        //case "WH_MTY_GateIn":
        //    {
        //        debugger;
        //        LoadView("/ContainerYard/WH_MTY_GateIn", "div-content", function () {
        //            $.getScript(strServerURL + '/Scripts/ContainerYard/Transactions/WH_MTY_GateIn.js',
        //                function () {
        //                    WH_MTY_GateIn_Inti();
        //                });
        //        },
        //            function () { },
        //            function () { });
        //        break;
        //    }

        //#endregion----------------End OF Container Yard CY -------------------------------


        case "FA": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 52 ", "FA_MasterData", function () {

                });

            });
            break;
        }

        case "FA_MasterData": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 52 ", "FA_MasterData", function () {

                });

            });
            break;
        }
        case "FA_Transactions": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 52 ", "FA_Transactions", function () {

                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                    $(".swapChildrenClass:not(.reversed)").reverseChildren();

                }
            });
            break;
        }
        case "FA_Reports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 52 ", "FA_Reports", function () {

                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                    $(".swapChildrenClass:not(.reversed)").reverseChildren();

                }
            });
            break;
        }
        case "FA_Approving": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 52 ", "FA_Approving", function () {

                });
                if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                    $(".swapChildrenClass:not(.reversed)").reverseChildren();

                }
            });
            break;
        }
        case "FA_AssetsGroups":
            {
                strLoadWithPagingFunctionName = "/api/FA_AssetsGroups/LoadWithPaging";
                LoadView("/FA/MasterData/FA_AssetsGroups", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/MasterData/FA_AssetsGroups.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_AssetsGroups_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_AssetsGroups/IntializeData",
                            data: { pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'SubAccount_EnName', TranslateString("SelectFromMenu"), '#slSubAccountID', '', 'Parent_ID');
                                // Fill_SelectInputAfterLoadData(d[1], 'ID', 'Fiscal_Year_Name', '<-- select Fiscal Year -->', '#slFiscalYearID', '');
                                //Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- select Budgets -->', '#slBudgetID', '');
                                FadePageCover(false);

                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                        $(".swapChildrenClass:not(.reversed)").reverseChildren();

                    }
                },
                    function () { /*FA_AssetsGroups_ClearAllControls(); */ },
                    function () { /*FA_AssetsGroups_DeleteList();*/ });
                break;

            }


        case "FA_Exclusion":
            {
                strLoadWithPagingFunctionName = "/api/FA_Transactions/LoadWithWhereClause";
                LoadView("/FA/FA_Transactions/FA_Exclusion", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Transactions/FA_Exclusion.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where (TransactionTypeID = 30 or TransactionTypeID = 60 )  AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { FA_Transactions_BindTableRows(pTabelRows); });
                        FadePageCover(true)
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_Transactions/IntializeData",
                            data: { pTransactionTypeID: "30", pID: null, pIsAsset: false },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                FadePageCover(false)
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'NameBarCode', TranslateString("SelectFromMenu"), '#slAssetID', '', 'BarCode,BarCodeType,LastDepreciationDate,LastAmount,LastQty,BranchID,IsExcluded,IntialAmount,DepreciationTotal');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slBranchID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', null, '#slExludedTypeID', '');
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', null, '#slTransactionTypeID', '');
                                Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slTransactionTypeID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDepartmentID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[5], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDevisonID_Filter', '');


                                $('#slAssetID').trigger("change");
                                $('#slAssetID').css({ 'width': '100%' }).select2();
                                $("div[tabindex='-1']").removeAttr('tabindex');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { FA_Transactions_ClearAllControls(); },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }
        case "FA_Addition":
            {
                strLoadWithPagingFunctionName = "/api/FA_Transactions/LoadWithWhereClause";
                LoadView("/FA/FA_Transactions/FA_Addition", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Transactions/FA_Addition.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where (TransactionTypeID = 20  )  AND ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { FA_Transactions_BindTableRows(pTabelRows); });
                        FadePageCover(true)
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_Transactions/IntializeData",
                            data: { pTransactionTypeID: "20", pID: null, pIsAsset: false },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                FadePageCover(false)
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'NameBarCode', TranslateString("SelectFromMenu"), '#slAssetID', '', 'BarCode,BarCodeType,LastDepreciationDate,LastAmount,LastQty,BranchID,IsExcluded');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slBranchID_Filter', '');
                                // Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', null, '#slExludedTypeID', '');
                                // Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', null, '#slTransactionTypeID', '');
                                //  Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', '<-- select From Menue -->', '#slTransactionTypeID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[4], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDepartmentID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[5], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDevisonID_Filter', '');


                                $('#slAssetID').trigger("change");
                                $('#slAssetID').css({ 'width': '100%' }).select2();
                                $("div[tabindex='-1']").removeAttr('tabindex');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () { FA_Transactions_ClearAllControls(); },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }

        case "FA_Depreciation":
            {
                strLoadWithPagingFunctionName = "/api/FA_Depreciations/LoadWithWhereClause";
                LoadView("/FA/FA_Transactions/FA_Depreciation", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Transactions/FA_Depreciations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where  ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { FA_Depreciations_BindTableRows(pTabelRows); });
                        FadePageCover(true)
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_Depreciations/IntializeData",
                            data: { pTransactionTypeID: "40", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                FadePageCover(false)
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', null, '#slBranchID_Filter', '', 'FA_LastDepreciationDate');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', null, '#slBranchID', '', 'FA_LastDepreciationDate');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () { FA_Depreciations_ClearAllControls(); },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }
        case "FA_DepreciationsByAssets":
            {
                strLoadWithPagingFunctionName = "/api/FA_DepreciationsByAssets/LoadWithWhereClause";
                LoadView("/FA/FA_Transactions/FA_DepreciationsByAssets", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Transactions/FA_DepreciationsByAssets.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where  ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { FA_DepreciationsByAssets_BindTableRows(pTabelRows); });
                        FadePageCover(true)
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_DepreciationsByAssets/IntializeData",
                            data: { pTransactionTypeID: "40", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                FadePageCover(false)
                                //  Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'NameBarCode', null, '#slAssets_Filter', '', 'LastAmount,LastDepreciationDate');
                                //  Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'NameBarCode', null, '#slAssets', '', 'LastAmount,LastDepreciationDate');
                                ////  Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', null, '#slBranchID_Filter', '', 'FA_LastDepreciationDate');
                                ////  Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', null, '#slBranchID', '', 'FA_LastDepreciationDate');

                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'NameBarCode', TranslateString("SelectFromMenu"), '#slAssets_Filter', '', 'LastAmount,LastDepreciationDate');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'NameBarCode', TranslateString("SelectFromMenu"), '#slAssets', '', 'LastAmount,LastDepreciationDate');


                                $("#slAssets").css({ 'width': '100%' }).select2();
                                $("#slAssets").trigger("change");

                                $("#slAssets_Filter").css({ 'width': '100%' }).select2();
                                $("#slAssets_Filter").trigger("change");
                                $("div[tabindex='-1']").removeAttr('tabindex');




                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () { FA_DepreciationsByAssets_ClearAllControls(); },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }
        case "FA_StopDepreciations":
            {
                strLoadWithPagingFunctionName = "/api/FA_Depreciations/LoadWithWhereClause";
                LoadView("/FA/FA_Transactions/FA_StopDepreciations", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Transactions/FA_StopDepreciations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, " Where(IsDeleted = 0 or IsDeleted IS NULL) ", 0, 10, function (pTabelRows) { FA_Depreciations_BindTableRows(pTabelRows); });
                        FadePageCover(true)
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_Depreciations/IntializeData",
                            data: { pTransactionTypeID: "40", pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                FadePageCover(false)
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', null, '#slBranchID_Filter', '', 'FA_LastDepreciationDate');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', null, '#slBranchID', '', 'FA_LastDepreciationDate');
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () { FA_Depreciations_ClearAllControls(); },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }

        case "FA_DestructionsStopsPeriod":
            {
                strLoadWithPagingFunctionName = "/api/FA_Assets/LoadWithPaging";
                LoadView("/FA/MasterData/FA_DestructionsStopsPeriod", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/MasterData/FA_DestructionsStopsPeriod.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_Assets_BindTableRows(pTabelRows); });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                        //$.ajax({
                        //    type: "GET",
                        //    url: strServerURL + "api/FA_Assets/IntializeData",
                        //    data: { pID: null, pDate: ConvertDateFormat(getTodaysDateInddMMyyyyFormat()), IsCurrency: "false" },
                        //    contentType: "application/json; charset=utf-8",
                        //    dataType: "json",
                        //    success: function (d) {

                        //        Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'ID', 'Name', '<-- select Group-->', '#slGroupID', '', "SubAccountID,ParentSubAccountID");
                        //        Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', '<-- select Branches -->', '#slBranchID', '');
                        //        Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', '<-- select Department -->', '#slDepartmentID', '');
                        //        Fill_SelectInputAfterLoadData(d[3], 'ID', 'Name', '<-- select Devison -->', '#slDevisonID', '');
                        //        Fill_SelectInputAfterLoadData_WithAttr(d[4], 'ID', 'Code', null, '#slCurrencyID', '', 'ExchangeRate');

                        //        $("#txtPurchasingDate").datepicker().on('changeDate'
                        //            , function () {
                        //                $(this).datepicker('hide');
                        //                RecalculateExchangeRate();

                        //            });
                        //        $("#txtPurchasingDate").datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });

                    });
                },
                    function () { /*FA_AssetsGroups_ClearAllControls(); */ },
                    function () { /*FA_AssetsGroups_DeleteList();*/ });
                break;

            }



        case "FA_Assets":
            {
                strLoadWithPagingFunctionName = "/api/FA_Assets/LoadWithPaging";
                LoadView("/FA/MasterData/FA_Assets", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/MasterData/FA_Assets.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        // LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_Assets_BindTableRows(pTabelRows); });
                        var WhereClause = " where vwFA_Assets.BranchID  IN(Select ub.BranchID from FA_UserBranches ub where ub.UserID = " + pLoggedUser.ID + ") ";
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_Assets/LoadWithPagingWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { FA_Assets_BindTableRows(pTabelRows); });

                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_Assets/IntializeData",
                            data: { pID: null, pDate: ConvertDateFormat(getTodaysDateInddMMyyyyFormat()), IsCurrency: "false" },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {

                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[0], 'GroupID', 'FullName', TranslateString("SelectFromMenu"), '#slGroupID', '', "SubAccountID,ParentSubAccountID,Percentage,ActualPercentage,Code");
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(d[1], 'ID', 'Code,Name', " - ", TranslateString("SelectFromMenu"), '#slBranchID', '', "Code");
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[2], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDepartmentID', '', "Code");
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[3], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDevisonID', '', "Code");
                                Fill_SelectInputAfterLoadData_WithAttr(d[4], 'ID', 'Code', null, '#slCurrencyID', '', 'ExchangeRate');

                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[1], 'ID', 'Name', TranslateString("SelectBranch"), '#slBranchID_Filter', '', "Code");
                                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(d[5], 'D_ID', 'Code,ParentPS_InvoiceItemName,CodeManual,BranchName,ItemTypeName', " - ", TranslateString("SelectFromMenu"), '#slSC_TransactionsDetails', '', "Code,strParentPS_InvoiceDate,ParentPS_InvoiceID,ParentPS_InvoiceItemUnitPrice,ParentPS_InvoiceItemQty,ParentPS_InvoiceItemUnitCurrencyID,ItemTypeID,ItemTypeName,BranchID,ParentPS_InvoiceItemName,CodeManual,TransactionDate,Qty_D");

                                $('#txtPurchasingDate').val(getTodaysDateInddMMyyyyFormat());



                                $('#slBranchID').trigger("change");
                                $('#slBranchID').css({ 'width': '100%' }).select2();
                                $("div[tabindex='-1']").removeAttr('tabindex');



                                $("#slSC_TransactionsDetails").css({ 'width': '100%' }).select2();
                                // $("#slSC_TransactionsDetails").trigger("change");
                                $("div[tabindex='-1']").removeAttr('tabindex');

                                $("#txtPurchasingDate").datepicker().off('changeDate').on('changeDate'
                                    , function () {
                                        $('#txtStartDepreciationDate').val($("#txtPurchasingDate").val())
                                        $(this).datepicker('hide');

                                        setTimeout(function () {
                                            $('#txtStartDepreciationDate').val($("#txtPurchasingDate").val())
                                            RecalculateExchangeRate();
                                        }, 30);





                                    });
                                $("#txtPurchasingDate").datepicker().off('keydown').on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });



                                $('#txtStartDepreciationDate').val(getTodaysDateInddMMyyyyFormat());

                                $("#txtStartDepreciationDate").datepicker().off('changeDate').on('changeDate'
                                    , function () {
                                        $(this).datepicker('hide');
                                        CalculateDistructions(false);

                                    });
                                $("#txtStartDepreciationDate").datepicker().off('keydown').on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });





                                if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                                    $(".swapChildrenClass:not(.reversed)").reverseChildren();

                                }

                                FadePageCover(false);
                                $('#FA_AssetsModal input[type="text"]').on('keypress', function (e) {
                                    if (e.keyCode === 13) {
                                        e.preventDefault();
                                        // $(this).trigger('submit');
                                    }
                                });


                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                    });
                },
                    function () { /*FA_AssetsGroups_ClearAllControls(); */ },
                    function () { /*FA_AssetsGroups_DeleteList();*/ });
                break;

            }





        case "FA_AssetsApproving":
            {
                strLoadWithPagingFunctionName = "/api/FA_AssetsApproving/LoadWithPaging";
                LoadView("/FA/FA_Approving/FA_AssetsApproving", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Approving/FA_AssetsApproving.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_AssetsApproving_BindTableRows(pTabelRows); });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () { /*FA_AssetsGroups_ClearAllControls(); */ },
                    function () { /*FA_AssetsGroups_DeleteList();*/ });
                break;

            }



        case "FA_AssetsUnApproving":
            {
                strLoadWithPagingFunctionName = "/api/FA_AssetsUnApproving/LoadWithPaging";
                LoadView("/FA/FA_Approving/FA_AssetsUnApproving", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Approving/FA_AssetsUnApproving.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, 0, 10, function (pTabelRows) { FA_AssetsUnApproving_BindTableRows(pTabelRows); });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () { /*FA_AssetsGroups_ClearAllControls(); */ },
                    function () { /*FA_AssetsGroups_DeleteList();*/ });
                break;

            }


        case "FA_AssetsReports":
            {
                debugger;
                LoadView("/FA/FA_AssetsReports", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/FA/FA_Reports/FA_AssetsReports.js'
                        , function () {
                            FadePageCover(true);
                            CallGETFunctionWithParameters("/api/FA_Reports/IntializeData"
                                , {}
                                , function (pData) {
                                    $("#hl-menu-FA").parent().addClass("active");
                                    FillDivWithCheckboxes_DynamicFiled("divCbBranches", pData[0], "nameCbBranches", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbDepartments", pData[1], "nameCbDepartments", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbDevisions", pData[2], "nameCbDevisions", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiledWithIDName("divCbGroups", pData[3], "nameCbGroups", "FullName", 'GroupID', null);

                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    $("#txtFromDate").val(pFormattedTodaysDate);
                                    $("#txtToDate").val(pFormattedTodaysDate);
                                    FadePageCover(false);

                                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                                        $(".swapChildrenClass:not(.reversed)").reverseChildren();

                                    }
                                }
                                , null);
                        });
                },
                    null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                    null/*function () { PrintArrivalNotification_DeleteList(); }*/);
                break;
            }

        case "FA_TransactionsReports":
            {
                debugger;
                LoadView("/FA/FA_TransactionsReports", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/FA/FA_Reports/FA_TransactionsReports.js'
                        , function () {
                            FadePageCover(true);
                            CallGETFunctionWithParameters("/api/FA_Reports/IntializeData"
                                , {}
                                , function (pData) {
                                    $("#hl-menu-FA").parent().addClass("active");
                                    FillDivWithCheckboxes_DynamicFiled("divCbBranches", pData[0], "nameCbBranches", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbDepartments", pData[1], "nameCbDepartments", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiled("divCbDevisions", pData[2], "nameCbDevisions", "Name", null);
                                    FillDivWithCheckboxes_DynamicFiledWithIDName("divCbGroups", pData[3], "nameCbGroups", "FullName", 'GroupID', null);
                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    $("#txtFromDate").val(pFormattedTodaysDate);
                                    $("#txtToDate").val(pFormattedTodaysDate);
                                    FadePageCover(false);

                                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                                        $(".swapChildrenClass:not(.reversed)").reverseChildren();

                                    }
                                }
                                , null);
                        });
                },
                    null/*function () { PrintArrivalNotification_ClearAllControls(); }*/,
                    null/*function () { PrintArrivalNotification_DeleteList(); }*/);
                break;
            }
        case "FA_AssetsInventory":
            {
                strLoadWithPagingFunctionName = "/api/FA_AssetsInventory/LoadWithWhereClause";
                LoadView("/FA/FA_Transactions/FA_AssetsInventory", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/FA/FA_Transactions/FA_AssetsInventory.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, "Where  ( IsDeleted = 0 or IsDeleted IS NULL )", 0, 10, function (pTabelRows) { FA_AssetsInventory_BindTableRows(pTabelRows); });
                        FadePageCover(true)
                        $.ajax({
                            type: "GET",
                            url: strServerURL + "/api/FA_AssetsInventory/IntializeData",
                            data: { pID: null },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (d) {
                                FadePageCover(false)
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slBranchID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDevisonID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDepartmentID_Filter', '');
                                Fill_SelectInputAfterLoadData(d[0], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slBranchID', '');
                                Fill_SelectInputAfterLoadData(d[1], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDevisonID', '');
                                Fill_SelectInputAfterLoadData(d[2], 'ID', 'Name', TranslateString("SelectFromMenu"), '#slDepartmentID', '');
                                Fill_SelectInputAfterLoadData_WithMultiAttr(d[3], 'ID', 'NameBarCode', TranslateString("SelectFromMenu"), '#slAssets', '', "BranchID,DepartmentID,DevisonID");

                                // $('#slAssets').trigger("change");
                                $('#slAssets').css({ 'width': '100%' }).select2();
                                $("div[tabindex='-1']").removeAttr('tabindex');

                                $('#txtDate').val(getTodaysDateInddMMyyyyFormat());

                                $("#txtDate").datepicker().on('changeDate'
                                    , function () {
                                        $(this).datepicker('hide');
                                        GetActualQtyOfAllAssets();

                                    });
                                $("#txtDate").datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });
                            },
                            error: function (jqXHR, exception) {
                                debugger;
                                swal("Sorry", "Please, try again. This is print region !", "");
                                FadePageCover(false);
                            }
                        });
                        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                            $(".swapChildrenClass:not(.reversed)").reverseChildren();

                        }
                    });
                },
                    function () {/* FA_AssetsInventory_ClearAllControls();*/ },
                    function () { /*SC_Transactions_DeleteList();*/ });
                break;

            }
        case "WebSite_YourOperations":
            {
                debugger

                strLoadWithPagingFunctionName = "/api/WebSite_YourOperations/LoadWithWhereClause";
                LoadView("/WebSite/WebSite_YourOperations", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/WebSite/WebSite_YourOperations.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: " where 1 = 1 " };
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, "ID DESC", 1, 10, pControllerParameters
                            , function (pData) {
                                WebSite_YourOperations_BindTableRows(JSON.parse(pData[0]))
                                $("#hl-menu-WebSite_YourOperations").parent().addClass("active");
                                $("input").keydown(function (e) {
                                    if (e.keyCode == 13) {
                                        e.preventDefault();
                                        WebSite_YourOperations_LoadingWithPaging();
                                    }
                                    else
                                        return;
                                });


                            });
                    });
                },
                    function () { },
                    function () { });
                break;
            }
        case "WebSite_Form13States":
            {
                debugger

                strLoadWithPagingFunctionName = "/api/WebSite_Form13States/LoadWithWhereClause";
                LoadView("/WebSite/WebSite_Form13States", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/WebSite/WebSite_Form13States.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: " where 1 = 1 " };
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, "ID DESC", 1, 10, pControllerParameters
                            , function (pData) {
                                WebSite_Form13States_BindTableRows(JSON.parse(pData[0]))
                                $("#hl-menu-WebSite_Form13States").parent().addClass("active");
                                $("input").keydown(function (e) {
                                    if (e.keyCode == 13) {
                                        e.preventDefault();
                                        WebSite_Form13States_LoadingWithPaging();
                                    }
                                    else
                                        return;
                                });


                            });
                    });
                },
                    function () { },
                    function () { });
                break;
            }
        case "WebSite_YourInvoices":
            {
                debugger

                strLoadWithPagingFunctionName = "/api/WebSite_YourInvoices/LoadWithWhereClause";
                LoadView("/WebSite/WebSite_YourInvoices", "div-content", function () {

                    $.getScript(strServerURL + '/Scripts/WebSite/WebSite_YourInvoices.js?' + glbVersion, function () {//sherif:loadwithpaging fn is callback in $.getscript
                        var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: " where 1 = 1 " };
                        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, "ID DESC", 1, 10, pControllerParameters
                            , function (pData) {
                                WebSite_YourInvoices_BindTableRows(JSON.parse(pData[0]))
                                $("#hl-menu-WebSite_YourInvoices").parent().addClass("active");
                                $("input").keydown(function (e) {
                                    if (e.keyCode == 13) {
                                        e.preventDefault();
                                        WebSite_YourInvoices_LoadingWithPaging();
                                    }
                                    else
                                        return;
                                });

                                $("#txtFilterInvoiceDate").datepicker().off('changeDate').on('changeDate'
                                    , function () {
                                        WebSite_YourInvoices_LoadingWithPaging();
                                    });
                                $("#txtFilterInvoiceDate").datepicker().off('keydown').on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });


                            });
                    });
                },
                    function () { },
                    function () { });
                break;
            }
        case "WebSite_YourSubAccount":
            {
                ///api/SubAccountLedger/LoadRows";
                //"/Reports/AccountStatement"
                debugger;
                glbCallingControl = "OperAccountingReports";
                strBindTableRowsFunctionName = "WebSite_YourSubAccount_BindTableRows";
                strLoadWithPagingFunctionName = "/api/WebSite_YourSubAccount/LoadRows";
                LoadView("/WebSite/WebSite_YourSubAccount", "div-content", function () {
                    $.getScript(strServerURL + '/Scripts/WebSite/WebSite_YourSubAccount.js'
                        , function () {
                            FadePageCover(true);
                            CallGETFunctionWithParameters("/api/WebSite_YourSubAccount/FillSearchControls"
                                , { glbCallingControl: glbCallingControl }
                                , function (pData) {
                                    //  $("#hl-menu-Reports").parent().addClass("active");
                                    //  $("#hl-menu-Reports").parent().siblings().removeClass("active");
                                    $("#hl-menu-WebSite_YourSubAccount").parent().addClass("active");
                                    var pSubAccount = pData[0];
                                    var pCostCenter = pData[1];
                                    var pSubAccountGroup = pData[2];
                                    var pCurrency = pData[3];

                                    FillDivWithCheckboxes("divCbSubAccount", pSubAccount, "nameCbSubAccount", 4/*NameAndCode*/, null);
                                    FillDivWithCheckboxes("divCbCostCenter", pCostCenter, "nameCbCostCenter", 5, null);
                                    FillListFromObject_ERP(null, 2/*pCodeOrName*/, TranslateString("SelectFromMenu"), "slSubAccountGroup", pSubAccountGroup, null);
                                    $("#slCurrency").html($("#hReadySlCurrencies").html());

                                    var pFormattedTodaysDate = getTodaysDateInddMMyyyyFormat();
                                    $("#txtFromDate").val(pFormattedTodaysDate);
                                    $("#txtToDate").val(pFormattedTodaysDate);
                                    FadePageCover(false);
                                }
                                , null);
                        });
                },
                    null,
                    null);
                break;
            }

        //CourierAndLastMile
        case "Orders": {
            $.getScript(strServerURL + '/Scripts/CourierAndLastMile/Orders/Orders.js?' + glbVersion, function () { Orders_Initialize(); });
            break;
        }
        case "Domestic_AWB": {
            $.getScript(strServerURL + '/Scripts/CourierAndLastMile/Orders/Domestic_AWB.js?' + glbVersion, function () { DomesticAWB_Initialize(); });
            break;
        }
        case "Dispatcher": {
            $.getScript(strServerURL + '/Scripts/CourierAndLastMile/Orders/Dispatcher.js?' + glbVersion, function () { Dispatcher_Initialize(); });
            break;
        }
        case "RunnerTransactions": {
            $.getScript(strServerURL + '/Scripts/CourierAndLastMile/Orders/RunnerTransactions.js?' + glbVersion, function () { RunnerTransactions_Initialize(); });
            break;
        }
        case "Transactions": {
            $.getScript(strServerURL + '/Scripts/CourierAndLastMile/Orders/Transactions.js?' + glbVersion, function () { Orders_Initialize(); });
            break;

        }

        case "ShipmentDelivery": {
            $.getScript(strServerURL + '/Scripts/CourierAndLastMile/Operations/ShipmentDelivery.js?' + glbVersion, function () { ShipmentDelivery_Initialize(); });
            break;

        }
        case "LoadingandDischargingOperations":
            {
                debugger;
                LoadView("/Home/Groups", "div-content", function () {
                    FillGroups(" where ParentGroupID = 57 ", "LoadingandDischargingOperations", function () {

                    });
                    if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
                        $(".swapChildrenClass:not(.reversed)").reverseChildren();
                    }
                });
                break;
            }
        case "TR":
        case "TR_Transactions": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 17 ", "TR_Transactions", function () {
                });

            });
            break;
        }
        case "FleetQuotationTab": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 17 ", "FleetQuotationTab", function () {
                });

            });
            break;
        }
        case "TR_Reports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 17 ", "TR_Reports", function () {
                });

            });
            break;
        }

        case "CourierAndLastMile":
        case "LastMileOrders": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 9263 ", "LastMileOrders", function () {
                });

            });
            break;
        }
        case "LastMileOperations": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 9263 ", "LastMileOperations", function () {
                });

            });
            break;
        }
        case "LastMileReports": {
            debugger;
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 9263 ", "LastMileReports", function () {
                });

            });
            break;
        }

        /*Inter-Services Start*/
        case "InterServices":
        case "RequestedServiceGroup": {
            debugger;
            Operations_ClearFilters();
            Quotations_ClearFilters();
            LoadView("/Home/Groups", "div-content", function () {
                FillGroups(" where ParentGroupID = 59 ", "RequestedServiceTab", function () {
                });
            });
            break;
        }

        case "RequestedServiceForm": {
            $.getScript(strServerURL + '/Scripts/InterServices/Transactions/InterServicesRequests.js?' + glbVersion, function () { InterServicesRequests_Initialize(); });
            break;
        }
        /*Inter-Services End*/

        default: {
            //swal("Sorry", "Please, contact your system administrator! this is LoadViews() in mainapp.master !", "warning");
            swal(strSorry, "This page is under development. This is LoadViews function.");
            break;
        }

    }
}
function SetglbCallingControlInOperation(tab){
    debugger;
    if (glbCallingControl == "OperationsEdit") {
        glbCallingControlInOperation = tab.id;
    } else {
        glbCallingControlInOperation = "";
    }
}
function LoadOperationsSubMenu(pIsAWB, pCallback) {
    //if (OVGen) always true isa
    if (!pIsAWB) {
        $("#ulOperationsSubMenu").html('<li class="active"><a id="hl-submenu-General" onclick="SetglbCallingControlInOperation(' + "General" +');" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-table icon"><b class="bg-primary"></b></i><span>' + TranslateString("General") + '</span></a></li>');
        if (OVPar) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Partners" onclick="OperationPartners_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "Partners" +');" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-users icon"><b class="bg-primary"></b></i><span>' + TranslateString("Partners") + '</span></a></li>');
        if (OVPac) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-ContainersAndPackages" onclick="OperationContainersAndPackages_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "ContainersAndPackages" +');" class="hl-submenu-item classHideForVehicle hide" href="javascript:void(0);"><i class="fa fa-archive icon"><b class="bg-primary"></b></i><span>' + TranslateString("Packages") + '</span></a></li>');
        if (OVVeh) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Vehicle" onclick="Vehicle_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "Vehicle" +');" class="hl-submenu-item classShowForVehicle hide" href="javascript:void(0);"><i class="fa fa-truck icon"><b class="bg-primary"></b></i><span>' + TranslateString("Vehicles") + '</span></a></li>');
        if (OVRou) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Routing" onclick="Routings_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "Routing" +');" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-arrows-alt icon"><b class="bg-primary"></b></i><span>' + TranslateString("Route&Serv.") + '</span></a></li>');
        if (OVInt) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-InterCompanyService" onclick="InterCompanyService_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "InterCompanyService" +');" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-random icon"><b class="bg-primary"></b></i><span>' + TranslateString("Req.Int.Serv.") + '</span></a></li>');
        if (OVPay) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Payables" onclick="Payables_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "Payables" +');" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-ticket icon"><b class="bg-primary"></b></i><span>' + TranslateString("Payables") + '</span></a></li>');
        if (OVRec) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Receivables" onclick="Receivables_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "Receivables" +');" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-money icon"><b class="bg-primary"></b></i><span>' + TranslateString("Receivables") + '</span></a></li>');
        if (OVDraftInv) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-DraftInvoice" onclick="Invoices_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "DraftInvoice" +');" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-dollar icon"><b class="bg-primary"></b></i><span>' + TranslateString("Draft Inv.") + '</span></a></li>');
        if (OVInv) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Invoices" onclick="Invoices_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "Invoices" +');" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-dollar icon"><b class="bg-primary"></b></i><span>' + TranslateString("Invoices") + '</span></a></li>');
        if (OVNot) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-AccNotes" onclick="AccNotes_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "AccNotes" +');" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-paperclip icon"><b class="bg-primary"></b></i><span>' + TranslateString("C/D Notes") + '</span></a></li>');
        if (OVPurInv) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-PurchaseInvoice" onclick="PurchaseInvoice_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "PurchaseInvoice" +');" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-file-text-o icon"><b class="bg-primary"></b></i><span id="spanFlexiLabel">Loading..</span></a></li>');
        if (OVDocIn) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-DocsIn" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-long-arrow-down icon"><b class="bg-primary"></b></i><span>' + TranslateString("Archiving") + '</span></a></li>');
        if (OVDoc) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-DocsOut" onclick="DocsOut_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "DocsOut" +');" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-long-arrow-up icon"><b class="bg-primary"></b></i><span>' + TranslateString("Docs Out") + '</span></a></li>');
        if (OVDelivery) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Delivery" onclick="Delivery_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "Delivery" +');" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-ticket icon"><b class="bg-primary"></b></i><span>' + TranslateString("DocumentsInfo") + '</span></a></li>');
        if (pDefaults.UnEditableCompanyName == "KDS" || pDefaults.UnEditableCompanyName == "NEW") {
            if (OVTra) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Tracking" class="hl-submenu-item" onclick="Tracking_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "Tracking" +');" href="javascript:void(0);"><i class="fa fa-list-ol icon"><b class="bg-primary"></b></i><span>' + TranslateString("Vessel Daily Postition") + '</span></a></li>');
            if (OVMas) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Master" class="hl-submenu-item hide" href="javascript:void(0);"><i class="fa fa-book icon"><b class="bg-primary"></b></i><span>' + TranslateString("Full Vessel") + '</span></a></li>');
            if (OVShi) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Shipments" onclick="Shipments_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "Shipments" +');" class="hl-submenu-item hide" href="javascript:void(0);"><i class="fa fa-link icon"><b class="bg-primary"></b></i><span>B/Ls</span></a></li>');
        }
        //else {
        //    if (OVTra) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Tracking" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-list-ol icon"><b class="bg-primary"></b></i><span>Tracking</span></a></li>');
        //    if ($("#cbIsAir").prop("checked")) {
        //        $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-BillsofLading" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-table icon"><b class="bg-primary"></b></i><span>B/Ls</span></a></li>');
        //    }
        //    else {
        //        if (OVMas) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Master" class="hl-submenu-item hide" href="javascript:void(0);"><i class="fa fa-book icon"><b class="bg-primary"></b></i><span>Master</span></a></li>');
        //        if (OVShi) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Shipments" class="hl-submenu-item hide" href="javascript:void(0);"><i class="fa fa-link icon"><b class="bg-primary"></b></i><span>Houses</span></a></li>');
        //    }
        //}
        else { //return the above to show BLs for all AirButNotAWB
            if (OVTra) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Tracking" onclick="Tracking_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "Tracking" +');" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-list-ol icon"><b class="bg-primary"></b></i><span>' + TranslateString("Tracking") + '</span></a></li>');
            if (OVMas) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Master" class="hl-submenu-item hide" href="javascript:void(0);"><i class="fa fa-book icon"><b class="bg-primary"></b></i><span>' + TranslateString("Master") + '</span></a></li>');
            if (OVShi) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-Shipments" onclick="Shipments_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "Shipments" +');" class="hl-submenu-item hide" href="javascript:void(0);"><i class="fa fa-link icon"><b class="bg-primary"></b></i><span>' + TranslateString("Houses") + '</span></a></li>');
        }
        if (OVACID) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-ACIDDetails" onclick="ACIDDetails_SubmenuTabClicked(); SetglbCallingControlInOperation(' + "ACIDDetails" + ');" class="hl-submenu-item hide" href="javascript:void(0);"><i class="fa fa-link icon"><b class="bg-primary"></b></i><span>' + TranslateString("ACIDDetails") + '</span></a></li>');
        if (OVNotif) $("#ulOperationsSubMenu").append('<li><a id="hl-submenu-OperationNotification" onclick="LocalEmails_LoadALLFromOperations();" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-comments-o icon"><b class="bg-primary"></b></i><span>' + TranslateString("Chat") + '</span></a></li>');
    }
    else { //if (!pIsAWB) {
        $("#ulOperationsSubMenu").html('<li class="active"><a id="hl-submenu-BillsofLading" class="hl-submenu-item" href="javascript:void(0);"><i class="fa fa-table icon"><b class="bg-primary"></b></i><span>B/Ls</span></a></li>');
    }
    $("#ulMainMenu").addClass("hide");
    $("#ulOperationsSubMenu").removeClass("hide");

    $("#ulOperationsSubMenu .hl-submenu-item").on("click"
        , function (event) {
            var calledStep = $(this).attr("id").split('-')[2];
            $(".steps").children().removeClass("active");
            $(".step-pane").removeClass("active");
            $("#" + calledStep).addClass("active");
            $("#steps" + calledStep).addClass("active");
        });
    $("#hl-menu-Quotations").parent().removeClass("active");//for the case of creating Operation from quotation then pressing BackToOperations then hl-menu-Quotations will be highlighted instead of hl-menu-Operations
    $("#hl-menu-Operations").parent().addClass("active");
    if (pCallback != null && pCallback != undefined)
        pCallback();
}
function UnLoadOperationsSubMenu() {
    $("#ulOperationsSubMenu").html('');
    //FillModules(function () {
    //    $(".hl-menu-item").on("click", function (event) { LoadViews($(this).attr("id").split('-')[2]); });
    //});
    $("#ulOperationsSubMenu").addClass("hide");
    $("#ulMainMenu").removeClass("hide");

    //$("#ulOperationsSubMenu .hl-submenu-item").on("click"
    //    , function (event) {
    //    });
}

function LoadView(pServiceFunctionName, pContentName, callback, callbackAddNew, callbackDelete, pIsAppend, pRoleID, pUserID) {
    debugger;
    $.ajax({
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pCutlureID: $("#hf_ChangeLanguage").val().trim() },
        contentType: "application/json; charset=utf-8",
        dataType: "html",
        success: function (data) {
            if (pIsAppend) //sherif: incase of calling a partial view with only modal called from different places
                $("#" + pContentName).append(data);
            else
                $("#" + pContentName).html(data);
            if (callback != null && callback != undefined) {
                callback();//sherif: loads countries.js or any.js  
            }
            // Bind Option Buttons
            if (!pIsAppend || pIsAppend == undefined || pIsAppend == null) //this condition coz Operations and Quotations calls many times equal
                GetPermissions(callbackAddNew, callbackDelete); //i need it here for when loading forms

            // Bind Apply Paging Button
            if (callback != null) //i added this condition to handle the case of attaching the btn-applypaging.onclick fn attached many times with multiple calls of LoadView() like in partners and quotations, so with this condition it attaches the btn-applypaging.onclick fn. only one time to for the main view
                $("#btn-applypaging").on("click", function () {
                    //sherif: I commented those lines and replaced with the last one to make pressing btn-applypaging always start from the first page
                    //var currentPageNo = $("#div-Pager").find(".active a").html();
                    //if (currentPageNo == null || currentPageNo == undefined)
                    //    currentPageNo = 1;
                    //LoadDataWithPaging(currentPageNo);
                    LoadDataWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", 1);
                });
            $("#btn-applypaging1").on("click", function () {
                //sherif: I commented those lines and replaced with the last one to make pressing btn-applypaging always start from the first page
                //var currentPageNo = $("#div-Pager").find(".active a").html();
                //if (currentPageNo == null || currentPageNo == undefined)
                //    currentPageNo = 1;
                //LoadDataWithPaging(currentPageNo);
                LoadDataWithPaging("div-Pager1", "select-page-size1", "spn-first-page-row1", "spn-last-page-row1", "spn-total-count1", "div-Text-Total1", 1);
            });
            SetDatepickerFormat();
            //FadePageCover(false);
            ReverseUIControls();
        }
    });
}


function SetDatepickerFormat() {
    debugger;
    $(".datepicker-input").datepicker(
        {
            //dateFormat: 'mm/dd/yy',
            dateFormat: 'dd/mm/yyyy',
            showStatus: true,
            showWeeks: true,
            highlightWeek: true,
            numberOfMonths: 1,
            autoclose: true,
            showAnim: "scale",
            showOptions: {
                origin: ["top", "right"]
            }
        });
    //sherif: to fix hiding of datepicker
    $(".datepicker-input").datepicker().on('changeDate'
        , function () {
            $(this).datepicker('hide');
            debugger;
            if (this.id == "txtInvoiceIssueDate")//used incase i am in the invoice modal and this condition is to make sure of that
                Invoices_SetDueDate(this.id, 'txtInvoiceDueDate', 'slInvoicePaymentTerms');
            else if (this.id == "txtEditInvoiceIssueDate") //used incase i am in the Edit Invoice modal and this condition is to make sure of that
                Invoices_SetDueDate(this.id, 'txtEditInvoiceDueDate', 'slEditInvoicePaymentTerms');
            else if (this.id.substring(0, 27) == "txtTblModalPayableIssueDate") {
                var _RowID = this.id.substring(27, 50);
                Payables_SetDueDate(this.id, 'txtTblModalPayableEntryDate' + _RowID, "slPayableSupplier" + _RowID);
            }
            else if (this.id == "txtOperationOpenDate") //used incase i am changing the operation open date from modal(new operation or shipment)
                Operations_SetCloseDate(this.id, "txtOperationCloseDate");
            else if (this.id.substring(0, 10) == "txtValidTo" || this.id.substring(0, 12) == "txtValidFrom") //used in pricing multi-save to mark the changed rows
                Pricing_SetIsRowChanged(this.id);
            else if (this.id == "txtGateOutDate" || this.id == "txtLoadingDate") //used in pricing multi-save to mark the changed rows
                ContainerTracking_GetDaysDifference();
            else if (this.id == "txtOperationOpenDateCCModule" || this.id == "txtETADateCCModule" || this.id == "txtOffloadingDateCCModule"
                || this.id == "txtBayanDateCCModule" || this.id == "txtDocDateCCModule" || this.id == "txtFeesPaymentDateCCModule")
                ConvertFromHijriDate(this.id);
            //else if (this.id == "txtOpenDate") //used incase i am changing the operation open date from edit
            //        Operations_SetCloseDate(this.id, "txtCloseDate");
        });
    $(".datepicker-input").datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });


}

function Payables_SetDueDate(pCallingControl, pControlToBeSet, pSlPaymentTermControl) {
    debugger;
    if (pDefaults.UnEditableCompanyName != "GBL") {
        if (isValidDate($("#" + pCallingControl).val().trim(), 1))
            $("#" + pControlToBeSet).val(
                Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControl).val()), ($("#" + pSlPaymentTermControl + " option:selected").attr("Days") == undefined ? 0 : $("#" + pSlPaymentTermControl + " option:selected").attr("Days"))));
        //EnableDisable DueDate according to Cash or not
        if ($("#" + pSlPaymentTermControl + " option:selected").text().toUpperCase() == "CASH")
            $("#" + pControlToBeSet).attr("disabled", "disabled");
        else
            $("#" + pControlToBeSet).removeAttr("disabled");
    }
}
function Payables_PayableSupplierChanged(pSupplierControlID, pSupplierInvoiceControl, pSupplierReceiptControl) { //pSupplierInvoiceControl is a control not ID so dont use #
    debugger;
    if ($("#" + pSupplierControlID).val() == "") {
        $("#" + pSupplierInvoiceControl).attr("disabled", "disabled");
        $("#" + pSupplierInvoiceControl).val("");
    }
    else {
        $("#" + pSupplierInvoiceControl).removeAttr("disabled");
        $("#" + pSupplierReceiptControl).removeAttr("disabled");
    }
}
//edit record when double clicking the row
function EditByDblClick(pModalID, pID, callback) { //pID : is the ID of the row
    jQuery("#" + pModalID).modal("show");
    if (callback != null)
        callback(pID);
}
//pUserID is used for QuotationsEdit also,....

function LoadWithPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pPageNumber, pPageSize, callback, pRoleID, pUserID) {
    FadePageCover(true);
    debugger
    if (pPageNumber <= 0)
        pPageNumber = 1;
    //sherif
    if (pPageSize <= 0)
        pPageSize = 10;
    if (pPageSize == null)
        pPageSize = 0;
    $.ajax({
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pSearchKey: ($("#txt-Search").val() == null ? "" : $("#txt-Search").val().trim()), pRoleID: (pRoleID == null ? EditedRoleID : pRoleID), pUserID: (pUserID == null ? EditedUserID : pUserID) },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $("#cb-CheckAll").prop('checked', false);

            //sherif : fix so when delete all last page, then get the previous
            if (data[1] == 0 && parseInt(pPageNumber) > 1)
                LoadWithPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, (parseInt(pPageNumber) - 1), pPageSize, callback);
            else {
                callback(JSON.parse(data[0]));
                InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNumber, data[1]);
                FadePageCover(false);
            }
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. This is LoadWithPaging in mainapp.master !", "");
            FadePageCover(false);
        }
    });
    //if (callbackForDelete != null)
    //    callbackForDelete();
}
function LoadWithPagingWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pPageNumber, pPageSize, callback) {
    FadePageCover(true);
    if (pPageNumber <= 0)
        pPageNumber = 1;
    //sherif
    if (pPageSize <= 0)
        pPageSize = 10;
    if (pPageSize == null)
        pPageSize = 0;
    $.ajax({
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pSearchKey: ($("#txt-Search").val() == null ? "" : $("#txt-Search").val().trim()) },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $("#cb-CheckAll").prop('checked', false);

            //sherif : fix so when delete all last page, then get the previous
            if (data[1] == 0 && parseInt(pPageNumber) > 1)
                LoadWithPagingWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, (parseInt(pPageNumber) - 1), pPageSize, callback);
            else {
                callback(data);
                InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNumber, data[1]);
                FadePageCover(false);
            }
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. This is LoadWithPaging in mainapp.master !", "");
            FadePageCover(false);
        }
    });
    //if (callbackForDelete != null)
    //    callbackForDelete();
}
//sherif: LoadWithPaging using where clause
//TODO: to be replaced in the whole application with fn. LoadWithPagingWithWhereClauseAndOrderBy
function LoadWithPagingWithWhereClause(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pWhereClause, pPageNumber, pPageSize, callback, pFadePageCover) {
    debugger;
    pFadePageCover = (pFadePageCover != undefined && pFadePageCover != null ? pFadePageCover : true);
    if (pFadePageCover)
        FadePageCover(true);
    if (pPageNumber <= 0)
        pPageNumber = 1;

    if (pPageSize <= 0)
        pPageSize = 10;

    $.ajax({//calls "/api/Countries/LoadWithPaging" or "/api/Regions/LoadWithPaging" or ......
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            $("#cb-CheckAll").prop('checked', false);
            if (data.length > 2)
                callback(data);
            else
                callback(JSON.parse(data[0]));
            InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNumber, data[1]);
            FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. This is LoadWithPagingWithWhereClause in mainapp.master !", "");
            FadePageCover(false);
        }
    });
}

//sherif: LoadOperationWithDetails using where clause
function LoadOperationWithDetails(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pWhereClause, pPageNumber, pPageSize, pOperationID, callback) {
    debugger;
    //FadePageCover(true);
    if (pPageNumber <= 0)
        pPageNumber = 1;

    if (pPageSize <= 0)
        pPageSize = 10;
    $.ajax({//calls "/api/Countries/LoadWithPaging" or "/api/Regions/LoadWithPaging" or ......
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause1: pWhereClause, pOperationID: pOperationID, pOperationFormID: constOperationsFormID },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            $("#cb-CheckAll").prop('checked', false);
            callback(JSON.parse(data[0])/*Operation(just 1)*/, JSON.parse(data[2])/*OperationPartners*/, JSON.parse(data[3])/*pOperationContainersAndPackages*/
                , JSON.parse(data[4])/*pRouting*/, JSON.parse(data[5])/*pPayables*/, JSON.parse(data[6])/*pReceivables*/, JSON.parse(data[7])/*pInvoices*/
                , JSON.parse(data[8])/*pDocsOut*/, JSON.parse(data[9])/*pMasterOperation*/, JSON.parse(data[10])/*pHouseOperations*/, JSON.parse(data[11])/*pMasterAndHouses*/
                , data[12]/*pIsOperationClosed*/, JSON.parse(data[13])/*pDocsInFileNames*/, data[14]/*pOperationStages*/, data[15]/*pBranches*/, data[16]/*pUsers*/
                , data[17]/*pIncoterms*/, data[18]/*pPOrC*/, data[19]/*pMoveTypes*/, data[20]/*pCommodities*/, data[21]/*pInvoiceTypes*/, JSON.parse(data[22])/*pAccNotes*/
                , JSON.parse(data[23])/*pTracking*/, data[24]/*pNetwork*/, JSON.parse(data[25])/*pPurchaseInvoice*/);
            InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNumber, data[1]);
            FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. This is LoadWithPagingWithWhereClause in mainapp.master !", "");
            FadePageCover(false);
        }
    });
}

//use in all cases instead of the above
//sherif: LoadWithPaging using where clause and order by
function LoadWithPagingWithWhereClauseAndOrderBy(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, callback) {
    debugger;
    FadePageCover(true);
    if (pPageNumber <= 0)
        pPageNumber = 1;

    if (pPageSize <= 0)
        pPageSize = 10;
    $.ajax({//calls "/api/Countries/LoadWithPaging" or "/api/Regions/LoadWithPaging" or ......
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            $("#cb-CheckAll").prop('checked', false);
            callback(data);
            InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNumber, data[1]);
            FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. This is LoadWithPagingWithWhereClauseAndOrderBy in mainapp.master !", "");
            FadePageCover(false);
        }
    });
}
function LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, callback, pCancelFadePageCover) {
    debugger;
    if (pCancelFadePageCover != true)
        FadePageCover(true);
    if (pPageNumber <= 0)
        pPageNumber = 1;
    //sherif
    if (pPageSize <= 0)
        pPageSize = 10;
    if (pPageSize == null)
        pPageSize = 0;
    $.ajax({//calls "/api/Countries/LoadWithPaging" or "/api/Regions/LoadWithPaging" or ......
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: pControllerParameters, //{ pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            $("#cb-CheckAll").prop('checked', false);

            //sherif : fix so when delete all last page, then get the previous
            if (data[1] == 0 && parseInt(pPageNumber) > 1) {
                //LoadWithPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, (parseInt(pPageNumber) - 1), pPageSize, callback);
                pControllerParameters.pPageNumber = 1;
                LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pServiceFunctionName, pWhereClause, pOrderBy, /*(parseInt(pPageNumber) - 1)*/1, pPageSize, pControllerParameters, callback);
            }
            else {
                callback(data);
                InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNumber, data[1]);
                FadePageCover(false);
            }
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. This is LoadWithPagingWithWhereClause in mainapp.master !", "");
            FadePageCover(false);
        }
    });
}

//sherif: LoadWithPaging using where clause
function LoadAll(pServiceFunctionName, pWhereClause, callback, pFadePageCover) {
    pFadePageCover = (pFadePageCover != undefined && pFadePageCover != null ? pFadePageCover : true);
    if (pFadePageCover)
        FadePageCover(true);
    $.ajax({//calls "/api/Countries/LoadWithPaging" or "/api/Regions/LoadWithPaging" or ......
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (pData) {
            debugger;
            $("#cb-CheckAll").prop('checked', false);
            callback(pData);
            //InitiPaging("div-Pager", pPageNumber, data[1]);
            FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. This is LoadAll in mainapp.master !", "");
            FadePageCover(false);
        }
    });
}
//sherif: used in case searching for specific ID and filling table in a modal
// pSearch Key here is 
function LoadWithPagingForModal(pServiceFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, callback) {
    FadePageCover(true);
    debugger;

    if (pPageNumber <= 0)
        pPageNumber = 1;

    if (pPageSize <= 0)
        pPageSize = 10;
    $.ajax({//calls "/api/Countries/LoadWithPaging" or "/api/Regions/LoadWithPaging" or ......
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $("#cb-CheckAll").prop('checked', false);
            callback(JSON.parse(data[0]));
            InitiPagingForModal("div-Pager-Modal", pWhereClause, pOrderBy, pPageNumber, data[1]); //sherif: i added for mod
            FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. This is LoadWithPagingForModal in mainapp.master !", "");
            FadePageCover(false);
        }
    });
}
// calling Server Function.
function InsertUpdateFunction(pValidateFormID, pFunctionName, pParametersWithValues, pSaveandAddNew, pModalID, callback) {
    debugger;
    if (ValidateForm(pValidateFormID, pModalID)) {
        FadePageCover(true);
        $.ajax({
            type: "GET",
            url: strServerURL + pFunctionName,
            data: pParametersWithValues,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () { },
            success: function (data) {
                debugger;
                if (data != undefined && data.length > 1) {
                    if (data[0] == true) {
                        if (callback != null && callback != undefined) {
                            if (data[1] != null && data[1] != undefined) //data[1] is the ID: for opening quotation or operation after saving a new one / or strMessageReturned
                                callback(data);
                        }

                        if (!pSaveandAddNew && pModalID != null) {
                            jQuery.noConflict();
                            (function ($) {
                                $('#' + pModalID).modal('hide');
                            })(jQuery);
                        }
                    }
                    else //data[0] = false
                        //swal(strSorry, strUniqueFailInsertUpdateMessage, "warning");
                        swal(strSorry, data[1]);
                }
                else {
                    if (data == true) {
                        if (callback != null && callback != undefined) {
                            callback();
                        }
                        if (!pSaveandAddNew && pModalID != null) {
                            jQuery.noConflict();
                            (function ($) {
                                $('#' + pModalID).modal('hide');
                            }
                            )(jQuery);
                        }
                    }
                    else //unique key violated
                        swal(strSorry, strUniqueFailInsertUpdateMessage);
                }
                FadePageCover(false);
            },
            error: function (jqXHR, exception) {
                FadePageCover(false);
                alert('Error when trying to call function [' + pFunctionName + ']. InsertUpdateFunction fn in mainapp.master');
            }
        });
    }
    else
        FadePageCover(false);
}




// calling Server Function.
function InsertUpdateFunctionWithTranslate(pValidateFormID, pFunctionName, pParametersWithValues, pSaveandAddNew, pModalID, callback) {
    debugger;
    if (ValidateForm(pValidateFormID, pModalID)) {
        FadePageCover(true);
        $.ajax({
            type: "GET",
            url: strServerURL + pFunctionName,
            data: pParametersWithValues,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () { },
            success: function (data) {
                debugger;
                if (data != undefined && data.length > 1) {
                    if (data[0] == true) {
                        if (callback != null && callback != undefined) {
                            if (data[1] != null && data[1] != undefined) //data[1] is the ID: for opening quotation or operation after saving a new one / or strMessageReturned
                                callback(data);
                        }

                        if (!pSaveandAddNew && pModalID != null) {
                            jQuery.noConflict();
                            (function ($) {
                                $('#' + pModalID).modal('hide');
                            })(jQuery);
                        }
                    }
                    else //data[0] = false
                        //swal(strSorry, strUniqueFailInsertUpdateMessage, "warning");
                        swal(strSorry, TranslateString(data[1]));
                }
                else {
                    if (data == true) {
                        if (callback != null && callback != undefined) {
                            callback();
                        }
                        if (!pSaveandAddNew && pModalID != null) {
                            jQuery.noConflict();
                            (function ($) {
                                $('#' + pModalID).modal('hide');
                            }
                            )(jQuery);
                        }
                    }
                    else //unique key violated
                        swal(strSorry, strUniqueFailInsertUpdateMessage);
                }
                FadePageCover(false);
            },
            error: function (jqXHR, exception) {
                FadePageCover(false);
                alert('Error when trying to call function [' + pFunctionName + ']. InsertUpdateFunction fn in mainapp.master');
            }
        });
    }
    else
        FadePageCover(false);
}








//sherif: InsertUpdate using Post not Get and ID is returned in data
function PostInsertUpdateFunction(pValidateFormID, pFunctionName, pParametersWithValues, pSaveandAddNew, pModalID, callback) {
    if (ValidateForm(pValidateFormID, pModalID)) {
        FadePageCover(true);
        $.ajax({
            type: "POST",
            url: strServerURL + pFunctionName,
            data: JSON.stringify(pParametersWithValues),
            dataType: "json",
            //beforeSend: function () { },
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                debugger;
                if (data[0] == true) {
                    if (callback != null && callback != undefined) {
                        callback(data); //data[1] is the record ID
                    }
                    if (!pSaveandAddNew && pModalID != null) {
                        jQuery.noConflict();
                        (function ($) {
                            $('#' + pModalID).modal('hide');
                        }
                        )(jQuery);
                    }
                }
                else if (parent.strBindTableRowsFunctionName == "OperationsManagement_BindTableRows") //unique key violated
                    swal(strSorry, data[3], "");
                else if (callback != null && callback != undefined)
                    callback(data);
                else
                    swal(strSorry, strUniqueFailInsertUpdateMessage, "warning");
                //}
                if (pModalID != "OperationsEditModal")
                    FadePageCover(false);
            },
            error: function (jqXHR, exception) {
                FadePageCover(false);
                alert('Error when trying to call function [' + pFunctionName + ']. PostInsertUpdateFunctionWithIDReturned fn in mainapp.master.js');
            }
        });
    }
    else
        FadePageCover(false);
}








//sherif: InsertList
function InsertSelectedCheckboxItems(pFunctionName, pParametersWithValues, pSaveandAddNew, pModalID, callback, callback1) {
    debugger;
    $.ajax({
        type: "GET",
        url: strServerURL + pFunctionName,
        data: pParametersWithValues,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;

            if (!pSaveandAddNew && pModalID != null) {
                jQuery.noConflict();
                (function ($) {
                    $('#' + pModalID).modal('hide');
                }
                )(jQuery);
            }
            else //to reload the checkboxes select list without closing the modal
                if (pSaveandAddNew && callback != null && callback != undefined)
                    callback();

            if (callback1 != null && callback1 != undefined)
                callback1(data);
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. this is InsertSelectedCheckboxItems() in mainapp.master !", "");
        }
    });
}
function InsertSelectedCheckboxItems_Post(pFunctionName, pParametersWithValues, pSaveandAddNew, pModalID, callback, callback1) {
    debugger;
    $.ajax({
        type: "POST",
        url: strServerURL + pFunctionName,
        data: JSON.stringify(pParametersWithValues),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function (data) {
            debugger;

            if (!pSaveandAddNew && pModalID != null) {
                jQuery.noConflict();
                (function ($) {
                    $('#' + pModalID).modal('hide');
                }
                )(jQuery);
            }
            else //to reload the checkboxes select list without closing the modal
                if (pSaveandAddNew && callback != null && callback != undefined)
                    callback();

            if (callback1 != null && callback1 != undefined)
                callback1(data);
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. this is InsertSelectedCheckboxItems() in mainapp.master !", "");
        }
    });
}
//sherif: to CallGETFunctionWithParameters
function CallGETFunctionWithParameters(pFunctionName, pParametersWithValues, callback, callback1, async/*Default true*/) {
    //FadePageCover(true);
    $.ajax({
        type: "GET",
        url: strServerURL + pFunctionName,
        data: pParametersWithValues,
        //contentType: "application/json; charset=utf-8",
        //dataType: "json",
        //contentType: "application/html; charset=utf-8",
        //dataType: "html",
        async: (async == null || async == undefined ? true : async),
        //crossDomain: true,
        beforeSend: function () {
            //$("body").addClass("loading");
            //FadePageCover(true);
        },
        success: function (data) {
            if (callback != null && callback != undefined) //the data here is bool(pRecordsExist) and used as a flag for no records in reports //for Generate_MAWBs then data is string(return empty string if OK and returns MAWBSuffix if exists)
                callback(data);
            if (callback1 != null && callback1 != undefined) //callback fn without parameters
                callback1(data);
            //$("body").removeClass("loading");
            //FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            debugger;
            FadePageCover(false);
            $("body").removeClass("loading");
            if (pDefaults.UnEditableCompanyName != "ELI") swal("Sorry", "Please, try again. CallGETFunctionWithParameters in mainapp.master.js", "");
        }
    });
    //FadePageCover(false);
}


async function CallGETFunctionWithParametersAsync(pFunctionName, pParametersWithValues, callback, callback1) {
    debugger;
    let searchParams = new URLSearchParams(pParametersWithValues);
    const url = pFunctionName + "?" + searchParams;
    const myInit = {
        method: 'Get'
    };

    const response = await fetch(url, myInit);

    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
    const pData = await response.json();
    if (callback != null) //the data here is bool(pRecordsExist) and used as a flag for no records in reports //for Generate_MAWBs then data is string(return empty string if OK and returns MAWBSuffix if exists)
        callback(pData);
    if (callback1 != null) //callback fn without parameters
        callback1(pData);
    FadePageCover(false)
    return pData;
}


function CallPOSTFunctionWithParameters(pFunctionName, pParametersWithValues, callback, callback1) {
    //FadePageCover(true);
    $.ajax({
        type: "POST",
        url: strServerURL + pFunctionName,
        //contentType: "application/json; charset=utf-8",
        data: JSON.stringify(pParametersWithValues),
        dataType: "json",
        //dataType: "html",
        //contentType: "application/html; charset=utf-8",
        contentType: "application/json; charset=utf-8",
        beforeSend: function () {
            //$("body").addClass("loading");
            //FadePageCover(true);
        },
        success: function (data) {
            if (callback != null && callback != undefined) //the data here is bool(pRecordsExist) and used as a flag for no records in reports //for Generate_MAWBs then data is string(return empty string if OK and returns MAWBSuffix if exists)
                callback(data);
            if (callback1 != null && callback1 != undefined) //callback fn without parameters
                callback1(data);
            //$("body").removeClass("loading");
            //FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            debugger;
            FadePageCover(false);
            $("body").removeClass("loading");
            swal("Sorry", "Please, try again. CallPOSTFunctionWithParameters in mainapp.master.js", "");
        }
    });
    //FadePageCover(false);
}


async function CallPOSTFunctionWithParametersAsync(pFunctionName, pParametersWithValues, callback, callback1) {
    debugger;

    const response = await fetch(/*strServerURL + */pFunctionName, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify(pParametersWithValues)
    });

    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
    const pData = await response.json();
    if (callback != null && callback != undefined) //the data here is bool(pRecordsExist) and used as a flag for no records in reports //for Generate_MAWBs then data is string(return empty string if OK and returns MAWBSuffix if exists)
        callback(pData);
    if (callback1 != null && callback1 != undefined) //callback fn without parameters
        callback1(pData);
}



//sherif: calling this fn is to set the timelocked to null in the DB to unlock the edited field in case of pressing close
//i commented coz i disabled locking
function UnlockFunction(pFunctionName, pParametersWithValues, pModalID, callback) {
    //debugger;
    //$.ajax({
    //    type: "GET",
    //    url: strServerURL + pFunctionName,
    //    data: pParametersWithValues,
    //    contentType: "application/json; charset=utf-8",
    //    dataType: "json",
    //    beforeSend: function () { },
    //    success: function (data) {
    //        if (data != undefined && data == true)
    //        {
    //            if (callback != null && callback != undefined)
    //            {
    //                callback();
    //                if (pModalID != null) {
    //                    jQuery.noConflict();
    //                    (function ($) {
    //                        $('#' + pModalID).modal('hide');
    //                    }
    //                    )(jQuery);
    //                }
    //            }
    //        }
    //    },
    //    error: function (jqXHR, exception) {
    //        //swal("","'Error when trying to call function ['" + pFunctionName + "']. UnlockFunction fn in mainapp.master'","error");
    //        alert('Error when trying to call function [' + pFunctionName + ']. UnlockFunction fn in mainapp.master');
    //    }
    //});
}

//Region Operations And Quotations////////////////////////////////////////////////////////////
//DirectionType : 1-DIRECT 2-HOUSE 3-MASTER
function GetBLType(pBLType) {
    if (pBLType == 1)
        return "DIRECT";
    if (pBLType == 2)
        return "HOUSE";
    if (pBLType == 3)
        return "MASTER";
}
//DirectionType : 1-Import 2-Export 3-Domestic
function GetDirectionType(pDirectionType) {
    if (pDirectionType == 1)
        return "IMPORT";
    if (pDirectionType == 2)
        return "EXPORT";
    if (pDirectionType == 3)
        return "DOMESTIC";
    if (pDirectionType == 4)
        return "CROSSBOOKING";
    if (pDirectionType == 5)
        return "REEXPORT";
}
//TransportType : 1-Ocean 2-Air 3-Inland
function GetTransportType(pTransportType) {
    if (pTransportType == OceanTransportType)
        return "OCEAN";
    if (pTransportType == AirTransportType)
        return "AIR";
    if (pTransportType == InlandTransportType)
        return "INLAND";
}
//ShipmentType : 1-FCL 2-LCL 3-FTL 4-LTL
function GetShipmentType(pGetShipmentType) {
    if (pGetShipmentType == constFCLShipmentType)
        return "FCL";
    else if (pGetShipmentType == constLCLShipmentType)
        return "LCL";
    else if (pGetShipmentType == constFTLShipmentType)
        return "FTL";
    else if (pGetShipmentType == constLTLShipmentType)
        return "LTL";
    else if (pGetShipmentType == constConsolidationShipmentType)
        return "Consol.";
    else if (pGetShipmentType == constFlexiShipmentType)
        return "FLEXI";
    else if (pGetShipmentType == constTankShipmentType)
        return "TANK";
    else if (pGetShipmentType == constVehicleShipmentType)
        return "VEHICLE";
    else if (pGetShipmentType == constBulkShipmentType)
        return "BULK";
    //incase of air then none of the above is returned
    return "";
}
//EOF Region Quotations////////////////////////////////////////////////////////

//Region Setting Icons/////////////////////////////////////////////////////////

//Set IconName according to Direction type choice
function DirectionType_SetIconNameAndStyle() {
    debugger;
    if ($("#cbIsImport").prop('checked')) {
        $("#hDirectionIconName").val(ImportIconName);
        $("#hDirectionIconStyle").val(strImportIconStyleClassName);
        ShowHideClientRequired();
    }
    if ($("#cbIsExport").prop('checked')) {
        $("#hDirectionIconName").val(ExportIconName);
        $("#hDirectionIconStyle").val(strExportIconStyleClassName);
        ShowHideClientRequired();
    }
    if ($("#cbIsDomestic").prop('checked')) {
        $("#hDirectionIconName").val(DomesticIconName);
        $("#hDirectionIconStyle").val(strDomesticIconStyleClassName);
        ShowHideClientRequired();
    }
    if ($("#cbIsCrossBooking").prop('checked')) {
        $("#hDirectionIconName").val(CrossbookingIconName);
        $("#hDirectionIconStyle").val(strCrossbookingIconStyleClassName);
        ShowHideClientRequired();
    }
    if ($("#cbIsReExport").prop('checked')) {
        $("#hDirectionIconName").val(ReExportIconName);
        $("#hDirectionIconStyle").val(strReExportIconStyleClassName);
        ShowHideClientRequired();
    }
}
//to handle the case of Master Operation by showing Agent instead of Shipper and Consignee
//incase of Quotation $("#cbIsMaster").prop("checked") will be = undefined so it will work correctly in the else case
function ShowHideClientRequired() {
    if ($("#cbIsMaster").prop("checked")) { //Master
        //$("#divShipper").addClass("hide");
        $("#slShippers").attr("data-required", "false");
        //$("#divConsignee").addClass("hide");
        $("#slConsignees").attr("data-required", "false");
        $("#divAgent").removeClass("hide");
        $("#slAgents").attr("data-required", "true");
    }
    else { //House or Direct
        //$("#divAgent").addClass("hide");
        $("#slAgents").attr("data-required", "false");
        if ($("#cbIsImport").prop('checked')) { //Import i.e. Consignee
            //$("#divShipper").addClass("hide");
            $("#slShippers").attr("data-required", "false");
            $("#divConsignee").removeClass("hide");
            $("#slConsignees").attr("data-required", "true");
        }
        else { //Export or Domestic i.e. Shipper
            //$("#divConsignee").addClass("hide");
            $("#slConsignees").attr("data-required", "false");
            $("#divShipper").removeClass("hide");
            $("#slShippers").attr("data-required", "true");
        }
    }
}

//Set IconName according to B/L Type choice
function BLType_SetIconNameAndStyle() {
    debugger;
    if ($("#cbIsDirect").prop('checked')) {
        $("#hBLTypeIconName").val(DirectIconName);
        $("#hBLTypeIconStyle").val(strDirectIconStyleClassName);
    }
    if ($("#cbIsHouse").prop('checked')) {
        $("#hBLTypeIconName").val(HouseIconName);
        $("#hBLTypeIconStyle").val(strHouseIconStyleClassName);
    }
    if ($("#cbIsMaster").prop('checked')) {
        $("#hBLTypeIconName").val(MasterIconName);
        $("#hBLTypeIconStyle").val(strMasterIconStyleClassName);
    }
    //to ShowHide Consolidation Option
    Operations_ShipmentTypeChanged();
}

//Set IconName according to transportation type choice
function TransportType_SetIconNameAndStyle() {
    debugger;
    if ($("#cbIsOcean").prop('checked')) {
        $("#hTransportIconName").val(OceanIconName);
        $("#hTransportIconStyle").val(strOceanIconStyleClassName);
        //show section ShipmentType (FCL,LCL)
        $("#secShipmentType").removeClass("hide");
        $("#divOceanType").removeClass("hide");
        $("#divInlandType").addClass("hide");
        //set FCL as default
        $("#cbIsFCL").prop('checked', true);
    }
    if ($("#cbIsAir").prop('checked')) {
        $("#hTransportIconName").val(AirIconName);
        $("#hTransportIconStyle").val(strAirIconStyleClassName);
        //hide section ShipmentType (FCL,LCL,FTL,LTL)
        $("#secShipmentType").addClass("hide");
        //uncheck all ShipmentTypes
        $('input[name=cbShipmentType]').prop('checked', false);
    }
    if ($("#cbIsInland").prop('checked')) {
        $("#hTransportIconName").val(InlandIconName);
        $("#hTransportIconStyle").val(strInlandIconStyleClassName);
        //show section ShipmentType (FTL,LTL)
        $("#secShipmentType").removeClass("hide");
        $("#divOceanType").addClass("hide");
        $("#divInlandType").removeClass("hide");
        //set FTL as default
        $("#cbIsFTL").prop('checked', true);
    }
}


//EOF Region Setting Icons/////////////////////////////////////////////////////////

function DeleteListFunction(pFunctionName, pParametersWithValues, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pFunctionName,
        data: pParametersWithValues,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            callback();

            if (!data)//sherif: deletion is not completed for all rows because of foreign key 
            {
                swal(strSorry, "Some or all of the selected records were not deleted because of dependencies existance.", "warning");
                showDeleteFailMessage = true;
            }

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. this is DeleteListFunction() in mainapp.master !", "");
            FadePageCover(false);
        }
    });
}

//to fill select list showing name
function GetListWithName(pID, pStrFnName, pStrFirstRow, pSlName, callback) {
    debugger;
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pOrderBy: " Name " },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Name + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            debugger;
            swal("Sorry", "Please, try again. GetListWithName in mainapp.master.js", "");
        }
    });
}
//to fill select list showing code
function GetListWithCode(pID, pStrFnName, pStrFirstRow, pSlName, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pOrderBy: " Code " },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithCode in mainapp.master.js", "");
        }
    });
}
//to fill select list showing Name and using whereclause
function GetListWithNameAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    debugger;
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            ClearAllOptions(pSlName);
            var option = "";
            if (pStrFirstRow != "" && pStrFirstRow != null)
                option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Name + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            debugger;
            swal("Sorry", "Please, try again. GetListWithName in mainapp.master.js", "");
        }
    });
}


function GetListWithNameAndWhereClauseWithMultiAttrs(pID, AttrItemNames, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            if (pStrFirstRow != "" && pStrFirstRow != null)
                option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                selectAttrs = "";
                $(AttrItemNames.split(",")).each(function (attrindex, attr) {
                    // element == this
                    selectAttrs += ' ' + attr + ' = "' + item[attr] + '" ';
                    if (attrindex == AttrItemNames.split(",").length - 1) {
                        if (pID != null && pID != undefined) //in case of editing
                            if (pID == item.ID)
                                option += '<option ' + selectAttrs + ' value="' + item.ID + '" selected >' + item.Name + '</option>';
                            else
                                option += '<option ' + selectAttrs + ' value="' + item.ID + '">' + item.Name + '</option>';
                        else
                            option += '<option ' + selectAttrs + ' value="' + item.ID + '">' + item.Name + '</option>';
                    }
                });

            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithName in mainapp.master.js", "");
        }
    });
}

//to fill select list showing code and using whereclause
function GetListWithCodeAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            if (pStrFirstRow != "" && pStrFirstRow != null)
                option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithCode in mainapp.master.js", "");
        }
    });
}
function GetListWithCodeAndWhereClauseWithMultiAttrs(pID, AttrItemNames, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            if (pStrFirstRow != "" && pStrFirstRow != null)
                option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                selectAttrs = "";
                $(AttrItemNames.split(",")).each(function (attrindex, attr) {
                    // element == this
                    selectAttrs += ' ' + attr + ' = "' + item[attr] + '" ';
                    if (attrindex == AttrItemNames.split(",").length - 1) {
                        if (pID != null && pID != undefined) //in case of editing
                            if (pID == item.ID)
                                option += '<option ' + selectAttrs + ' value="' + item.ID + '" selected >' + item.Code + '</option>';
                            else
                                option += '<option ' + selectAttrs + ' value="' + item.ID + '">' + item.Code + '</option>';
                        else
                            option += '<option ' + selectAttrs + ' value="' + item.ID + '">' + item.Code + '</option>';
                    }
                });

            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithCode in mainapp.master.js", "");
        }
    });
}
function GetListWithCertificateNumberAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName, pControllerParameters, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            if (pStrFirstRow != "" && pStrFirstRow != null)
                option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.CertificateNumber + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.CertificateNumber + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.CertificateNumber + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithCertificateNumberAndWhereClause in mainapp.master.js", "");
        }
    });
}
function GetListCurrencyWithCodeAndExchangeRateAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            //option = '<option value="0" MasterDataExchangeRate="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '">' + item.Code + '</option>';
                else
                    if ($("#hDefaultCurrencyID").val() == item.ID)
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithCode in mainapp.master.js", "");
        }
    });
}
function GetListCurrencyWithCodeAndExchangeRateAttr_ERP(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClauseCurrencyDetails, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClauseCurrencyDetails: pWhereClauseCurrencyDetails },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            //option = '<option value="0" MasterDataExchangeRate="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" ExchangeRate="' + item.ExchangeRate + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" ExchangeRate="' + item.ExchangeRate + '">' + item.Code + '</option>';
                else
                    if ($("#hDefaultCurrencyID").val() == item.ID)
                        option += '<option value="' + item.ID + '" ExchangeRate="1" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" ExchangeRate="' + item.ExchangeRate + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            FadePageCover(false);
            swal("Sorry", "Please, try again. GetListCurrencyWithCodeAndExchangeRateAttr_ERP in mainapp.master.js", "");
        }
    });
}
//to fill select list Years
function GetListYears(pID, pStrFirstRow, pSlName, pWhereClause, callback, pEndYear) {
    ClearAllOptions(pSlName);
    var TodaysDate = new Date();
    var CurrentYear = 0;
    if (pEndYear == null || pEndYear == undefined)
        CurrentYear = parseInt(TodaysDate.getUTCFullYear());
    else
        CurrentYear = pEndYear
    var option = "";
    for (i = 0; i < 50; i++)
        if (pID != null && pID != undefined && pID == (CurrentYear - i))
            option += '<option value="' + (CurrentYear - i) + '" selected>' + (CurrentYear - i) + '</option>';
        else
            option += '<option value="' + (CurrentYear - i) + '">' + (CurrentYear - i) + '</option>';
    $("#" + pSlName).append(option);

    if (callback != null && callback != undefined)
        callback();

}
function GetListTaxTypeWithNameAndPercAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ClearAllOptions(pSlName);
            if (pStrFirstRow != null && pStrFirstRow != undefined)
                var option = '<option value="" CurrentPercentage="0">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" CurrentPercentage="' + item.CurrentPercentage + '" IsDiscount=' + item.IsDiscount + ' selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '" CurrentPercentage="' + item.CurrentPercentage + '" IsDiscount=' + item.IsDiscount + '>' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" CurrentPercentage="' + item.CurrentPercentage + '" IsDiscount=' + item.IsDiscount + '>' + item.Name + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithCode in mainapp.master.js", "");
        }
    });
}
//to fill select list showing code and using whereclause and getting Cur Exchange Rate as an attr
function GetListPaymentTermWithCodeAndDaysAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="0" Days="0">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" Days="' + item.Days + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" Days="' + item.Days + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" Days="' + item.Days + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithCode in mainapp.master.js", "");
        }
    });
}
//to fill select list showing Name and using whereclause and adding Prefix attribute
function GetListWithNameAndPrefixAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" Prefix="' + item.Prefix + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '" Prefix="' + item.Prefix + '">' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" Prefix="' + item.Prefix + '">' + item.Name + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithName in mainapp.master.js", "");
        }
    });
}
function GetListWithCodeAndOperationPartnerIDAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" OperationPartnerID="' + item.OperationPartnerID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" OperationPartnerID="' + item.OperationPartnerID + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" OperationPartnerID="' + item.OperationPartnerID + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithName in mainapp.master.js", "");
        }
    });
}
//to fill list of operations with code, house no.
function GetListWithOpCodeAndHouseNoAndClientEmailAttr(pID, pStrFnName, pStrFirstRow, pSlName, pControllerParameters, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        //data: { pWhereClause: pWhereClause },
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            if (pStrFirstRow != "" && pStrFirstRow != null)
                option = '<option value="">' + pStrFirstRow + '</option>';
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID == item.ID)
                    //option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '" selected >' + item.Code + (item.RepBLTypeShown == 'MASTER' ? ('(MBL:' + (item.MasterBL == 0 ? "'N/A'" : item.MasterBL) + ')') : ('(House:' + (item.HouseNumber == 0 ? "'N/A'" : item.HouseNumber) + ')')) + '</option>';
                    option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '" selected >' + item.EffectiveOperationCode + (item.BLType != 2 ? ('(MBL:' + (item.MasterBL == 0 ? "" : item.MasterBL) + ')') : ('(HBL:' + (item.HouseNumber == 0 ? "" : item.HouseNumber) + ')')) + '</option>';
                else
                    //option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '">' + item.Code + (item.RepBLTypeShown == 'MASTER' ? ('(MBL:' + (item.MasterBL == 0 ? "'N/A'" : item.MasterBL) + ')') : ('(House:' + (item.HouseNumber == 0 ? "'N/A'" : item.HouseNumber) + ')')) + '</option>';
                    option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '">' + item.EffectiveOperationCode + (item.BLType != 2 ? ('(MBL:' + (item.MasterBL == 0 ? "" : item.MasterBL) + ')') : ('(HBL:' + (item.HouseNumber == 0 ? "" : item.HouseNumber) + ')')) + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithCode in mainapp.master.js", "");
        }
    });
}
//to fill select list showing Code and Name and using whereclause
function GetListWithCodeAndNameAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + ($("#cbIsAir").prop("checked") ? (item.Code + ": " + item.Name) : (item.Name + ": " + item.Code)) + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + ($("#cbIsAir").prop("checked") ? (item.Code + ": " + item.Name) : (item.Name + ": " + item.Code)) + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + ($("#cbIsAir").prop("checked") ? (item.Code + ": " + item.Name) : (item.Name + ": " + item.Code)) + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithName in mainapp.master.js", "");
        }
    });
}
//to fill select list showing Code and Name and using whereclause
function GetListOperationPartnersWithPartnerTypeIDAndPartnerIDAttrAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = "";
            if (pStrFirstRow != null)
                option += '<option value="" PartnerTypeID="0" PartnerID="0" PaymentTermID="0" ClientEmailNotContact="0" Email="0" Days=0>' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value=' + item.ID + ' Days=' + item.PaymentTermDays + ' ClientEmailNotContact="' + item.ClientEmailNotContact + '"' + ' Email="' + item.Email + '"' + ' PartnerTypeID = ' + item.PartnerTypeID + ' PartnerID = ' + item.PartnerID + ' PaymentTermID = ' + item.PaymentTermID + ' selected >' + item.Code + ": " + item.Name + '</option>';
                    else
                        option += '<option value=' + item.ID + ' Days=' + item.PaymentTermDays + ' ClientEmailNotContact="' + item.ClientEmailNotContact + '"' + ' Email="' + item.Email + '"' + ' PartnerTypeID = ' + item.PartnerTypeID + ' PartnerID = ' + item.PartnerID + ' PaymentTermID = ' + item.PaymentTermID + '>' + item.Code + ": " + item.Name + '</option>';
                else
                    option += '<option value=' + item.ID + ' Days=' + item.PaymentTermDays + ' ClientEmailNotContact="' + item.ClientEmailNotContact + '"' + ' Email="' + item.Email + '"' + ' PartnerTypeID = ' + item.PartnerTypeID + ' PartnerID = ' + item.PartnerID + '     PaymentTermID = ' + item.PaymentTermID + '>' + item.Code + ": " + item.Name + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithName in mainapp.master.js", "");
            FadePageCover(false);
        }
    });
}
//to fill select list showing code and using whereclause and PartnerType attr
function GetListWithOperationPartnerTypesCodeAndWhereClauseAndPartnerTypeAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '">' + item.Code + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithCode in mainapp.master.js", "");
        }
    });
}
//Fill Sites from Supplier
function FillSupplierSites(pID, pPartnerTypeControlID, pPartnerControlID, pSiteControlID) {
    debugger;
    $("#" + pSiteControlID).html("<option value=''><--Select--></option>");



    if (pDefaults.UnEditableCompanyName == "GBL" && (
        $('#' + pPartnerTypeControlID + ' option:selected').attr("partnertypeid") == constSupplierPartnerTypeID)
    ) {

        var SupplierID = $('#' + pPartnerControlID + ' option:selected').attr("partnerid") == undefined ? $('#' + pPartnerControlID + ' option:selected').val() : $('#' + pPartnerControlID + ' option:selected').attr("partnerid");

        var pWhereClause = "WHERE SupplierID= " + SupplierID;
        FadePageCover(true);
        CallGETFunctionWithParameters("/api/Suppliers/LoadSupplierSites"
            , { pWhereClause: pWhereClause }
            , function (pData) {
                FillListFromObject(pID, 2, TranslateString("SelectFromMenu"), pSiteControlID, pData[0], null);
            }
            , null);
        FadePageCover(false);
    }
}
//to fill select list showing code and using whereclause and adding quantity attribute
function GetListWithContainerTypeCodeAndQuantityAttr(pID, pStrFnName, pStrFirstRow, pSlName, pControllerParameters, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                debugger;
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ContainerTypeID)
                        option += '<option value="' + item.ContainerTypeID + '" Quantity="' + item.Quantity + '" selected >' + item.ContainerTypeCode + '</option>';
                    else
                        option += '<option value="' + item.ContainerTypeID + '" Quantity="' + item.Quantity + '">' + item.ContainerTypeCode + '</option>';
                else
                    option += '<option value="' + item.ContainerTypeID + '" Quantity="' + item.Quantity + '">' + item.ContainerTypeCode + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithCode in mainapp.master.js", "");
        }
    });
}
//to fill select list showing Name and using whereclause and adding quantity attribute
function GetListWithPackageTypeNameAndQuantityAttr(pID, pStrFnName, pStrFirstRow, pSlName, pControllerParameters, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.PackageTypeID)
                        option += '<option value="' + item.PackageTypeID + '" Quantity="' + item.Quantity + '" selected >' + item.PackageTypeName + '</option>';
                    else
                        option += '<option value="' + item.PackageTypeID + '" Quantity="' + item.Quantity + '">' + item.PackageTypeName + '</option>';
                else
                    option += '<option value="' + item.PackageTypeID + '" Quantity="' + item.Quantity + '">' + item.PackageTypeName + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithName in mainapp.master.js", "");
        }
    });
}
//to fill select list showing ContainerTypeCode and ContainerNumber and using whereclause
function GetListWithContainerTypeCodeAndContainerNumberAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName, pControllerParameters, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.ContainerTypeCode + (item.ContainerNumber == 0 ? "" : " (" + item.ContainerNumber + ")") + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.ContainerTypeCode + (item.ContainerNumber == 0 ? "" : " (" + item.ContainerNumber + ")") + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.ContainerTypeCode + (item.ContainerNumber == 0 ? "" : " (" + item.ContainerNumber + ")") + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithName in mainapp.master.js", "");
        }
    });
}
//to fill Addresses select list holding multiple attributes
function GetListAddressesWithMultipleAttr(pID, pStrFnName, pStrFirstRow, pSlName, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            ClearAllOptions(pSlName);
            var option = '<option value="0">' + pStrFirstRow + '</option>';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                debugger;
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" CountryName="' + item.CountryName + '" CityName="' + item.CityName + '" StreetLine1="' + item.StreetLine1 + '" StreetLine2="' + item.StreetLine2 + '" selected >' + item.AddressType + '</option>';
                    else
                        option += '<option value="' + item.ID + '" CountryName="' + item.CountryName + '" CityName="' + item.CityName + '" StreetLine1="' + item.StreetLine1 + '" StreetLine2="' + item.StreetLine2 + '">' + item.AddressType + '</option>';
                else
                    option += '<option value="' + item.ID + '" CountryName="' + item.CountryName + '" CityName="' + item.CityName + '" StreetLine1="' + item.StreetLine1 + '" StreetLine2="' + item.StreetLine2 + '">' + item.AddressType + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            FadePageCover(false);
            swal("Sorry", "Please, try again. GetListWithCode in mainapp.master.js", "");
        }
    });
}
function GetListMAWBStockWithMAWBSuffixAttr(pID, pStrFnName, pStrFirstRow, pSlName, SlctItem, pWhereClause, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            debugger;
            ClearAllOptions(pSlName);
            var option = '';
            if (SlctItem != 'auto' || data == "[]") {
                option = '<option value="0">' + pStrFirstRow + '</option>';

            }

            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {


                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.MAWBSuffix + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.MAWBSuffix + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.MAWBSuffix + '</option>';
            });

            $("#" + pSlName).append(option);

            if (callback != null && callback != undefined)
                callback();

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListWithName in mainapp.master.js", "");
        }
    });
}
function GetListPortsForCountry(pCountryControlID, pPortControlID, pPortControlID2) {
    debugger;
    $("#" + pPortControlID).html("<option value=''><--Select--></option>");
    $("#" + pPortControlID2).html("<option value=''><--Select--></option>");
    if ($("#" + pCountryControlID).val() != "" && $("#" + pCountryControlID).val() != 0) {
        FadePageCover(true);
        CallGETFunctionWithParameters("/api/Ports/LoadAllForCombo", { pWhereClauseForCombo: "WHERE CountryID=" + $("#" + pCountryControlID).val() + " ORDER BY Name" }
            , function (pData) {
                FillListFromObject(null, 4, "<--Select-->", pPortControlID, pData[0], null);
                FillListFromObject(null, 4, "<--Select-->", pPortControlID2, pData[0], null);
                FadePageCover(false);
            }
            , null)
    }
}
//used when a dropdown options list depends on another one
function FilterListByAnotherListID(pID, pStrFnName, pStrFirstRow, pSlName, pFilteringSlName, pFilteringColumnName) {
    debugger;
    var pFilterColumnValue = $("#" + pFilteringSlName).val() == "" ? 0 : $("#" + pFilteringSlName).val();
    GetListWithCodeAndNameAndWhereClause(pID, pStrFnName, pStrFirstRow, pSlName
        , "WHERE " + pFilteringColumnName + "=" + pFilterColumnValue
        , null);
}
//used to fill the select list in case i have the data(Already got from the controller)
//pCodeOrName: 1-Code, 2-Name, 3-CurrencyWithAttrs(ExchangeRate), 4-NameAndCode, 5-Partners w PartnerTypeID, 6-PartnerBalanceCur, 7-BankAccount, 8-Template, 9-CodeAndName
//10-PricingSettings, 11-ContainerTypeCode & ContainerNumber 12-OperationPartnerTypes 13-OperationWithBLNos
//14-OperationsWithHouses, 15-OperationPartners,16-PortsWithCodeAndCountryAttr,17-MAWBSuffix,18-MoveTypes
//,19-Operations,20-QRWithData
function FillListFromObject(pID, pCodeOrName, pStrFirstRow, pSlName, pData, callback) {
    ClearAllOptions(pSlName);
    debugger;
    var option = "";
    if (pStrFirstRow != "" && pStrFirstRow != null)
        option = '<option value="">' + pStrFirstRow + '</option>';
    // Bind Data
    switch (pCodeOrName) {
        case 1: { //Code
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Code + '</option>';
            });
            break;
        }
        case 2: { //Name
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Name + '</option>';
            });
            break;
        }
        case 3: {  //CurrencyWithAttrs(ExchangeRate)
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '">' + item.Code + '</option>';
                else
                    if ($("#hDefaultCurrencyID").val() == item.ID)
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" MasterDataExchangeRate="' + item.CurrentExchangeRate + '">' + item.Code + '</option>';
            });
            break;
        }
        case 4: {  //NameAndCode
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Name + ": " + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Name + ": " + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Name + ": " + item.Code + '</option>';
            });
            break;
        }
        case 5: {  //Partners
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '">' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '">' + item.Name + '</option>';
            });
            break;
        }
        case 6: { //PartnerBalanceCur
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.CurrencyID + '" AvailableBalance=' + item.AvailableBalance + '" selected >' + item.CurrencyCode + '</option>';
                    else
                        option += '<option value="' + item.CurrencyID + '" AvailableBalance=' + item.AvailableBalance + '">' + item.CurrencyCode + '</option>';
                else
                    if ($("#hDefaultCurrencyID").val() == item.ID)
                        option += '<option value="' + item.CurrencyID + '" AvailableBalance=' + item.AvailableBalance + '" selected >' + item.CurrencyCode + '</option>';
                    else
                        option += '<option value="' + item.CurrencyID + '" AvailableBalance=' + item.AvailableBalance + '">' + item.CurrencyCode + '</option>';
            });
            break;
        }
        case 7: { //BankAccount
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" AccountNumber=' + item.AccountNumber + ' CurrencyID=' + item.DefaultCurrencyID + ' selected >' + item.Name + "/" + item.CurrencyCode + ": " + item.AccountNumber + '</option>';
                    else
                        option += '<option value="' + item.ID + '" AccountNumber=' + item.AccountNumber + ' CurrencyID=' + item.DefaultCurrencyID + '>' + item.Name + "/" + item.CurrencyCode + ": " + item.AccountNumber + '</option>';
                else
                    option += '<option value="' + item.ID + '" AccountNumber=' + item.AccountNumber + ' CurrencyID=' + item.DefaultCurrencyID + '>' + item.Name + "/" + item.CurrencyCode + ": " + item.AccountNumber + '</option>';
            });
            break;
        }
        case 8: { //Template
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" Subject="' + item.Subject + '" TermsAndConditions="' + item.TermsAndConditions + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '" Subject="' + item.Subject + '" TermsAndConditions="' + item.TermsAndConditions + '">' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" Subject="' + item.Subject + '" TermsAndConditions="' + item.TermsAndConditions + '">' + item.Name + '</option>';
            });
            break;
        }
        case 9: { //CodeAndName
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Code + ": " + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Code + ": " + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Code + ": " + item.Name + '</option>';
            });
            break;
        }
        case 10: { //PricingSettings
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ChargeTypeID + '" selected >' /*+ item.Code + ": " */ + item.ChargeTypeName + '</option>';
                    else
                        option += '<option value="' + item.ChargeTypeID + '">' /*+ item.Code + ": " */ + item.ChargeTypeName + '</option>';
                else
                    option += '<option value="' + item.ChargeTypeID + '">' /*+ item.Code + ": " */ + item.ChargeTypeName + '</option>';
            });
            break;
        }
        case 11: { //ContainerTypeCode and ContainerNumber 
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.ContainerTypeCode + ": " + item.ContainerNumber + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.ContainerTypeCode + ": " + item.ContainerNumber + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.ContainerTypeCode + ": " + item.ContainerNumber + '</option>';
            });
            break;
        }
        case 12: { //OperationPartnerTypes
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '">' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" PartnerTypeID="' + item.PartnerTypeID + '">' + item.Code + '</option>';
            });
            break;
        }
        case 13: { //OperationWithBLNos
            $.each(JSON.parse(pData), function (i, item) {
                if ($("#hOperationID").val() == item.ID)
                    option += '<option value="' + item.ID + '" selected >' + item.EffectiveOperationCode + (item.BLType != 2 ? ('(MBL:' + (item.MasterBL == 0 ? "" : item.MasterBL) + ')') : ('(HBL:' + (item.HouseNumber == 0 ? "" : item.HouseNumber) + ')')) + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.EffectiveOperationCode + (item.BLType != 2 ? ('(MBL:' + (item.MasterBL == 0 ? "" : item.MasterBL) + ')') : ('(HBL:' + (item.HouseNumber == 0 ? "" : item.HouseNumber) + ')')) + '</option>';
            });
            break;
        }
        case 14: { //OperationsWithHouses
            $.each(JSON.parse(pData), function (i, item) {
                if (pID == item.ID)
                    //option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '" selected >' + item.Code + (item.RepBLTypeShown == 'MASTER' ? ('(MBL:' + (item.MasterBL == 0 ? "'N/A'" : item.MasterBL) + ')') : ('(House:' + (item.HouseNumber == 0 ? "'N/A'" : item.HouseNumber) + ')')) + '</option>';
                    option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '" selected >' + item.EffectiveOperationCode + (item.BLType != 2 ? ('(MBL:' + (item.MasterBL == 0 ? "" : item.MasterBL) + ')') : ('(HBL:' + (item.HouseNumber == 0 ? "" : item.HouseNumber) + ')')) + '</option>';
                else
                    //option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '">' + item.Code + (item.RepBLTypeShown == 'MASTER' ? ('(MBL:' + (item.MasterBL == 0 ? "'N/A'" : item.MasterBL) + ')') : ('(House:' + (item.HouseNumber == 0 ? "'N/A'" : item.HouseNumber) + ')')) + '</option>';
                    option += '<option value="' + item.ID + '" OperationCode="' + item.Code + '" HouseNumber="' + item.HouseNumber + '" ClientEmail="' + (item.ClientEmail == 0 ? "" : item.ClientEmail) + '">' + item.EffectiveOperationCode + (item.BLType != 2 ? ('(MBL:' + (item.MasterBL == 0 ? "" : item.MasterBL) + ')') : ('(HBL:' + (item.HouseNumber == 0 ? "" : item.HouseNumber) + ')')) + '</option>';
            });
            break;
        }
        case 15: { //OperationPartners
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '"' + ' PartnerTypeID = "' + item.PartnerTypeID + '"' + ' PartnerID = "' + item.PartnerID + '" PaymentTermID = "' + item.PaymentTermID + '" selected >' + item.Code + ": " + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '"' + ' PartnerTypeID = "' + item.PartnerTypeID + '"' + ' PartnerID = "' + item.PartnerID + '" PaymentTermID = "' + item.PaymentTermID + '">' + item.Code + ": " + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '"' + ' PartnerTypeID = "' + item.PartnerTypeID + '"' + ' PartnerID = "' + item.PartnerID + '"     PaymentTermID = "' + item.PaymentTermID + '">' + item.Code + ": " + item.Name + '</option>';
            });
            break;
        }
        case 16: { //16-PortsWithCodeAndCountryAttr
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" CountryID="' + item.CountryID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" CountryID="' + item.CountryID + '">' + item.Code + '</option>';
                else
                    if ($("#hDefaultCurrencyID").val() == item.ID)
                        option += '<option value="' + item.ID + '" CountryID="' + item.CountryID + '" selected >' + item.Code + '</option>';
                    else
                        option += '<option value="' + item.ID + '" CountryID="' + item.CountryID + '">' + item.Code + '</option>';
            });
            break;
        }
        case 17: { //MAWBSuffix
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.MAWBSuffix + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.MAWBSuffix + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.MAWBSuffix + '</option>';
            });
            break;
        }
        case 18: { //18-MoveType
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option IsCustomsClearance=' + item.IsCustomsClearance + ' IsWarehousing=' + item.IsWarehousing + ' value="' + item.ID + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option IsCustomsClearance=' + item.IsCustomsClearance + ' IsWarehousing=' + item.IsWarehousing + ' value="' + item.ID + '">' + item.Name + '</option>';
                else
                    option += '<option IsCustomsClearance=' + item.IsCustomsClearance + ' IsWarehousing=' + item.IsWarehousing + ' value="' + item.ID + '">' + item.Name + '</option>';
            });
            break;
        }
        case 19: { //Name
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" ActionPercent="' + item.ActionPercent + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.ID + '" ActionPercent="' + item.ActionPercent + '" >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" ActionPercent="' + item.ActionPercent + '" >' + item.Name + '</option>';
            });
            break;
        }
        case 20: { //QRData
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.Code + ' - ' + item.ClientName + ' (' + item.POLName + ' TO ' + item.PODName + ')' + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.Code + ' - ' + item.ClientName + ' (' + item.POLName + ' TO ' + item.PODName + ')' + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Code + ' - ' + item.ClientName + ' (' + item.POLName + ' TO ' + item.PODName + ')' + '</option>';
            });
            break;
        }
        case 21: { //QRData
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option name ="' + item.DefaultCurrencyID + '" value="' + item.ID + '">' + item.Name + '</option>';
                    else
                        option += '<option name ="' + item.DefaultCurrencyID + '" value="' + item.ID + '">' + item.Name + '</option>';
                else
                    option += '<option name ="' + item.DefaultCurrencyID + '" value="' + item.ID + '">' + item.Name + '</option>';
            });
            break;
        }
        case 22: { //Custody
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.CustodyID)
                        option += '<option value="' + item.CustodyID + '" selected >' + item.Name + '</option>';
                    else
                        option += '<option value="' + item.CustodyID + '">' + item.Name + '</option>';
                else
                    option += '<option value="' + item.CustodyID + '">' + item.Name + '</option>';
            });
            break;
        }
        case 23: { //Customer_Rates
            $.each(JSON.parse(pData), function (i, item) {
                if (JSON.parse(pData).length == 1) {
                    option += '<option selected value="' + item.RateID + '">' + item.RateName + '</option>';
                }
                else {
                    if (pID != null && pID != undefined) //in case of editing
                        if (pID == item.RateID)
                            option += '<option value="' + item.RateID + '" selected >' + item.RateName + '</option>';
                        else
                            option += '<option value="' + item.RateID + '">' + item.RateName + '</option>';
                    else
                        option += '<option value="' + item.RateID + '">' + item.RateName + '</option>';
                }

            });
            break;
        }
        case 24: {  //TariffCode - ArDescription for CustomItems
            $.each(JSON.parse(pData), function (i, item) {
                if (pID != null && pID != undefined) //in case of editing
                    if (pID == item.ID)
                        option += '<option value="' + item.ID + '" selected >' + item.ArDescription + ": " + item.TariffCode + '</option>';
                    else
                        option += '<option value="' + item.ID + '">' + item.ArDescription + ": " + item.TariffCode + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.ArDescription + ": " + item.TariffCode + '</option>';
            });
            break;
        }

    } //switch (pCodeOrName) {
    $("#" + pSlName).append(option);
    if (callback != null && callback != undefined)
        callback();
}
//pCodeOrName: 1-Code, 2-Name, 3-CodeAndName, 4-NameAndCode, 5-FormNumber&Year, 6-CurrencyWithExchangeRate
//, 7-TaxWithIsDebitAccount, 8-BankOrSafeWithDefaultCurrency, 9-RevenueItems, 10-SystemOptions,11-PurchaseInvoiceItem
function FillListFromObject_ERP(pID, pCodeOrName, pStrFirstRow, pSlName, pData, callback) {
    //var pCreationDate = GetDateWithFormatMDY(item.CreationDate);
    //var pYear = pCreationDate.substr(pCreationDate.length - 4);
    ClearAllOptions(pSlName);
    var option = "";
    if (pStrFirstRow != "" && pStrFirstRow != null)
        option = '<option value="0">' + pStrFirstRow + '</option>';
    // Bind Data
    if (pCodeOrName == 1) //Code
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" selected >' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Code + '</option>';
            else
                option += '<option value="' + item.ID + '">' + item.Code + '</option>';
        });
    else if (pCodeOrName == 2) //Name
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.Name + '</option>';
            else
                option += '<option value="' + item.ID + '">' + item.Name + '</option>';
        });
    else if (pCodeOrName == 3) //CodeAndName
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" Code="' + item.Code + '" selected >' + item.Code + " : " + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" Code="' + item.Code + '">' + item.Code + " : " + item.Name + '</option>';
            else
                option += '<option value="' + item.ID + '" Code="' + item.Code + '">' + item.Code + " : " + item.Name + '</option>';
        });
    else if (pCodeOrName == 4) //NameAndCode
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" Code="' + item.Code + '" selected >' + item.Name + " : " + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" Code="' + item.Code + '">' + item.Name + " : " + item.Code + '</option>';
            else
                option += '<option value="' + item.ID + '" Code="' + item.Code + '">' + item.Name + " : " + item.Code + '</option>';
        });
    else if (pCodeOrName == 5) //BankWithDefaultCurrencyAndNotesAccounts
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" CurrencyID=' + item.DefaultCurrencyID + ' Account_ID=' + item.Account_ID + ' NotesReceivable=' + item.NotesReceivable + ' NotesPayable=' + item.NotesPayable + ' NotesReceivableUnderCollection=' + item.NotesReceivableUnderCollection + ' NotesPayableUnderCollection=' + item.NotesPayableUnderCollection + ' CollectionExpenses=' + item.CollectionExpenses + ' InJournalTypeID=' + item.InJournalTypeID + ' OutJournalTypeID=' + item.OutJournalTypeID + ' selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" CurrencyID=' + item.DefaultCurrencyID + ' Account_ID=' + item.Account_ID + ' NotesReceivable=' + item.NotesReceivable + ' NotesPayable=' + item.NotesPayable + ' NotesReceivableUnderCollection=' + item.NotesReceivableUnderCollection + ' NotesPayableUnderCollection=' + item.NotesPayableUnderCollection + ' CollectionExpenses=' + item.CollectionExpenses + ' InJournalTypeID=' + item.InJournalTypeID + ' OutJournalTypeID=' + item.OutJournalTypeID + ' >' + item.Name + '</option>';
            else
                option += '<option value="' + item.ID + '" CurrencyID=' + item.DefaultCurrencyID + ' Account_ID=' + item.Account_ID + ' NotesReceivable=' + item.NotesReceivable + ' NotesPayable=' + item.NotesPayable + ' NotesReceivableUnderCollection=' + item.NotesReceivableUnderCollection + ' NotesPayableUnderCollection=' + item.NotesPayableUnderCollection + ' CollectionExpenses=' + item.CollectionExpenses + ' InJournalTypeID=' + item.InJournalTypeID + ' OutJournalTypeID=' + item.OutJournalTypeID + '>' + item.Name + '</option>';
        });
    else if (pCodeOrName == 6) //CurrencyWithExchangeRate
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" ExchangeRate="' + item.ExchangeRate + '" selected >' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" ExchangeRate="' + item.ExchangeRate + '">' + item.Code + '</option>';
            else
                if ($("#hDefaultCurrencyID").val() == item.ID)
                    option += '<option value="' + item.ID + '" ExchangeRate="1" selected >' + item.Code + '</option>';
                else
                    option += '<option value="' + item.ID + '" ExchangeRate="' + item.ExchangeRate + '">' + item.Code + '</option>';
        });
    else if (pCodeOrName == 7) //TaxWithIsDebitAccount
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" IsDebitAccount="' + (item.IsDebitAccount ? 1 : 0) + '" selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" IsDebitAccount="' + (item.IsDebitAccount ? 1 : 0) + '">' + item.Name + '</option>';
            else
                if ($("#hDefaultCurrencyID").val() == item.ID)
                    option += '<option value="' + item.ID + '" IsDebitAccount="' + (item.IsDebitAccount ? 1 : 0) + '" selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" IsDebitAccount="' + (item.IsDebitAccount ? 1 : 0) + '">' + item.Name + '</option>';
        });
    else if (pCodeOrName == 8) //BankOrSafeWithDefaultCurrency
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" CurrencyID=' + item.DefaultCurrencyID + ' Account_ID=' + item.Account_ID + ' selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" CurrencyID=' + item.DefaultCurrencyID + ' Account_ID=' + item.Account_ID + ' >' + item.Name + '</option>';
            else
                option += '<option value="' + item.ID + '" CurrencyID=' + item.DefaultCurrencyID + ' Account_ID=' + item.Account_ID + '>' + item.Name + '</option>';
        });
    else if (pCodeOrName == 9) //RevenueItems: //take care with validation for required coz its filled from vwSL_RevenueItems where id can be 0 so when validate for required returns false when 0 is chooses
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option RevenueItemID="' + item.ID + '" IsFreightItem="' + (item.IsFreightItem ? 1 : 0) + '" selected >' + item.Name + '</option>';
                else
                    option += '<option RevenueItemID="' + item.ID + '" IsFreightItem="' + (item.IsFreightItem ? 1 : 0) + '">' + item.Name + '</option>';
            else
                if ($("#hDefaultCurrencyID").val() == item.ID)
                    option += '<option RevenueItemID="' + item.ID + '" IsFreightItem="' + (item.IsFreightItem ? 1 : 0) + '" selected >' + item.Name + '</option>';
                else
                    option += '<option RevenueItemID="' + item.ID + '" IsFreightItem="' + (item.IsFreightItem ? 1 : 0) + '">' + item.Name + '</option>';
        });
    else if (pCodeOrName == 10) //SystemOptions
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.OptionID)
                    option += '<option value="' + item.OptionID + '" OptionValue="' + item.OptionValue + '" selected >' + item.OptionEnName + '</option>';
                else
                    option += '<option value="' + item.OptionID + '" OptionValue="' + item.OptionValue + '">' + item.OptionEnName + '</option>';
            else
                option += '<option value="' + item.OptionID + '" OptionValue="' + item.OptionValue + '">' + item.OptionEnName + '</option>';
        });
    else if (pCodeOrName == 11) //PurchaseInvoiceItem
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" Price="' + item.Price + '" selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" Price="' + item.Price + '">' + item.Name + '</option>';
            else
                option += '<option value="' + item.ID + '" Price="' + item.Price + '">' + item.Name + '</option>';
        });
    else if (pCodeOrName == 12) //Name
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" selected >' + item.CreditLimit + '</option>';
                else
                    option += '<option value="' + item.ID + '">' + item.CreditLimit + '</option>';
            else
                option += '<option value="' + item.ID + '">' + item.CreditLimit + '</option>';
        });
    else if (pCodeOrName == 13) //Name
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.DisbursementJob_ID)
                    option += '<option value="' + item.DisbursementJob_ID + '" selected >' + item.JobNumber + '</option>';
                else
                    option += '<option value="' + item.DisbursementJob_ID + '">' + item.JobNumber + '</option>';
            else
                option += '<option value="' + item.DisbursementJob_ID + '">' + item.JobNumber + '</option>';
        });
    else if (pCodeOrName == 14) //Name
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.DisbursementJob_ID)
                    option += '<option value="' + item.ID + '" BranchID="' + item.BranchID + '" CodeSerial="' + item.CodeSerial + '"  selected >' + item.Code + '</option>';

                else
                    option += '<option value="' + item.ID + '" BranchID="' + item.BranchID + '" CodeSerial="' + item.CodeSerial + '">' + item.Code + '</option>';

            else
                option += '<option value="' + item.ID + '" BranchID="' + item.BranchID + '" CodeSerial="' + item.CodeSerial + '">' + item.Code + '</option>';

        });
    else if (pCodeOrName == 15) //RevenueItems: //take care with validation for required coz its filled from vwSL_RevenueItems where id can be 0 so when validate for required returns false when 0 is chooses
        $.each(JSON.parse(pData), function (i, item) {
            if (pID != null && pID != undefined) //in case of editing
                if (pID == item.ID)
                    option += '<option value="' + item.ID + '" IsFreightItem="' + (item.IsFreightItem ? 1 : 0) + '" selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" IsFreightItem="' + (item.IsFreightItem ? 1 : 0) + '">' + item.Name + '</option>';
            else
                if ($("#hDefaultCurrencyID").val() == item.ID)
                    option += '<option value="' + item.ID + '" IsFreightItem="' + (item.IsFreightItem ? 1 : 0) + '" selected >' + item.Name + '</option>';
                else
                    option += '<option value="' + item.ID + '" IsFreightItem="' + (item.IsFreightItem ? 1 : 0) + '">' + item.Name + '</option>';
        });
    $("#" + pSlName).append(option);
    if (callback != null && callback != undefined)
        callback();
}
//Get Checkboxes instead of list to select from
//if pInvoiceTypeID has value then this is called from InvoiceTypes so check the checkboxes according to item is binded to the calling invoice type or not not
function GetListAsCheckboxes(pStrFnName, pWhereClause, pDivName, pCheckboxNameAttr, callback, pCodeOrName) { //pCodeOrName=1:Name, 2:Code, 3:NameAndCode,4:ContainerTypeCode
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            //Clear the div
            $("#" + pDivName).html("");
            var option = "";
            // Bind Data
            //option = '<section class="panel panel-default">';
            //option += '<header class="panel-heading">';
            //option += '</header>';
            $.each(JSON.parse(data[0]), function (i, item) {
                option += '<div class="col-sm-3"> <label> ';
                option += '<input type="checkbox" name="' + pCheckboxNameAttr + '" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);"  value="' + item.ID + '"> ';
                //option += item.Code + ' (' + item.Name + ')';
                if (pCodeOrName == null || pCodeOrName == undefined || pCodeOrName == 1)
                    option += item.Name + (item.IsReceipt ? (" - Receipt") : "");
                else if (pCodeOrName == 2) //2:Code
                    option += item.Code;
                else if (pCodeOrName == 3) //3:NameAndCode
                    option += item.Name + (item.Code == 0 ? "" : (" (" + item.Code + ")"));
                else if (pCodeOrName == 4) //4:ContainerTypeCode
                    option += item.ContainerTypeCode;
                option += '</label></div>';
            });
            //option += '<footer class="panel-footer">';
            //option += "</footer>";
            //option += "</section>";
            $("#" + pDivName).append(option);

            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {

            FadePageCover(false);
            swal("Sorry", "Please, try again. GetListAsCheckboxes in mainapp.master.js", "");
        }
    });
}
function GetListAsCheckboxesWithVariousParameters(pStrFnName, pControllerParameters, pDivName, pCheckboxNameAttr, callback, pCodeOrName, pCol_sm_size) { //pCodeOrName=1:Name, 2:Code, 3:NameAndCode,4:ContainerTypeCode,5:Email
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            //Clear the div
            $("#" + pDivName).html("");
            var option = "";
            // Bind Data
            //option = '<section class="panel panel-default">';
            //option += '<header class="panel-heading">';
            //option += '</header>';
            $.each(JSON.parse(data[0]), function (i, item) {
                //option += '<div class="col-sm-3"> <label> ';
                option += '<div class="' + (pCol_sm_size == undefined ? "col-sm-3" : pCol_sm_size) + '"><label> ';
                option += '<input type="checkbox" id=' + pCheckboxNameAttr + item.ID + ' name="' + pCheckboxNameAttr + '" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);"  value="' + item.ID + '">';
                //option += item.Code + ' (' + item.Name + ')';
                if (pCodeOrName == null || pCodeOrName == undefined || pCodeOrName == 1)
                    option += '<span>' + item.Name + (item.IsReceipt ? ("-Receipt") : "") + '</span>';
                else if (pCodeOrName == 2) //2:Code
                    option += '<span>' + item.Code + '</span>';
                else if (pCodeOrName == 3) //3:NameAndCode
                    option += '<span>' + item.Name + (item.Code == 0 ? "" : (" (" + item.Code + ")")) + '</span>';
                else if (pCodeOrName == 4) //4:ContainerTypeCode
                    option += '<span>' + item.ContainerTypeCode + '</span>';
                else if (pCodeOrName == 5) //5:Email
                    option += '<span>' + item.Email + '</span>';
                option += '</label></div>';
            });
            //option += '<footer class="panel-footer">';
            //option += "</footer>";
            //option += "</section>";
            $("#" + pDivName).append(option);

            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {

            FadePageCover(false);
            swal("Sorry", "Please, try again. GetListAsCheckboxes in mainapp.master.js", "");
        }
    });
}
//pOption 1:Code 2:Name(En/Ar) 3:Code&Name 4:Name&Code 5:Name
function FillDivWithCheckboxes(pDivName, pData, pCheckboxNameAttr, pOption, callback) {
    //Clear the div
    $("#" + pDivName).html("");
    var option = "";
    // Bind Data
    //option = '<section class="panel panel-default">';
    //option += '<header class="panel-heading">';
    //option += '</header>';
    $.each(JSON.parse(pData), function (i, item) {
        option += '<div class="swapCheckBoxesClass"> ';
        option += ' <input type="checkbox" name="' + pCheckboxNameAttr + '" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);"  value="' + item.ID + '" /> ';
        switch (pOption) {
            case 1: { //Code
                option += ' <label> ' + item.Code; break;
            }
            case 2: { //Name(Ar-En)
                option += ' <label> ' + ($("[id$='hf_ChangeLanguage']").val() == "ar" ? item.Name : item.EnName); break;
            }
            case 3: { //Code - Name
                option += ' <label> ' + item.Code + ' - ' + ($("[id$='hf_ChangeLanguage']").val() == "ar" ? item.Name : item.EnName); break;
            }
            case 4: { //Name - Code
                option += ' <label> ' + ($("[id$='hf_ChangeLanguage']").val() == "ar" ? item.Name : item.EnName) + ' - ' + item.Code; break;
            }
            case 5: { //name
                option += ' <label> ' + item.Name; break;
            }
            default: {
                swal("Sorry", "Connection failed, please try again.");
                break;
            }
        } //of switch
        option += ' &nbsp;</label> </div>';
    });
    //option += '<footer class="panel-footer">';
    //option += "</footer>";
    //option += "</section>";
    $("#" + pDivName).append(option);
    if (callback != null && callback != undefined)
        callback();
    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapCheckBoxesClass:not(.reversed)").reverseChildren();
}
function CheckIncludedItemsInDivFromArray(pMainDivName, pCheckboxNameAttr, pSelectedCbList, pColumnName, pCallback) {
    debugger;
    $("#" + pMainDivName).find('input[name="' + pCheckboxNameAttr + '"]').each(function () {
        //$(this).attr('value')
        for (var i = 0; i < pSelectedCbList.length; i++) {
            if ($(this).attr('value') == pSelectedCbList[i][pColumnName])
                $(this).prop('checked', true);
        }
    });
    if (pCallback != null && pCallback != undefined)
        pCallback();
}
//fill the Payables modal table allowing to save multi row with values of many tds//
function FillPayablesModalTableControls(pStrFnName, pWhereClause, pDivName, ptblModalName, pCheckboxNameAttr, pIsInsert, callback) {
    debugger;
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var varHide = "";
            var _NumberOfRows = JSON.parse(data[0]).length;
            if ($("#cbIsAWB").prop("checked")) {
                var varHide = " hide ";
            }
            var varHideInTruckingOrder = "";
            //if (pWhereClause.includes("TruckingOrderID")) {
            //    var varHideInTruckingOrder = " hide ";
            //}

            var pPOrCData = data[1];
            var pCurData = data[2];
            //Clear the div
            $("#" + pDivName).html("");
            var divData = ' <section class="panel panel-default m-l-n" style="overflow: scroll; width:auto; height: 350px;"> ';
            divData += '    <div class="table-responsive"> ';
            divData += '        <table id="' + ptblModalName + '" class="table table-striped b-t b-light text-sm  table-hover"> ';
            divData += '            <thead> ';
            divData += '            <tr> ';
            divData += '                <th id="HeaderSelectChargeTypesIDs" ' + (pIsInsert ? '>' : ' class="hide">');
            divData += '                </th> ';
            divData += '                <th>' + TranslateString("ChargeType") + '</th> ';
            divData += '                <th class="">P/C</th> ';
            divData += '                <th class="' + varHide + varHideInTruckingOrder + '">' + TranslateString("Supplier") + '</th> ';
            divData += '                <th class="' + varHide + varHideInTruckingOrder + '">' + TranslateString("SupplierSiteID") + '</th> ';
            divData += '                <th class="hide">UOM</th> ';
            divData += '                <th class="' + varHide + '">' + TranslateString("Qty") + '</th> ';
            divData += '                <th>' + TranslateString("U.Price") + '</th> ';

            divData += '                <th class="hide">' + TranslateString("ChargeTypeCost") + '</th> ';

            divData += '                <th class="' + varHide + '">' + TranslateString("TaxType") + '</th> ';
            divData += '                <th class="' + varHide + '">' + TranslateString("Discount") + '</th> ';

            divData += '                <th class="' + varHide + '">' + TranslateString("Actual Cost") + '</th> ';
            divData += '                <th class="' + varHide + '">' + TranslateString("InitSale") + '</th> ';
            divData += '                <th class="' + varHide + '">' + TranslateString("SupInvNo") + '</th> ';
            divData += '                <th class="' + varHide + '">' + TranslateString("Rec.No") + '</th> ';
            divData += '                <th class="' + varHide + '">' + TranslateString("IssueDate") + '</th> ';
            divData += '                <th class="' + varHide + '">' + TranslateString("DueDate") + '</th> ';
            divData += '                <th class="' + varHide + '">' + TranslateString("Ex.Rate") + '</th> ';
            divData += '                <th class="' + varHide + '">' + TranslateString("Cur") + '</th> ';
            divData += '                <th class="' + varHide + '">' + TranslateString("Notes") + '</th> ';
            if ($("#hBLType").val() == 3)
                divData += '                <th class="' + varHide + '">' + 'HBL' + '</th> ';
            divData += '                <th class="rounded-right hide"></th> ';
            divData += '            </tr> ';
            divData += '            </thead> ';
            divData += '            <tbody> ';
            // Bind Rows
            $.each(JSON.parse(data[0]), function (i, item) {

                divData += "        <tr ID='" + item.ID + "'> ";
                divData += "            <td class='tblModalPayableID " + (pIsInsert ? " ' " : " hide '") + " > <input name='" + pCheckboxNameAttr + "' type='checkbox' value='" + item.ID + "' " + (pIsInsert ? "" : "checked='checked'") + "></td> ";
                //divData += "            <td class='tblModalPayable' val='" + item.ChargeTypeID + "'>" + item.ChargeTypeCode + " (" + item.ChargeTypeName + ")" + "</td> ";
                divData += "            <td class='tblModalPayable' val='" + item.ChargeTypeID + "' style='width:300px;'>" + (pDefaults.UnEditableCompanyName == "GBL" ? (item.ChargeTypeName + " (" + item.ChargeTypeCode + ")") : item.ChargeTypeName) + "</td> ";
                divData += "            <td class='tblModalPayablePOrC'> <select id='slPayablePOrC" + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='false'></select> </td> ";
                divData += "            <td class='tblModalPayableSupplier " + varHide + varHideInTruckingOrder + " '> <select id='slPayableSupplier" + item.ID + "' class='controlStyle' style='width:107px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange=" + '"' + "Payables_PayableSupplierChanged('slPayableSupplier" + item.ID + "','txtTblModalPayableSupplierInvoiceNo" + item.ID + "','txtTblModalPayableSupplierReceiptNo" + item.ID + "');FillSupplierSitesBySupplier(0," + item.ID + ");Payables_SetDueDate('txtTblModalPayableIssueDate" + item.ID + "','" + "txtTblModalPayableEntryDate" + item.ID + "','" + "slPayableSupplier" + item.ID + "'" + ");" + '"' + (/*item.SupplierInvoiceNo != 0 ||*/ item.IsApproved ? " disabled " : "") + " data-required='false'><option value=''>Select Supplier</option></select> </td> ";
                divData += "            <td class='tblModalPayableSupplierSiteID " + varHide + varHideInTruckingOrder + " '> <select id='slPayableSupplierSiteID" + item.ID + "' class='controlStyle' style='width:107px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange=''" + (/*item.SupplierInvoiceNo != 0 ||*/ item.IsApproved ? " disabled " : "") + " data-required='false' value=''><option value=''><--Select--></option></select> </td> ";
                divData += "            <td class='tblModalPayableUOM hide'> <select id='slPayableUOM" + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='false'" + (item.IsApproved ? " disabled " : "") + "></select></td> ";
                divData += "            <td class='tblModalPayableQuantity " + varHide + " '> <input type='text' id='txtTblModalPayableQuantity" + item.ID + "' class='form-control controlStyle' onchange='Payables_Row_CalculatePayablesAmount(" + item.ID + "," + pIsInsert + ");'  onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);' data-required='false' maxlength='10' placeholder='0' value='1'" + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableCostPrice'> <input type='text' id='txtTblModalPayableCostPrice" + item.ID + "' class='form-control controlStyle' onchange='Payables_Row_CalculatePayablesAmount(" + item.ID + "," + pIsInsert + ");' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";

                divData += "            <td class='tblModalPayableChargeTypeCost hide'> <input type='text' id='txtTblModalPayableChargeTypeCost" + item.ID + "' class='form-control controlStyle' onchange='' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + " value=" + item.ChargeTypeCost + " /> </td> ";

                divData += "            <td class='tblModalPayableCostAmountWithoutVAT hide'><input type='text' disabled='disabled' id='txtTblModalPayableCostAmountWithoutVAT" + item.ID + "' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableTax " + varHide + " '> <select id='slPayableTax" + item.ID + "' class='controlStyle' style='width:107px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Payables_Row_CalculatePayablesAmount(" + item.ID + "," + pIsInsert + ")'" + " data-required='false'" + (item.IsApproved ? " disabled " : "") + "></select> </td> ";
                divData += "            <td class='tblModalPayableTaxPercentage hide'> <input type='text' id='txtTblModalPayableTaxPercentage" + item.ID + "' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableTaxAmount hide'> <input type='text' id='txtTblModalPayableTaxAmount" + item.ID + "' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableDiscount " + varHide + " '> <select id='slPayableDiscount" + item.ID + "' class='controlStyle' style='width:107px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Payables_Row_CalculatePayablesAmount(" + item.ID + "," + pIsInsert + ")'" + " data-required='false'" + (item.IsApproved ? " disabled " : "") + "></select> </td> ";
                divData += "            <td class='tblModalPayableDiscountPercentage hide'> <input type='text' id='txtTblModalPayableDiscountPercentage" + item.ID + "' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableDiscountAmount hide'> <input type='text' id='txtTblModalPayableDiscountAmount" + item.ID + "' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";

                divData += "            <td class='tblModalPayableCostAmount " + varHide + " '><input type='text' name='txtTblModalPayableCostAmount'  disabled='disabled' id='txtTblModalPayableCostAmount" + item.ID + "' class='form-control controlStyle' onchange='Payables_txtTblModalCostAmount_Changed(" + item.ID + "," + pIsInsert + ");' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableInitialSalePrice " + varHide + " '> <input type='text' id='txtTblModalPayableInitialSalePrice" + item.ID + "' class='input-sm form-control parsley-validated controlStyle ' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-type='float' data-required='false' maxlength='10' placeholder='0.00' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableSupplierInvoiceNo " + varHide + " '> <input type='text' id='txtTblModalPayableSupplierInvoiceNo" + item.ID + "' class='input-sm form-control parsley-validated controlStyle upperCase' data-type='text' onchange='Payables_PayableSupplierInvoiceOrReceiptNoChanged(slPayableSupplier" + item.ID + ", txtTblModalPayableSupplierInvoiceNo" + item.ID + ", txtTblModalPayableSupplierReceiptNo" + item.ID + ")'" + (item.SupplierOperationPartnerID == 0 || item.IsApproved ? " disabled " : "") + " data-required='" + (pDefaults.UnEditableCompanyName == "GBL" ? "true" : "false") + "' maxlength='20' placeholder='Inv No' /> </td> ";
                divData += "            <td class='tblModalPayableSupplierReceiptNo " + varHide + " '> <input type='text' id='txtTblModalPayableSupplierReceiptNo" + item.ID + "' class='input-sm form-control parsley-validated controlStyle upperCase' data-type='text' onchange='Payables_PayableSupplierInvoiceOrReceiptNoChanged(slPayableSupplier" + item.ID + ", txtTblModalPayableSupplierInvoiceNo" + item.ID + ", txtTblModalPayableSupplierReceiptNo" + item.ID + ")'" + (/*item.SupplierOperationPartnerID == 0 ||*/ item.IsApproved ? " disabled " : "") + " data-required='false' maxlength='20' placeholder='Rec No' /> </td> ";
                divData += "            <td class='tblModalPayableIssueDate " + varHide + " '> <input id='txtTblModalPayableIssueDate" + item.ID + "' type='text' style='width:75px;' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' style='cursor:text;' class=' form-control controlStyle datepicker-input' data-required='false' data-date-format='dd/mm/yyyy' placeholder='Date' readonly " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalPayableEntryDate " + varHide + " '> <input id='txtTblModalPayableEntryDate" + item.ID + "' type='text' style='width:75px;' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' style='cursor:text;' class=' form-control controlStyle datepicker-input' data-required='false' data-date-format='dd/mm/yyyy' placeholder='Date' readonly " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                //<input id="txtExpectedDeparture" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="cursor:text;" class="datepicker-input form-control" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" />
                divData += "            <td class='tblModalPayableExchangeRate " + varHide + " '><input type='text' name='txtTblModalPayableExchangeRate' id='txtTblModalPayableExchangeRate" + item.ID + "' class='form-control controlStyle' data-type='float' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + ($("#hDefaultCurrencyID").val() == item.CurrencyID || item.IsApproved ? "disabled" : "") + " /> </td> ";
                divData += "            <td class='tblModalPayableCurrency " + varHide + " '> <select id='slPayableCurrency" + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Payables_txtTblModalCurrency_Changed(" + item.ID + "," + pIsInsert + ");' data-required='true'" + (item.IsApproved ? " disabled " : "") + "></select> </td> ";
                divData += "            <td class='tblModalPayableNotes " + varHide + " '> <input type='text' id='txtTblModalPayableNotes" + item.ID + "' class='input-sm form-control parsley-validated controlStyle upperCase' data-type='text' " + (item.IsApproved ? " disabled " : "") + " data-required='false' maxlength='1000' placeholder='' value='" + (item.Notes == 0 ? "" : item.Notes) + "'/> </td> ";
                if ($("#hBLType").val() == 3)
                    divData += "            <td class='tblModalPayableBill " + varHide + " '> <select id='slPayableBill" + item.ID + "' class='controlStyle' style='width:107px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange=''" + " data-required='false'" + (item.IsApproved ? " disabled " : "") + "><option value=" + item.BillID + "><--Select--></option></select> </td> ";
                divData += "        </tr> ";
            });
            divData += '            </tbody> ';
            divData += '        </table> ';
            divData += '    </div> ';
            divData += ' </section> ';
            $("#" + pDivName).append(divData);
            //to fill the controls after creating them in the previous loop
            $.each(JSON.parse(data[0]), function (i, item) {
                debugger;
                //PayablePOrC_GetList(item.POrC, "slPayablePOrC" + item.ID);
                //FillListFromObject(pID, pCodeOrName/*1-Code 2-Name*/, pStrFirstRow, pSlName, pData, callback)
                FillListFromObject(item.POrC, 1, "P/C", "slPayablePOrC" + item.ID, pPOrCData, null);
                PayableSuppliers_GetList(item.SupplierOperationPartnerID, "slPayableSupplier" + item.ID
                    , function () {
                        FadePageCover(true);
                        if (item.ID > 0 && pDefaults.UnEditableCompanyName == "GBL")
                            FillSupplierSitesBySupplier(item.SupplierSiteID, item.ID);
                        if (i == (_NumberOfRows - 1))
                            FadePageCover(false);
                    }
                );
                PayableUOM_GetList(item.MeasurementID, "slPayableUOM" + item.ID);
                GetListTaxTypeWithNameAndPercAttr(item.TaxTypeID, "/api/TaxeTypes/LoadAllWithWhereClause"
                    , "<--Select-->", "slPayableTax" + item.ID, "WHERE IsInactive=0 ORDER BY Name"
                    , function () {
                        $("#slPayableDiscount" + item.ID).html($("#slPayableTax" + item.ID).html());
                        $("#slPayableDiscount" + item.ID).val(item.DiscountTypeID == 0 ? "" : item.DiscountTypeID);
                        $("#slPayableTax" + item.ID + " option[IsDiscount='true']").addClass('hide');
                        $("#slPayableDiscount" + item.ID + " option[IsDiscount='false']").addClass('hide');
                    });
                if ($("#hBLType").val() == 3) {
                    CallGETFunctionWithParameters("/api/Operations/LoadAll"
                        , { pWhereClause: " WHERE MasterOperationID=" + item.OperationID }
                        , function (pData) {
                            var pOperationList = pData[0];
                            Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pOperationList, "ID", "HouseNumber,CertificateNumber", ' / ', TranslateString("SelectFromMenu"), "#slPayableBill", ""/*item.BillID*/, ""
                                , function () {
                                    $("#slPayableBill" + item.ID).html($("#slPayableBill").html());
                                    $("#slPayableBill" + item.ID).val(item.BillID);
                                    ApplySelectListSearch();
                                });
                        });
                }
                $("#txtTblModalPayableQuantity" + item.ID).val(pIsInsert ? 1 : item.Quantity);
                $("#txtTblModalPayableCostPrice" + item.ID).val(item.CostPrice);

                $("#txtTblModalPayableCostAmountWithoutVAT" + item.ID).val(item.AmountWithoutVAT);
                $("#txtTblModalPayableTaxPercentage" + item.ID).val(item.TaxPercentage);
                $("#txtTblModalPayableTaxAmount" + item.ID).val(item.TaxAmount);
                $("#txtTblModalPayableDiscountPercentage" + item.ID).val(item.DiscountPercentage);
                $("#txtTblModalPayableDiscountAmount" + item.ID).val(item.DiscountAmount);

                $("#txtTblModalPayableCostAmount" + item.ID).val(item.CostAmount);
                $("#txtTblModalPayableInitialSalePrice" + item.ID).val(item.InitialSalePrice);
                $("#txtTblModalPayableSupplierInvoiceNo" + item.ID).val((item.SupplierInvoiceNo == 0 ? "" : item.SupplierInvoiceNo));
                $("#txtTblModalPayableSupplierReceiptNo" + item.ID).val((item.SupplierReceiptNo == 0 ? "" : item.SupplierReceiptNo));
                $("#txtTblModalPayableIssueDate" + item.ID).val((Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(item.IssueDate)) > 0 ? ConvertDateFormat(GetDateWithFormatMDY(item.IssueDate)) : ""));
                $("#txtTblModalPayableEntryDate" + item.ID).val((Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(item.EntryDate)) > 0 ? ConvertDateFormat(GetDateWithFormatMDY(item.EntryDate)) : ""));
                //$("#txtTblModalPayableEntryDate" + item.ID).addClass('datepicker-input').datepicker({ dateFormat: 'dd-mm-yy' });
                $("#txtTblModalPayableIssueDate" + item.ID).addClass('datepicker-input'); //coz when adding datepicker dynamicalli i ve to rebind it
                $("#txtTblModalPayableEntryDate" + item.ID).addClass('datepicker-input'); //coz when adding datepicker dynamicalli i ve to rebind it
                //PayableCurrency_GetList(item.CurrencyID, "slPayableCurrency" + item.ID);
                //pCodeOrName: 1-Code, 2-Name, 3-CurrencyWithAttrs(ExchangeRate)
                FillListFromObject(item.CurrencyID, 3/*pCodeOrName*/, null, "slPayableCurrency" + item.ID, pCurData, null);
                //Payables_txtTblModalCurrency_Changed(pRowID, pIsInsert);
                //$("#txtTblModalPayableExchangeRate" + item.ID).val($("#slPayableCurrency" + item.ID + " option:selected").attr("MasterDataExchangeRate"));
                $("#txtTblModalPayableExchangeRate" + item.ID).val(pIsInsert ? 1 : item.ExchangeRate);//if insert then default currency so exchangeRate is 1 
                if ((item.SupplierInvoiceNo != 0 && pDefaults.UnEditableCompanyName != "GBL") || item.IsApproved > 0)
                    $("#slPayableSupplier" + item.ID).attr("disabled", "disabled");
                else
                    $("#slPayableSupplier" + item.ID).removeAttr("disabled");

                //if ($("#hDefaultCurrencyID").val() == item.CurrencyID)
            });
            SetDatepickerFormat();//coz when adding datepicker dynamically i ve to rebind it
            if (_NumberOfRows == 0)
                FadePageCover(false);
            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. FillPayablesModalTableControls in mainapp.master.js", "");
        }
    });
}
var AddAirPackages_ID = 0;
function AddAirPackagesModalTableControls(pStrFnName, pWhereClause, pDivName, ptblModalName, pCheckboxNameAttr, pIsInsert, callback) {
    debugger;
    AddAirPackages_ID--;
    var divData = "";
    divData += "        <tr ID='" + (AddAirPackages_ID).toString() + "'> ";
    divData += "            <td class='tblModalPackageID " + (pIsInsert ? " hide " : " hide '") + " > <input name='" + pCheckboxNameAttr + "' type='checkbox' value='" + (AddAirPackages_ID).toString() + "' " + (pIsInsert ? "" : "checked='checked'") + "></td> ";
    divData += "            <td class='ID'> <input name='Delete' type='checkbox' value='" + (AddAirPackages_ID).toString() + "' /></td>"
    divData += "            <td class='tblModalPackageType'> <select id='slTblModalPackageType" + (AddAirPackages_ID).toString() + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='true' style='width:100%;'></select></td> ";
    divData += "            <td class='tblModalNoOfPkg'> <input type='text' id='txtTblModalNoOfPkg" + (AddAirPackages_ID).toString() + "' class='form-control input-sm'  onkeypress='CheckValueIsInteger(id);' onfocus='CheckValueIsInteger(id);' data-type='number' data-required='true' maxlength='8' placeholder='0' /> </td> ";
    divData += "            <td class='tblModalMarksAndNumbers'> <input type='text' id='txtTblModalMarksAndNumbers" + (AddAirPackages_ID).toString() + "' maxlength='10' class='form-control input-sm' autocomplete='off' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' data-required='false' placeholder='0.0' style='text-transform:uppercase;' /> </td> ";

    divData += "            <td class='tblModalGrossWeightBll'><input type='text' id='txtTblModalGrossWeightBll" + (AddAirPackages_ID).toString() + "' class='form-control input-sm' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id)' ; data-required='false' placeholder='0.0' /> </td> ";
    divData += "            <td class='tblModalWeightChargeBll'> <input type='text' id='txtTblModalWeightChargeBll" + (AddAirPackages_ID).toString() + "' class='form-control input-sm' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id)' ; data-required='false' placeholder='0.0'/> </td> ";
    divData += "            <td class='tblModalRateCharge'> <input type='text' id='txtTblModalRateCharge" + (AddAirPackages_ID).toString() + "' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);' data-type='number' class='form-control input-sm' data-required='false' maxlength='11' placeholder='0.0'/> </td> ";
    divData += "            <td class='tblModalWeightUnit'> <input type='text' id='txtTblModalWeightUnit" + (AddAirPackages_ID).toString() + "' maxlength='10' class='form-control input-sm' autocomplete='off' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' data-required='false' placeholder='0.0' style='text-transform:uppercase;' /> </td> ";
    divData += "            <td class='tblModalRateClass'> <input type='text' id='txtTblModalRateClass" + (AddAirPackages_ID).toString() + "' maxlength='10' class='form-control input-sm' autocomplete='off' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' data-required='false' placeholder='0.0' style='text-transform:uppercase;' /> </td> ";
    divData += "            <td class='tblModalisMinmum' > <input  type='checkbox' id='ChkTblModalIsMinimum" + (AddAirPackages_ID).toString() + "'></td> ";

    divData += "        </tr> ";
    //$("#" + pDivName + "  section ").append(divData);
    $("#" + ptblModalName + "  tbody ").append(divData);
    $("#slTblModalPackageType" + (AddAirPackages_ID).toString()).html($("#slPackageTypes").html());
    $("#slTblModalPackageType" + (AddAirPackages_ID).toString()).val("");
    //to fill the controls after creating them in the previous loop

    //SetDatepickerFormat();//coz when adding datepicker dynamically i ve to rebind it
}
//fill the Receivables modal table allowing to save multi row with values of many tds//
//if pIsInsert is false then its either multirow edit or invoice Edit according to pIsInvoiceEdit
function FillReceivablesModalTableControls(pStrFnName, pWhereClause, pDivName, ptblModalName, pCheckboxNameAttr, pIsInsert, pIsInvoiceEdit, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var pPOrCData = data[1];
            var pCurData = data[2];
            //Clear the div
            $("#" + pDivName).html("");
            var divData = ' <section class="panel panel-default" style="overflow: scroll; width:auto ; height: 300px;"> ';
            divData += '    <div class="table-responsive"> ';
            divData += '        <table id="' + ptblModalName + '" class="table table-striped b-t b-light text-sm  table-hover"> ';
            divData += '            <thead> ';
            divData += '            <tr> ';
            divData += '                <th id="HeaderSelectChargeTypesIDs" ' + (pIsInsert || pIsInvoiceEdit ? '>' : ' class="hide">');
            divData += '                </th> ';
            divData += '                <th>' + TranslateString("ChargeType") + '</th> ';
            divData += '                <th class="hide">P/C</th> ';
            divData += '                <th class="hide">UOM</th> ';
            divData += '                <th>' + TranslateString("Quantity") + '</th> ';
            divData += '                <th>' + TranslateString("UnitPrice") + '</th> ';
            divData += '                <th class="' + (pDefaults.IsTaxOnItems ? '' : 'hide') + '">' + TranslateString("TaxType") + '</th> ';
            divData += '                <th class="hide">TaxPerc</th> ';
            divData += '                <th class="' + (pDefaults.IsTaxOnItems ? '' : 'hide') + '">' + TranslateString("TaxAmt") + '</th> ';
            divData += '                <th class="' + (pDefaults.IsTaxOnItems ? '' : 'hide') + '">' + TranslateString("Deduction") + '</th> ';
            divData += '                <th class="hide">DeductionPerc</th> ';
            divData += '                <th class="' + (pDefaults.IsTaxOnItems ? '' : 'hide') + '">' + TranslateString("DeductionAmt") + '</th> ';
            divData += '                <th>' + TranslateString("TotalAmount") + '</th> ';
            divData += '                <th ' + (pIsInvoiceEdit ? ' class="hide" ' : '') + '>' + TranslateString("Ex.Rate") + '</th> ';
            divData += '                <th>' + TranslateString("Cur") + '</th> ';
            divData += '                <th>' + TranslateString("Inv.No") + '</th> ';
            //if (pDefaults.UnEditableCompanyName == "BOM") {
                divData += '                <th>' + TranslateString("ReceiptNo") + '</th> ';
                divData += '                <th>' + TranslateString("ReceiptDate1") + '</th> ';
                divData += '                <th>' + TranslateString("Notes") + '</th> ';
            //}

            divData += '                <th ' + (pIsInvoiceEdit ? '' : ' class="hide" ') + '>' + TranslateString("Order") + '</th> ';
            divData += '                <th class="rounded-right hide"></th> ';
            divData += '            </tr> ';
            divData += '            </thead> ';
            divData += '            <tbody> ';
            // Bind Rows
            $.each(JSON.parse(data[0]), function (i, item) {
                divData += "        <tr ID='" + item.ID + "'> ";
                divData += "            <td class='tblModalReceivableID " + (pIsInsert || pIsInvoiceEdit ? " ' " : " hide '") + " > <input name='" + pCheckboxNameAttr + "' type='checkbox' value='" + item.ID + "' " + (!pIsInsert && !pIsInvoiceEdit && item.InvoiceID == 0 && item.DraftInvoiceID == 0/*this is an edit for hidden rec. item coz its added to an invoice so dont update*/ ? " checked='checked' " : "") + "></td> ";//if item has invoiceID then check by default
                divData += "            <td class='tblModalReceivable' val='" + item.ChargeTypeID + "' style='width:300px;'>" + (pDefaults.UnEditableCompanyName == "GBL" ? (item.ChargeTypeName + " (" + item.ChargeTypeCode + ")") : item.ChargeTypeName) + "</td> ";
                divData += "            <td class='tblModalReceivablePOrC hide'> <select id='slReceivablePOrC" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='false' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "></select> </td> ";
                divData += "            <td class='tblModalReceivableUOM hide'> <select id='slReceivableUOM" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='false' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "></select></td> ";
                divData += "            <td class='tblModalReceivableQuantity'> <input type='text' id='txtTblModalReceivableQuantity" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='number' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + "  onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);' data-required='false' maxlength='10' placeholder='0' value='1' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + " /> </td> ";
                divData += "            <td class='tblModalReceivableSalePrice'> <input type='text' id='txtTblModalReceivableSalePrice" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='float' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + " onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit) && pDefaults.UnEditableCompanyName != "FIV" ? "" : " disabled ") + " /> </td> ";

                divData += "            <td class='tblModalReceivableAmountWithoutVAT hide'><input type='text' disabled='disabled' id='txtTblModalReceivableAmountWithoutVAT" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + " /> </td> ";
                divData += "            <td class='tblModalReceivableTax " + (pDefaults.IsTaxOnItems ? "" : " hide ") + "'> <select disabled='disabled' id='slReceivableTax" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='controlStyle' style='width:150px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + " data-required='false'" + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "></select> </td> ";
                divData += "            <td class='tblModalReceivableTaxPercentage hide'> <input type='text' id='txtTblModalReceivableTaxPercentage" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + " /> </td> ";
                divData += "            <td class='tblModalReceivableTaxAmount " + (pDefaults.IsTaxOnItems ? "" : " hide ") + "'> <input disabled='disabled' type='text' id='txtTblModalReceivableTaxAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + " /> </td> ";
                divData += "            <td class='tblModalReceivableDiscount " + (pDefaults.IsTaxOnItems ? "" : " hide ") + "'> <select disabled='disabled' id='slReceivableDiscount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='controlStyle' style='width:150px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + " data-required='false'" + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "></select> </td> ";
                divData += "            <td class='tblModalReceivableDiscountPercentage hide'> <input type='text' id='txtTblModalReceivableDiscountPercentage" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + " /> </td> ";
                divData += "            <td class='tblModalReceivableDiscountAmount " + (pDefaults.IsTaxOnItems ? "" : " hide ") + "'> <input disabled='disabled' type='text' id='txtTblModalReceivableDiscountAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + " /> </td> ";

                divData += "            <td class='tblModalReceivableSaleAmount'><input type='text' name='txtTblModalReceivableSaleAmount'  disabled='disabled' id='txtTblModalReceivableSaleAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='float' " + (pIsInvoiceEdit ? "onchange='Invoices_ChangeAmountInInvoiceEdit(false);'" : "onchange='Receivables_txtTblModalSaleAmount_Changed(" + item.ID + "," + pIsInsert + ");' ") + " onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + " /> </td> ";
                divData += "            <td class='tblModalReceivableExchangeRate " + (pIsInvoiceEdit ? "hide" : "") + "'><input type='text' name='txtTblModalReceivableExchangeRate' id='txtTblModalReceivableExchangeRate" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='float' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + ($("#hDefaultCurrencyID").val() == item.CurrencyID || item.InvoiceID != 0 || pIsInvoiceEdit ? "disabled" : "") + " /> </td> ";
                divData += "            <td class='tblModalReceivableCurrency'> <select id='slReceivableCurrency" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' " + (pIsInvoiceEdit || pDefaults.UnEditableCompanyName == "FIV" ? "disabled='disabled' " : "") + " class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Receivables_txtTblModalCurrency_Changed(" + item.ID + "," + pIsInvoiceEdit + ");' data-required='false' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "></select> </td> ";
                divData += "            <td class='tblModalReceivableInvoice'><input type='text' id='txtTblModalReceivableInvoice" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='float' onkeypress='DisableEnterKey(id);' onfocus='DisableEnterKey(id);' data-required='false' maxlength='6' placeholder='' disabled /> </td> ";
                //if (pDefaults.UnEditableCompanyName == "BOM") {
                    divData += "            <td class='tblModalReceivableReceiptNo'><input type='text' id='txtTblModalReceivableReceiptNo" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' onkeypress='DisableEnterKey(id);' onfocus='DisableEnterKey(id);' data-required='false' placeholder='' /> </td> ";
                    divData += "            <td class='tblModalReceivableReceiptDate'><input type='text' id='txtTblModalReceivableReceiptDate" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle datepicker-input input-sm' data-date-format='dd/mm/yyyy' onkeypress='DisableEnterKey(id);' onfocus='DisableEnterKey(id);' data-required='false' placeholder='' /> </td> ";
                    divData += "            <td class='tblModalReceivableNotes'><input type='text' id='txtTblModalReceivableNotes" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' onkeypress='DisableEnterKey(id);' onfocus='DisableEnterKey(id);' data-required='false' placeholder='' /> </td> ";
                //}

                divData += "            <td class='tblModalReceivableViewrOder " + (pIsInvoiceEdit ? "" : "hide") + "'><input type='text' id='txtTblModalReceivableViewOrder" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='number' onkeypress='CheckValueIsInteger(id);' onfocus='CheckValueIsInteger(id);' data-required='false' maxlength='3' value='' /> </td> ";
                divData += "        </tr> ";
            });
            divData += '            </tbody> ';
            divData += '        </table> ';
            divData += '    </div> ';
            divData += ' </section> ';
            $("#" + pDivName).append(divData);
            $.each(JSON.parse(data[0]), function (i, item) {
                debugger;
                //ReceivablePOrC_GetList(item.POrC, "slReceivablePOrC" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID);
                FillListFromObject(item.POrC, 1, "P/C", "slReceivablePOrC" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID, pPOrCData, null);
                GetListTaxTypeWithNameAndPercAttr(item.TaxTypeID, "/api/TaxeTypes/LoadAllWithWhereClause"
                    , "<--Select-->", "slReceivableTax" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID, "WHERE IsInactive=0 ORDER BY Name"
                    , function () {
                        $("#slReceivableDiscount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).html($("#slReceivableTax" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).html());
                        $("#slReceivableDiscount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.DiscountTypeID == 0 ? "" : item.DiscountTypeID);
                        $("#slReceivableTax" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + " option[IsDiscount='true']").addClass('hide');
                        $("#slReceivableDiscount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + " option[IsDiscount='false']").addClass('hide');
                    });
                ReceivableUOM_GetList(item.MeasurementID, "slReceivableUOM" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID);
                $("#txtTblModalReceivableQuantity" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val((item.Quantity == 0 || item.Quantity == undefined) && (item.SalePrice == 0 || item.SalePrice == undefined)/*to handle the case of item set to 0 and saved, so i prevent it from default*/ ? 1 : item.Quantity);
                $("#txtTblModalReceivableSalePrice" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.SalePrice);

                $("#txtTblModalReceivableAmountWithoutVAT" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.AmountWithoutVAT);
                $("#txtTblModalReceivableTaxPercentage" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.TaxPercentage);
                $("#txtTblModalReceivableTaxAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.TaxAmount);
                $("#txtTblModalReceivableDiscountPercentage" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.DiscountPercentage);
                $("#txtTblModalReceivableDiscountAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.DiscountAmount);

                $("#txtTblModalReceivableSaleAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.SaleAmount);
                $("#txtTblModalReceivableExchangeRate" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.ExchangeRate);
                $("#txtTblModalReceivableInvoice" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.InvoiceNumber == 0 ? "" : item.InvoiceNumber);
                $("#txtTblModalReceivableReceiptNo" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.ReceiptNo == 0 ? "" : item.ReceiptNo);
                
                $("#txtTblModalReceivableReceiptDate" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).datepicker().on('changeDate'
                    , function () {
                        $(this).datepicker('hide');
                    });;
                $("#txtTblModalReceivableReceiptDate" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val((Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(item.ReceiptDate)) > 0 ? ConvertDateFormat(GetDateWithFormatMDY(item.ReceiptDate)) : ""));
                $("#txtTblModalReceivableNotes" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.Notes == 0 ? "" : item.Notes);
                $("#txtTblModalReceivableViewOrder" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.ViewOrder == 0 ? "" : item.ViewOrder);
                //ReceivableCurrency_GetList(item.CurrencyID, "slReceivableCurrency" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID, null);
                //pCodeOrName: 1-Code, 2-Name, 3-CurrencyWithAttrs(ExchangeRate)
                FillListFromObject(item.CurrencyID, 3/*pCodeOrName*/, null, "slReceivableCurrency" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID, pCurData, null);
            });
            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. FillReceivablesModalTableControls in mainapp.master.js", "");
        }
    });
}
function FillReceivablesModalTableControls_UnFilledSl(pStrFnName, pWhereClause, pDivName, ptblModalName, pCheckboxNameAttr, pIsInsert, pIsInvoiceEdit, callback) {
    debugger;
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var pItems = JSON.parse(data[0]);
            var pPOrCData = data[1];
            var pCurData = data[2];
            if (pItems.length > 0) {
                if (pItems[0].IsFleet)
                    glbNumberOfInvoiceRoutings = pItems.length;
                else
                    glbNumberOfInvoiceRoutings = 0;
            }
            else
                glbNumberOfInvoiceRoutings = 0;
            //Clear the div
            $("#" + pDivName).html("");
            var divData = ' <section class="panel panel-default" style="overflow: scroll; width:auto ; height: 300px;"> ';
            divData += '    <div class="table-responsive"> ';
            divData += '        <table id="' + ptblModalName + '" class="table table-striped b-t b-light text-sm  table-hover"> ';
            divData += '            <thead> ';
            divData += '            <tr> ';
            divData += '                <th id="HeaderSelectChargeTypesIDs" ' + (pIsInsert || pIsInvoiceEdit ? '>' : ' class="hide">');
            divData += '                </th> ';
            divData += '                <th>' + TranslateString("ChargeType") + '</th> ';
            divData += '                <th class="hide">P/C</th> ';
            divData += '                <th class="hide">UOM</th> ';
            if (glbNumberOfInvoiceRoutings != undefined && glbNumberOfInvoiceRoutings != null && glbNumberOfInvoiceRoutings > 0) {
                divData += '                <th>No Of Orders</th> ';
                divData += '                <th>Amt w/o VAT</th> ';
            }
            if (glbNumberOfInvoiceRoutings != undefined && glbNumberOfInvoiceRoutings != null && glbNumberOfInvoiceRoutings > 0) {
                divData += '                <th class="hide">' + TranslateString("Quantity") + '</th> ';
                divData += '                <th class="hide">' + TranslateString("UnitPrice") + '</th> ';
            }
            else {
                divData += '                <th>' + TranslateString("Quantity") + '</th> ';
                divData += '                <th>' + TranslateString("UnitPrice") + '</th> ';
            }
            divData += '                <th class="' + (pDefaults.IsTaxOnItems ? '' : 'hide') + '">' + TranslateString("TaxType") + '</th> ';
            divData += '                <th class="hide">TaxPerc</th> ';
            divData += '                <th class="' + (pDefaults.IsTaxOnItems ? '' : 'hide') + '">' + TranslateString("TaxAmt") + '</th> ';
            divData += '                <th class="' + (pDefaults.IsTaxOnItems ? '' : 'hide') + '">' + TranslateString("Deduction") + '</th> ';
            divData += '                <th class="hide">DeductionPerc</th> ';
            divData += '                <th class="' + (pDefaults.IsTaxOnItems ? '' : 'hide') + '">' + TranslateString("DeductionAmt") + '</th> ';
            divData += '                <th>' + TranslateString("TotalAmount") + '</th> ';
            divData += '                <th ' + (pIsInvoiceEdit ? ' class="hide" ' : '') + '>' + TranslateString("Ex.Rate") + '</th> ';
            divData += '                <th>' + TranslateString("Cur") + '</th> ';
            divData += '                <th>' + TranslateString("Inv.No") + '</th> ';
            divData += '                <th ' + (pIsInvoiceEdit ? '' : ' class="hide" ') + '>' + TranslateString("Order") + '</th> ';
            divData += '                <th class="rounded-right hide"></th> ';
            divData += '            </tr> ';
            divData += '            </thead> ';
            divData += '            <tbody> ';
            // Bind Rows
            $.each(pItems, function (i, item) {
                divData += "        <tr ID='" + item.ID + "'> ";
                divData += "            <td class='tblModalReceivableID " + (pIsInsert || pIsInvoiceEdit ? " ' " : " hide '") + " > <input name='" + pCheckboxNameAttr + "' type='checkbox' value='" + item.ID + "' " + (!pIsInsert && !pIsInvoiceEdit && item.InvoiceID == 0 && item.DraftInvoiceID == 0/*this is an edit for hidden rec. item coz its added to an invoice so dont update*/ ? " checked='checked' " : "") + "></td> ";//if item has invoiceID then check by default
                divData += "            <td class='tblModalReceivable' val='" + item.ChargeTypeID + "' style='width:300px;'>" + (pDefaults.UnEditableCompanyName == "GBL" ? (item.ChargeTypeName + " (" + item.ChargeTypeCode + ")") : item.ChargeTypeName) + "</td> ";
                divData += "            <td class='tblModalReceivablePOrC hide'> <select id='slReceivablePOrC" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='false' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "><option value=" + item.POrC + ">" + (item.POrCCode) + "</option></select> </td> ";
                divData += "            <td class='tblModalReceivableUOM hide'> <select id='slReceivableUOM" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='false' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "><option value=" + item.MeasurementID + ">" + (item.MeasurementCode) + "</option></select></td> ";
                if (glbNumberOfInvoiceRoutings != undefined && glbNumberOfInvoiceRoutings != null && glbNumberOfInvoiceRoutings > 0) {
                    divData += "            <td class='tblModalReceivableNumberOfRoutings'> <input type='text' id='txtTblModalReceivableNumberOfRoutings" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='number' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + "  onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);' data-required='false' maxlength='10' placeholder='0' value=" + glbNumberOfInvoiceRoutings + " disabled " + " /> </td> ";
                    divData += "            <td><input type='text' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + " value=" + item.AmountWithoutVAT + " /> </td> ";
                }
                if (glbNumberOfInvoiceRoutings != undefined && glbNumberOfInvoiceRoutings != null && glbNumberOfInvoiceRoutings > 0) {
                    divData += "            <td class='tblModalReceivableQuantity hide'> <input type='text' id='txtTblModalReceivableQuantity" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='number' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + "  onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);' data-required='false' maxlength='10' placeholder='0' value=" + ((item.Quantity == 0 || item.Quantity == undefined) && (item.SalePrice == 0 || item.SalePrice == undefined)/*to handle the case of item set to 0 and saved, so i prevent it from default*/ ? 1 : item.Quantity) + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + " /> </td> ";
                    divData += "            <td class='tblModalReceivableSalePrice hide'> <input type='text' id='txtTblModalReceivableSalePrice" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='float' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + " onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit) && pDefaults.UnEditableCompanyName != "FIV" ? "" : " disabled ") + " value=" + item.SalePrice + " /> </td> ";
                }
                else {
                    divData += "            <td class='tblModalReceivableQuantity'> <input type='text' id='txtTblModalReceivableQuantity" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='number' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + "  onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);' data-required='false' maxlength='10' placeholder='0' value=" + ((item.Quantity == 0 || item.Quantity == undefined) && (item.SalePrice == 0 || item.SalePrice == undefined)/*to handle the case of item set to 0 and saved, so i prevent it from default*/ ? 1 : item.Quantity) + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + " /> </td> ";
                    divData += "            <td class='tblModalReceivableSalePrice'> <input type='text' id='txtTblModalReceivableSalePrice" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='float' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + " onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + (((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit) && pDefaults.UnEditableCompanyName != "FIV" ? "" : " disabled ") + " value=" + item.SalePrice + " /> </td> ";
                }
                divData += "            <td class='tblModalReceivableAmountWithoutVAT hide'><input type='text' disabled='disabled' id='txtTblModalReceivableAmountWithoutVAT" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + " value=" + item.AmountWithoutVAT + " /> </td> ";
                divData += "            <td class='tblModalReceivableTax " + (pDefaults.IsTaxOnItems ? "" : " hide ") + "'> <select disabled='disabled' id='slReceivableTax" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='controlStyle' style='width:150px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + " data-required='false'" + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "><option value=" + item.TaxTypeID + " CurrentPercentage=" + item.TaxPercentage + " IsDiscount=false" + ">" + (item.TaxTypeName) + "</option></select> </td> ";
                divData += "            <td class='tblModalReceivableTaxPercentage hide'> <input type='text' id='txtTblModalReceivableTaxPercentage" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + " value=" + item.TaxPercentage + " /> </td> ";
                divData += "            <td class='tblModalReceivableTaxAmount " + (pDefaults.IsTaxOnItems ? "" : " hide ") + "'> <input disabled='disabled' type='text' id='txtTblModalReceivableTaxAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + " value=" + item.TaxAmount + " /> </td> ";
                divData += "            <td class='tblModalReceivableDiscount " + (pDefaults.IsTaxOnItems ? "" : " hide ") + "'> <select disabled='disabled' id='slReceivableDiscount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='controlStyle' style='width:150px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' " + (pIsInvoiceEdit ? "onchange='InvoiceEdit_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");'" : "onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsert + ");' ") + " data-required='false'" + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "><option value=" + item.DiscountTypeID + " CurrentPercentage=" + item.DiscountPercentage + " IsDiscount=true" + ">" + (item.DiscountPercentage + "%") + "</option></select> </td> ";
                divData += "            <td class='tblModalReceivableDiscountPercentage hide'> <input type='text' id='txtTblModalReceivableDiscountPercentage" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + " value=" + item.DiscountPercentage + " /> </td> ";
                divData += "            <td class='tblModalReceivableDiscountAmount " + (pDefaults.IsTaxOnItems ? "" : " hide ") + "'> <input disabled='disabled' type='text' id='txtTblModalReceivableDiscountAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + " value=" + item.DiscountAmount + " /> </td> ";

                divData += "            <td class='tblModalReceivableSaleAmount'><input type='text' name='txtTblModalReceivableSaleAmount'  disabled='disabled' id='txtTblModalReceivableSaleAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='float' " + (pIsInvoiceEdit ? "onchange='Invoices_ChangeAmountInInvoiceEdit(false);'" : "onchange='Receivables_txtTblModalSaleAmount_Changed(" + item.ID + "," + pIsInsert + ");' ") + " onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + " value=" + item.SaleAmount + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + " /> </td> ";
                divData += "            <td class='tblModalReceivableExchangeRate " + (pIsInvoiceEdit ? "hide" : "") + "'><input type='text' name='txtTblModalReceivableExchangeRate' id='txtTblModalReceivableExchangeRate" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='float' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + " value=" + item.ExchangeRate + ($("#hDefaultCurrencyID").val() == item.CurrencyID || item.InvoiceID != 0 || pIsInvoiceEdit ? "disabled" : "") + " /> </td> ";
                divData += "            <td class='tblModalReceivableCurrency'> <select id='slReceivableCurrency" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' " + (pIsInvoiceEdit ? "disabled='disabled' " : "") + " class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Receivables_txtTblModalCurrency_Changed(" + item.ID + "," + pIsInvoiceEdit + ");' data-required='false' " + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) || pIsInvoiceEdit ? "" : " disabled ") + "><option value=" + item.CurrencyID + ">" + (item.CurrencyCode) + "</option></select> </td> ";
                divData += "            <td class='tblModalReceivableInvoice'><input type='text' id='txtTblModalReceivableInvoice" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='float' onkeypress='DisableEnterKey(id);' onfocus='DisableEnterKey(id);' data-required='false' maxlength='6' placeholder=''  value=" + item.InvoiceNumber + " disabled /> </td> ";
                divData += "            <td class='tblModalReceivableViewrOder " + (pIsInvoiceEdit ? "" : "hide") + "'><input type='text' id='txtTblModalReceivableViewOrder" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + "' class='form-control controlStyle' data-type='number' onkeypress='CheckValueIsInteger(id);' onfocus='CheckValueIsInteger(id);' data-required='false' maxlength='3' value=" + item.ViewOrder + " /> </td> ";
                divData += "        </tr> ";
            });
            divData += '            </tbody> ';
            divData += '        </table> ';
            divData += '    </div> ';
            divData += ' </section> ';
            $("#" + pDivName).append(divData);
            glbNumberOfInvoiceRoutings = 0;
            //$.each(JSON.parse(data[0]), function (i, item) {
            //    debugger;
            //    //ReceivablePOrC_GetList(item.POrC, "slReceivablePOrC" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID);
            //    FillListFromObject(item.POrC, 1, "P/C", "slReceivablePOrC" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID, pPOrCData, null);
            //    GetListTaxTypeWithNameAndPercAttr(item.TaxTypeID, "api/TaxeTypes/LoadAllWithWhereClause"
            //    , "<--Select-->", "slReceivableTax" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID, "WHERE IsInactive=0 ORDER BY Name"
            //    , function () {
            //        $("#slReceivableDiscount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).html($("#slReceivableTax" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).html());
            //        $("#slReceivableDiscount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.DiscountTypeID == 0 ? "" : item.DiscountTypeID);
            //        $("#slReceivableTax" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + " option[IsDiscount='true']").addClass('hide');
            //        $("#slReceivableDiscount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID + " option[IsDiscount='false']").addClass('hide');
            //    });
            //    //ReceivableUOM_GetList(item.MeasurementID, "slReceivableUOM" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID);
            //    $("#txtTblModalReceivableQuantity" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val((item.Quantity == 0 || item.Quantity == undefined) && (item.SalePrice == 0 || item.SalePrice == undefined)/*to handle the case of item set to 0 and saved, so i prevent it from default*/ ? 1 : item.Quantity);
            //    $("#txtTblModalReceivableSalePrice" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.SalePrice);
            //    $("#txtTblModalReceivableAmountWithoutVAT" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.AmountWithoutVAT);
            //    $("#txtTblModalReceivableTaxPercentage" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.TaxPercentage);
            //    $("#txtTblModalReceivableTaxAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.TaxAmount);
            //    $("#txtTblModalReceivableDiscountPercentage" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.DiscountPercentage);
            //    $("#txtTblModalReceivableDiscountAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.DiscountAmount);
            //    $("#txtTblModalReceivableSaleAmount" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.SaleAmount);
            //    $("#txtTblModalReceivableExchangeRate" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.ExchangeRate);
            //    $("#txtTblModalReceivableInvoice" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.InvoiceNumber == 0 ? "" : item.InvoiceNumber);
            //    $("#txtTblModalReceivableViewOrder" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID).val(item.ViewOrder == 0 ? "" : item.ViewOrder);
            //    //ReceivableCurrency_GetList(item.CurrencyID, "slReceivableCurrency" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID, null);
            //    //pCodeOrName: 1-Code, 2-Name, 3-CurrencyWithAttrs(ExchangeRate)
            //    //FillListFromObject(item.CurrencyID, 3/*pCodeOrName*/, null, "slReceivableCurrency" + (pIsInvoiceEdit ? "InvoiceEdit" : "") + item.ID, pCurData, null);
            //});
            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. FillReceivablesModalTableControls in mainapp.master.js", "");
        }
    });
}
//pIsInsertChoice : is used to as a flag to change the checked property of Rows according to money is 0 or not
function FillReceivablesModalTableFromPayables(pStrFnName, pWhereClause, pDivName, ptblModalName, pCheckboxNameAttr, pIsInsertChoice, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var pPOrCData = data[1];
            var pCurData = data[2];
            var pTaxTypeList = data[3];
            //Clear the div
            $("#" + pDivName).html("");
            var divData = ' <section class="panel panel-default" style="overflow: scroll; width:auto ; height: 350px;"> ';
            divData += '    <div class="table-responsive"> ';
            divData += '        <table id="' + ptblModalName + '" class="table table-striped b-t b-light text-sm  table-hover"> ';
            divData += '            <thead> ';
            divData += '            <tr> ';
            divData += '                <th id="HeaderSelectChargeTypesIDs"> ';
            divData += '                </th> ';
            divData += '                <th>ChargeType</th> ';
            divData += '                <th class="hide">P/C</th> ';
            //divData += '                <th>Supplier</th> ';
            divData += '                <th class="hide">UOM</th> ';
            divData += '                <th>Quantity</th> ';
            //divData += '                <th>UnitPrice</th> ';
            //divData += '                <th>CostAmount</th> ';
            divData += '                <th>ExpecSalePrice</th> ';
            divData += '                <th>UnitPrice</th> ';
            divData += '                <th class="hide">TaxType</th> ';
            divData += '                <th class="hide">DiscountType</th> ';
            divData += '                <th>SaleAmount</th> ';
            //divData += '                <th>SupplierInvNo</th> ';
            divData += '                <th>Ex.Rate</th> ';
            divData += '                <th>Currency</th> ';
            divData += '                <th>HBL/Cert</th> ';
            divData += '                <th class="rounded-right hide"></th> ';
            divData += '            </tr> ';
            divData += '            </thead> ';
            divData += '            <tbody> ';
            // Bind Rows
            $.each(JSON.parse(data[0]), function (i, item) {
                divData += "        <tr ID='" + item.ID + "'> ";
                divData += "            <td class='tblModalReceivableID'" + " > <input name='" + pCheckboxNameAttr + "' type='checkbox' value='" + item.ID + "' checked></td> ";
                //divData += "            <td class='tblModalReceivable' val='" + item.ChargeTypeID + "'>" + item.ChargeTypeCode + " (" + item.ChargeTypeName + ")" + "</td> ";
                divData += "            <td class='tblModalReceivable' id=ReceivableChargeType" + item.ID + " val='" + item.ChargeTypeID + "' style='width:300px;'>" + item.ChargeTypeName + "</td> ";
                divData += "            <td class='tblModalReceivablePOrC hide'> <select id='slReceivablePOrC" + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='false'></select> </td> ";
                //divData += "            <td class='tblModalReceivableSupplier'> <select id='slReceivableSupplier" + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='false'></select> </td> ";
                divData += "            <td class='tblModalReceivableUOM hide'> <select id='slReceivableUOM" + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='false'><option value=" + item.MeasurementID + ">" + item.MeasurementCode + "</option></select></td> ";
                divData += "            <td class='tblModalReceivableQuantity'> <input type='text' id='txtTblModalReceivableQuantity" + item.ID + "' class='form-control controlStyle' data-type='number' onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsertChoice + ");'  onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);' data-required='false' maxlength='10' placeholder='0' value='1'/> </td> ";
                //divData += "            <td class='tblModalReceivableCostPrice'> <input type='text' id='txtTblModalReceivableCostPrice" + item.ID + "' class='form-control controlStyle' data-type='float' onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + ");' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' /> </td> ";
                //divData += "            <td class='tblModalReceivableCostAmount'><input type='text' name='txtTblModalReceivableCostAmount' id='txtTblModalReceivableCostAmount" + item.ID + "' class='form-control controlStyle' data-type='float'  onchange='Receivables_txtTblModalCostAmount_Changed(" + item.ID + ");' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' /> </td> ";
                divData += "            <td class='tblModalReceivableInitialSalePrice'> <input type='text' id='txtTblModalReceivableInitialSalePrice" + item.ID + "' disabled='disabled' class='input-sm form-control parsley-validated controlStyle ' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-type='float' data-required='false' maxlength='10' placeholder='0.00' /> </td> ";
                divData += "            <td class='tblModalReceivableSalePrice'> <input type='text' id='txtTblModalReceivableSalePrice" + item.ID + "' class='form-control controlStyle' data-type='float' onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsertChoice + ");' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' /> </td> ";

                divData += "            <td class='tblModalReceivableAmountWithoutVAT hide'><input type='text' disabled='disabled' id='txtTblModalReceivableAmountWithoutVAT" + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + "/> </td> ";
                divData += "            <td class='tblModalReceivableTax hide'> <select id='slReceivableTax" + item.ID + "' class='controlStyle' style='width:150px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' " + ("onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsertChoice + ");' ") + " data-required='false'" + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) ? "" : " disabled ") + "></select> </td> ";
                divData += "            <td class='tblModalReceivableTaxPercentage hide'> <input type='text' id='txtTblModalReceivableTaxPercentage" + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + "/> </td> ";
                divData += "            <td class='tblModalReceivableTaxAmount hide'> <input type='text' id='txtTblModalReceivableTaxAmount" + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + "/> </td> ";
                divData += "            <td class='tblModalReceivableDiscount hide'> <select id='slReceivableDiscount" + item.ID + "' class='controlStyle' style='width:150px;' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' " + ("onchange='Receivables_Row_CalculateReceivablesAmount(" + item.ID + "," + pIsInsertChoice + ");' ") + " data-required='false'" + ((item.InvoiceID == 0 && item.DraftInvoiceID == 0) ? "" : " disabled ") + "></select> </td> ";
                divData += "            <td class='tblModalReceivableDiscountPercentage hide'> <input type='text' id='txtTblModalReceivableDiscountPercentage" + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + "/> </td> ";
                divData += "            <td class='tblModalReceivableDiscountAmount hide'> <input type='text' id='txtTblModalReceivableDiscountAmount" + item.ID + "' disabled='disabled' class='form-control controlStyle' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + "/> </td> ";

                divData += "            <td class='tblModalReceivableSaleAmount'><input type='text' name='txtTblModalReceivableSaleAmount'  disabled='disabled'  id='txtTblModalReceivableSaleAmount" + item.ID + "' class='form-control controlStyle' data-type='float'  onchange='Receivables_txtTblModalSaleAmount_Changed(" + item.ID + "," + pIsInsertChoice + ");' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' /> </td> ";
                //divData += "            <td class='tblModalReceivableSupplierInvoiceNo'> <input type='text' id='txtTblModalReceivableSupplierInvoiceNo" + item.ID + "' class='input-sm form-control parsley-validated controlStyle upperCase' data-type='text' data-required='false' maxlength='10' placeholder='Inv No' /> </td> ";
                divData += "            <td class='tblModalReceivableExchangeRate'><input type='text' id='txtTblModalReceivableExchangeRate" + item.ID + "' class='form-control controlStyle' data-type='float' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);'  data-required='false' maxlength='10' placeholder='0.00' " + ($("#hDefaultCurrencyID").val() == item.CurrencyID ? "disabled" : "") + " /> </td> ";
                divData += "            <td class='tblModalReceivableCurrency'> <select id='slReceivableCurrency" + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' onchange='Receivables_txtTblModalCurrency_Changed(" + item.ID + "," + false + ");' data-required='false'></select> </td> ";
                divData += "            <td class='tblModalReceivableHouseNumber'>" + (item.HouseNumber == 0 ? "" : item.HouseNumber) + (item.CertificateNumber == 0 ? "" : (" / " + item.CertificateNumber)) + "</td>";
                divData += "        </tr> ";
            });
            divData += '            </tbody> ';
            divData += '        </table> ';
            divData += '    </div> ';
            divData += ' </section> ';
            $("#" + pDivName).append(divData);
            //to fill the controls after creating them in the previous loop
            $.each(JSON.parse(data[0]), function (i, item) {
                debugger;
                FillListFromObject(item.POrC, 1, "P/C", "slReceivablePOrC" + item.ID, pPOrCData, null);
                Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(pTaxTypeList, "ID", "Name", ': ', "<--Select-->", "slReceivableTax" + item.ID, item.TaxTypeID, "CurrentPercentage,IsDiscount",
                    function () {
                        $("#slReceivableDiscount" + item.ID).html($("#slReceivableTax" + item.ID).html());
                        $("#slReceivableDiscount" + item.ID).val(item.DiscountTypeID == 0 ? "" : item.DiscountTypeID);
                        $("#slReceivableTax" + item.ID + " option[IsDiscount='true']").addClass('hide');
                        $("#slReceivableDiscount" + item.ID + " option[IsDiscount='false']").addClass('hide');
                    });
                $("#txtTblModalReceivableQuantity" + item.ID).val(item.Quantity == 0 ? 1 : item.Quantity);
                $("#txtTblModalReceivableSalePrice" + item.ID).val(item.InitialSalePrice);
                $("#txtTblModalReceivableAmountWithoutVAT" + item.ID).val(item.AmountWithoutVAT);
                $("#txtTblModalReceivableTaxPercentage" + item.ID).val(item.TaxPercentage);
                $("#txtTblModalReceivableTaxAmount" + item.ID).val(item.TaxAmount);
                $("#txtTblModalReceivableDiscountPercentage" + item.ID).val(item.DiscountPercentage);
                $("#txtTblModalReceivableDiscountAmount" + item.ID).val(item.DiscountAmount);

                $("#txtTblModalReceivableSaleAmount" + item.ID).val(item.InitialSalePrice * (item.Quantity == 0 ? 1 : item.Quantity));
                $("#txtTblModalReceivableExchangeRate" + item.ID).val(item.ExchangeRate);
                FillListFromObject(item.CurrencyID, 3/*pCodeOrName*/, null, "slReceivableCurrency" + item.ID, pCurData
                    , function () { //this callback is used to set the InitialSalePrice in case of generating from payables
                        debugger;
                        $("#txtTblModalReceivableInitialSalePrice" + item.ID).val(item.InitialSalePrice + " " + $("#slReceivableCurrency" + item.ID + " option:selected").text());
                    });
                //ReceivablePOrC_GetList(item.POrC, "slReceivablePOrC" + item.ID);
                //ReceivableSuppliers_GetList(item.SupplierOperationPartnerID, "slReceivableSupplier" + item.ID);
                //GetListTaxTypeWithNameAndPercAttr(item.TaxTypeID, "api/TaxeTypes/LoadAllWithWhereClause"
                //, "<--Select-->", "slReceivableTax" + item.ID, "WHERE IsInactive=0 ORDER BY Name"
                //, function () {
                //    $("#slReceivableDiscount" + item.ID).html($("#slReceivableTax" + item.ID).html());
                //    $("#slReceivableDiscount" + item.ID).val(item.DiscountTypeID == 0 ? "" : item.DiscountTypeID);
                //    $("#slReceivableTax" + item.ID + " option[IsDiscount='true']").addClass('hide');
                //    $("#slReceivableDiscount" + item.ID + " option[IsDiscount='false']").addClass('hide');
                //});
                //ReceivableUOM_GetList(item.MeasurementID, "slReceivableUOM" + item.ID);
                //$("#txtTblModalReceivableCostPrice" + item.ID).val(item.CostPrice);
                //$("#txtTblModalReceivableCostAmount" + item.ID).val(item.CostAmount);
                //the (txtTblModalReceivableInitialSalePrice) is set in the callback of the currency getlist
                //$("#txtTblModalReceivableInitialSalePrice" + item.ID).val(item.InitialSalePrice);
                //$("#txtTblModalReceivableSupplierInvoiceNo" + item.ID).val((item.SupplierInvoiceNo == 0 ? "" : item.SupplierInvoiceNo));
                //ReceivableCurrency_GetList(item.CurrencyID, "slReceivableCurrency" + item.ID
                //    , function () {
                //        debugger;
                //        $("#txtTblModalReceivableInitialSalePrice" + item.ID).val(item.InitialSalePrice + " " + $("#slReceivableCurrency" + item.ID + " option:selected").text());
                //    });
                //pCodeOrName: 1-Code, 2-Name, 3-CurrencyWithAttrs(ExchangeRate)

            });
            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. FillReceivablesModalTableFromPayables in mainapp.master.js", "");
        }
    });
}
//fill AccNote Items in table modal
function FillAccNoteModalTableControls(pStrFnName, pWhereClause, pDivName, ptblModalName, pCheckboxNameAttr, pAccNoteType, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var pPOrCData = data[1];
            var pCurData = data[2];
            //Clear the div
            $("#" + pDivName).html("");
            var divData = ' <section class="panel panel-default" style="overflow: scroll; width:auto ; height: 350px;"> ';
            divData += '    <div class="table-responsive"> ';
            divData += '        <table id="' + ptblModalName + '" class="table table-striped b-t b-light text-sm  table-hover"> ';
            divData += '            <thead> ';
            divData += '            <tr> ';
            divData += '                <th id="HeaderSelectChargeTypesIDs" ';
            divData += '                </th> ';
            divData += '                <th>' + TranslateString("ChargeType") + '</th> ';
            divData += '                <th>' + TranslateString("Amount") + '</th> ';
            //divData += '                <th>Ex.Rate</th> ';
            divData += '                <th>' + TranslateString("Currency") + '</th> ';
            divData += '                <th class="rounded-right hide"></th> ';
            divData += '            </tr> ';
            divData += '            </thead> ';
            divData += '            <tbody> ';
            // Bind Rows
            $.each(JSON.parse(data[0]), function (i, item) {
                divData += "        <tr ID='" + item.ID + "'> ";
                divData += "            <td class='tblModalAccNoteID'> <input name='" + pCheckboxNameAttr + "' type='checkbox' value='" + item.ID + "' " + ((item.IsApproved && pDefaults.UnEditableCompanyName != "SAF") ? " disabled='disabled' " : "") + "></td> ";//if item has invoiceID then check by default
                divData += "            <td class='tblModalAccNoteCharge' val='" + item.ChargeTypeID + "' style='width:600px;'>" + item.ChargeTypeName + "</td> ";
                divData += "            <td class='tblModalAccNoteAmount'>" + (pAccNoteType == constTransactionDebitNote ? item.SaleAmount : item.CostAmount) + " </td> ";
                //divData += "            <td class='tblModalAccNoteExchangeRate'>" + item.ExchangeRate + "</td> ";
                divData += "            <td class='tblModalAccNoteCurrency'>" + item.CurrencyCode + " </td> ";
                divData += "        </tr> ";
            });
            divData += '            </tbody> ';
            divData += '        </table> ';
            divData += '    </div> ';
            divData += ' </section> ';
            $("#" + pDivName).append(divData);
            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. FillAccNoteModalTableControls in mainapp.master.js", "");
        }
    });
}
function FillAirPackagesModalTableControls(pStrFnName, pControllerParameters, pDivName, ptblModalName, pCheckboxNameAttr, pIsInsert, callback) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: pControllerParameters,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            //var pPOrCData = data[1];
            //var pCurData = data[2];
            //Clear the div
            $("#" + pDivName).html("");
            var divData = ' <section class="panel panel-default" style="overflow: scroll; width:100%; height: 150px;"> ';
            //var divData = ' <section class="panel panel-default m-l-n" style="overflow: scroll; width:auto; height: 350px;"> ';
            divData += '    <div class="table-responsive"> ';
            divData += '        <table id="' + ptblModalName + '" class="table table-striped b-t b-light text-sm  table-hover"> ';
            divData += '            <thead> ';
            divData += '            <tr> ';
            divData += '                <th id="HeaderSelectShipmentPackageID" ' + (pIsInsert ? '>' : ' class="hide">');
            divData += '                </th> ';
            divData += '                <th id="HeaderDeleteShipmentPackageID" style="width:5%"> <input id="cbShpmntAirPackageDeleteHeader" type="checkbox" hidden />';
            divData += '                </th>';
            divData += '                <th style="width:17%;">PackageType</th>';
            divData += '                <th style="width:10%;">NoOfPkgs</th>';
            divData += '                <th style="width:18%;">Marks&Nos</th>';
            divData += '                <th style="width:10%;">Gross.Wt</th>';
            divData += '                <th style="width:10%;">Chg.Wt</th>';
            divData += '                <th style="width:10%;">Rates</th>';
            divData += '                <th style="width:10%;">Unit</th>';
            divData += '                <th style="width:10%;">Class</th>';
            divData += '                <th style="width:5%;">IsMin.</th>';
            divData += '                <th class="hide">Total</th>';
            divData += '                <th class="rounded-right hide"></th>';
            divData += '            </tr> ';
            divData += '            </thead> ';
            divData += '            <tbody> ';
            // Bind Rows
            $.each(JSON.parse(data[0]), function (i, item) {
                divData += "        <tr ID='" + item.ID + "'> ";
                divData += "            <td class='tblModalPackageID " + (pIsInsert ? " ' " : " hide '") + " > <input name='" + pCheckboxNameAttr + "' type='checkbox' value='" + item.ID + "' " + (pIsInsert ? "" : "checked='checked'") + "></td> ";
                divData += "            <td class='ID'> <input name='Delete' type='checkbox' value='" + item.ID + "' /></td>"
                divData += "            <td class='tblModalPackageType'> <select id='slTblModalPackageType" + item.ID + "' class='controlStyle' onfocus='DisableBackspaceKey(id);' onkeydown='DisableBackspaceKey(id);' onkeypress='DisableBackspaceKey(id);' data-required='true' style='width:100%;'></select></td> ";
                divData += "            <td class='tblModalNoOfPkg'> <input type='text' id='txtTblModalNoOfPkg" + item.ID + "' class='form-control input-sm'  onkeypress='CheckValueIsInteger(id);' onfocus='CheckValueIsInteger(id);' data-type='number' data-required='true' maxlength='8' placeholder='0' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalMarksAndNumbers'> <input type='text' id='txtTblModalMarksAndNumbers" + item.ID + "' maxlength='10' class='form-control input-sm' autocomplete='off' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' data-required='false' placeholder='' style='text-transform:uppercase;width:100%;' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalGrossWeightBll'><input type='text' id='txtTblModalGrossWeightBll" + item.ID + "' class='form-control input-sm' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id)' ; data-required='false' style='width:100%;' placeholder='Weight Charge' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalWeightChargeBll'> <input type='text' id='txtTblModalWeightChargeBll" + item.ID + "' class='form-control input-sm' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id)' ; data-required='false' style='width:100%;' placeholder='Weight Charge' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalRateCharge'> <input type='text' id='txtTblModalRateCharge" + item.ID + "' onkeypress='CheckValueIsDecimal(id);' onfocus='CheckValueIsDecimal(id);' onblur='CheckDecimalFormat(id);' data-type='number' class='form-control input-sm' data-required='false' style='width:100%;' maxlength='11' placeholder='0.0' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalWeightUnit'> <input type='text' id='txtTblModalWeightUnit" + item.ID + "' maxlength='10' class='form-control input-sm' autocomplete='off' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' data-required='false' placeholder='' style='text-transform:uppercase;width:100%;' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalRateClass'> <input type='text' id='txtTblModalRateClass" + item.ID + "' maxlength='10' class='form-control input-sm' autocomplete='off' onfocus='DisableEnterKey(id);' onkeypress='DisableEnterKey(id);' data-required='false' placeholder='' style='text-transform:uppercase;width:100%;' " + (item.IsApproved ? " disabled " : "") + "/> </td> ";
                divData += "            <td class='tblModalIsMinimum' > <input  type='checkbox' id='ChkTblModalIsMinimum" + item.ID + "'" + (item.IsApproved ? " disabled " : "") + "/></td> ";

                divData += "        </tr> ";
            });
            divData += '            </tbody> ';
            divData += '        </table> ';
            divData += '    </div> ';
            divData += ' </section> ';
            $("#" + pDivName).append(divData);
            //to fill the controls after creating them in the previous loop
            var weightCharge = 0;
            $.each(JSON.parse(data[0]), function (i, item) {
                debugger;

                $("#slTblModalPackageType" + item.ID).html($("#slPackageTypes").html());
                $("#slTblModalPackageType" + item.ID).val(item.PackageTypeID == 0 ? "" : item.PackageTypeID);
                $("#txtTblModalNoOfPkg" + item.ID).val(pIsInsert ? 1 : item.Quantity);
                $("#txtTblModalMarksAndNumbers" + item.ID).val(item.MarksAndNumbers);
                $("#txtTblModalGrossWeightBll" + item.ID).val(item.GrossWeight);
                $("#txtTblModalWeightUnit" + item.ID).val(item.WeightUnit == 0 ? "" : item.WeightUnit);
                $("#txtTblModalRateClass" + item.ID).val(item.RateClass == 0 ? "" : item.RateClass);

                $("#txtTblModalWeightChargeBll" + item.ID).val(item.ChargeableWeight);
                $("#txtTblModalRateCharge" + item.ID).val(item.Rate);
                $("#ChkTblModalIsMinimum" + item.ID).prop('checked', item.IsMinimum);
                //if ($("#hDefaultCurrencyID").val() == item.CurrencyID)
                weightCharge = weightCharge + (item.Rate == 0 ? "" : (item.IsMinimum == true ? item.Rate : (item.GrossWeight > item.ChargeableWeight ? item.GrossWeight * item.Rate : item.ChargeableWeight * item.Rate)))
            });
            weightCharge = parseFloat(weightCharge).toFixed(2);
            $("#txtWeightCharge").val(weightCharge);
            BindAllCheckboxonTable(ptblModalName, "ID", "cbShpmntAirPackageDeleteHeader");
            CheckAllCheckbox("HeaderDeleteShipmentPackageID");
            //SetDatepickerFormat();//coz when adding datepicker dynamically i ve to rebind it
            if (callback != null && callback != undefined)
                callback();
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. GetListAsCheckboxes in mainapp.master.js", "");
        }
    });
}
//Fill Dropdown list
function FillListWithNames(pStrFnName, pStrFirstRow, pListName, pWhereClause) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            //ClearAllListItems;
            $("#" + pListName).html("");
            var option = ' <li class="active" value="0"><a href="#"><input type="radio" name="d-s-r">' + pStrFirstRow + '</a></li> ';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                option += ' <li class="" value="' + item.ID + '"><a href="#"><input type="radio" name="d-s-r">' + item.Name + '</a></li> ';
            });

            $("#" + pListName).append(option);

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. FillListWithNames in mainapp.master.js", "");
        }
    });
}
//fill list without first row
function FillListWithNamesWithoutFirstRow(pID, pStrFnName, pListName, pWhereClause) {
    $.ajax({
        type: "GET",
        url: strServerURL + pStrFnName,
        data: { pWhereClause: pWhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            //ClearAllListItems;
            $("#" + pListName).html("");
            var option = '';
            // Bind Data
            $.each(JSON.parse(data[0]), function (i, item) {
                debugger;
                if (pID == item.ID)
                    option += ' <li class="active" value="' + item.ID + '"><a href="#"><input type="radio" name="d-s-r">' + item.Name + '</a></li> ';
                else
                    option += ' <li class="" value="' + item.ID + '"><a href="#"><input type="radio" name="d-s-r">' + item.Name + '</a></li> ';
            });

            $("#" + pListName).append(option);

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. FillListWithNames in mainapp.master.js", "");
        }
    });
}
function FillSlAccountFromGroup(pSlName, pSlGroupName, pSlSubAccountName, pSubAccountID, pAccountID) {
    debugger;
    if (pSubAccountID == 0)
        pSubAccountID = $("#" + pSlGroupName).val();
    $("#" + pSlSubAccountName).html('<option value=0>' + 'AUTO GENERATED' + '</option>');
    FadePageCover(true);
    CallGETFunctionWithParameters("/api/ChartOfAccounts/LoadAll"
        , {
            pLanguage: $("[id$='hf_ChangeLanguage']").val()
            , pWhereClause: "WHERE ID IN (SELECT Account_ID FROM A_SubAccounts_Details WHERE SubAccount_ID=" + pSubAccountID + ")"
            , pOrderBy: " Name, Code"
        }
        , function (pData) {
            var pAccounts = pData[0];
            FillListFromObject_ERP(pAccountID, OptionNameCodeAccount == "true" ? 4 : 3 /*pCodeOrName*/, TranslateString("SelectFromMenu"), pSlName, pAccounts, null);
            FadePageCover(false);
        }
        , null);
}
function FillSlSubAccount(pSlName, pSlAccountName, pSubAccountID, pAccountID) {
    debugger;
    //$("#slSubAccount").val(0);
    if (pAccountID == 0)
        pAccountID = $("#" + pSlAccountName).val();
    FadePageCover(true);
    CallGETFunctionWithParameters("/api/ChartOfLinkingAccounts/LoadSubAccountDetails"
        , {
            pLanguage: $("[id$='hf_ChangeLanguage']").val()
            , pWhereClauseSubAccountDetails: "WHERE IsMain=0 AND Account_ID=" + pAccountID
            , pOrderBy: "Name"
        }
        , function (pData) {
            FillListFromObject_ERP(pSubAccountID, OptionNameCodeAccount == "true" ? 4 : 3/*pCodeOrName*/, TranslateString("SelectFromMenu"), pSlName, pData[0], null);
            FadePageCover(false);
        }
        , null);
}

////to be replaced with function ClearAll(containerName, callback)
//function ClearAllControls(pArryResetText, pArryResetSelectOption, pArrayResetCheckbox) {
//    debugger;
//    $('input[type="text"].validation-error').removeClass("validation-error");
//    $('select.validation-error').removeClass("validation-error");
//    // Reset Textbox Array list
//    if (pArryResetText != null) {
//        $.each(pArryResetText, function (i, item) {
//            $("#" + item).val("");
//        });
//    }
//    // Reset Selection Options Array list
//    if (pArryResetSelectOption != null) {
//        var _resetSelectOption = null;
//        $.each(pArryResetSelectOption, function (i, item) {
//            _resetSelectOption = $("#" + item);
//            _resetSelectOption[0].selectedIndex = 0;
//        });
//    }
//    // Reset Checkbox Array list
//    if (pArrayResetCheckbox != null) {
//        $.each(pArrayResetCheckbox, function (i, item) {
//            $("#" + item).prop('checked', false);
//        });
//    }
//    $(".alert-danger").slideUp();
//}

//Sherif: Added newly 11/02/2015
//used instead of function ClearAllControls(pArryResetText, pArryResetSelectOption, pArrayResetCheckbox) as it taked only the container name
function ClearAll(containerName, callback) {

    $(containerName + ' input[type="text"].validation-error').removeClass("validation-error");
    $(containerName + ' input[type="password"].validation-error').removeClass("validation-error");
    $(containerName + ' select.validation-error').removeClass("validation-error");
    $(containerName + ' .select2-selection__rendered').removeClass("validation-error");
    // Reset Textbox Array list
    var _ListofControls = $(containerName.toString() + ' input[type="text"]');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).val("");
        });
    }

    // Reset Textbox Array list
    var _ListofControls = $(containerName.toString() + ' input[type="number"]');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).val("");
        });
    }
    // sherif: Reset Inputs of type password
    _ListofControls = $(containerName.toString() + ' input[type="password"]');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).val("");
        });
    }
    // sherif: Reset Label Array list
    var _ListofControls = $(containerName.toString() + ' label[purpose="dynamicLabel"]');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).html("");
        });
    }
    // Reset Textbox Array list
    var _ListofControls = $(containerName.toString() + ' textarea');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).val("");
        });
    }
    // Reset Hidden Array list
    _ListofControls = $(containerName.toString() + ' input[type="hidden"]');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).val("");
        });
    }
    // Reset Selection Options Array list
    _ListofControls = $(containerName.toString() + ' select');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            item.selectedIndex = 0;
        });
    }
    // Reset Checkbox Array list
    _ListofControls = $(containerName.toString() + ' input[type="checkbox"]');
    if (_ListofControls != null && _ListofControls != undefined) {
        $.each(_ListofControls, function (i, item) {
            $(item).prop('checked', false);
        });
    }

    $(".alert-danger").slideUp();
    try {
        $('#lblShown').text("")
    }
    catch (ex) {

    }
    if (callback != null && callback != undefined)
        callback();
}
function ClearSlList(pSlName) {
    $("#" + pSlName).html("<option value=''><--Select--></option>");
}
function BindDataToHTMLTable(pHTMLTableID, pHTMLRowLayout, pData, callback) {
    // removes existing rows from table except header row
    $('#' + pHTMLTableID + ' tr:gt(0)').remove();
    //apply tmpl plugin to <script> and append result to table
    $("#" + pHTMLRowLayout).tmpl(pData).appendTo('#' + pHTMLTableID);
    if (callback != null && callback != undefined) {
        callback();
    }
    ReverseUIControls();
}

//function ShowDashboard() {
//    $('#div-main-content').show();
//}

//it attaches function to the checkboxes in tables so when all are checked then check cb-checkall too

//it attaches function to the checkboxes in tables so when all are checked then check cb-checkall too
function BindAllCheckboxonTable(pTableName, pCheckBoxColumnClassName, pCheckBoxID) {
    debugger;
    $("#" + pCheckBoxID).prop("checked", false); //initialised to be unchecked then according to total checkboxes it is rechecked or not
    $('#' + pTableName + ' td.' + pCheckBoxColumnClassName + ' input:checkbox').click(function () {
        debugger;
        if (!this.checked) {
            debugger;
            if (pCheckBoxID != null && pCheckBoxID != undefined) {
                $("#" + pCheckBoxID).prop('checked', false);
            }
            else {
                $("#cb-CheckAll").prop('checked', false);
            }
        }
        //sherif: check if all are checked then check the cb-checkall
        //note: it compares items with class(ID) and name(Delete) to exclude checked boxes which are not Delete
        else if ($('#' + pTableName + ' td.' + pCheckBoxColumnClassName + ' input:checkbox').length ==
            //sherif: coz i gave a name property to the checkboxes
            //$('#' + pTableName + ' td').find('input[type="checkbox"]:checked').length) {
            $('#' + pTableName + ' td').find('input[name="Delete"]:checked').length) {
            if (pCheckBoxID != null && pCheckBoxID != undefined) {
                $("#" + pCheckBoxID).prop('checked', true);
            }
            else {
                $("#cb-CheckAll").prop('checked', true);
            }
        }
    });
}

//it attaches function to the main checkbox in the header, so when changes the other checkboxes take its value
function CheckAllCheckbox(pCheckBoxID) {
    debugger;
    $("#" + pCheckBoxID).click(function (e) {

        var table = $(e.target).closest('table');

        $('td input[name="Delete"]:checkbox', table).not(':disabled').prop('checked',
            $(this).find('input:checkbox').is(':checked'));
    });
}


// get all select IDs from selected table
function GetAllSelectedIDs(pTableName) {
    var listOfIDs = new Array();
    $('#' + pTableName + ' td').find('input[type="checkbox"]:checked').each(function () {
        listOfIDs.push($(this).attr('value'));
    });
    return listOfIDs;
}
// get all select IDs from selected table as string
function GetAllSelectedIDsAsString(pTableName) {
    debugger;
    var listOfIDs = "";
    //$('#' + pTableName + ' td').find('input[type="checkbox"]:checked').each(function () {
    $('#' + pTableName + ' td').find('input[name="Delete"]:checked').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
    });
    return listOfIDs;
}
// get all select IDs from selected table as string
function GetAllSelectedIDsAsStringWithAttributeTbl(pTableName) {
    debugger;
    var listOfIDs = "";
    //$('#' + pTableName + ' td').find('input[type="checkbox"]:checked').each(function () {
    $('#' + pTableName + ' td').find('input[name="Delete"]:checked').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : "*") + ($(this).attr('value'));
    });
    return listOfIDs;
}
// get all select IDs from selected table as string with various checkboxes
function GetAllSelectedIDsAsStringWithNameAttr(pCheckboxNameAttr) {
    debugger;
    var listOfIDs = "";
    $('input[name="' + pCheckboxNameAttr + '"]:checked').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
    });
    return listOfIDs;
}
function GetAllSelectedTextSiblingsByNameAttr(pCheckboxNameAttr) {
    debugger;
    var listOfIDs = "";
    $('input[name="' + pCheckboxNameAttr + '"]:checked').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).siblings().text());
    });
    return listOfIDs;
}
////Get all IDs wether checked or not
//function GetAllIDsAsStringWithNameAttr(pCheckboxNameAttr) {
//    var listOfIDs = "";
//    $('input[name="' + pCheckboxNameAttr + '"]').each(function () {
//        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
//    });
//    return listOfIDs;
//}
// get all select IDs from selected table as string with various checkboxes
function GetAllSelectedIDsAsStringWithTableNameAndNameAttr(pTableName, pCheckboxNameAttr) {
    debugger;
    var listOfIDs = "";
    $('#' + pTableName + ' td').find('input[name="' + pCheckboxNameAttr + '"]:checked').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
    });
    return listOfIDs;
}
function GetAllSelectedIDsFromTd(pTableName, pCheckboxNameAttr, pTdName) {
    var listOfIDs = "";
    $('#' + pTableName + ' td').find('input[name="' + pCheckboxNameAttr + '"]:checked').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).parent().parent().find("td." + pTdName).text());
    });
    return listOfIDs;
}
function GetAllIDsAsStringWithNameAttr(pTableID, pCheckboxNameAttr) {
    var listOfIDs = "";
    $("#" + pTableID).find('input[name="' + pCheckboxNameAttr + '"]').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
    });
    return listOfIDs;
}
//Get all IDs which are NOT checked
function GetAllNOTSelectedIDsAsStringWithNameAttr(pCheckboxNameAttr) {
    var listOfIDs = "";
    $('input[name="' + pCheckboxNameAttr + '"]:not(:checked)').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
    });
    return listOfIDs;
}
//By A.Medra for Venus: used it to save time of tracing
function GetAllUnSelectedIDsAsStringWithNameAttr(pCheckboxNameAttr) {
    var listOfIDs = "";
    $('input[name="' + pCheckboxNameAttr + '"]:checked').each(function () {
        if (parseInt($(this).attr('value')) !== 0) {
            listOfIDs += ((listOfIDs == "") ? "" : ",") + ($(this).attr('value'));
        }
    });
    return listOfIDs;
}
//// get valaues of tds in a table using the name attr
//function GetValuesOfTblCellsAsStringWithNameAttr(pTableName, pAttrName) {
//    var listOfValues = "";
//    $('#' + pTableName + ' td').find('input[name="' + pAttrName + '"]').each(function () {
//        debugger;
//        listOfValues += ((listOfValues == "") ? "" : ",") + $(this).val();
//    });
//    return listOfValues;
//}
// clear all checked checkBoxes
function UncheckAllCheckboxes(pTableName) {
    debugger;
    $('#' + pTableName + ' tr td input[type="checkbox"]').each(function () {
        $(this).prop('checked', false);
    });
}
// check all checked checkBoxes
function CheckCheckboxes(pTableName, pIDs) {
    if (pIDs != null && pIDs != undefined) {
        var substr = pIDs.split(',');
        jQuery.each(substr, function (index, item) {
            $('#' + pTableName + ' td input:checkbox[value=' + item + ']').prop('checked', true);
        });
    }
}
// Validate controls before send to the server
//Date.prototype.compareDates($(tr).find("td.CurrentPercentageDate").html(),"3/10/2015")
//Date.prototype.compareDates($($("tr[TaxeTypeID='" + pTaxeTypeID + "']")).find("td.CurrentPercentageDate").html(),"3/10/2015")
function ValidateForm(pClassNameToValidate, pModalID) {
    debugger;
    var submit = true;

    if (pClassNameToValidate != null) {
        //validate for empty and length of code
        $.each($('#' + pModalID + ' .' + pClassNameToValidate + " .has-error input[type=text]"), function (i, item) {
            $(item).removeClass('validation-error');
            if (($(item).val().trim() == '' && $(item).attr('data-required') == "true") || //to check for mandatory fields
                ($(item).attr('data-minlength') > $(item).val().trim().length && $(item).val().trim() != '') || //sherif: the condition $(item).val() != '' is used in case a txtbox a certain number of characters or be empty (ex. 5 letters or empty not 2 letters)
                $(item).val().split(';').length > 1 || //to check for semicolons
                $(item).val().split('<').length > 1 ||
                $(item).val().split('>').length > 1
                //|| $(item).val().split('&').length > 1
            ) {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
        });
        //validate for empty and length of code
        $.each($('#' + pModalID + ' .' + pClassNameToValidate + " .has-error :password"), function (i, item) {
            $(item).removeClass('validation-error');
            if (($(item).val().trim() == '' && $(item).attr('data-required') == "true") || //to check for mandatory fields
                ($(item).attr('data-minlength') > $(item).val().trim().length && $(item).val().trim() != '') //sherif: the condition $(item).val() != '' is used in case a txtbox a certain number of characters or be empty (ex. 5 letters or empty not 2 letters)
                || $("#pwdPassword").val() != $("#pwdConfirmPassword").val()) {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
        });
        //validate ExchangeRate values
        $.each($('#' + pModalID + '.' + pClassNameToValidate + " .has-error input[name=ExchangeRate]"), function (i, item) {
            $(item).removeClass('validation-error');
            if (($(item).val().trim == '' || $(item).val() < 0.00001 || $(item).val() > 99999.99999 || !($.isNumeric($(item).val().trim())))
                && $(item).attr('data-required') == "true") //this line is for letters as when compared always guves false
            {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
        });
        //validate ExchangeRateDate
        $.each($('#' + pModalID + '.' + pClassNameToValidate + " .has-error input[name=txtCurrentExchangeRateDate]"), function (i, item) {
            $(item).removeClass('validation-error');
            //if (Date.prototype.compareDates($("tr[CurrencyID='" + $("#hID").val() + "']").find("td.CurrentExchangeRateDate").text(), $(item).val().trim()) < 0
            if (Date.prototype.compareDates(ConvertDateFormat($('#tblCurrencies tr[id=' + $("#hID").val() + '] td.CurrentExchangeRateDate').text()), ConvertDateFormat($(item).val().trim())) < 0
                && $(item).attr('data-required') == "true") //this line is for letters as when compared always gives false
            {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
        });
        //validate QuotationExpirationDate
        $.each($('#' + pModalID + '.' + pClassNameToValidate + " .has-error input[id=txtQuotationExpirationDate]"), function (i, item) {
            $(item).removeClass('validation-error');
            var TodaysDate = new Date();
            var FormattedTodaysDate = TodaysDate.toLocaleDateString();
            var diffDays = Date.prototype.compareDates(FormattedTodaysDate, ConvertDateFormat($(item).val().trim()));//if < 1 then add the validation error
            if (diffDays < 1
                && $(item).attr('data-required') == "true") //this line is for letters as when compared always gives false
            {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
        });
        //validate Percentage values
        $.each($('#' + pModalID + '.' + pClassNameToValidate + " .has-error input[name=Percentage]"), function (i, item) {
            $(item).removeClass('validation-error');
            if (($(item).val() == '' || $(item).val() < 0 || $(item).val() > 100 || !($.isNumeric($(item).val().trim())))
                && $(item).attr('data-required') == "true") //this line is for letters as when compared always gives false
            {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
        });
        //validate PercentageDate
        $.each($('#' + pModalID + '.' + pClassNameToValidate + " .has-error input[name=txtCurrentPercentageDate]"), function (i, item) {
            $(item).removeClass('validation-error');
            if (Date.prototype.compareDates(ConvertDateFormat($('#tblTaxeTypes tr[id=' + $("#hID").val() + '] td.CurrentPercentageDate').text()), ConvertDateFormat($(item).val().trim())) < 0
                && $(item).attr('data-required') == "true") //this line is for letters as when compared always guves false
            {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
        });
        //validate to make sure the value is a number between 0 and 999 for any id= "txtDays" and 0 to 99 for"txtViewOrder"
        $.each($('#' + pModalID + ' .' + pClassNameToValidate + " .has-error input[data-type=number]"), function (i, item) {
            $(item).removeClass('validation-error');
            //txtdays in Payment terms
            if (($(item).val() == '' || $(item).val() < 0 || $(item).val() > 999 || !($.isNumeric($(item).val().trim())) || $(item).val().split('.').length > 1) //the last condition is for integer
                && $(item).attr('data-required') == "true" && ($(item).attr('id') == "txtDays")) //sherif: this is for days in payment terms
            {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
            //txtViewOrder in ChargeTypes
            if (($(item).val() == '' || $(item).val() < 0 || $(item).val() > 99 || !($.isNumeric($(item).val().trim())) || $(item).val().split('.').length > 1) //the last condition is for integer
                && $(item).attr('data-required') == "true" && ($(item).attr('id') == "txtViewOrder")) //sherif: this is for days in payment terms
            {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
        });

        $.each($('#' + pModalID + ' .' + pClassNameToValidate + " .has-error input[type=number]"), function (i, item) {
            $(item).removeClass('validation-error');
            //txtdays in Payment terms
            if (($(item).val() == '' || $(item).val() < 0 || $(item).val() > 999 || !($.isNumeric($(item).val().trim())) || $(item).val().split('.').length > 1) //the last condition is for integer
                && $(item).attr('data-required') == "true") //sherif: this is for days in payment terms
            {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
        });
        //validate to check that 1st 2 letters in port code like country code
        $.each($('#' + pModalID + ' .' + pClassNameToValidate + " .has-error input[name=txtPortCode]"), function (i, item) {
            $(item).removeClass('validation-error');
            var element = $("#slCountry").find('option:selected'); // to get the selected row
            var CountryCode = element.attr("CountryCode");
            if ($(item).val().toUpperCase().substring(0, 2) != CountryCode && $(item).attr('name') == "txtPortCode") {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
        });
        //validate Email values
        $.each($('.' + pClassNameToValidate + " .has-error input[name=Email]"), function (i, item) {
            $(item).removeClass('validation-error');
            if (!validateEmail($(item).val()) && $(item).val().trim() != "") {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
        });
        //validate Website values (must have at least 1 dot)
        $.each($('.' + pClassNameToValidate + " .has-error input[name=Website]"), function (i, item) {
            $(item).removeClass('validation-error');
            if ($(item).val().split('.').length < 2 && $(item).val().trim() != "") {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
        });
        //validate Datepicker format(used in case data-required=false so to delete it i remove readonly, and the user might enter wrong format) 
        $.each($('#' + pModalID + " .datepicker-input[readonly!=readonly]"), function (i, item) {
            if ($(item).is('[data-required=false]')) //this condition is to make sure that validation-error class is only removed done only for datepickers with data-required-false and not readonly
                $(item).removeClass('validation-error');
            if ($(item).val().trim() != '' && !isValidDate($(item).val().trim(), 1)) {
                debugger;
                console.log("Error Form : " + $(item).attr('id'));
                $('.div-error').slideDown(); $(item).addClass('validation-error'); submit = false;
            }
        });
        //validate for select box
        $.each($('#' + pModalID + ' .' + pClassNameToValidate + " .has-error select[data-required!=false]"), function (i, item) {
            $(item).removeClass('validation-error');
            if ($(item).val() == '' || $(item).val() == '0' || $(item).val() == undefined || $(item).val() == null) {
                debugger;
                if (submit) {
                    console.log("Error Form : " + $(item).attr('id'));
                    $('.div-error').slideDown();
                } $(item).addClass('validation-error'); $("#select2-" + item.id + "-container").addClass("validation-error"); submit = false;
            }
        });
        if (submit) {
            $('input[type="text"].validation-error').removeClass("validation-error");
            $('select.validation-error').removeClass("validation-error");
            $('.div-error').slideUp();
        }
    }
    return submit;
}
//sherif: validate for Email
function validateEmail($email) {
    var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
    return emailReg.test($email);
}

// Validates that the input string is a valid date formatted as "dd/mm/yyyy" or "mm/dd/yyyy"
//pFormatType: 1-dd/MM/yyyy 2-MM/dd/yyyy
function isValidDate(dateString, pFormatType) {
    // First check for the pattern
    if (!/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(dateString))
        return false;

    // Parse the date parts to integers
    var parts = dateString.split("/");
    if (pFormatType == 1) //dd/mm/yyyy
    {
        var day = parseInt(parts[0], 10);
        var month = parseInt(parts[1], 10);
    }
    else
        if (pFormatType == 2) //mm/dd/yyyy
        {
            var day = parseInt(parts[1], 10);
            var month = parseInt(parts[0], 10);
        }
    var year = parseInt(parts[2], 10);

    // Check the ranges of month and year
    if (year < 1000 || year > 3000 || month == 0 || month > 12)
        return false;

    var monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    // Adjust for leap years
    if (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0))
        monthLength[1] = 29;

    // Check the range of the day
    return day > 0 && day <= monthLength[month - 1];
};

function AppendRowtoTable(pHTMLTableID, pHTMLTableRow) {
    $("#" + pHTMLTableID + " tbody").eq(0).append(pHTMLTableRow).each(function () {
        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
            $(".table>tbody>tr:not(.reversed)").reverseChildren();
        }
    });

}
function AppendRowtoNestedTable(pHTMLTableBodyID, pHTMLTableRow) {
    $("#" + pHTMLTableBodyID).append(pHTMLTableRow).each(function () {
        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
            $(".table>tbody>tr:not(.reversed)").reverseChildren();
        }
    });

}

function PrependRowtoTable(pHTMLTableID, pHTMLTableRow) {
    $("#" + pHTMLTableID + " tbody").prepend(pHTMLTableRow).each(function () {
        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
            $(".table>tbody>tr:not(.reversed)").reverseChildren();
        }
    });

}
function ClearAllTableRows(pHTMLTableID) {
    $("#" + pHTMLTableID + " tbody tr").remove();
}

function ClearAllOptions(pSelectID) {
    $('#' + pSelectID)
        .find('option')
        .remove()
        .end();
}

function InitiPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pCurrentPageNo, pRowsCount) {
debugger;
    if (pRowsCount > 0 && $('#' + pSelectPageSizeName).val() != null) {
        var totalPageCount = Math.ceil(pRowsCount / parseInt($('#' + pSelectPageSizeName).val().trim()));
        var options = {
            size: "small",
            currentPage: pCurrentPageNo,
            totalPages: totalPageCount,
            onPageClicked: function (e, originalEvent, type, page) {
                if (page.toString() != $('#' + pDivPagerName + 'li.active a').text()) {
                    debugger;
                    LoadDataWithPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, page);
                }
            }
        };
        debugger;
        if (pRowsCount > parseInt($('#' + pSelectPageSizeName).val().trim())) {
            if (pCurrentPageNo > 1) {
                $('#' + pSpnFirstPageRowName).html((parseInt($('#' + pSelectPageSizeName).val().trim()) * (pCurrentPageNo - 1)) + 1);
                var intLastRecordNo = parseInt($('#' + pSpnFirstPageRowName).html()) + parseInt($('#' + pSelectPageSizeName).val().trim()) - 1;
                if (intLastRecordNo > pRowsCount)
                    $('#' + pSpnLastPageRowName).html(pRowsCount);
                else
                    $('#' + pSpnLastPageRowName).html(parseInt($('#' + pSpnFirstPageRowName).html()) + parseInt($('#' + pSelectPageSizeName).val().trim()) - 1);
            }
            else {
                $('#' + pSpnFirstPageRowName).html("1");
                $('#' + pSpnLastPageRowName).html(parseInt($('#' + pSelectPageSizeName).val().trim()));
            }
        }
        else {
            $('#' + pSpnFirstPageRowName).html("1");
            $('#' + pSpnLastPageRowName).html(pRowsCount);
        }

        $('#' + pSpnTotalCountName).html(pRowsCount);

        $('#' + pDivTextTotalModal).show();
        $('#' + pDivPagerName).show();

        jQuery.noConflict();
        $('#' + pDivPagerName).bootstrapPaginator(options);

        if (totalPageCount == 1)
            $('#' + pDivPagerName).hide();
        else
            $('#' + pDivPagerName).show();
    }
    else {
        $('#' + pDivTextTotalModal).hide();
        $('#' + pDivPagerName).hide();
    }
}

//sherif: to call LoadDataWithPagingForModal instead of LoadDataWithPaging
function InitiPagingForModal(pDivID, pWhereClause, pOrderBy, pCurrentPageNo, pRowsCount) {
    if (pRowsCount > 0 && $('#select-page-size').val() != null) { //sherif: i use $('#select-page-size') without -Modal (i.e. the same apply size for both modals)
        var totalPageCount = Math.ceil(pRowsCount / parseInt($('#select-page-size').val().trim()));
        var options = {
            size: "small",
            currentPage: pCurrentPageNo,
            totalPages: totalPageCount,
            onPageClicked: function (e, originalEvent, type, page) {
                if (page.toString() != $("#div-Pager-Modal li.active a").text()) {
                    debugger;
                    LoadDataWithPagingForModal(page, pWhereClause, pOrderBy);
                }
            }
        };
        debugger;//sherif: i use $('#select-page-size') without -Modal (i.e. the same apply size for both modals)
        if (pRowsCount > parseInt($('#select-page-size').val().trim())) {
            if (pCurrentPageNo > 1) {
                $("#spn-first-page-row-Modal").html((parseInt($('#select-page-size').val().trim()) * (pCurrentPageNo - 1)) + 1);
                var intLastRecordNo = parseInt($('#spn-first-page-row-Modal').html()) + parseInt($('#select-page-size').val().trim()) - 1;
                if (intLastRecordNo > pRowsCount)
                    $("#spn-last-page-row-Modal").html(pRowsCount);
                else
                    $("#spn-last-page-row-Modal").html(parseInt($('#spn-first-page-row-Modal').html()) + parseInt($('#select-page-size').val().trim()) - 1);
            }
            else {
                $("#spn-first-page-row-Modal").html("1");
                $("#spn-last-page-row-Modal").html(parseInt($('#select-page-size').val().trim()));
            }
        }
        else {
            $("#spn-first-page-row-Modal").html("1");
            $("#spn-last-page-row-Modal").html(pRowsCount);
        }
        debugger;
        $("#spn-total-count-Modal").html(pRowsCount);

        $("#div-Text-Total-Modal").show();
        $("#div-Pager-Modal").show();

        jQuery.noConflict();
        $('#' + pDivID).bootstrapPaginator(options);

        if (totalPageCount == 1)
            $("#div-Pager-Modal").hide();
        else
            $("#div-Pager-Modal").show();
    }
    else {
        $("#div-Text-Total-Modal").hide();
        $("#div-Pager-Modal").hide();
    }
}

function LoadDataWithPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, pPageNo) {
    debugger;
    if (parent.strBindTableRowsFunctionName == "Quotations_BindTableRows" || parent.strBindTableRowsFunctionName == "QuotationsManagement_BindTableRows") {
        var pWhereClause = Quotations_GetFilterWhereClause();
        LoadWithPagingWithWhereClause(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Quotations/LoadWithWhereClause", pWhereClause, pPageNo, $('#' + pSelectPageSizeName).val().trim(), function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "FleetQuotation_BindTableRows") {
        var pWhereClause = FleetQuotation_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Quotations/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "FleetTransportOrder_BindTableRows") {
        //var pWhereClause = FleetTransportOrder_GetWhereClause();
        var pWhereClause = TruckingOrders_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Routings/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "OperationsManagement_BindTableRows" || parent.strBindTableRowsFunctionName == "BLDocuments_BindTableRows" || parent.strBindTableRowsFunctionName == "CustomClearanceModule_BindTableRows") {
        var pWhereClause = Operations_GetFilterWhereClause();
        var pWhereClause_Routings = 0;
        pWhereClause_Routings = Operations_GetFilterWhereClause_Routings();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = {
            pIsLoadArrayOfObjects: false
            , pPageNumber: pPageNumber
            , pPageSize: pPageSize
            , pWhereClause: pWhereClause
            , pIsBindTableRows: false
            , pWhereClause_Routings: pWhereClause_Routings
            , pOrderBy: ""
        }
        //LoadWithPagingWithWhereClause(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "api/Operations/LoadWithWhereClause", pWhereClause, pPageNo, $('#' + pSelectPageSizeName).val().trim(), function (pTabelRows) {
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, "ID DESC", pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "HousesOrders_BindTableRows") {
        debugger;
        var pControllerParameters = {
            pIsLoadArrayOfObjects: true
            , pPageNumber: (pPageNo == 0 ? 1 : pPageNo)
            , pPageSize: $("#select-page-size option:selected").text()
            , pWhereClause: Operations_GetFilterWhereClause()
            , pIsBindTableRows: false
            , pWhereClause_Routings: "0"
            , pOrderBy: "ID DESC"
        };
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, /*pWhereClause*/"dummy", "ID DESC", (pPageNo == 0 ? 1 : pPageNo), $("#select-page-size option:selected").text(), pControllerParameters
            , function (pData) {
                strBindTableRowsFunctionName = "HousesOrders_BindTableRows";
                HousesOrders_BindTableRows(JSON.parse(pData[0]));


            }, true);
    }
    else if (parent.strBindTableRowsFunctionName == "Treasury_BindTableRows") {
        var pWhereClause = Treasury_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Treasury/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Payments_BindTableRows") {
        debugger;
        if (pDivPagerName == "div-Pager") {
            if (pDivPagerName == "div-Pager") {
                Search_LoadingWithPaging(pPageNo, $('#select-page-size').val());
            } else if (pDivPagerName == "div-Pager1") {
                PaymentsSearch_LoadingWithPaging(pPageNo, $('#select-page-size1').val());
            }

        }
        else {
            debugger;
            var pWhereClause = SL_Payment_GetWhereClause();
            var pOrderBy = "ID";
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size1').val();
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager1", "select-page-size1", "spn-first-page-row1", "spn-last-page-row1", "spn-total-count1", "div-Text-Total1", "/api/SL_Payments/LoadWithPaging", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {

                var parm = [JSON.parse(pData[0])];
                var runFunction = window[strBindTableRowsFunctionName];
                if (typeof runFunction === "function") runFunction.apply(null, parm);
            });

        }
    }
    else if (parent.strBindTableRowsFunctionName == "A_Payments_BindTableRows") {
        debugger;
        if (pDivPagerName == "div-Pager") {
            if (pDivPagerName == "div-Pager") {
                A_Search_LoadingWithPaging(pPageNo, $('#select-page-size').val());
            } else if (pDivPagerName == "div-Pager1") {
                A_PaymentsSearch_LoadingWithPaging(pPageNo, $('#select-page-size1').val());
            }

        }
        else {
            debugger;
            var pWhereClause = A_Payment_GetWhereClause();
            var pOrderBy = "ID";
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size1').val();
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager1", "select-page-size1", "spn-first-page-row1", "spn-last-page-row1", "spn-total-count1", "div-Text-Total1", "/api/A_Payments/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {

                var parm = [JSON.parse(pData[0])];
                var runFunction = window[strBindTableRowsFunctionName];
                if (typeof runFunction === "function") runFunction.apply(null, parm);
            });

        }
    }

    else if (parent.strBindTableRowsFunctionName == "A_PaymentsEGL_BindTableRows") {
        debugger;
        if (pDivPagerName == "div-Pager") {
            if (pDivPagerName == "div-Pager") {
                A_Search_LoadingWithPaging(pPageNo, $('#select-page-size').val());
            } else if (pDivPagerName == "div-Pager1") {
                A_PaymentsSearch_LoadingWithPagingEGL(pPageNo, $('#select-page-size1').val());
            }

        }
        else {
            debugger;
            var pWhereClause = A_PaymentEGL_GetWhereClause();
            var pOrderBy = "ID";
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size1').val();
            var pControllerParameters = { pIsLoadArrayOfObjects: true, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
            LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager1", "select-page-size1", "spn-first-page-row1", "spn-last-page-row1", "spn-total-count1", "div-Text-Total1", "/api/A_PaymentsEGL/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {

                var parm = [JSON.parse(pData[0])];
                var runFunction = window[strBindTableRowsFunctionName];
                if (typeof runFunction === "function") runFunction.apply(null, parm);
            });

        }
    }



    else if (parent.strBindTableRowsFunctionName == "RS_Projects_BindTableRows") {
        var pWhereClause = Treasury_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/RS_Projects/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "YardLinkClients_BindTableRows") {
        var pWhereClause = YardLinkClients_GetWhereClause();
        var pOrderBy = "Name, ArName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/YardLinkClients/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "YardLinkTankClients_BindTableRows") {
        var pWhereClause = YardLinkTankClients_GetWhereClause();
        var pOrderBy = "Name, ArName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/YardLinkTankClients/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_FCL_Tariff_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_FCL_Tariffs/WH_FCL_Tariffs_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_FCL_Tariff_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_MTY_Tariff_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_MTY_Tariffs/WH_MTY_Tariffs_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_MTY_Tariff_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_CntrStock_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_CntrStocks/WH_CntrStocks_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_CntrStock_GetWhereClause();
        var pOrderBy = "ContainerNumber";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_MTY_GateIn_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_MTY_GateIn/WH_MTY_GateIn_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_MTY_GateIn_GetWhereClause();
        var pOrderBy = "ID";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_MTY_Inventory_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_MTY_Inventory/WH_MTY_Inventory_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_MTY_Inventory_GetWhereClause();
        var pOrderBy = "ID";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_MTY_GateOut_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_MTY_GateOut/WH_MTY_GateOut_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_MTY_GateOut_GetWhereClause();
        var pOrderBy = "StorageEndDate DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_CSL_Tariff_BindTableRows") {
        debugger;
        strLoadWithPagingFunctionName = "/api/WH_CSL_Tariffs/WH_CSL_Tariffs_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pWhereClause = WH_CSL_Tariff_GetWhereClause();
        var pOrderBy = " ID ASC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    //else if (parent.strBindTableRowsFunctionName == "WH_FCL_Tariff_Details_BindTableRows") {
    //    debugger;
    //    strLoadWithPagingFunctionName = "/api/WH_FCL_Tariffs/WH_FCL_Tariff_Details_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
    //    var pWhereClause = WH_FCL_Tariff_Details_GetWhereClause();
    //    var pOrderBy = "ID";
    //    var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
    //    var pPageSize = $('#select-page-size').val();
    //    var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
    //    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
    //        var parm = [JSON.parse(pData[0])];
    //        var runFunction = window[strBindTableRowsFunctionName];
    //        if (typeof runFunction === "function") runFunction.apply(null, parm);
    //    });
    //}
    else if (parent.strBindTableRowsFunctionName == "BankAccount_BindTableRows") {
        var pWhereClause = BankAccount_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/BankAccount/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "TaxeTypes_BindTableRows") {
        var pWhereClause = TaxeTypes_GetWhereClause();
        var pOrderBy = "Code";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/TaxeTypes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Payment_BindTableRows") {
        var pWhereClause = Payment_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        //LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ARAllocation_Partners_BindTableRows") {
        var pWhereClause = ARAllocation_Partners_GetWhereClause();
        var pOrderBy = "PartnerTypeID, Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseAllocation_Partners: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payment/ARAllocation_Partners_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PaymentApproval_BindTableRows") {
        var pWhereClause = PaymentApproval_GetWhereClause();
        var pOrderBy = " ID DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "OperationPayableApproval_BindTableRows") {
        var pWhereClause = OperationPayableApproval_GetWhereClause();
        var pOrderBy = " OperationID DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payables/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "AccountingOperationsPayablesApprovalsTax_BindTableRows") {
        var pWhereClause = AccountingOperationsPayablesApprovalsTax_GetWhereClause();
        var pOrderBy = " OperationID DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payables/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "OperationPayableStatues_BindTableRows") {
        var pWhereClause = OperationPayableStatues_GetWhereClause();
        var pOrderBy = " OperationID DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payables/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "InvoiceApproval_BindTableRows") {
        var pWhereClause = InvoiceApproval_GetWhereClause();
        //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
        var pOrderBy = " ID DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Invoices/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "InvoicesApprovalReportsTax_BindTableRows") {
        var pWhereClause = InvoicesApprovalReportsTax_GetWhereClause();
        //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
        var pOrderBy = " ID DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Invoices/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "InvoiceApprovalTax_BindTableRows") {
        var pWhereClause = InvoiceApprovalTax_GetWhereClause();
        //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
        var pOrderBy = " ID DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Invoices/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PurchaseInvoiceApproval_BindTableRows") {
        var pWhereClause = PurchaseInvoiceApproval_GetWhereClause();
        //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
        var pOrderBy = " ID ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/PurchaseInvoice/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "AccNoteApproval_BindTableRows") {
        var pWhereClause = AccNoteApproval_GetWhereClause();
        //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
        var pOrderBy = " ID DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/AccNote/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "AccountingAccNotesApprovalsTax_BindTableRows") {
        var pWhereClause = AccountingAccNotesApprovalsTax_GetWhereClause();
        //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
        var pOrderBy = " ID DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/AccNote/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "AccountingAccNotesApprovalsReportTax_BindTableRows") {
        var pWhereClause = AccountingAccNotesApprovalsReportTax_GetWhereClause();
        //var pOrderBy = " PartnerTypeID,PartnerName, OperationID DESC ";
        var pOrderBy = " ID DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/AccNote/LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "LocalEmails_BindTableRows") {
        var pWhereClause = LocalEmails_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy, pIsReceived: true }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/LocalEmails/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Pricing_BindTableRows") {
        var pWhereClause = Pricing_GetWhereClause();
        var pOrderBy = "ID DESC"; //"SupplierName, ID DESC"; //"TransportTypeID, LineName, POLName, PODName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsReturnObjectArray: false, pPricingTypeID: intPricingType, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Pricing/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0]), JSON.parse(pData[7])/*pPricingCharge*/];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PricingSettings_BindTableRows") {
        var pWhereClause = PricingSettings_GetWhereClause();
        var pOrderBy = "ChargeTypeName"; //"TransportTypeID, LineName, POLName, PODName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsReturnObjectArrayForPricingSettings: false, pPricingTypeID: intPricingType, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Pricing/PricingSettings_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PricingCharges_BindTableRows") { //PricingCharges NOT Pricing
        var pWhereClause = PricingCharges_GetWhereClause();
        var pOrderBy = "ID DESC"; //"SupplierName, ID DESC"; //"PricingTypeID, SupplierName, POLName, PODName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsReturnObjectArray: false, pPricingTypeID: $("#slPricingType").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        //LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Pricing/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0]), JSON.parse(pData[7])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PartnerOpenBalance_BindTableRows") {
        var pWhereClause = PartnerOpenBalance_GetWhereClause();
        var pOrderBy = "PartnerTypeCode, PartnerName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjectsForPartnerOpenBalance: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "BankOpenBalance_BindTableRows") {
        var pWhereClause = BankOpenBalance_GetWhereClause();
        var pOrderBy = "AccountName ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjectsForBankOpenBalance: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "TreasuryOpenBalance_BindTableRows") {
        var pWhereClause = TreasuryOpenBalance_GetWhereClause();
        var pOrderBy = "TreasuryName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjectsForTreasuryOpenBalance: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/Payment/Payment_LoadWithPagingWithWhereClauseAndOrderBy", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Currencies_BindTableRows") {
        var pWhereClause = Currencies_GetWhereClause();
        var pOrderBy = "Code";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Currencies/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        })
    }
    else if (parent.strBindTableRowsFunctionName == "JVTypes_BindTableRows") {
        var pWhereClause = JVTypes_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/JVTypes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "SystemOptions_BindTableRows") {
        var pWhereClause = SystemOptions_GetWhereClause();
        var pOrderBy = "OptionArName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SystemOptions/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Creditlimitexceptionperiod_BindTableRows") {
        debugger;
        var pWhereClause = Creditlimitexceptionperiod_GetWhereClause();
        var pOrderBy = "customerName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Creditlimitexceptionperiod/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "CustudyBalance_BindTableRows") {
        var pWhereClause = CustudyBalance_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CustudyBalance/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "JournalTypes_BindTableRows") {
        var pWhereClause = JournalTypes_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/JournalTypes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "OpnJVNo_BindTableRows") {
        var pWhereClause = OpnJVNo_GetWhereClause();
        var pOrderBy = "ID";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/OpnJVNo/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "JVDefaults_BindTableRows") {
        var pWhereClause = JVDefaults_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/JVDefaults/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Sec_UserSafes_BindTableRows") {
        var pWhereClause = Sec_UserSafes_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Sec_UserSafes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "UserLink_BindTableRows") {
        var pWhereClause = UserLink_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/UserLink/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "UserShippingLink_BindTableRows") {
        var pWhereClause = UserShippingLink_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/UserShippingLink/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "UserShippingLinkEGL_BindTableRows") {
        var pWhereClause = UserShippingLinkEGL_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/UserShippingLinkEGL/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "SubAccountsPrivilege_BindTableRows") {
        var pWhereClause = SubAccountsPrivileges_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SubAccountsPrivilege/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "CashFlow_BindTableRows") {
        debugger;
        var pWhereClause = CashFlow_GetWhereClause();
        var pOrderBy = "ID";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CashFlow/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "JournalVouchers_BindTableRows") {
        var pWhereClause = JournalVouchers_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/JournalVouchers/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Post_Restore_Unpost_JVs_BindTableRows") {
        var pWhereClause = Post_Restore_Unpost_JVs_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/JournalVouchers/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Post_Restore_Unpost_JVsTax_BindTableRows") {
        var pWhereClause = Post_Restore_Unpost_JVsTax_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/JournalVouchers/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "A_ActionLink_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/A_AccountLink/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { A_AccountLink_BindTableRows(pTabelRows); A_AccountLink_ClearAllControls(); });
        HighlightText("#tblA_AccountLink>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "Voucher_BindTableRows") {
        var pWhereClause = Voucher_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Post_Unpost_Voucher_BindTableRows") {
        var pWhereClause = Post_Unpost_Voucher_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PostingVouchersReportTax_BindTableRows") {
        var pWhereClause = PostingVouchersReportTax_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Post_Unpost_VoucherTax_BindTableRows") {
        var pWhereClause = Post_Unpost_VoucherTax_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Voucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ExchangeMovement_BindTableRows") {
        var pWhereClause = ExchangeMovement_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/ExchangeMovement/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PostingReceivablePayableNotes_BindTableRows") {
        var pWhereClause = PostingReceivablePayableNotes_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseChequeStatus: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Voucher/ChequeStatus_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PostingUnderCollectNotes_BindTableRows") {
        var pWhereClause = PostingReceivablePayableNotes_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseChequeStatus: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Voucher/ChequeStatus_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ContainerTracking_BindTableRows") {
        var pWhereClause = ContainerTracking_GetWhereClause();
        var pOrderBy = "OperationID DESC, ContainerNumber DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/OperationContainersAndPackages/ContainerTracking_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "VehicleTracking_BindTableRows") {
        var pWhereClause = VehicleTracking_GetWhereClause();
        var pOrderBy = "CodeSerial DESC, Line";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseForVehicleAction: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/OperationVehicle/VehicleTracking_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "A_Fiscal_Year_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_Actions/LoadWithPaging", pPageNumber, pPageSize,
        //    function (pData) {
        //        var parm = [JSON.parse(pData[0])];
        //        var runFunction = window[strBindTableRowsFunctionName];
        //        if (typeof runFunction === "function")
        //            runFunction.apply(null, parm);
        //        //  CRM_Actions_BindTableRows(pTabelRows); 
        //        CRM_Actions_ClearAllControls();
        //    });
        //HighlightText("#tblCRM_Actions>tbody>tr", $("#txt-Search").val().trim());
        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/A_Fiscal_Year/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { A_Fiscal_Year_BindTableRows(pTabelRows); });
        HighlightText("#tblA_Fiscal_Year>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "Warehouse_BindTableRows") {
        var pWhereClause = Warehouse_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Warehouse/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Area_BindTableRows") {
        var pWhereClause = Area_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Area/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Row_BindTableRows") {
        var pWhereClause = Row_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Row/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    /************************Warehousing/Transactions**********************************/
    else if (parent.strBindTableRowsFunctionName == "Contract_BindTableRows") {
        var pWhereClause = Contract_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Contract/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Receive_BindTableRows") {
        var pWhereClause = Receive_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Receive/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "VehicleService_BindTableRows") {
        var pWhereClause = VehicleService_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/OperationVehicle/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "TransferProducts_BindTableRows") {
        var pWhereClause = TransferProducts_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/TransferProducts/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    //else if (parent.strBindTableRowsFunctionName == "PDI_BindTableRows") {
    //    var pWhereClause = PDI_GetWhereClause();
    //    var pOrderBy = "ID DESC";
    //    var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
    //    var pPageSize = $('#select-page-size').val();
    //    var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseForPDI: pWhereClause, pOrderBy: pOrderBy }
    //    LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/OperationVehicle/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
    //        var parm = [JSON.parse(pData[0])];
    //        var runFunction = window[strBindTableRowsFunctionName];
    //        if (typeof runFunction === "function") runFunction.apply(null, parm);
    //    });
    //}
    else if (parent.strBindTableRowsFunctionName == "PDI_BindTableRows") {
        var pWhereClause = PDI_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/OperationVehicle/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Pickup_BindTableRows") {
        var pWhereClause = Pickup_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Pickup/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Inventory_BindTableRows") {
        var pWhereClause = Inventory_GetWhereClause();
        var pOrderBy = pDefaults.UnEditableCompanyName == "DGL" ? "PurchaseItemCode" : "LocationCode,PurchaseItemCode";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Inventory/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ProductLog_BindTableRows") {
        var pWhereClause = ProductLog_GetWhereClause();
        var pOrderBy = "PurchaseItemCode,FinalizeDate";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/ProductLog/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    /********************************CRM/SC/... By Mostafa Hany*****************************************/
    else if (parent.strBindTableRowsFunctionName == "CommissionTarget_BindTableRows") {
        var pWhereClause = CommissionTarget_GetWhereClause();
        var pOrderBy = "TargetYear DESC, SalesmanName";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CommissionTarget/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WHInvoice_BindTableRows") {
        var pWhereClause = WHInvoice_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/WHInvoice/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "MaterialIssueVouchers_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        var WhereClause = "Where TransactionTypeID = " + TransTypeID + " AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            //WhereClause += " AND Code LIKE '%" + $('#txtCode_Filter').val() + "%'";
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        if ($('#txtCodeManual_Filter').val().trim() != "") {
            //WhereClause += " AND Code LIKE '%" + $('#txtCode_Filter').val() + "%'";
            WhereClause += " AND CodeManual = '" + $('#txtCodeManual_Filter').val() + "'";
        }

        if ($('#txtRequestCode_Filter').val().trim() != "") {
            WhereClause += " AND MaterialRequestCode = '" + $('#txtRequestCode_Filter').val() + "'";
        }
        if ($('#txtInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND InvoiceNo = '" + $('#txtInvoiceNo_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //  HighlightText("#tblSC_Stores>tbody>tr", $("#txt-Search").val().trim());
    }


    else if (parent.strBindTableRowsFunctionName == "SC_Inventory_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        var WhereClause = "Where TransactionTypeID = " + 100 + " AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code LIKE '%" + $('#txtCode_Filter').val() + "%'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //  HighlightText("#tblSC_Stores>tbody>tr", $("#txt-Search").val().trim());
    }

    else if (parent.strBindTableRowsFunctionName == "SC_Settlement_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        var WhereClause = "Where TransactionTypeID = " + 110 + " AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code LIKE '%" + $('#txtCode_Filter').val() + "%'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //  HighlightText("#tblSC_Stores>tbody>tr", $("#txt-Search").val().trim());
    }

    else if (parent.strBindTableRowsFunctionName == "PS_Invoices_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        debugger;
        var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1";

        if ($('#txtInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND InvoiceNo = '" + $('#txtInvoiceNo_Filter').val() + "'";
        }
        if ($('#txtSupplierInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND SupplierInvoiceNo LIKE '%" + $('#txtSupplierInvoiceNo_Filter').val() + "%'";
        }
        if ($('#txtTotalPrice_Filter').val().trim() != "") {
            WhereClause += " AND TotalPrice LIKE '%" + $('#txtTotalPrice_Filter').val() + "%'";
        }
        if ($('#slSupplier_Filter').val().trim() != "0") {
            WhereClause += " AND SupplierID = " + $('#slSupplier_Filter').val() + "";
        }
        if ($('#slCurrency_Filter').val().trim() != "0") {
            WhereClause += " AND CurrencyID = " + $('#slCurrency_Filter').val() + "";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_Invoices/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { PS_Invoices_BindTableRows(pTabelRows); PS_Invoices_ClearAllControls(); });
        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //  HighlightText("#tblSC_Stores>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "PS_PurchasingRequest_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = " Where ISNULL(vwPS_PurchasingRequest.IsDeleted , 0) = 0 ";

        if ($('#txtRequestNo_Filter').val().trim() != "") {
            WhereClause += " AND RequestNo = '" + $('#txtRequestNo_Filter').val() + "'";
        }

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , RequestDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , RequestDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_PurchasingRequest/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { PS_PurchasingRequest_BindTableRows(pTabelRows); PS_PurchasingRequest_ClearAllControls(); });
        HighlightText("#tblPS_PurchasingRequest>tbody>tr", $("#txt-Search").val().trim());

    }
    else if (parent.strBindTableRowsFunctionName == "PS_Quotations_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = " Where ISNULL(vwPS_Quotations.IsDeleted , 0) = 0 ";

        if ($('#txtQuotationNo_Filter').val().trim() != "") {
            WhereClause += " AND QuotationNo = '" + $('#txtQuotation_Filter').val() + "'";
        }

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , QuotationDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , QuotationDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_Quotations/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { PS_Quotations_BindTableRows(pTabelRows); PS_Quotations_ClearAllControls(); });
        HighlightText("#tblPS_Quotations>tbody>tr", $("#txt-Search").val().trim());

    }
    else if (parent.strBindTableRowsFunctionName == "PS_PurchasingOrders_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = " Where ISNULL(vwPS_PurchasingOrders.IsDeleted , 0) = 0 ";

        if ($('#txtPurchasingOrderNo_Filter').val().trim() != "") {
            WhereClause += " AND PurchasingOrderNo = '" + $('#txtPurchasingOrderNo_Filter').val() + "'";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , PurchasingOrderDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , PurchasingOrderDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PS_PurchasingOrders/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { PS_PurchasingOrders_BindTableRows(pTabelRows); PS_PurchasingOrders_ClearAllControls(); });
        HighlightText("#tblPS_PurchasingOrders>tbody>tr", $("#txt-Search").val().trim());

    }
    else if (parent.strBindTableRowsFunctionName == "SL_Invoices_BindTableRows") {
        if (pDivPagerName == "div-Pager") {
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size').val();
            //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
            //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
            var WhereClause = "Where ISNULL(IsDeleted , 0) <> 1";

            if ($('#txtInvoiceNo_Filter').val().trim() != "") {
                WhereClause += " AND InvoiceNo = '" + $('#txtInvoiceNo_Filter').val() + "'";
            }
            if ($('#txtTotalPrice_Filter').val().trim() != "") {
                WhereClause += " AND TotalPrice LIKE '%" + $('#txtTotalPrice_Filter').val() + "%'";
            }
            if ($('#slClients_Filter').val().trim() != "0") {
                WhereClause += " AND ClientID = " + $('#slClients_Filter').val() + "";
            }
            if ($('#slCurrency_Filter').val().trim() != "0") {
                WhereClause += " AND CurrencyID = " + $('#slCurrency_Filter').val() + "";
            }
            if ($('#txtFromDate_Filter').val().trim() != "") {
                WhereClause += " AND CONVERT(date , InvoiceDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
            }
            if ($('#txtToDate_Filter').val().trim() != "") {
                WhereClause += " AND CONVERT(date , InvoiceDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
            }
            LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Invoices/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SL_Invoices_BindTableRows(pTabelRows); SL_Invoices_ClearAllControls(); });
        }
        else {
            ItemsFromSearch_LoadingWithPaging(pPageNo, $('#select-page-size1').val());


        }

    }
    else if (parent.strBindTableRowsFunctionName == "SL_ApproveInvoice_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        debugger;
        var WhereClause = "Where ISNULL(IsDeleted , 0) = 0 and ISNULL(IsApproved , 0) = 0";

        if ($('#txtInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND InvoiceNo LIKE '%" + $('#txtInvoiceNo_Filter').val() + "%'";
        }
        if ($('#txtTotalPrice_Filter').val().trim() != "") {
            WhereClause += " AND TotalPrice LIKE '%" + $('#txtTotalPrice_Filter').val() + "%'";
        }
        if ($('#slClients_Filter').val().trim() != "0") {
            WhereClause += " AND ClientID = " + $('#slClients_Filter').val() + "";
        }
        if ($('#slCurrency_Filter').val().trim() != "0") {
            WhereClause += " AND CurrencyID = " + $('#slCurrency_Filter').val() + "";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        // LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Invoices/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SL_Invoices_BindTableRows(pTabelRows); SL_Invoices_ClearAllControls(); });
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Approving/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SL_ApproveInvoice_BindTableRows(pTabelRows); SL_ApproveInvoice_ClearAllControls(); });
        //  HighlightText("#tblSL_ApproveInvoice>tbody>tr", $("#txt-Search").val().trim()); LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Invoices/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SL_Invoices_BindTableRows(pTabelRows); SL_Invoices_ClearAllControls(); });
    }
    else if (parent.strBindTableRowsFunctionName == "SL_UnApproveInvoice_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where ISNULL(IsDeleted , 0) = 0 and ISNULL(IsApproved , 0) = 1";

        if ($('#txtInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND InvoiceNo LIKE '%" + $('#txtInvoiceNo_Filter').val() + "%'";
        }
        if ($('#txtTotalPrice_Filter').val().trim() != "") {
            WhereClause += " AND TotalPrice LIKE '%" + $('#txtTotalPrice_Filter').val() + "%'";
        }
        if ($('#slClients_Filter').val().trim() != "0") {
            WhereClause += " AND ClientID = " + $('#slClients_Filter').val() + "";
        }
        if ($('#slCurrency_Filter').val().trim() != "0") {
            WhereClause += " AND CurrencyID = " + $('#slCurrency_Filter').val() + "";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , InvoiceDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SL_Approving/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SL_UnApproveInvoice_BindTableRows(pTabelRows); SL_UnApproveInvoice_ClearAllControls(); });
        HighlightText("#tblSL_UnApproveInvoice>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "PS_ApproveInvoice_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        PS_ApproveInvoice_LoadingWithPaging();
    }
    else if (parent.strBindTableRowsFunctionName == "PS_UnApproveInvoice_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        PS_UnApproveInvoice_LoadingWithPaging();
    }
    else if (parent.strBindTableRowsFunctionName == "PS_UnApproveInvoiceTax_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        PS_UnApproveInvoiceTax_LoadingWithPaging();
    }
    else if (parent.strBindTableRowsFunctionName == "SC_ExminationOrders_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where TransactionTypeID = 60 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "SC_ClientReturnsVoucher_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where TransactionTypeID = 40 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });

    }
    else if (parent.strBindTableRowsFunctionName == "SC_MaterialIssueRequest_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var WhereClause = "Where TransactionTypeID = 70 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        WhereClause += $('#slIsClosed_Filter').val();

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });


    }
    else if (parent.strBindTableRowsFunctionName == "SC_OpenCloseMaterialIssueRequest_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var WhereClause = "Where TransactionTypeID = 70 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        WhereClause += $('#slIsClosed_Filter').val();

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });


    }
    else if (parent.strBindTableRowsFunctionName == "SC_OpeningBalance_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where TransactionTypeID = 30 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //   HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());


    }
    else if (parent.strBindTableRowsFunctionName == "SC_Scrapping_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where TransactionTypeID = 30 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //   HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());


    }

    else if (parent.strBindTableRowsFunctionName == "SC_StoresTransferVoucher_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        ClearAllTableRows("tblSC_Transactions");
        var WhereClause = "Where TransactionTypeID = 80 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        debugger;
        if (pDefaults.UnEditableCompanyName == "EGL") 
        {
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClauseEGL", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        // HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());
        }
        else {
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });

        }

    }
    else if (parent.strBindTableRowsFunctionName == "SC_SupplierReturnsVoucher_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var WhereClause = "Where TransactionTypeID = 50 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //   HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());


    }

    else if (parent.strBindTableRowsFunctionName == "SL_ClientDbtCrdtNotes") {
        debugger;
        var WhereClause = "Where 1=1";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        if ($('#txtInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND InvoiceNo LIKE '%" + $('#txtInvoiceNo_Filter').val() + "%'";
        }
        if ($('#txtTotalPrice_Filter').val().trim() != "") {
            WhereClause += " AND TotalPrice LIKE '%" + $('#txtTotalPrice_Filter').val() + "%'";
        }
        if ($('#slClients_Filter').val().trim() != "0") {
            WhereClause += " AND ClientID = " + $('#slClients_Filter').val() + "";
        }
        if ($('#slCurrency_Filter').val().trim() != "0") {
            WhereClause += " AND CurrencyID = " + $('#slCurrency_Filter').val() + "";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , DbtCrdtNoteDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , DbtCrdtNoteDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/ClientDbtCrdtNotes/LoadWithWhereClause", WhereClause, pPageNumber, $('#select-page-size').val().trim(), function (pTabelRows) { SL_ClientDbtCrdtNotes_BindTableRows(pTabelRows); SL_ClientDbtCrdtNotes_ClearAllControls(); });
        HighlightText("#tblSL_Invoices>tbody>tr", $("#txt-Search").val().trim());



    }
    else if (parent.strBindTableRowsFunctionName == "Batches_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var WhereClause = "Where TransactionTypeID = 90 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        // HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());



    }
    else if (parent.strBindTableRowsFunctionName == "CRM_Clients_BindTableRows") {
        if (pDivPagerName == "div-Pager1") {
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size1').val();
            var ClientID = $('#hID').val();
            var pWhereClause = $('#ContactPersonsSqlQuery').val() + ' AND CRM_ClientsID = ' + ClientID;


            if (pWhereClause == ' AND CRM_ClientsID = ' + ClientID) {
                pWhereClause = "Where  CRM_ClientsID = " + ClientID;

            }
            else {

                pWhereClause = pWhereClause.replace("Where AND", "Where ");
            }
            var pOrderBy = " ID DESC ";
            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size1 option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClauseAndOrderBy("div-Pager1", "select-page-size1", "spn-first-page-row1", "spn-last-page-row1", "spn-total-count1", "div-Text-Total1", "/api/CRM_ContactPersons/LoadWithPagingWithWhereClause", pWhereClause, 'ID', pPageNumber, pPageSize
                , function (pData) {
                    // var parm = [JSON.parse(pData[0])];
                    //  var runFunction = "CRM_ContactPersons_BindTableRows" //window[strBindTableRowsFunctionName];
                    //  if (typeof runFunction === "function") runFunction.apply(null, parm);

                    CRM_ContactPersons_BindTableRows(JSON.parse(pData[0]));
                });
        }
        else if (pDivPagerName == "div-Pager2") {
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size2').val();
            var ClientID = $('#hID').val();
            var pWhereClause = $('#FollowUpSqlQuery').val() + ' AND CRM_ClientID = ' + ClientID;
            if (pWhereClause == ' AND CRM_ClientID = ' + ClientID) {
                pWhereClause = "Where  CRM_ClientID = " + ClientID;
            }
            else {
                pWhereClause = pWhereClause.replace("Where AND", "Where ");
            }
            var pOrderBy = " ID DESC ";
            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size2 option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClauseAndOrderBy("div-Pager2", "select-page-size2", "spn-first-page-row2", "spn-last-page-row2", "spn-total-count2", "div-Text-Total2", "/api/vwCRM_FollowUps/LoadWithPagingWithWhereClause", pWhereClause, 'ID', pPageNumber, pPageSize
                , function (pData) {
                    // var parm = [JSON.parse(pData[0])];
                    //  var runFunction = 'CRM_FollowUp_BindTableRows' //window[strBindTableRowsFunctionName];
                    //  if (typeof runFunction === "function") runFunction.apply(null, parm);
                    CRM_FollowUp_BindTableRows(JSON.parse(pData[0]));


                });
        }
        else if (pDivPagerName == "div-Pager3") {
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size3').val();
            jQuery("#CRM_ActionDetailstblModal").modal("show");
            var FollowUpID = $('#hID2').val();
            var pWhereClause = "Where  CRM_FollowID = " + FollowUpID;
            if (pWhereClause.trim() == "") {
                pWhereClause = "Where 1 = 1";
            }
            var pOrderBy = " ID DESC ";
            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClauseAndOrderBy("div-Pager3", "select-page-size3", "spn-first-page-row3", "spn-last-page-row3", "spn-total-count3", "div-Text-Total3", "/api/CRM_ActionDetails/LoadWithPagingWithWhereClause", pWhereClause, 'ID', pPageNumber, pPageSize
                , function (pData) {
                    //  var parm = [JSON.parse(pData[0])];
                    //var runFunction = "CRM_ActionDetails_BindTableRows" //window[strBindTableRowsFunctionName];
                    //  if (typeof runFunction === "function") runFunction.apply(null, parm);
                    CRM_ActionDetails_BindTableRows(JSON.parse(pData[0]));

                });
        }

        else {
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size').val();
            var pWhereClause = $('#ClientSqlQuery').val();
            if (pWhereClause.trim() == "") {
                pWhereClause = "Where 1 = 1";
            }
            var pOrderBy = " ID DESC ";
            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClauseAndOrderBy("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/vwCRM_Clients/LoadWithPagingWithWhereClause", pWhereClause, 'ID DESC', pPageNumber, pPageSize
                , function (pData) {
                    var parm = [JSON.parse(pData[0])];
                    var runFunction = window[strBindTableRowsFunctionName];
                    if (typeof runFunction === "function") runFunction.apply(null, parm);


                });
        }
    }
    else if (parent.strBindTableRowsFunctionName == "CRM_activitiesLog_BindTableRows") {
        var pWhereClause = "";

        var pOrderBy = " ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = {//pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), 
            pPageNumber: pPageNumber, pPageSize: pPageSize, pOrderBy: pOrderBy
            , pSalesManID: $('#slSalesMan').val(), pActionType: $("#slActionType option:selected").text(), pClientName: $("#slClientName option:selected").text().trim(), pActivityID: $('#slActivity').val(), pIsManager: ($('#slSalesMan').is(':disabled') == false ? 1 : 0)
        }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_activitiesLog/CRM_Activity_LoadWithPaging", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }

    else if (parent.strBindTableRowsFunctionName == "CRM_PipeLineStage_BindTableRows") {
        var pWhereClause = "";

        var pOrderBy = " ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = {//pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), 
            pPageNumber: pPageNumber, pPageSize: pPageSize, pOrderBy: pOrderBy
            , pSalesManID: $('#slSalesMan').val(), pActionType: $("#slActionType option:selected").text(), pClientID: $('#slClientName').val()
            , pPipeLineStageID: $('#slPipeLineStageName').val(), pIsManager: ($('#slSalesMan').is(':disabled') == false ? 1 : 0)
        }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_PipeLineStage/CRM_PipeLineStage_LoadWithPaging", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }

    else if (parent.strBindTableRowsFunctionName == "CRM_CustomersFollowUp_BindTableRows") {
        {
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size').val();
            var pWhereClause = $('#ClientSqlQuery').val();
            if (pWhereClause.trim() == "") {
                pWhereClause = "Where 1 = 1";
            }
            var pOrderBy = " ID DESC ";
            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClauseAndOrderBy("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/vwCRMCustomersFollowUp/LoadWithPagingWithWhereClause", pWhereClause, 'ID DESC', pPageNumber, pPageSize
                , function (pData) {
                    var parm = [JSON.parse(pData[0])];
                    var runFunction = window[strBindTableRowsFunctionName];
                    if (typeof runFunction === "function") runFunction.apply(null, parm);


                });
        }
    }

    else if (parent.strBindTableRowsFunctionName == "SC_UnApproveTransaction_BindTableRows" || parent.strBindTableRowsFunctionName == "PR_UnApproveTransaction_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();

        if ($('#slTransactionsTypes').val() == "0") {
            swal("", "You Must Select Transaction Type .", "warning");
            $('#slTransactionsTypes').addClass("bg-info");
        }
        else {
            $('#slTransactionsTypes').removeClass("bg-info");
            var WhereClause = "Where isnull(IsApproved,0) <> 0   AND isnull(IsDeleted , 0) <> 1";
            if ($('#txtCode').val().trim() != "") {
                WhereClause += " AND Code = '" + $('#txtCode').val() + "'";
            }
            if ($('#slPSInvoices').val().trim() != "0") {
                WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices').val() + "";
            }
            //if ($('#slTransactionsTypes').val().trim() != "0") {
            //    WhereClause += " AND TransactionTypeID = " + $('#slTransactionsTypes').val() + "";
            //}
            if ($('#txtFromDate').val().trim() != "") {
                WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate').val()) + "')";
            }
            if ($('#txtToDate').val().trim() != "") {
                WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate').val()) + "')";
            }
            if ($('#slTransactionsTypes').val().trim() != "0") {
                if ($('#slTransactionsTypes').val().trim() == "70") {
                    WhereClause += " AND (vwSC_Transactions.TransactionTypeID = 70 AND ISNULL((SELECT  COUNT(isnull(vst.ID , 0 )) FROM dbo.vwSC_Transactions AS vst WHERE isnull(vst.IsDeleted , 0 ) = 0 and ISNULL( vst.MaterialIssueRequesitionsID , 0 ) = vwSC_Transactions.ID) , 0 )  <=0           )";
                }
                else if ($('#slTransactionsTypes').val().trim() == "60") {
                    WhereClause += " AND (vwSC_Transactions.TransactionTypeID = 60 AND ISNULL((SELECT  COUNT(isnull(vst.ID , 0 )) FROM dbo.vwSC_Transactions AS vst WHERE isnull(vst.IsDeleted , 0 ) = 0 and ISNULL( vst.ExaminationID , 0 ) = vwSC_Transactions.ID) , 0 )  <=0  )";
                }
                else {
                    WhereClause += " AND TransactionTypeID = " + $('#slTransactionsTypes').val() + "";
                }
            }
            LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Approving/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_UnApproveTransaction_BindTableRows(pTabelRows); });
            //   LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Approving/LoadWithWhereClause", WhereClause, $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_UnApproveTransaction_BindTableRows(pTabelRows); });

            console.log(WhereClause);
            ///  HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());

        }
    }
    else if (parent.strBindTableRowsFunctionName == "SC_ApproveTransaction_BindTableRows" || parent.strBindTableRowsFunctionName == "PR_ApproveTransaction_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();

        if ($('#slTransactionsTypes').val() == "0") {
            swal("", "You Must Select Transaction Type .", "warning");
            $('#slTransactionsTypes').addClass("bg-info");
        }
        else {
            $('#slTransactionsTypes').removeClass("bg-info");
            var WhereClause = "Where isnull(IsApproved,0) <> 1   AND isnull(IsDeleted , 0) <> 1";
            if ($('#txtCode').val().trim() != "") {
                WhereClause += " AND Code = '" + $('#txtCode').val() + "'";
            }
            if ($('#slPSInvoices').val().trim() != "0") {
                WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices').val() + "";
            }
            if ($('#slTransactionsTypes').val().trim() != "0") {
                WhereClause += " AND TransactionTypeID = " + $('#slTransactionsTypes').val() + "";
            }
            if ($('#txtFromDate').val().trim() != "") {
                WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate').val()) + "')";
            }
            if ($('#txtToDate').val().trim() != "") {
                WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate').val()) + "')";
            }
            LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Approving/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_ApproveTransaction_BindTableRows(pTabelRows); });

            console.log(WhereClause);
            ///  HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());

        }
    }
    else if (parent.strBindTableRowsFunctionName == "SC_ApproveTransactionTax_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();

        if ($('#slTransactionsTypes').val() == "0") {
            swal("", "You Must Select Transaction Type .", "warning");
            $('#slTransactionsTypes').addClass("bg-info");
        }
        else {
            $('#slTransactionsTypes').removeClass("bg-info");
            var WhereClause = "Where id not in (select originid from ForwardingTransChemTax.dbo.taxlink where originid is not null and notes = 'GoodsReceiptNotes' AND JVID IS NOT NULL)   AND isnull(IsDeleted , 0) <> 1";


            if ($('#txtCode').val().trim() != "") {
                WhereClause += " AND Code = '" + $('#txtCode').val() + "'";
            }
            if ($('#slPSInvoices').val().trim() != "0") {
                WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices').val() + "";
            }
            if ($('#slSuppliers').val().trim() != "0") {
                WhereClause += " AND SupplierID = " + $('#slSuppliers').val() + "";
            }
            if ($('#txtFromDate').val().trim() != "") {
                WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate').val()) + "')";
            }
            if ($('#txtToDate').val().trim() != "") {
                WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate').val()) + "')";
            }
            if ($('#slTransactionsTypes').val().trim() == "10") {
                WhereClause += " AND ( isnull(PurchaseInvoiceID , 0 ) <> 0 or isnull(ForwardingPSInvoiceID , 0 ) <> 0)    AND TransactionTypeID = " + $('#slTransactionsTypes').val() + "";


            }
            else {

                if ($('#slTransactionsTypes').val().trim() != "0") {
                    WhereClause += " AND TransactionTypeID = " + $('#slTransactionsTypes').val() + "";
                }
            }
            LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Approving/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_ApproveTransactionTax_BindTableRows(pTabelRows); });

            console.log(WhereClause);
            ///  HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());

        }
    }
    else if (parent.strBindTableRowsFunctionName == "SC_UnApproveTransactionTax_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();

        if ($('#slTransactionsTypes').val() == "0") {
            swal("", "You Must Select Transaction Type .", "warning");
            $('#slTransactionsTypes').addClass("bg-info");
        }
        else {
            $('#slTransactionsTypes').removeClass("bg-info");
            var WhereClause = "Where id in (select originid from ForwardingTransChemTax.dbo.taxlink where originid is not null and notes = 'GoodsReceiptNotes' AND JVID IS NOT NULL)   AND isnull(IsDeleted , 0) <> 1";


            if ($('#txtCode').val().trim() != "") {
                WhereClause += " AND Code = '" + $('#txtCode').val() + "'";
            }
            if ($('#slPSInvoices').val().trim() != "0") {
                WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices').val() + "";
            }

            if ($('#txtFromDate').val().trim() != "") {
                WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate').val()) + "')";
            }
            if ($('#txtToDate').val().trim() != "") {
                WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate').val()) + "')";
            }

            if ($('#slTransactionsTypes').val().trim() != "0") {
                
                WhereClause += " AND TransactionTypeID = " + $('#slTransactionsTypes').val() + "";
            }
            LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Approving/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_UnApproveTransactionTax_BindTableRows(pTabelRows); });

            console.log(WhereClause);
            ///  HighlightText("#tblSC_Transactions>tbody>tr", $("#txt-Search").val().trim());

        }
    }
    else if (parent.strBindTableRowsFunctionName == "Complaint_BindTableRows") {
        var pWhereClause = Complaint_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_Clients/Complaint_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "CRM_Actions_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_Actions/LoadWithPaging", pPageNumber, pPageSize,
        //    function (pData) {
        //        var parm = [JSON.parse(pData[0])];
        //        var runFunction = window[strBindTableRowsFunctionName];
        //        if (typeof runFunction === "function")
        //            runFunction.apply(null, parm);
        //        //  CRM_Actions_BindTableRows(pTabelRows); 
        //        CRM_Actions_ClearAllControls();
        //    });
        //HighlightText("#tblCRM_Actions>tbody>tr", $("#txt-Search").val().trim());
        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_Actions/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { CRM_Actions_BindTableRows(pTabelRows); CRM_Actions_ClearAllControls(); });
        HighlightText("#tblCRM_Actions>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "CRM_Sources_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_Sources/LoadWithPaging", pPageNumber, pPageSize,
        //    function (pData) {
        //        var parm = [pData[0]];
        //        var runFunction = window[strBindTableRowsFunctionName];
        //        if (typeof runFunction === "function")
        //            runFunction.apply(null, parm);
        //        //  CRM_Actions_BindTableRows(pTabelRows); 

        //        CRM_Sources_ClearAllControls();
        //    });
        //HighlightText("#tblCRM_Sources>tbody>tr", $("#txt-Search").val().trim());

        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRM_Sources/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { CRM_Sources_BindTableRows(pTabelRows); CRM_Sources_ClearAllControls(); });
        HighlightText("#tblCRM_Sources>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "CRMIndustryType_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRMIndustryType/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { CRM_IndustryType_BindTableRows(pTabelRows); CRM_IndustryType_ClearAllControls(); });
        HighlightText("#tblCRM_IndustryType>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "CRMComplaintName_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/CRMComplaintName/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { CRM_ComplaintName_BindTableRows(pTabelRows); CRM_ComplaintName_ClearAllControls(); });
        HighlightText("#tblCRM_ComplaintName>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "CRM_SalesMenTarget_BindTableRows") {
        debugger;
        if (pDivPagerName == "div-Pager1") {
            var ID = $('#hID').val();
            var pWhereClause = $('#SalesMenTargetDetailsSqlQuery').val() + ' AND CRM_SalesMenTargetID = ' + ID;
            if (pWhereClause == ' AND CRM_SalesMenTargetID = ' + ID) {
                pWhereClause = "Where  CRM_SalesMenTargetID = " + ID;
            }
            else {
                pWhereClause = pWhereClause.replace("Where AND", "Where ");
            }

            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size1').val();
            var pOrderBy = " ID DESC ";
            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size1 option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClauseAndOrderBy("div-Pager1", "select-page-size1", "spn-first-page-row1", "spn-last-page-row1", "spn-total-count1", "div-Text-Total1", "/api/CRM_SalesMenTargetDetails/LoadWithPagingWithWhereClause", pWhereClause, 'ID', pPageNumber, pPageSize
                , function (pData) {
                    //  console.log(pData[0]);
                    CRM_SalesMenTargetDetails_BindTableRows(JSON.parse(pData[0]));
                });
        }
        else {
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size').val();
            var pWhereClause = $('#SalesMenTargetSqlQuery').val();
            if (pWhereClause.trim() == "") {
                pWhereClause = "Where 1 = 1";
            }
            var pOrderBy = " ID DESC ";
            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClauseAndOrderBy("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/vwCRM_SalesMenTarget/LoadWithPagingWithWhereClause", pWhereClause, 'ID', pPageNumber, pPageSize
                , function (pData) {
                    var parm = [JSON.parse(pData[0])];
                    var runFunction = window[strBindTableRowsFunctionName];
                    if (typeof runFunction === "function") runFunction.apply(null, parm);
                });
        }
    }
    else if (parent.strBindTableRowsFunctionName == "StoresAccounts_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        HighlightText("#tblSC_Stores>tbody>tr", $("#txt-Search").val().trim());
    }

    else if (parent.strBindTableRowsFunctionName == "GoodReceiptNotes_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        var WhereClause = "Where TransactionTypeID = 10 AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = '" + $('#txtCode_Filter').val() + "'";
        }
        if ($('#txtNotes_Filter').val().trim() != "") {
            WhereClause += " AND Notes LIKE N'%" + $('#txtNotes_Filter').val() + "%'";
        }
        //if ($('#slPSInvoices_Filter').val().trim() != "0") {
        //    WhereClause += " AND PurchaseInvoiceID = " + $('#slPSInvoices_Filter').val() + "";
        //}
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , TransactionDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        if ($('#txtInvoiceNo_Filter').val().trim() != "") {
            WhereClause += " AND InvoiceNo = '" + $('#txtInvoiceNo_Filter').val() + "'";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        //  HighlightText("#tblSC_Stores>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "UnapprovingAllocations_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", $("#div-Pager li.active a").text(), $('#select-page-size').val().trim(), function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        //  LoadWithPaging("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Stores/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { SC_Stores_BindTableRows(pTabelRows); SC_Stores_ClearAllControls(); });
        var WhereClause = "Where InvoicePaymentDetailsID IS NOT NULL     AND   (IsDeleted = 0 OR IsDeleted IS NULL )    ";
        //WhereClause += "   AND    (JVID IS NOT NULL and JVID<>0) AND   TransactionType = 60";
        if ($('#slPartner').val() != null && $('#slPartner').val().trim() != "0") {
            if ($('#slPartner').val() != null && $('#slPartner').val().trim() != "0") {

                var TypeID = $('#slPartnerType').val();
                var PartenerIDName = "";
                switch (TypeID) {
                    case "1":
                        PartenerIDName = 'CustomerID';
                        break;
                    case "2":
                        PartenerIDName = 'AgentID';
                        break;
                    case "3":
                        PartenerIDName = 'ShippingAgentID';
                        break;
                    case "4":
                        PartenerIDName = 'CustomsClearanceAgentID';
                        break;
                    case "5":
                        PartenerIDName = 'ShippingLineID';
                        break;
                    case "6":
                        PartenerIDName = 'AirlineID';
                        break;
                    case "7":
                        PartenerIDName = 'TruckerID';
                        break;
                    case "8":
                        PartenerIDName = 'SupplierID';
                        break;
                    case "20":
                        PartenerIDName = 'CustodyID';
                        break;
                    default:
                }

                WhereClause += " AND " + PartenerIDName + " = " + $('#slPartner').val() + "";
            }
            //WhereClause += " AND PartenerID = " + $('#slPartner').val() + "";
        }
        if ($('#txtSearchFrom').val().trim() != "") {
            WhereClause += " AND CONVERT(date , CreationDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtSearchFrom').val()) + "')";
        }
        if ($('#txtSearchTo').val().trim() != "") {
            WhereClause += " AND CONVERT(date , CreationDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtSearchTo').val()) + "')";
        }
        //-------------------------
        //  LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SC_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { SC_Transactions_BindTableRows(pTabelRows); SC_Transactions_ClearAllControls(); });
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/A_ARAllocation/vwAccPartnerBalanceUnapproving_LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { UnapprovingAllocations_BindTableRows(pTabelRows); });

    }
    else if (parent.strBindTableRowsFunctionName == "A_ARAllocation_Partners_BindTableRows") {
        var pWhereClause = ARAllocation_Partners_GetWhereClause();
        var pOrderBy = "PartnerTypeID, Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClauseAllocation_Partners: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, "/api/A_ARAllocation/ARAllocation_Partners_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }

    else if (parent.strBindTableRowsFunctionName == "WebSite_YourInvoices_BindTableRows") {
        var pWhereClause = WebSite_YourInvoices_GetFilterWhereClause();
        var pOrderBy = "PartnerTypeID, Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause };
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, strLoadWithPagingFunctionName, pWhereClause, "ID DESC", pPageNumber, pPageSize, pControllerParameters
            , function (pData) {
                WebSite_YourInvoices_BindTableRows(JSON.parse(pData[0]));
            });
        // HighlightText("#tblWebSite_YourInvoices>tbody>tr", $("#txt-Search").val().trim());
        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
            $(".swapChildrenClass:not(.reversed)").reverseChildren();

        }
    }
    else if (parent.strBindTableRowsFunctionName == "WebSite_YourOperations_BindTableRows") {
        var pWhereClause = Operations_GetFilterWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause };
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, strLoadWithPagingFunctionName, pWhereClause, "ID DESC", pPageNumber, pPageSize, pControllerParameters
            , function (pData) {
                WebSite_YourOperations_BindTableRows(JSON.parse(pData[0]));
            });
        // HighlightText("#tblWebSite_YourInvoices>tbody>tr", $("#txt-Search").val().trim());
        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
            $(".swapChildrenClass:not(.reversed)").reverseChildren();

        }
    }
    else if (parent.strBindTableRowsFunctionName == "WebSite_Form13States_BindTableRows") {
        var pWhereClause = Operations_GetFilterWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause };
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, strLoadWithPagingFunctionName, pWhereClause, "ID DESC", pPageNumber, pPageSize, pControllerParameters
            , function (pData) {
                WebSite_Form13States_BindTableRows(JSON.parse(pData[0]));
            });
        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
            $(".swapChildrenClass:not(.reversed)").reverseChildren();

        }
    }
    /********************************EOF CRM/SC/... By Mostafa Hany*****************************************/

    /******************************** LoadingAndDischaring/... By Ahmed Abdelaziz *****************************************/
    else if (parent.strBindTableRowsFunctionName == "LoadingandDischargingData_BindTableRows") {
    debugger;
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        

LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/LoadingandDischargingData/LoadWithWhereClause", " Where IsNull( TypeID , 10 ) = " + window.LD_TypeID + "", pPageNumber, pPageSize, function (pTabelRows) { LoadingandDischargingData_BindTableRows(pTabelRows); });
    HighlightText("#tblLoadingandDischargingData>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "LD_Transport_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/LoadingandDischargingData/LoadWithWhereClause", " Where IsNull( TypeID , 10 ) = " + window.LD_TypeID + "", pPageNumber, pPageSize, function (pTabelRows) { LoadingandDischargingData_BindTableRows(pTabelRows); });
    HighlightText("#tblLoadingandDischargingData>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "LD_Workers_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
         LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/LD_Workers/LoadWithWhereClause", " Where 1=1 ", pPageNumber, pPageSize, function (pTabelRows) { LD_Workers_BindTableRows(pTabelRows); });

    HighlightText("#tblLD_Workers>tbody>tr", $("#txt-Search").val().trim());
    }
    else if (parent.strBindTableRowsFunctionName == "LD_Storage_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
            LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/LD_Storage/LoadWithWhereClause", " Where IsNull( TypeID , 10 ) = " + window.LD_TypeID + "",  pPageNumber, pPageSize, function (pTabelRows) { LD_Storage_BindTableRows(pTabelRows); });

    HighlightText("#tblLD_Storage>tbody>tr", $("#txt-Search").val().trim());
    }
    /********************************EOF LoadingAndDischaring/... By Ahmed Abdelaziz *****************************************/

    /******************************************* Nour **********************************************/

    else if (parent.strBindTableRowsFunctionName == "TRCK_Drivers_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //LoadWithPaging             ("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/WHS_Warehouses/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { WHS_Warehouses_BindTableRows(pTabelRows); WHS_Warehouses_ClearAllControls(); });
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/TRCK_Drivers/LoadWithPaging", " Where IsDriver=" + TRCK_WorkingOnDrivers, pPageNumber, pPageSize, function (pTabelRows) { TRCK_Drivers_BindTableRows(pTabelRows); TRCK_Drivers_ClearAllControls(); });
        HighlightText("#tblTRCK_Drivers>tbody>tr", $("#txt-Search").val().trim());
    }

    else if (parent.strBindTableRowsFunctionName == "TRCK_DriverAssistant_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        //LoadWithPaging             ("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/WHS_Warehouses/LoadWithPaging", pPageNumber, pPageSize, function (pTabelRows) { WHS_Warehouses_BindTableRows(pTabelRows); WHS_Warehouses_ClearAllControls(); });
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/TRCK_Drivers/LoadWithPaging", " Where IsDriver=" + TRCK_WorkingOnDrivers, pPageNumber, pPageSize, function (pTabelRows) { TRCK_Drivers_BindTableRows(pTabelRows); TRCK_Drivers_ClearAllControls(); });
        HighlightText("#tblTRCK_Drivers>tbody>tr", $("#txt-Search").val().trim());
    }

    else if (parent.strBindTableRowsFunctionName == "MainWarehouse_BindTableRows") {
        var pWhereClause = MainWarehouse_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/MainWarehouse/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }

    else if (parent.strBindTableRowsFunctionName == "WarehouseNotes_BindTableRows") {
        var pWhereClause = WarehouseNotes_GetWhereClause();
        var pOrderBy = "Name";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/WarehouseNotes/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_CFS_GateIn_BindTableRows") {
        var pWhereClause = WH_CFS_GateIn_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/WH_CFS_GateIn/WH_CFS_GateIn_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " OperationNumber DESC, ContainerNumber DESC, HouseNumber DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[2])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_CFS_GateInInventory_BindTableRows") {
        var pWhereClause = WH_CFS_GateInInventory_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/WH_CFS_GateInInventory/WH_CFS_GateInInventory_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " OperationNumber DESC, ContainerNumber DESC, HouseNumber DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[2])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_CFS_Invoices_BindTableRows") {
        var pWhereClause = WH_CFS_Invoices_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/WH_CFS_Invoices/WH_CFS_Invoices_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " OperationNumber DESC, ContainerNumber DESC, HouseNumber DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[2])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "WH_CFS_ReleaseOrders_BindTableRows") {
        var pWhereClause = WH_CFS_ReleaseOrders_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/WH_CFS_ReleaseOrders/WH_CFS_ReleaseOrders_LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " OperationNumber DESC, ContainerNumber DESC, HouseNumber DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[2])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "FA_Addition_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where (TransactionTypeID = 20)  AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = " + $('#txtCode_Filter').val() + "";
        }


        if ($('#txtName_Filter').val().trim() != "") {
            WhereClause += " AND AssetName LIKE '%" + $('#txtName_Filter').val() + "%'";
        }

        if ($('#txtBarCode_Filter').val().trim() != "") {
            WhereClause += " AND BarCode LIKE '%" + $('#txtBarCode_Filter').val() + "%'";
        }



        if ($('#slBranchID_Filter').val().trim() != "0") {
            WhereClause += " AND BranchID = " + $('#slBranchID_Filter').val() + "";
        }
        if ($('#slDevisonID_Filter').val().trim() != "0") {
            WhereClause += " AND DevisonID = " + $('#slDevisonID_Filter').val() + "";
        }
        //if ($('#slTransactionTypeID_Filter').val().trim() != "0")
        //{
        //    WhereClause += " AND TransactionTypeID = " + $('#slTransactionTypeID_Filter').val() + "";
        //}


        if ($('#slDepartmentID_Filter').val().trim() != "0") {
            WhereClause += " AND DepartmentID = " + $('#slDepartmentID_Filter').val() + "";
        }

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { FA_Transactions_BindTableRows(pTabelRows); FA_Transactions_ClearAllControls(); });

    }
    else if (parent.strBindTableRowsFunctionName == "FA_Depreciations_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where  ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = " + $('#txtCode_Filter').val() + "";
        }


        //if ($('#txtName_Filter').val().trim() != "")
        //{
        //    WhereClause += " AND AssetName LIKE '%" + $('#txtName_Filter').val() + "%'";
        //}

        //if ($('#txtBarCode_Filter').val().trim() != "") {
        //    WhereClause += " AND BarCode LIKE '%" + $('#txtBarCode_Filter').val() + "%'";
        //}



        if ($('#slBranchID_Filter').val().trim() != "0") {
            WhereClause += " AND BranchID = " + $('#slBranchID_Filter').val() + "";
        }
        if ($('#slPeriodType_Filter').val().trim() != "0") {
            WhereClause += " AND PeriodType = " + $('#slPeriodType_Filter').val() + "";
        }
        //if ($('#slDevisonID_Filter').val().trim() != "0") {
        //    WhereClause += " AND DevisonID = " + $('#slDevisonID_Filter').val() + "";
        //}
        ////if ($('#slTransactionTypeID_Filter').val().trim() != "0")
        ////{
        ////    WhereClause += " AND TransactionTypeID = " + $('#slTransactionTypeID_Filter').val() + "";
        ////}


        //if ($('#slDepartmentID_Filter').val().trim() != "0") {
        //    WhereClause += " AND DepartmentID = " + $('#slDepartmentID_Filter').val() + "";
        //}

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , ToDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , ToDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_Depreciations/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { FA_Depreciations_BindTableRows(pTabelRows); FA_Depreciations_ClearAllControls(); });

    }
    else if (parent.strBindTableRowsFunctionName == "FA_DepreciationsByAssets_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where  ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = " + $('#txtCode_Filter').val() + "";
        }


        //if ($('#txtName_Filter').val().trim() != "")
        //{
        //    WhereClause += " AND AssetName LIKE '%" + $('#txtName_Filter').val() + "%'";
        //}

        //if ($('#txtBarCode_Filter').val().trim() != "") {
        //    WhereClause += " AND BarCode LIKE '%" + $('#txtBarCode_Filter').val() + "%'";
        //}



        if ($('#slAssets_Filter').val().trim() != "0") {
            WhereClause += " AND AssetID = " + $('#slAssets_Filter').val() + "";
        }
        if ($('#slPeriodType_Filter').val().trim() != "0") {
            WhereClause += " AND PeriodType = " + $('#slPeriodType_Filter').val() + "";
        }
        //if ($('#slDevisonID_Filter').val().trim() != "0") {
        //    WhereClause += " AND DevisonID = " + $('#slDevisonID_Filter').val() + "";
        //}
        ////if ($('#slTransactionTypeID_Filter').val().trim() != "0")
        ////{
        ////    WhereClause += " AND TransactionTypeID = " + $('#slTransactionTypeID_Filter').val() + "";
        ////}


        //if ($('#slDepartmentID_Filter').val().trim() != "0") {
        //    WhereClause += " AND DepartmentID = " + $('#slDepartmentID_Filter').val() + "";
        //}

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , ToDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , ToDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_DepreciationsByAssets/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { FA_DepreciationsByAssets_BindTableRows(pTabelRows); FA_DepreciationsByAssets_ClearAllControls(); });

    }
    else if (parent.strBindTableRowsFunctionName == "FA_AssetsInventory_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where   ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = " + $('#txtCode_Filter').val() + "";
        }

        if ($('#slBranchID_Filter').val().trim() != "0") {
            WhereClause += " AND BranchID = " + $('#slBranchID_Filter').val() + "";
        }
        if ($('#slDevisonID_Filter').val().trim() != "0") {
            WhereClause += " AND DevisonID = " + $('#slDevisonID_Filter').val() + "";
        }

        if ($('#slDepartmentID_Filter').val().trim() != "0") {
            WhereClause += " AND DepartmentID = " + $('#slDepartmentID_Filter').val() + "";
        }

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , Date ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , Date) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_AssetsInventory/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { FA_AssetsInventory_BindTableRows(pTabelRows); FA_AssetsInventory_ClearAllControls(); });

    }
    else if (parent.strBindTableRowsFunctionName == "FA_Assets_BindTableRows") {
        var pWhereClause = FA_Assets_GetFilterWhereClause();
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_Assets/LoadWithPagingWithWhereClause", pWhereClause, pPageNumber, pPageSize, function (pTabelRows) { FA_Assets_BindTableRows(pTabelRows); });

        // HighlightText("#tblWebSite_YourInvoices>tbody>tr", $("#txt-Search").val().trim());
        if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
            $(".swapChildrenClass:not(.reversed)").reverseChildren();

        }
    }
    else if (parent.strBindTableRowsFunctionName == "FA_Exclusion_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        debugger;
        var WhereClause = "Where (TransactionTypeID = 30 or TransactionTypeID = 60)  AND ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = " + $('#txtCode_Filter').val() + "";
        }


        if ($('#txtName_Filter').val().trim() != "") {
            WhereClause += " AND AssetName LIKE '%" + $('#txtName_Filter').val() + "%'";
        }

        if ($('#txtBarCode_Filter').val().trim() != "") {
            WhereClause += " AND BarCode LIKE '%" + $('#txtBarCode_Filter').val() + "%'";
        }



        if ($('#slBranchID_Filter').val().trim() != "0") {
            WhereClause += " AND BranchID = " + $('#slBranchID_Filter').val() + "";
        }
        if ($('#slDevisonID_Filter').val().trim() != "0") {
            WhereClause += " AND DevisonID = " + $('#slDevisonID_Filter').val() + "";
        }
        if ($('#slTransactionTypeID_Filter').val().trim() != "0") {
            WhereClause += " AND TransactionTypeID = " + $('#slTransactionTypeID_Filter').val() + "";
        }


        if ($('#slDepartmentID_Filter').val().trim() != "0") {
            WhereClause += " AND DepartmentID = " + $('#slDepartmentID_Filter').val() + "";
        }

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }

        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_Transactions/LoadWithWhereClause", WhereClause, pPageNumber, pPageSize, function (pTabelRows) { FA_Transactions_BindTableRows(pTabelRows); FA_Transactions_ClearAllControls(); });

    }
    else if (parent.strBindTableRowsFunctionName == "FA_StopDepreciations_BindTableRows") {
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var WhereClause = "Where  ( IsDeleted = 0 or IsDeleted IS NULL )";

        if ($('#txtCode_Filter').val().trim() != "") {
            WhereClause += " AND Code = " + $('#txtCode_Filter').val() + "";
        }


        //if ($('#txtName_Filter').val().trim() != "")
        //{
        //    WhereClause += " AND AssetName LIKE '%" + $('#txtName_Filter').val() + "%'";
        //}

        //if ($('#txtBarCode_Filter').val().trim() != "") {
        //    WhereClause += " AND BarCode LIKE '%" + $('#txtBarCode_Filter').val() + "%'";
        //}



        if ($('#slBranchID_Filter').val().trim() != "0") {
            WhereClause += " AND BranchID = " + $('#slBranchID_Filter').val() + "";
        }
        if ($('#slPeriodType_Filter').val().trim() != "0") {
            WhereClause += " AND PeriodType = " + $('#slPeriodType_Filter').val() + "";
        }
        //if ($('#slDevisonID_Filter').val().trim() != "0") {
        //    WhereClause += " AND DevisonID = " + $('#slDevisonID_Filter').val() + "";
        //}
        ////if ($('#slTransactionTypeID_Filter').val().trim() != "0")
        ////{
        ////    WhereClause += " AND TransactionTypeID = " + $('#slTransactionTypeID_Filter').val() + "";
        ////}


        //if ($('#slDepartmentID_Filter').val().trim() != "0") {
        //    WhereClause += " AND DepartmentID = " + $('#slDepartmentID_Filter').val() + "";
        //}

        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , FromDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        if ($('#txtFromDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , ToDate ) >= CONVERT(date , '" + ConvertDateFormat($('#txtFromDate_Filter').val()) + "')";
        }
        if ($('#txtToDate_Filter').val().trim() != "") {
            WhereClause += " AND CONVERT(date , ToDate) <=  CONVERT(date ,'" + ConvertDateFormat($('#txtToDate_Filter').val()) + "')";
        }
        LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/FA_Depreciations/LoadWithWhereClause", WhereClause, pPageNo, pPageSize, function (pTabelRows) { FA_Depreciations_BindTableRows(pTabelRows); FA_Depreciations_ClearAllControls(); });

    }

    /***************************************** end nour *********************************************/
    else if (parent.strBindTableRowsFunctionName == "TruckingOrders_BindTableRows") {
        debugger;
        var pWhereClause = TruckingOrders_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/TruckingOrders/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Clients_BindTableRows") {
        debugger;
        var pWhereClause = SL_Client_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/SL_Clients/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " ID,Name DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ShipLinkClientsMelk_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkClientsMelk_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkClientsMelk/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " Name, ArName DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ShipLinkClientsEGL_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkClientsMelk_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkClientsEGL/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " Name, ArName DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "UserShippingLink_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkClients_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkClients/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " Name, ArName DESC ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ShipLinkMelkRevenueItems_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkMelkRevenueItems_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkMelkRevenueItems/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " ID desc ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ShipLinkEGLRevenueItems_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkEGLRevenueItems_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkEGLRevenueItems/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " ID desc ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ShipLinkCurrencyClientLinking_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkCurrencyClientLinking_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkCurrencyClientLinking/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " CurrencyCode ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ShipLinkMelkCurrencyClientLinking_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkMelkCurrencyClientLinking_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkMelkCurrencyClientLinking/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = " CurrencyCode ";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ShipLinkInvoicePosting_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkInvoicePosting_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkInvoicePosting/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        //  var pOrderBy = " CurrencyCode ";
        var pOrderBy = $("#cbIsJV1").prop("checked") ? "IssueDate,PaymentDate" : "PaymentDate,IssueDate";

        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "YardInvoicePosting_BindTableRows") {
        debugger;
        var pWhereClause = YardInvoicePosting_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/YardInvoicePosting/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        //  var pOrderBy = " CurrencyCode ";
        var pOrderBy = $("#cbIsJV1").prop("checked") ? "IssueDate" : "IssueDate";

        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "YardLinkTankInvoicePosting_BindTableRows") {
        debugger;
        var pWhereClause = YardLinkTankInvoicePosting_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/YardLinkTankInvoicePosting/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        //  var pOrderBy = " CurrencyCode ";
        var pOrderBy = $("#cbIsJV1").prop("checked") ? "IssueDate" : "IssueDate";

        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "YardLinkTankCreditPosting_BindTableRows") {
        debugger;
        var pWhereClause = YardLinkTankCreditPosting_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/YardLinkTankCreditPosting/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        //  var pOrderBy = " CurrencyCode ";
        var pOrderBy = $("#cbIsJV1").prop("checked") ? "CrdtDate" : "CrdtDate";

        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ShipLinkInvoiceUnposting_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkInvoiceUnposting_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkInvoiceUnPosting/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        var pOrderBy = "ID";

        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ShipLinkInvoiceTypeToJournal_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkInvoiceTypeToJournal_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkInvoiceTypeToJournal/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        //  var pOrderBy = " CurrencyCode ";
        var pOrderBy = "InvoiceTypeName, JournalTypeName";

        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "ShipLinkInvoiceTypeToJournal_Payment_BindTableRows") {
        debugger;
        var pWhereClause = ShipLinkInvoiceTypeToJournal_GetWhereClause();
        strLoadWithPagingFunctionName = "/api/ShipLinkInvoiceTypeToJournal_Payment/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned";
        //  var pOrderBy = " CurrencyCode ";
        var pOrderBy = "InvoiceTypeName, JournalTypeName";

        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }

        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }

    else if (parent.strBindTableRowsFunctionName == "PaymentRequest_BindTableRows") {
        debugger;
        var pWhereClause = PaymentRequest_GetWhereClause();
        if (_IsCustodySettlement == 1)
            pWhereClause = " WHERE CreatorUserID_Request = " + $("#hLoggedUserID").val() + " AND IsApprovedRequest = 1 AND VoucherID is not null";
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PaymentRequest/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PaymentRequestSupplier_BindTableRows") {
        debugger;
        var pWhereClause = PaymentRequest_GetWhereClause();
        if (_IsCustodySettlement == 1)
            pWhereClause = " WHERE CreatorUserID_Request = " + $("#hLoggedUserID").val() + " AND IsApprovedRequest = 1 AND VoucherID is not null";
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PaymentRequestSupplier/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window["PaymentRequest_BindTableRows"];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "PaymentRequest_BindTableRows") {
        debugger;
        var pWhereClause = PaymentRequestIntegration_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/PaymentRequest/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "SettelmentSupplierDrivers_BindTableRows") {
        debugger;
        var pWhereClause = PaymentRequest_GetWhereClause();
        if (_IsCustodySettlement == 1)
            pWhereClause = " WHERE CreatorUserID_Request = " + $("#hLoggedUserID").val() + " AND IsApprovedRequest = 1 AND VoucherID is not null";
        var pOrderBy = "r.ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/SettelmentSupplierDrivers/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "A_ARAllocationWithVoucher_BindTableRows") {
        debugger;
        var pWhereClause = AllocationInvoice_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/A_ARAllocationWithVoucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "A_APAllocationWithVoucher_BindTableRows") {
        debugger;
        var pWhereClause = AllocationInvoice_GetWhereClause();
        var pOrderBy = "ID DESC";
        var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
        var pPageSize = $('#select-page-size').val();
        var pControllerParameters = { pIsLoadArrayOfObjects: false, pLanguage: $("[id$='hf_ChangeLanguage']").val(), pPageNumber: pPageNumber, pPageSize: pPageSize, pWhereClause: pWhereClause, pOrderBy: pOrderBy }
        LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/A_APAllocationWithVoucher/LoadWithPagingWithWhereClauseAndOrderByWithObjectArrayReturned", pWhereClause, pOrderBy, pPageNumber, pPageSize, pControllerParameters, function (pData) {
            var parm = [JSON.parse(pData[0])];
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
    }
    else if (parent.strBindTableRowsFunctionName == "Customers_BindTableRows") {
        {
            debugger;
            var pPageNumber = (pPageNo == 0 ? 1 : pPageNo);
            var pPageSize = $('#select-page-size').val();
            var pWhereClause = " WHERE 1=1 ";

            if (pDefaults.UnEditableCompanyName == "TOP" && $("#slFilterCompany").val() != "") {
                pWhereClause += " AND CompanyID= " + $("#slFilterCompany").val()
            }
            if ($("#txt-Search").val().trim() != "") {
                let pSearchKey = $("#txt-Search").val().trim();
                pWhereClause += " AND (Code LIKE N'%" + pSearchKey + "%' "
                    + " OR Name LIKE N'%" + pSearchKey + "%' "
                    + " OR LocalName LIKE N'%" + pSearchKey + "%') "
            }


            var pControllerParameters = { pPageNumber: 1, pPageSize: $("#select-page-size option:selected").text(), pWhereClause: pWhereClause }
            LoadWithPagingWithWhereClause("div-Pager", "select-page-size", "spn-first-page-row", "spn-last-page-row", "spn-total-count", "div-Text-Total", "/api/Customers/LoadWithPagingWithWhereClause", pWhereClause, pPageNumber, pPageSize
                , function (pData) {
                    var parm = [pData];
                    var runFunction = window[strBindTableRowsFunctionName];
                    if (typeof runFunction === "function") runFunction.apply(null, parm);


                });
        }
    }
    else
        LoadWithPaging(pDivPagerName, pSelectPageSizeName, pSpnFirstPageRowName, pSpnLastPageRowName, pSpnTotalCountName, pDivTextTotalModal, strLoadWithPagingFunctionName, pPageNo, $('#' + pSelectPageSizeName).val().trim(), function (pTabelRows) {
            var parm = [pTabelRows];
            debugger;
            var runFunction = window[strBindTableRowsFunctionName];
            if (typeof runFunction === "function") runFunction.apply(null, parm);
        });
}

//sherif: to call LoadWithPagingForModal instead of LoadWithPaging
function LoadDataWithPagingForModal(pPageNo, pWhereClause, pOrderBy) {

    LoadWithPagingForModal(strLoadWithPagingFunctionName, pWhereClause, pOrderBy, pPageNo, $('#select-page-size').val().trim(), function (pTabelRows) {
        var parm = [pTabelRows];
        debugger;
        var runFunction = window[strBindTableRowsFunctionName];
        if (typeof runFunction === "function") runFunction.apply(null, parm);
    });
}

//function KeepSessionAlive() {
//    $.post(strServerURL + "/proxy/WSHoteliz.asmx/KeepSessionAlive", null, function () { });
//}

//function CheckIsSessionAlive() {
//    $.ajax({
//        type: "POST",
//        url: strServerURL + "/proxy/WSHoteliz.asmx/CheckIsSessionAlive",
//        data: "{ }",
//        contentType: "application/json; charset=utf-8",
//        dataType: "json",
//        success: function (data) {
//            if (data) {
//                if (data) {
//                    window.location = strServerURL + "/login.aspx";
//                }
//            }
//        },
//        error: function (jqXHR, exception) {
//            swal("Sorry", "Please, try again. this is CheckIsSessionAlive in mainapp.master !", "");
//        }
//    });
//}


function WarningMessage() {
    var $textAndPic = $('<div></div>');
    $textAndPic.append('Who\'s this? <br />');
    $textAndPic.append('<img src="./images/pig.ico" />');
    jQuery.noConflict();
    BootstrapDialog.show({
        title: 'Guess who that is',
        message: $textAndPic,
        buttons: [{
            label: 'Acky',
            action: function (dialogRef) {
                dialogRef.close();
            }
        }, {
            label: 'Robert',
            action: function (dialogRef) {
                dialogRef.close();
            }
        }]
    });
}

function ElementPosition(pElementID) {
    $("#tip").css('visibility', 'visible');
    $("#tip").css('background-color', '#ff0000');
    $("#tip").offset({ top: event.screenY, left: event.screenX });
    $("#tip").show();
}

function ElementHide(pElementID) {
    $("#tip").hide();
}

function IsNumberKey(evt) {
    var charCode = (evt.which) ? evt.which : event.keyCode
    if (charCode > 31 && (charCode < 48 || charCode > 57))
        return false;
    return true;
}

// sherif: Integers Only
function CheckValueIsInteger(pTextBoxIDs) {
    $('#' + pTextBoxIDs).keydown(function (e) {
        // Allow: (backspace=8) , (delete=46) , (tab=9) , (escape=), (enter=13) , (.=190)
        //if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
        if ($.inArray(e.keyCode, [46, 8, 9]) !== -1 || //those keys are allowed
            // Allow: Ctrl+A
            (e.keyCode == 65 && e.ctrlKey === true) ||
            // Allow: Ctrl+V
            (e.keyCode == 86 && e.ctrlKey === true) ||
            // Allow: Ctrl+C
            (e.keyCode == 67 && e.ctrlKey === true) ||
            // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });
}

// sherif: Decimal Only
function CheckValueIsDecimal(pTextBoxIDs) {
    $("#" + pTextBoxIDs).keydown(function (e) {
        // Allow: (backspace=8) , (delete=46) , (tab=9) , (escape=), (enter=13), (. in NumPad =110) , (.=190)
        //if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
        if ($.inArray(e.keyCode, [46, 8, 9, 110, 190]) !== -1 || //those keys are allowed
            // Allow: Ctrl+A
            (e.keyCode == 65 && e.ctrlKey === true) ||
            // Allow: Ctrl+V
            (e.keyCode == 86 && e.ctrlKey === true) ||
            // Allow: Ctrl+C
            (e.keyCode == 67 && e.ctrlKey === true) ||
            // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });
}
// sherif: Decimal Only
function CheckValueIsNegativeOrPositiveDecimal(pTextBoxIDs) {
    $("#" + pTextBoxIDs).keydown(function (e) {
        // Allow: (backspace=8) , (delete=46) , (tab=9) , (escape=), (enter=13), (. in NumPad =110) , (.=190), (-=189)
        //if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
        if ($.inArray(e.keyCode, [46, 8, 9, 110, 190, 189]) !== -1 || //those keys are allowed
            // Allow: Ctrl+A
            (e.keyCode == 65 && e.ctrlKey === true) ||
            // Allow: Ctrl+V
            (e.keyCode == 86 && e.ctrlKey === true) ||
            // Allow: Ctrl+C
            (e.keyCode == 67 && e.ctrlKey === true) ||
            // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });
}

// Gamil: Valid Time >> between 0 and 2359
function CheckValueIsValidTime(pTextBoxIDs) {
    let TextBoxValue = $("#" + pTextBoxIDs).val() == "" ? "0" : $("#" + pTextBoxIDs).val();
    if (TextBoxValue < 0 || TextBoxValue > 2359) {
        swal(strSorry, "Time must be between 0 and 2359");
        $("#" + pTextBoxIDs).val("0");
    }
}

function CheckDecimalPlacesAndNegativeSigns(id) {
    var isValid = true; //1st cond. Check decimal places No., 2nd: Check -ve signs no. , 3rd: Check -ve sign place
    if ($("#" + id).val().trim().split(".").length > 2 || $("#" + id).val().trim().split("-").length > 2 || $("#" + id).val().trim().indexOf("-") > 0) {
        isValid = false;
        swal(strSorry, "Please, Revise that field.");
        $("#" + id).focus();
    }
    return isValid;
}
//called onblur() of control and sets focus on it if not correct
function CheckDecimalFormat(id, pCallback) {
    debugger;
    //1st cond. Check decimal places No., 2nd: Check -ve signs no. , 3rd: Check -ve sign place
    if ($("#" + id).val().trim().split(".").length > 2 || $("#" + id).val().trim().split("-").length > 2 || $("#" + id).val().trim().indexOf("-") > 0) {
        swal(strSorry, "Please, Revise that field.");
        $("#" + id).focus();
    }
    else if (pCallback != null && pCallback != undefined)
        pCallback();
}
//sherif: prevent Enter Key in input controls
function DisableEnterKey(pInputID) {
    $("#" + pInputID).keydown(function (e) {
        //  (backspace=8) , (delete=46) , (tab=9) , (escape=), (enter=13) , (.=190)
        if (e.keyCode == 13) {
            e.preventDefault();
        }
        else
            return;
    });
}

function DisableBackspaceKey(pInputID) {
    $("#" + pInputID).keydown(function (e) {
        //  (backspace=8) , (delete=46) , (tab=9) , (escape=), (enter=13) , (.=190)
        if (e.keyCode == 8) {
            e.preventDefault();
        }
        else
            return;
    });
}
////sherif Check if Enter Key pressed to save
////sherif: it loads more times every save (problem)
//function SaveIfEnterKeyPressed(pTextBoxIDs) {
//    $(pTextBoxIDs).keydown(function (e) {
//        debugger;
//        // Allow: (backspace=8) , (delete=46) , (tab=9) , (escape=), (enter=13) , (.=190)
//        //if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
//        if ($.inArray(e.keyCode, [13]) !== -1) {
//            $("#btnSave").click();
//            return;
//        }
//    });
//}

//converts a number to letters (tf2et floos)
function toWords(s) {
    var th = ['', 'Thousand', 'Million', 'Billion', 'Trillion'];
    var dg = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];
    var tn = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
    var tw = ['Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
    s = s.toString();
    s = s.replace(/[\, ]/g, '');
    if (s != parseFloat(s)) return 'not a number';
    var x = s.indexOf('.');
    if (x == -1) x = s.length;
    if (x > 15) return 'too big';
    var n = s.split('');
    var str = '';
    var sk = 0;
    for (var i = 0; i < x; i++) {
        if ((x - i) % 3 == 2) {
            if (n[i] == '1') {
                str += tn[Number(n[i + 1])] + ' ';
                i++;
                sk = 1;
            } else if (n[i] != 0) {
                str += tw[n[i] - 2] + ' ';
                sk = 1;
            }
        } else if (n[i] != 0) {
            str += dg[n[i]] + ' ';
            if ((x - i) % 3 == 0) str += 'Hundred ';
            sk = 1;
        }
        if ((x - i) % 3 == 1) {
            if (sk) str += th[(x - i - 1) / 3] + ' ';
            sk = 0;
        }
    }
    if (x != s.length && parseInt(s.split('.')[1]) != 0/*to prevent printing decimals in words if 0s*/) {
        var y = s.length;
        str += 'point ';
        for (var i = x + 1; i < y; i++) str += dg[n[i]] + ' ';
    }
    return str.replace(/\s+/g, ' ').trim();
}
//converts a number to letters with fraction xxx/1000 (tf2et floos)
function toWords_WithFractionNumbers(s) {
    var th = ['', 'Thousand', 'Million', 'Billion', 'Trillion'];
    var dg = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];
    var tn = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
    var tw = ['Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
    s = s.toString();
    s = s.replace(/[\, ]/g, '');
    if (s != parseFloat(s)) return 'not a number';
    var x = s.indexOf('.');
    if (x == -1) x = s.length;
    if (x > 15) return 'too big';
    var n = s.split('');
    var str = '';
    var sk = 0;
    for (var i = 0; i < x; i++) {
        if ((x - i) % 3 == 2) {
            if (n[i] == '1') {
                str += tn[Number(n[i + 1])] + ' ';
                i++;
                sk = 1;
            } else if (n[i] != 0) {
                str += tw[n[i] - 2] + ' ';
                sk = 1;
            }
        } else if (n[i] != 0) {
            str += dg[n[i]] + ' ';
            if ((x - i) % 3 == 0) str += 'Hundred ';
            sk = 1;
        }
        if ((x - i) % 3 == 1) {
            if (sk) str += th[(x - i - 1) / 3] + ' ';
            sk = 0;
        }
    }
    if (x != s.length && parseInt(s.split('.')[1]) != 0/*to prevent printing decimals in words if 0s*/) {
        var y = s.length;
        str += ' and ';
        for (var i = x + 1; i < y; i++) str += n[i].toString();
        str += '/' + '1';
        for (var i = x + 1; i < y; i++) str += '0';
    }
    return str.replace(/\s+/g, ' ').trim();
}
function DateToArabicWords(pDate) { //pDate Format is dd/MM/yyyy
    debugger;
    var Ret = "";
    //Days
    switch (parseInt(pDate.split('/')[0])) {
        case 1: { Ret = "الأول"; break; }
        case 2: { Ret = "الثانى"; break; }
        case 3: { Ret = "الثالث"; break; }
        case 4: { Ret = "الرابع"; break; }
        case 5: { Ret = "الخامس"; break; }
        case 6: { Ret = "السادس"; break; }
        case 7: { Ret = "السابع"; break; }
        case 8: { Ret = "الثامن"; break; }
        case 9: { Ret = "التاسع"; break; }
        case 10: { Ret = "العاشر"; break; }
        case 11: { Ret = "الحادى عشر"; break; }
        case 12: { Ret = "الثانى عشر"; break; }
        case 13: { Ret = "الثالث عشر"; break; }
        case 14: { Ret = "الرابع عشر"; break; }
        case 15: { Ret = "الخامس عشر"; break; }
        case 16: { Ret = "السادس عشر"; break; }
        case 17: { Ret = "السابع عشر"; break; }
        case 18: { Ret = "الثامن عشر"; break; }
        case 19: { Ret = "التاسع عشر"; break; }
        case 20: { Ret = "العشرون"; break; }
        case 21: { Ret = "الواحد و العشرون"; break; }
        case 22: { Ret = "الثانى و العشرون"; break; }
        case 23: { Ret = "الثالث و العشرون"; break; }
        case 24: { Ret = "الرابع و العشرون"; break; }
        case 25: { Ret = "الخامس و العشرون"; break; }
        case 26: { Ret = "السادس و العشرون"; break; }
        case 27: { Ret = "السابع و العشرون"; break; }
        case 28: { Ret = "الثامن و العشرون"; break; }
        case 29: { Ret = "التاسع و العشرون"; break; }
        case 30: { Ret = "الثلاثون"; break; }
        case 31: { Ret = "الواحد و الثلاثون"; break; }
    }

    Ret += " من ";

    switch (parseInt(pDate.split('/')[1])) {
        case 1: Ret += "يناير"; break;
        case 2: Ret += "فبراير"; break;
        case 3: Ret += "مارس"; break;
        case 4: Ret += "أبريل"; break;
        case 5: Ret += "مايو"; break;
        case 6: Ret += "يونيو"; break;
        case 7: Ret += "يوليه"; break;
        case 8: Ret += "أغسطس"; break;
        case 9: Ret += "سبتمبر"; break;
        case 10: Ret += "أكتوبر"; break;
        case 11: Ret += "نوفمبر"; break;
        case 12: Ret += "ديسمبر"; break;
    }
    Ret += " لعام " + pDate.split('/')[2];
    return Ret;
}

function DisableElement(pElementID) {
    $("#" + pElementID).hide();
}

function ShowElement(pElementID) {
    $("#" + pElementID).show();
}

function SetIndexForTable(pTableID, pClassName) {
    $('#' + pTableID + ' > tbody  > tr').each(function (currentIndex, currentRow) {
        $(currentRow).find('.' + pClassName).html((currentIndex * 1) + 1);
    });
}

//function BindUploadFileButton(pButtonID, pFolderName) {
//    $("#" + pButtonID).fileUpload({
//        'uploader': strServerURL + '/scripts/uploader.swf',
//        'cancelImg': 'images/cancel.png',
//        'buttonText': 'Browse Files',
//        'script': strServerURL + '/proxy/GHFileUpload.ashx',
//        'folder': strServerURL + '/' + pFolderName,
//        'fileDesc': 'Image Files',
//        'fileExt': '*.jpg;*.jpeg;*.gif;*.png',
//        'multi': false,
//        'auto': false
//    });
//}

function ReverseUIControls() {
    if ($("[id$='hf_ChangeLanguage']").val() == "ar") {
        debugger;
        jQuery.noConflict();
        $("#ul-breadcrumb:not(.reversed)").reverseChildren();
        $(".panel-body:not(.reversed)").reverseChildren();
        $("#div-main-options:not(.reversed)").reverseChildren();
        $("#div-option-buttons:not(.reversed)").reverseChildren();
        $("#txt-Search:not(.reversed)").parent().reverseChildren();

        $(".modal-footer:not(.reversed)").reverseChildren();
        $(".table>thead>tr:not(.reversed)").reverseChildren();
    }
}


function Invoices_Print(pInvoiceIDs, pReportTypeID, pOption, pCopyOrOriginal) {
    debugger;
    //if (pDefaults.UnEditableCompanyName == "GBL" && pCopyOrOriginal != undefined && pCopyOrOriginal != 0)
    //    $("#slInvoiceOriginal").val(pCopyOrOriginal);
    if ($("#cbPrintBankDetailsFromTemplate").prop("checked") && $("#slBankTemplate").val() == "") {
        swal("Sorry", "Please select bank template or change that option.");
        return;
    }
    if ($("#hDefaultUnEditableCompanyName").val() == "ILS") {
        var _CurrentInvndex = 0;
        var InvoiceID = pInvoiceIDs.toString().split(',')[_CurrentInvndex];

        var arr_Keys = new Array();
        var arr_Values = new Array();
        arr_Keys.push("ID");
        arr_Values.push(InvoiceID);

        var pParametersWithValues =
        {
            arr_Keys: arr_Keys
            , arr_Values: arr_Values
            , pTitle: "Invoice"
            , pReportName: "Rep_InvoiceILS"
        };
        var win = window.open("", "_blank");
        var url = '/ReportMainClass/PrintReport?pTitle="' + pParametersWithValues.pTitle + '"' + '&arr_Keys=' + pParametersWithValues.arr_Keys + '' + '&arr_Values=' + pParametersWithValues.arr_Values + '&pReportName=' + pParametersWithValues.pReportName + '';

        win.location = url;
    }
    else if ($("#hDefaultUnEditableCompanyName").val() == "ILSEG") {
        var _CurrentInvndex = 0;
        var InvoiceID = pInvoiceIDs.toString().split(',')[_CurrentInvndex];

        var arr_Keys = new Array();
        var arr_Values = new Array();
        arr_Keys.push("ID");
        arr_Values.push(InvoiceID);

        var pParametersWithValues =
        {
            arr_Keys: arr_Keys
            , arr_Values: arr_Values
            , pTitle: "Invoice"
            , pReportName: "Rep_InvoiceILSEG"
        };
        var win = window.open("", "_blank");
        var url = '/ReportMainClass/PrintReport?pTitle="' + pParametersWithValues.pTitle + '"' + '&arr_Keys=' + pParametersWithValues.arr_Keys + '' + '&arr_Values=' + pParametersWithValues.arr_Values + '&pReportName=' + pParametersWithValues.pReportName + '';

        win.location = url;
    }
    else {
        pCurrentInvoiceID = 0;
        ChargedPerson = "";
        var pWhereClause = "";
        var pIsPrintWithoutValidation = false;
        if (pDefaults.UnEditableCompanyName != "FFI")
            pIsPrintWithoutValidation = true;
        var _NumberOfInvoices = pInvoiceIDs.toString().split(',').length;
        var pFinalReportHTML = "";
        FadePageCover(true);
        var _CurrentInvoiceIndex = 0;
        var pIsCallBackAsync = true;
        //for (var _CurrentInvoiceIndex = 0; _CurrentInvoiceIndex < _NumberOfInvoices; _CurrentInvoiceIndex++)
        //take from down copy to multiPrint
        {
            if (pDefaults.UnEditableCompanyName == "COS") {
                FadePageCover(false);
                pCurrentInvoiceID = pInvoiceIDs.toString().split(',')[_CurrentInvoiceIndex];
                $.ajax({
                    type: "Get",
                    url: "/api/Invoices/getInvoiceDetailsForVoucher",
                    data: { pInvoiceID: pCurrentInvoiceID },
                    dataType: "json",
                    success: function (d) {
                        if (JSON.parse(d[1])[0].InvoicesPaymentID == 0) {
                            $("#txtAmount").val(JSON.parse(d[1])[0].Amount);

                            jQuery("#VoucherModal").modal("show");

                        }
                        else {
                            ChargedPerson = JSON.parse(d[1])[0].Name;
                            Voucher_Print(JSON.parse(d[1])[0].InvoicesVoucherID);
                        }
                    }
                });
            }
            //FadePageCover(true);
            var pID = pInvoiceIDs.toString().split(',')[_CurrentInvoiceIndex];
            pWhereClause = " WHERE ID = " + pID;
            var pParametersWithValues = {
                pWhereClause: pWhereClause
                , pID: pID
                , pInvoiceReportTypeID: pReportTypeID
                , pIsPrintWithoutValidation: pIsPrintWithoutValidation
                , pBankTemplateID: (!$("#cbPrintBankDetailsFromTemplate").prop("checked") ? 0 : $("#slBankTemplate").val())
                , pIsOriginalChassisItems: $("#cbPrintOriginalChassisDetails").prop("checked")
            } //3:pdf , 4:rft
            debugger;
            CallGETFunctionWithParameters("/api/Reports/Report_Invoice"
                , pParametersWithValues
                , function (data) {

                    var pRecordsExist = data[0];
                    //data[1] : strExportedFileName
                    //data[2] : objCvwReceivables.lstCVarvwReceivables
                    var pInvoiceItem = JSON.parse(data[2]);
                    var pContainerTypes = data[3];
                    var pHouseNumber = data[4];
                    var pMasterOperationCode = data[5];
                    var pTaxNumber = (data[6] == 0 ? "" : data[6]);
                    var pInvoiceDate = data[7];//pInvoiceDate.ToShortDateString()
                    var pInvoiceNumber = data[8];
                    var pAccountName = data[9];
                    var pBankName = data[10];
                    var pBankAddress = data[11];
                    var pSwiftCode = data[12];
                    var pAccountNumber = data[13];
                    var pMasterBL = data[14];
                    var pPackageTypes = data[15];
                    var pCustomerReference = data[16];
                    var MissingMandatoryFields = data[17];
                    var pInvoiceDueDate = data[18];
                    var pPOLName = data[19];
                    var pPODName = data[20];
                    var pHouseBLs = data[21];//used incase the invoice is created for the master operation and holds all the HBL Nos on that operation
                    var pTaxTypeName = data[22];
                    var pTaxAmount = data[23];
                    var pDiscountTypeName = data[24];
                    var pDiscountAmount = data[25];
                    var pAddressLine1 = data[26];
                    var pAddressLine2 = data[27];
                    var pAddressLine3 = data[28];
                    var pPhones = data[29];
                    var pFaxes = data[30];
                    var pCBM = data[31];
                    var pGrossWeightSum = data[32];
                    var pClientStreetLine1 = data[33];
                    var pClientStreetLine2 = data[34];
                    var pClientCityName = data[35];
                    var pClientCountryName = data[36];
                    var pShipmentTypeCode = data[37];
                    var pIncotermName = data[38];
                    var pShipperName = data[39];
                    var pConsigneeName = data[40];
                    var pVesselName = data[41];
                    var pETA = data[42];
                    var pETD = data[43];
                    var pContainerNumbers = data[44];
                    var pSalesman = data[45];
                    var pVATNumber = data[46];
                    var pDescriptionOfGoods = data[47];
                    var pVGM = data[48];
                    var pNumberOfPackages = data[49];
                    var pETAPOD = data[50];
                    var pLeftSignature = data[51];
                    var pMiddleSignature = data[52];
                    var pRightSignature = data[53];
                    var pGRT = data[54];
                    var pDWT = data[55];
                    var pNRT = data[56];
                    var pLOA = data[57];
                    var pInvoiceTypeCode = data[58];
                    var pBankDetailsTemplate = data[59];
                    var pOperationHeader = JSON.parse(data[60]);
                    var pInvoiceHeader = JSON.parse(data[61]);
                    var pDeliveryOrderNumber = data[62];
                    var pMasterOperationHeader = JSON.parse(data[63]);
                    var pDefaultsRow = JSON.parse(data[64]);
                    var pMainRoute = JSON.parse(data[65]);
                    var pELIInvoicePrefix = data[66];
                    var pClientHeader = JSON.parse(data[67]);
                    var pTankOrFlexiNumbers = data[68];
                    var pTruckingOrders = JSON.parse(data[69]);
                    var pFleetOrders = JSON.parse(data[70]);
                    var pCustomsClearance = JSON.parse(data[71]);
                    var pOperationPartner = JSON.parse(data[72]);
                    pQRImage = data[73]
                    if (pOption == "Email") {
                        var _SelectedContactEmails = GetAllSelectedTextSiblingsByNameAttr("cbAddedItemID");
                        if (_SelectedContactEmails != "")
                            pClientHeader.Email += (pClientHeader.Email == "" || pClientHeader.Email == 0)
                                ? _SelectedContactEmails
                                : ("," + _SelectedContactEmails);
                    }
                    debugger;
                    //When printed from operations the draft invoices are in another table
                    var pInvoiceTableSuffix = (glbCallingControl == "OperationsEdit" && pInvoiceTypeCode == "DRAFT") ? "DRAFT" : "";
                    //if (pDeliveryOrderNumber == 0)
                    //    pDeliveryOrderNumber = $("#tblRoutings tr td.RoutingType[val=30]").parent().find("td.DeliveryOrderNumber").text();

                    //var trMainRoute = $("#tblRoutings tbody tr td[val=30]").parent();
                    //$("#tblRoutings tbody tr td[val=30]").parent().find("td.Vessel").text();
                    $("#tblInvoices" + pInvoiceTableSuffix + " tbody tr[id=" + pID + "] td.InvoiceAmount").text(pInvoiceHeader.Amount.toFixed(2));

                    if (pClientHeader == undefined)
                        swal("Sorry", "This invoice has not client.");
                    else if (pRecordsExist == false)
                        swal(strSorry, MissingMandatoryFields);
                    else if (pDefaults.UnEditableCompanyName == "COS" //&& glbCallingControl == "DraftInvoicesApprovals"
                        && (pClientHeader.VATNumber == "0" || pClientHeader.VATNumber == ""))
                        swal("Sorry", "VAT Number is not found");
                    else {
                        if (pInvoiceHeader.IsFleet && pDefaults.IsTaxOnItems) {
                            debugger;
                            var ReportHTML = '';
                            if (pFleetOrders.length > 0) {
                                //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                                //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                                ReportHTML += '<html>';
                                ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                                ReportHTML += '         <body style="background-color:white;">';
                                ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                                //ReportHTML += '                 <div class="col-xs-12 text-center ' + (pDefaults.UnEditableCompanyName == "GBL" ? " m-t-lg " : "") + '"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + ' ' + (pInvoiceHeader.IsApproved ? $("#slInvoiceOriginal").val() : (pDefaults.UnEditableCompanyName == "GBL" ? " (Draft) " : "")) + '</h3></div>';
                                if (pDefaults.UnEditableCompanyName == "GBL")
                                    ReportHTML += '                 <div class="col-xs-12 text-center m-t-lg"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + ' '
                                        + (!pInvoiceHeader.IsApproved
                                            ? "(Draft)"
                                            : (pInvoiceHeader.IsApproved && pInvoiceHeader.IsPrintOriginal
                                                ? "(Original)"
                                                : (pInvoiceHeader.IsApproved && !pInvoiceHeader.IsPrintOriginal && $("#slInvoiceOriginal").val() == ""
                                                    ? "(Copy)"
                                                    : $("#slInvoiceOriginal").val())
                                            )
                                        )
                                        + '</h3></div>';
                                else
                                    ReportHTML += '                 <div class="col-xs-12 text-center"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + ' ' + (pInvoiceHeader.IsApproved ? $("#slInvoiceOriginal").val() : "") + '</h3></div>';

                                //if (!(pDefaults.UnEditableCompanyName == "MEL" && pInvoiceHeader.InvoiceTypeName == "SW")) //Dont print for Safena
                                //    ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';
                                //else { //i.e. (pDefaults.UnEditableCompanyName == "SAF" && pInvoiceTypeCode == "DRAFT") {
                                //    ReportHTML += '             <div style="position:absolute;left:50px;top:170px;">';
                                //    ReportHTML += '             <img src="/Content/Images/DraftWaterMark.jpg" alt="logo" width=612px; height=200px;></div>';
                                //}
                                ////ReportHTML += '             <div style="clear:both;"><br></div>';
                                //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';

                                ReportHTML += '         <div class="col-xs-12 m-t">';

                                ReportHTML += '             <div class="col-xs-8">';
                                ReportHTML += '                 <b>Bill to: </b>' + pInvoiceHeader.PartnerName;
                                if (pDefaults.UnEditableCompanyName == "GBL") {
                                    ReportHTML += '                 <br><b>Address: </b>' + (pClientHeader.Address == 0 ? "" : pClientHeader.Address.replace(/\n/g, "<br/>"));
                                }
                                else {
                                    ReportHTML += '                 <br><b>Address: </b>' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                    ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                                    ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                    ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                                }
                                ReportHTML += '             </div>';
                                ReportHTML += '             <div class="col-xs-4">';
                                if (pInvoiceTypeCode == "SOA" && pInvoiceHeader.RelatedToInvoiceID != 0)
                                    ReportHTML += '             <b>Related To: </b>' + pInvoiceHeader.RelatedToInvoiceTypeName + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + "#" + pInvoiceHeader.RelatedToInvoiceNumber.toString().padStart(5, 0) + '<br>';
                                ReportHTML += '                 <b>Billing Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                                ReportHTML += '                 <b>Billing Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                                ReportHTML += '             </div>';
                                //if (pInvoiceTypeCode == "DRAFT") {
                                //    ReportHTML += '             <div style="position:absolute;left:50px;top:250px;">';
                                //    ReportHTML += '             <img src="/Content/Images/DraftWaterMark.jpg" alt="logo" width=612px; height=200px;></div>';
                                //}

                                ReportHTML += '                 <div class="col-xs-12 clear"><hr style="border:solid #000 1px;" /></div>';

                                //ReportHTML += '         <div class="col-xs-6"><b>Operation: </b>' + (pOperationHeader.Code == 0 ? "" : pOperationHeader.Code) + '</div>';
                                //if ($("#cbPrintMBL").prop("checked"))
                                //    ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                                //if ($("#cbPrintHBL").prop("checked")) {
                                //    if (pHouseBLs != "0")//Master Operation so show all houses on it
                                //        ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                //    else if (pHouseNumber != "0")
                                //        ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                                //}
                                if (pFleetOrders != null)
                                    ReportHTML += '         <div class="col-xs-6"><b>Division: </b>' + (pFleetOrders[0].DivisionName == 0 ? "" : pFleetOrders[0].DivisionName) + '</div>';
                                if (pInvoiceHeader.InvoiceTypeCode == "CREDITMEMO" && pDefaults.UnEditableCompanyName == "GBL")
                                    ReportHTML += '             <div class="col-xs-12" style="clear:both;"><b>Cancelled Invoice: </b>' + (pInvoiceHeader.Notes == 0 ? "" : pInvoiceHeader.Notes) + '</div>';
                                ReportHTML += '             <div class="col-xs-12" style="clear:both;"><b>Notes: </b>' + (pInvoiceHeader.EditableNotes == 0 ? "" : pInvoiceHeader.EditableNotes) + '</div>';
                                if (pOperationHeader.CertificateNumber != "N/A"
                                    && !(pDefaults.UnEditableCompanyName == "GBL" && pOperationHeader.MoveTypeName == "WAREHOUSING"))
                                    ReportHTML += '         <div class="col-xs-6"><b>Certificate Number: </b>' + (pOperationHeader.CertificateNumber == 0 ? "" : pOperationHeader.CertificateNumber) + '</div>';

                                //if (pInvoiceItem.length > 0 && pDefaults.UnEditableCompanyName == "GBL")
                                //    if (pInvoiceItem[0].TruckingOrderID != 0) {
                                //        ReportHTML += '         <div class="col-xs-6"><b>Loading Zone: </b>' + (pInvoiceItem[0].LoadingZoneName == 0 ? "N/A" : pInvoiceItem[0].LoadingZoneName) + '</div>';
                                //        ReportHTML += '         <div class="col-xs-6"><b>First Curing Zone: </b>' + (pInvoiceItem[0].FirstCuringAreaName == 0 ? "" : pInvoiceItem[0].FirstCuringAreaName) + '</div>';
                                //        ReportHTML += '         <div class="col-xs-6"><b>Second Curing Zone: </b>' + (pInvoiceItem[0].SecondCuringAreaName == 0 ? "" : pInvoiceItem[0].SecondCuringAreaName) + '</div>';
                                //        ReportHTML += '         <div class="col-xs-6"><b>Third Curing Zone: </b>' + (pInvoiceItem[0].ThirdCuringAreaName == 0 ? "" : pInvoiceItem[0].ThirdCuringAreaName) + '</div>';
                                //    }

                                if ($("#cbLargeInvoice").prop("checked")) {
                                    ReportHTML += '         <div class="m-l" style="clear:both;"><h3><br><br><br>Please, see attachment.</h3></div>';
                                    ReportHTML += '         <div class="break"></div>';
                                }

                                ReportHTML += '                     <div class="col-xs-12 clear">';
                                ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                                 <tr>';
                                if (pDefaults.UnEditableCompanyName == "SAF" || pDefaults.UnEditableCompanyName == "MEL" || pDefaults.UnEditableCompanyName == "GBL")
                                    ReportHTML += '                                     <th>Item</th>';
                                ReportHTML += '                                     <th>Description</th>';
                                ReportHTML += '                                     <th>Qty</th>';
                                ReportHTML += '                                     <th>Unit Price</th>';
                                if (pDefaults.UnEditableCompanyName == "GBL")
                                    ReportHTML += '                                     <th>SubTotal</th>';
                                else
                                    ReportHTML += '                                     <th>WHT</th>';
                                ReportHTML += '                                     <th>VAT</th>';
                                ReportHTML += '                                     <th>Total</th>';
                                ReportHTML += '                                 </tr>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                var _TotalTaxOnItems = 0;
                                var _TotalDiscountOnItems = 0;
                                $.each(pFleetOrders, function (i, item) {
                                    _TotalTaxOnItems += item.TaxAmount;
                                    _TotalDiscountOnItems += item.DiscountAmount;
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    if (pDefaults.UnEditableCompanyName == "SAF" || pDefaults.UnEditableCompanyName == "MEL" || pDefaults.UnEditableCompanyName == "GBL")
                                        ReportHTML += '                                         <td>' + (i + 1) + '</td>';
                                    ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 && item.ChargeTypeLocalName != undefined ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes.replace(/\n/g, "<br/>")) : "") + '</td>';
                                    ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                    ReportHTML += '                                         <td>' + item.SalePrice.toFixed(2) + '</td>'; //because in controller gets average
                                    if (pDefaults.UnEditableCompanyName == "GBL")
                                        ReportHTML += '                                         <td>' + item.AmountWithoutVAT.toFixed(2) + '</td>';
                                    else
                                        ReportHTML += '                                         <td>' + item.DiscountAmount.toFixed(2) + '</td>';
                                    ReportHTML += '                                         <td>' + item.TaxAmount.toFixed(2) + '</td>';
                                    ReportHTML += '                                         <td>' + (item.AmountWithoutVAT + item.TaxAmount).toFixed(2) + '</td>';
                                    //ReportHTML += '                                         <td>' + (item.Notes == "0" ? "" : item.Notes) + '</td>';
                                    ReportHTML += '                                     </tr>';
                                });
                                if (pInvoiceHeader.FixedDiscount > 0) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td colspan=4>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                    //ReportHTML += '                                         <td>' + _TotalTaxOnItems + '</td>';
                                    //ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                     </tr>';
                                }
                                //ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                                //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                                //ReportHTML += '                                         </tr>';
                                //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                                //ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                         </tr>';
                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>';

                                ReportHTML += '                         <div class="row"></div>';

                                ReportHTML += '                         <div class="col-xs-8 m-t">';
                                if (pDefaults.UnEditableCompanyName == "GBL" && pDefaults.CompanyName != "IST") {
                                    ReportHTML += "&emsp;";
                                }
                                else if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                    ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                    ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                    ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                    ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                    ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                                }
                                else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                    ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                                }
                                else
                                    ReportHTML += '                             <br>';
                                ReportHTML += '                         </div>';
                                ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                                if (_TotalTaxOnItems != 0 || _TotalDiscountOnItems != 0) {
                                    ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                    //ReportHTML += '                             <b>VAT: </b>' + (_TotalTaxOnItems - _TotalDiscountOnItems).toFixed(2) + '</br>';
                                    if (_TotalTaxOnItems != 0)
                                        ReportHTML += '                             <b>VAT: </b>' + (_TotalTaxOnItems).toFixed(2) + '</br>';
                                    if (_TotalDiscountOnItems != 0)
                                        ReportHTML += '                             <b>WHT: </b>' + (_TotalDiscountOnItems).toFixed(2) + '</br>';
                                }
                                ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></br>';
                                ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                                if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                    ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).replace(/\B(?=(\d{3})+(?!\d))/g, ",").toFixed(2) + '</b></br>';
                                ReportHTML += '                         </div>';

                                //ReportHTML += '                     </div>'; //of table-responsive
                                //ReportHTML += '                 </section>';
                                //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                                ReportHTML += '             </div>';
                                ReportHTML += '         </body>';

                                //ReportHTML += '                 <div class="col-xs-12 m-t m-l" style="clear:both;"><b>Invoice considered paid if a stamped receipt issued</b></div>';
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                                ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                 </div>';
                                if ($("#cbPrintStamp").prop("checked") && pInvoiceTypeCode != "DRAFT")
                                    ReportHTML += '         <div class="text-left m-l-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';
                                if (pInvoiceHeader.InvoiceTypeName != "DN" && pDefaults.UnEditableCompanyName != "GBL"
                                    && pDefaults.UnEditableCompanyName != "ACS" && pDefaults.UnEditableCompanyName != "WAV"
                                    && pDefaults.UnEditableCompanyName != "MEL" && pDefaults.UnEditableCompanyName != "CAP") {
                                    ReportHTML += '                     <div class="col-xs-12 m-t-lg text-center"><b>' + '   لا يعتد بالفاتورة إلا بعد استلام إيصال السداد   ' + '</b></div>';
                                    ReportHTML += '                     <div class="col-xs-12 text-center"><b>' + '   الشركة تخضع لنظام الدفعات المقدمة   ' + '</b></div>';
                                }

                                ReportHTML += '     <footer class="footer col-xs-12 m-t-lg" style="width:100%; position:absolute; bottom:0;">';
                                if (pDefaults.UnEditableCompanyName == "GBL" && pDefaults.CompanyName != "IST") {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                    ReportHTML += '                             Account Name: GB LOGISTICS S A E ' + '</br>';
                                    ReportHTML += '                             Bank Name: SOCIETE ARABE INTERNATIONALE DE BANQUE' + '</br>';
                                    ReportHTML += '                             Account number : 0220-3010314-10010 EGP / 0205-3010314-10010 CHF / 0203-3010314-10010 EUR' + '</br>';
                                    ReportHTML += '                             Account Type : CURRENT ACCOUNT' + '</br>';
                                    ReportHTML += '                             Branch Name : SHOOTING CLUB' + '</br>';
                                    ReportHTML += '                             Branch Address : 50 SHOOTING CLUB ST. DOKKI GIZA, Cairo, Egypt' + '</br>';
                                    //ReportHTML += '                             Country : Egypt' + '</br>';
                                    //ReportHTML += '                             Town/City : Cairo' + '</br>';
                                    ReportHTML += '                             Swift Code : SBNKEGCXXXX' + '</br></br>';

                                    ReportHTML += '                             Bank Name: Abu Dhabi Islamic Bank-Egypt ' + '</br>';
                                    ReportHTML += '                             Bank Address : 54 Lebanon str., Giza, Egypt' + '</br>';
                                    ReportHTML += '                             Account number : 100000603372 USD' + '</br>';
                                    ReportHTML += '                             Swift Code : ABDIEGCAXXX' + '</br>';
                                    ReportHTML += '                             IBAN: EG900030552400000100000603372' + '</br>';

                                    //ReportHTML += '                     <br><br><div style="font-size:12px;" class="col-xs-12 text-center"><b>' + '   برجاء عدم استقطاع او خصم أي مبالغ مالية تحت حساب الضريبة حيث أن الشركة تخضع لنظام الدفعات المقدمة عن الفترة الضريبية من 1/1/2021 حتى 31/12/2021   ' + '</b></div><br><br>';
                                    //ReportHTML += '                     <div style="font-size:12px;" class="col-xs-12 m-t-lg text-center"><b>' + '   شكرا لتعاونكم   ' + '</b></div>';
                                }
                                //ReportHTML += '         <div class="row text-right m-r m-t">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                                //ReportHTML += '         <div class="row text-right m-r">' + '  يوقف صرف شيكات مصر للتأمين لحين تسوية التعويضات  ' + '</div>';
                                //ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                                //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                                //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                                //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                                if ($("#cbPrintFooterInvoice").prop("checked"))
                                    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter' + (pInvoiceHeader.InvoiceTypeName == "DN" ? "-Debit" : "") + '.jpg" alt="footer"/></div>';
                                else
                                    ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                                ReportHTML += '     </footer>';
                                ReportHTML += '</html>';
                                if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                    pFinalReportHTML += ReportHTML;
                                    Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                                }
                                else {
                                    pFinalReportHTML += ReportHTML;
                                    pFinalReportHTML += ' <div class="break"></div>';
                                }
                            }
                            else { //EOF if (pFleetOrders.length > 0) {
                                swal("Sorry", "No orders added to this invoice.");
                                FadePageCover(false);
                            }
                        } //if (pInvoiceHeader.IsFleet && pDefaults.IsTaxOnItems) {
                        else if (pDefaults.UnEditableCompanyName == "FFI") {
                            //SaveFile(data[1]);
                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '             <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div> </br>';
                            ReportHTML += '             <div class="col-xs-12 text-center m-t-n-lg"><h3>' + (pInvoiceHeader.InvoiceTypeCode == "STATEMENT" ? "" : 'Invoice No. ') + pInvoiceDate.substr(3, 2) + '/' + pInvoiceDate.substr(8, 2) + '/' + pInvoiceHeader.ConcatenatedInvoiceNumber + '</h3></div> </br>';
                            //ReportHTML += '             <div class="col-xs-12 text-center m-t-n"><h3>Invoice No. ' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(3, 2) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '/' + pInvoiceHeader.ConcatenatedInvoiceNumber + '</h3></div> </br>';
                            //ReportHTML += '             <div class="col-xs-12 text-center m-t-n-lg"><h3>Invoice No. ' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(3, 2) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '/' + pInvoiceNumber + '</h3></div> </br>';

                            ReportHTML += '             <div class="col-xs-4 hide"><b>Print Date: </b>' + getTodaysDateInddMMyyyyFormat() + '</div>';
                            ReportHTML += '             <div class="col-xs-8"><b>' + (pInvoiceHeader.InvoiceTypeCode == "STATEMENT" ? "STATEMENT" : 'Invoice') + ' To: </b>' + pInvoiceHeader.PartnerName + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>' + (pInvoiceHeader.InvoiceTypeCode == "STATEMENT" ? "STATEMENT" : 'Invoice') + '  Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</div>';
                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '             <div class="col-xs-4"><b>Operation: </b>' + pMasterOperationCode + '</div>';
                            else
                                ReportHTML += '             <div class="col-xs-4"><b>Operation: </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '</div>';
                            //ReportHTML += '             <div class="col-xs-4"><b>MBL</b>' + $("#lblMaster").text() + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>BL: </b>' + pMasterBL + '</div>';
                            if (pHouseBLs != "0")//Master Operation so show all houses on it
                                ReportHTML += '             <div class="col-xs-4"><b>HBL</b>: ' + pHouseBLs + '</div>';
                            else
                                if (pHouseNumber != "0" && !$("#cbIsDirect").prop("checked"))
                                    ReportHTML += '             <div class="col-xs-4"><b>HBL</b>: ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Payment Term: </b>' + (pInvoiceHeader.PaymentTermID == 0 ? 'N/A' : pInvoiceHeader.PaymentTermName) + '</div>';
                            //ReportHTML += '             <div class="col-xs-4"><b>Routing</b>' + $("#lblRouting").text() + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>POD: </b>' + pPODName + '</div>';
                            if (pContainerTypes != 0)
                                ReportHTML += '         <div class="col-xs-4"><b>Containers: </b>' + (pContainerTypes == 0 ? "N/A" : pContainerTypes) + '</div>';
                            else
                                if (pPackageTypes != 0)
                                    ReportHTML += '     <div class="col-xs-4"><b>Packages: </b>' + (pPackageTypes == 0 ? "N/A" : pPackageTypes) + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Customer ' + (pInvoiceHeader.InvoiceTypeCode == "STATEMENT" ? "STATEMENT" : 'Invoice') + ' : </b>' + (pCustomerReference == 0 ? "N/A" : pCustomerReference) + '</div>';
                            if (pTruckingOrders.length > 0)
                                ReportHTML += '             <div class="col-xs-4"><b>Loading Date: </b>' + pTruckingOrders[0].StuffingDate + '</div>';
                            //ReportHTML += '             <div class="col-xs-4"><b></b>' + '' + '</div>';
                            //ReportHTML += '                 <section class="panel panel-default">';
                            //ReportHTML += '                     <div class="table-responsive">';
                            ReportHTML += '                     <div class="col-xs-12 clear">'
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Quantity</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Sale Price</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (item.Notes == 0 || item.Notes == "" ? "" : '-' + item.Notes) + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            ReportHTML += '                                         <tr>';
                            ReportHTML += '                                             <td colspan=3>' + '<b>Sum Of ItemsCharges : ' + '</b></td>';
                            ReportHTML += '                                             <td><b>' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></td>';
                            ReportHTML += '                                         </tr>';
                            //if (pTaxAmount != 0) {
                                ReportHTML += '                                         <tr>';
                                ReportHTML += '                                             <td colspan=3>' + '<b>VAT (' + pTaxTypeName + ') </b></td>';
                                ReportHTML += '                                             <td><b>' + pTaxAmount + '</b></td>';
                                ReportHTML += '                                         </tr>';
                            //}
                            if (pDiscountAmount != 0) {
                                ReportHTML += '                                         <tr>';
                                ReportHTML += '                                             <td colspan=3>' + '<b>Discount (' + pDiscountTypeName + ')</b></td>';
                                ReportHTML += '                                             <td><b>' + pDiscountAmount + '</b></td>';
                                ReportHTML += '                                         </tr>';
                            }
                            ReportHTML += '                                         <tr>';
                            ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </body>';
                            ReportHTML += '                     </table>';
                            ReportHTML += '                 </div>'
                            //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                            //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                            //ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                            ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                         <div class="row"></div>';
                                ReportHTML += '                         <div class="m-l m-t"></br></br>';
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                             <b><u>Account Name:</u></b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b><u>Bank Name:</u></b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b><u>Bank Address:</u></b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b><u>Swift Code:</u></b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b><u>Account Number:</u></b> ' + pAccountNumber + '</br>';
                                ReportHTML += '                         </div>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                         <div class="row"></div>';
                                ReportHTML += '                         <div class="m-l m-t"></br></br>';
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                                ReportHTML += '                         </div>';
                            }
                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '         </body>';
                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            //if ($("#cbPrintFooterInvoice").prop("checked"))
                            ReportHTML += '         <div class="row text-right m-r">' + '  الشركه خاضعه لنظام الدفعات المقدمه تطبيقا لأحكام الماده 62 من القانون رقم 91 لسنة 2005 و لا يجوز الخصم عليها  ' + '</div>';
                            if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                                ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            else
                                if ($("#cbIsImport").prop("checked") && $("#cbIsAir").prop("checked"))
                                    ReportHTML += '             <div class="row m-l">F/FFI-IA-11-04</div>';
                                else
                                    if ($("#cbIsExport").prop("checked") && $("#cbIsOcean").prop("checked"))
                                        ReportHTML += '         <div class="row m-l">F/FFI-ES-10-05</div>';
                                    else
                                        if ($("#cbIsExport").prop("checked") && $("#cbIsOcean").prop("checked"))
                                            ReportHTML += '     <div class="row m-l">F/FFI-ES-10-05</div>';
                                        else
                                            if ($("#cbIsExport").prop("checked") && $("#cbIsAir").prop("checked"))
                                                ReportHTML += ' <div class="row m-l">F/FFI-EA-10-04</div>';
                            ReportHTML += '         <div class="row text-center ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        }
                        else if (pDefaults.UnEditableCompanyName == "NSL") {

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title></title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '             <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '             <div class="col-xs-12 text-center m-t-n"><h3>Invoice No. ' + pInvoiceDate.substr(3, 2) + '/' + pInvoiceDate.substr(8, 2) + '/' + pInvoiceHeader.ConcatenatedInvoiceNumber + '</h3></div>';
                            ReportHTML += '             <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            //ReportHTML += '             <div class="col-xs-12 text-center m-t-n"><h3>Invoice</h3></div>';

                            //ReportHTML += '             <div class="col-xs-12">';
                            ReportHTML += '                 <div class="col-xs-8">';
                            ReportHTML += '                     <b>' + $("#hDefaultCompanyName").val() + '</b><br>';
                            ReportHTML += '                     ' + (pAddressLine1 == "" ? "" : (pAddressLine1 + '<br>'));
                            ReportHTML += '                     ' + (pAddressLine2 == "" ? "" : (pAddressLine2 + '<br>'));
                            ReportHTML += '                     ' + (pAddressLine3 == "" ? "" : (pAddressLine3) + '<br>');
                            ReportHTML += '                     ' + (pPhones == "" ? "" : ('TEL:' + pPhones) + '<br>');
                            ReportHTML += '                     ' + (pFaxes == "" ? "" : ('Fax:' + pFaxes)) + '<br><br><br>';
                            ReportHTML += '                 </div>';

                            ReportHTML += '                 <div class="col-xs-4 m-l-n">';
                            ReportHTML += '                     <b>Date : </b>' + getTodaysDateInddMMyyyyFormat() + '<br>';
                            ReportHTML += '                     <b>Invoice No : </b>' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(3, 2) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '/' + /*pInvoiceNumber*/ConcatenatedInvoiceNumber + '<br>';
                            ReportHTML += '                     <b>Payment Due by : </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            //ReportHTML += '                     <b>Reference No. : </b>' + (pCustomerReference == 0 ? "N/A" : pCustomerReference) + '<br>';
                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '                 <b>Operation : </b>' + pMasterOperationCode;
                            else
                                ReportHTML += '                     <b>Operation : </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '<br>';
                            ReportHTML += '                     <b>Currency : </b>' + pInvoiceHeader.CurrencyCode + '<br>';
                            ReportHTML += '                 </div>';
                            //ReportHTML += '             </div>';
                            ReportHTML += '             <table class="col-xs-8 m-l m-t-n-lg b-t b-light text-sm table-bordered" style="clear:both; width:auto; border:solid #000;">';
                            ReportHTML += '                 <td>';
                            ReportHTML += '                     <b>Bill To: </b><br>';
                            ReportHTML += '                     <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                            ReportHTML += '                     ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                            ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '                 </td>';
                            ReportHTML += '             </table>';

                            ReportHTML += '             <div style="clear:both;"><br></div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>' + (pOperationHeader.TransportType != AirTransportType ? 'MB/L:' : 'MAWB:') + ' </b>' + pMasterBL + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>' + (pOperationHeader.TransportType != AirTransportType ? 'HBL:' : 'HAWB:') + ' </b>: ' + pHouseBLs + '</div>';
                                else if (pHouseNumber != "0")
                                    ReportHTML += '             <div class="col-xs-6"><b>' + (pOperationHeader.TransportType != AirTransportType ? 'HBL:' : 'HAWB:') + ' </b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Vessel: </b>' + pVesselName + ' KG</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>ETA: </b>' + (pETA == "01/01/1900" || pETA == "1/1/1900" ? "N/A" : pETA) + '</div>';
                            if (pContainerTypes != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pContainerTypes == 0 ? "N/A" : pContainerTypes) + '</div>';
                            else if (pPackageTypes != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pPackageTypes == 0 ? "N/A" : pPackageTypes) + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>ETD: </b>' + (pETD == "01/01/1900" || pETD == "1/1/1900" ? "N/A" : pETD) + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Stuffing Place: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';

                            ReportHTML += '                     <div class="col-xs-12 clear">'
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Quantity</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Sale Price</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) /*+ (item.Notes == 0 || item.Notes == "" ? "" : '-' + item.Notes)*/ + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            ReportHTML += '                                         <tr>';
                            ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            ReportHTML += '                                         </tr>';

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'
                            //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                            //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                            //ReportHTML += '                         </div>';
                            //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                            //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                            ReportHTML += '                         <div class="col-xs-6 m-t-n">';
                            if (1 == 1) { //($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>Container Numbers:</u></b></br>';
                                ReportHTML += '                             ' + pContainerNumbers + '</br><br><br><br><br>';
                            }
                            else
                                ReportHTML += '                             <br><br><br><br><br><br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-6 text-right m-t-n">';
                            ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</b></br>';
                            ReportHTML += '                         </div>';
                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '         </body>';
                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            ReportHTML += '         <div class="row text-right m-r">' + '  الشركة خاضعة لنظام الدفعات المقدمة  ' + '</div>';
                            ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            //else
                            //    if ($("#cbIsImport").prop("checked") && $("#cbIsAir").prop("checked"))
                            //        ReportHTML += '             <div class="row m-l">F/FFI-IA-11-04</div>';
                            //    else
                            //        if ($("#cbIsExport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //            ReportHTML += '         <div class="row m-l">F/FFI-ES-10-05</div>';
                            //        else
                            //            if ($("#cbIsExport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //                ReportHTML += '     <div class="row m-l">F/FFI-ES-10-05</div>';
                            //            else
                            //                if ($("#cbIsExport").prop("checked") && $("#cbIsAir").prop("checked"))
                            //                    ReportHTML += ' <div class="row m-l">F/FFI-EA-10-04</div>';
                            ReportHTML += '         <div class="row text-center ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '"><img src="/Content/Images/CompanyInvoiceFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        }
                        else if (pDefaults.UnEditableCompanyName == "KML") {

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + " " + (pInvoiceHeader.InvoiceNumber + "/" + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(3, 2) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2)).replace(/\//g, "-") + '</h3></div>';

                            ReportHTML += '                 <div class="col-xs-8">';
                            ReportHTML += '                     <b>' + $("#hDefaultCompanyName").val() + '</b><br>';
                            ReportHTML += '                     ' + (pAddressLine1 == "" ? "" : (pAddressLine1 + '<br>'));
                            ReportHTML += '                     ' + (pAddressLine2 == "" ? "" : (pAddressLine2 + '<br>'));
                            ReportHTML += '                     ' + (pAddressLine3 == "" ? "" : (pAddressLine3) + '<br>');
                            ReportHTML += '                     ' + (pPhones == "" ? "" : ('TEL:' + pPhones) + '<br>');
                            ReportHTML += '                     ' + (pFaxes == "" ? "" : ('Fax:' + pFaxes)) + '<br>';
                            ReportHTML += '                 </div>';

                            ReportHTML += '                 <div class="col-xs-4 m-l-n">';
                            ReportHTML += '                     <b>' + pInvoiceHeader.InvoiceTypeName + ' Date :' + ' </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                            ReportHTML += '                     <b>' + pInvoiceHeader.InvoiceTypeName + ' No :' + ' </b>' + (pInvoiceHeader.InvoiceNumber + "/" + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(3, 2) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2)).replace(/\//g, "-") + '<br>';// + '/' + /*pInvoiceNumber*/ConcatenatedInvoiceNumber.split('/')[1] + '<br>';
                            ReportHTML += '                     <b>Payment Due by : </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            ReportHTML += '                     <b>Reference No. : </b>' + (pCustomerReference == 0 ? "N/A" : pCustomerReference) + '<br>';
                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '                 <b>Operation : </b>' + pMasterOperationCode;
                            else
                                ReportHTML += '                     <b>Operation : </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '<br>';
                            ReportHTML += '                     <b>Currency : </b>' + pInvoiceHeader.CurrencyCode + '<br>';
                            ReportHTML += '                     <b>Salesman : </b>' + pSalesman + '<br><br>';
                            ReportHTML += '                 </div>';
                            //ReportHTML += '             </div>';
                            ReportHTML += '             <table class="col-xs-8 m-l m-t-n b-t b-light text-sm table-bordered" style="text-align:left; width:auto; border:solid #000;">';
                            ReportHTML += '                 <td>';
                            ReportHTML += '                     <b>Bill To: </b><br>';
                            ReportHTML += '                     <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                            ReportHTML += '                     ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                            ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '                     <br><b>VAT No: </b>';
                            ReportHTML += '                     ' + (pClientHeader.VATNumber == "" ? "" : pClientHeader.VATNumber) + '<br><br>';
                            ReportHTML += '                 </td>';
                            ReportHTML += '             </table>';

                            ReportHTML += '             <div style="clear:both;"></div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else if (pHouseNumber != "0")
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>CommodityName: </b>' + (pOperationHeader.CommodityName == 0 ? "" : pOperationHeader.CommodityName) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                            if (pContainerTypes != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pContainerTypes == 0 ? "N/A" : pContainerTypes) + '</div>';
                            else if (pPackageTypes != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pPackageTypes == 0 ? "N/A" : pPackageTypes) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>PO Number: </b>' + (pOperationHeader.PONumber == 0 ? "" : pOperationHeader.PONumber) + '</div>';

                            ReportHTML += '                     <div class="col-xs-12 clear">'
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Quantity</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Sale Price</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (!$("#cbAddNotesToItems").prop("checked") || item.Notes == 0 || item.Notes == "" ? "" : '-' + item.Notes) + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            ReportHTML += '                                         <tr>';
                            ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            ReportHTML += '                                         </tr>';

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'
                            //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                            //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                            //ReportHTML += '                         </div>';
                            //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                            //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="row m-t-n"></div>';
                            ReportHTML += '                         <div class="col-xs-8">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br><br><br><br><br><br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right">';
                            ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</b></br>';
                            ReportHTML += '                         </div>';
                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';

                            //ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            //ReportHTML += '                     <div class="col-xs-4 m-l-lg"><b>' + (pLeftSignature == "0" ? "&emsp;&emsp;" : pLeftSignature) + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-5"><b>' + (pMiddleSignature == "0" ? "&emsp;&emsp;" : pMiddleSignature) + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-3 m-t-n-md float-right"><b>' + (pRightSignature == "0" ? "&emsp;&emsp;" : pRightSignature) + '</b></div>';
                            //ReportHTML += '                 </div>'

                            ReportHTML += '         </body>';

                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            if ($("#cbPrintStamp").prop("checked"))
                                ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';


                            ReportHTML += '         <br><br><div class="text-center small" style="clear:both;">' + 'Invoice is not considered settled without an official company’s receipt voucher.Invoice is correct & not negotiable after 15 days of issue date.' + '</div>';
                            ReportHTML += '         <div class="text-center" style="clear:both;">' + '  لا تعتبر مسددة إلا بسند قبض رسمى من الشركة، تعتبر الفاتورة صحيحة ما لا يتم الإعتراض عليها خلال 15 يوم من تاريخ الفاتورة  ' + '</div>';
                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            //ReportHTML += '         <div class="row">';
                            //ReportHTML += '             <div class="col-xs-8 m-l"><b><i>' + ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 1
                            //                                                                ? 'Import Manager'
                            //                                                                : ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 2 ? 'Export Manager' : 'Domestic Manager')
                            //                                                                ) + '</i></b></div>';
                            //ReportHTML += '             <div class="col-xs-4 m-t-n-md float-right"><b><i>Accountant Signature</i></b></div>';
                            //ReportHTML += '         </div>'

                            ////if KML the print on original paper
                            ReportHTML += '             <br><br><br><br><br><br>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        }
                        else if (pDefaults.UnEditableCompanyName == "EEL" || pDefaults.UnEditableCompanyName == "PFS") {

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '             <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-left m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1] + ' No. ' + pInvoiceHeader.InvoiceNumber + '</h3></div>';
                            //ReportHTML += '                 <div class="col-xs-12 m-t-n-sm">VAT #: ' + pVATNumber + '</div>';
                            ReportHTML += '                 <div class="col-xs-7 m-t-xs">';
                            ReportHTML += '                     <b>' + (pInvoiceHeader.PartnerName + '</b><br>');
                            ReportHTML += '                     ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1 + '<br>'));
                            ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (pClientStreetLine2 + '<br>'));
                            ReportHTML += '                     ' + (pClientCityName == "" ? "" : (pClientCityName) + '<br>');
                            ReportHTML += '                     ' + (pClientCountryName == "" ? "" : pClientCountryName);// + '<br><br><br>';
                            ReportHTML += '                 </div>';
                            ReportHTML += '                 <div class="col-xs-5 m-t-xs">';
                            ReportHTML += '                     <table id="tblInvoiceData" class="table table-striped b-light text-sm table-bordered" style="border:solid #000;">';
                            ReportHTML += '                         <tbody>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';//style="border:solid #000 !important;"
                            ReportHTML += '                                 <td style="text-align:center!Important;"><b>INVOICE DATE </b><td style="text-align:center!Important;">' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';
                            ReportHTML += '                                 <td style="text-align:center!Important;"><b>CUSTOMER REF. </b><td style="text-align:center!Important;">' + (pCustomerReference == 0 ? "N/A" : pCustomerReference) + '</td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';
                            ReportHTML += '                                 <td style="text-align:center!Important;"><b>CLIENT VAT No. </b><td style="text-align:center!Important;">' + (pClientHeader.VATNumber == 0 ? "N/A" : pClientHeader.VATNumber) + '</td>';
                            ReportHTML += '                             </tr>';
                            if (pMasterOperationCode != "" && pMasterOperationCode != "0") {
                                ReportHTML += '                             <tr class="" style="font-size:95%;">';
                                ReportHTML += '                                 <td style="text-align:center!Important;"><b>CONSOL </b><td style="text-align:center!Important;">' + pMasterOperationCode + '</td>';
                                ReportHTML += '                             </tr>';
                            }
                            else {
                                ReportHTML += '                             <tr class="" style="font-size:95%;">';
                                ReportHTML += '                                 <td style="text-align:center!Important;"><b>SHIPMENT </b><td style="text-align:center!Important;">' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '</td>';
                                ReportHTML += '                             </tr>';
                            }
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';
                            ReportHTML += '                                 <td style="text-align:center!Important;"><b>DUE DATE </b><td style="text-align:center!Important;">' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';
                            ReportHTML += '                                 <td style="text-align:center!Important;"><b>TERMS </b><td style="text-align:center!Important;">' + pInvoiceHeader.PaymentTermID + '</td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';
                            ReportHTML += '                                 <td style="text-align:center!Important;"><b>Commercial Reg. </b><td style="text-align:center!Important;">' + (pDefaults.CommericalRegNo == 0 ? "" : pDefaults.CommericalRegNo) + '</td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                         </tbody>';
                            ReportHTML += '                     </table>';
                            ReportHTML += '                 </div>';

                            ReportHTML += '             <div class="col-xs-12">';
                            ReportHTML += '                 <table class="table table-striped b-light text-sm table-bordered" style="border:solid #000;">';
                            ReportHTML += '                     <tbody>';
                            ReportHTML += '                         <tr class="" style="font-size:95%;">';
                            ReportHTML += '                             <td><div class="col-xs-6 m-l-n" style="text-align:left!Important;"><b>SHIPMENT DETAILS</b></div><div class="col-xs-6 m-l" style="text-align:right!Important;"><b>PRINTED BY : ' + $("#hLoggedUserNameNotLogin").val() + '</b></div></td>';
                            ReportHTML += '                         </tr>';
                            ReportHTML += '                     </tbody>';
                            ReportHTML += '                 </table>';
                            ReportHTML += '             </div>'

                            ReportHTML += '                 <div class="col-xs-12 m-t-n">';
                            ReportHTML += '                     <table id="tblInvoice" class="table table-striped b-light text-sm table-bordered" style="border:solid #000;">';
                            ReportHTML += '                         <tbody>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';
                            ReportHTML += '                                 <td colspan=6 style="text-align:left!Important;"><b>SHIPPER:</b><br>' + pShipperName + '</td><td colspan=6 style="text-align:left!Important;"><b>CONSIGNEE:</b><br>' + pConsigneeName + '</td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';
                            ReportHTML += '                                 <td colspan=12 style="text-align:left!Important;"><b>GOODS DESCRIPTION:</b><br>' + pDescriptionOfGoods + '</td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';
                            //ReportHTML += '                                 <td colspan=4 style="text-align:left!Important;"><b>CUSTOMS AGENT:</b><br>' + '' + '</td>';
                            ReportHTML += '                                 <td colspan=3 style="text-align:left!Important;"><b>WEIGHT:</b><br>' + pGrossWeightSum.toFixed(2) + ' KG</td>';
                            ReportHTML += '                                 <td colspan=3 style="text-align:left!Important;"><b>VOLUME:</b><br>' + pCBM.toFixed(2) + 'CBM</td>';
                            //ReportHTML += '                                 <td colspan=3 style="text-align:left!Important;"><b>CHARGEABLE:</b><br>' + '' + '</td>';
                            ReportHTML += '                                 <td colspan=3 style="text-align:left!Important;"><b>VGM:</b><br>' + pVGM.toFixed(2) + ' KGM</td>';
                            ReportHTML += '                                 <td colspan=3 style="text-align:left!Important;"><b>PACKAGES:</b><br>' + pNumberOfPackages + '</td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';
                            ReportHTML += '                                 <td colspan=6 style="text-align:left!Important;"><b>VESSEL / VOY:</b><br>' + pVesselName + '/' + pVesselName + '</td>';
                            ReportHTML += '                                 <td colspan=3 style="text-align:left!Important;"><b>OCEAN B\L:</b><br>' + pMasterBL + '</td>';
                            ReportHTML += '                                 <td colspan=3 style="text-align:left!Important;"><b>HOUSE B\L:</b><br>' + (pOperationHeader.HouseBLs == 0 ? (pOperationHeader.HouseNumber == 0 ? "" : pOperationHeader.HouseNumber) : pOperationHeader.HouseBLs) + '</td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';
                            ReportHTML += '                                 <td colspan=3 style="text-align:left!Important;"><b>ORIGIN:</b><br>' + pPOLName + '</td>';
                            ReportHTML += '                                 <td colspan=3 style="text-align:left!Important;"><b>ETD:</b><br>' + (pETD == "01/01/1900" || pETD == "1/1/1900" ? "N/A" : pETD) + '</td>';
                            ReportHTML += '                                 <td colspan=3 style="text-align:left!Important;"><b>DESTINATION:</b><br>' + pPODName + '</td>';
                            ReportHTML += '                                 <td colspan=3 style="text-align:left!Important;"><b>ETA:</b><br>' + (pETAPOD == "01/01/1900" || pETAPOD == "1/1/1900" ? "N/A" : pETAPOD) + '</td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                         </tbody>';
                            ReportHTML += '                     </table>';
                            ReportHTML += '                 </div>';

                            ReportHTML += '                     <div class="col-xs-12 m-t-n">'
                            ReportHTML += '                         <table id="tblReportInvoice" class="table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr style="font-size:95%;">';
                            ReportHTML += '                                     <th>CHARGES DESCRIPTION</th>';
                            ReportHTML += '                                     <th>VAT</th>';
                            ReportHTML += '                                     <th>AMOUNT</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + 'N/A' + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'
                            //Adding totals table
                            ReportHTML += '                 <div class="col-xs-12 m-t-n">';
                            ReportHTML += '                     <table id="tblChargesSummary" class="table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                         <tbody>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';//style="border:solid #000 !important;"
                            ReportHTML += '                                 <td  rowspan=4>' + 'Please contact us within 7 days should there be any discrepancies.' + '</td>';
                            ReportHTML += '                                 <td ><b>Subtotal : </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';
                            ReportHTML += '                                 <td ><b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount + '</td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';
                            ReportHTML += '                                 <td ><b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount + '</td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                             <tr class="" style="font-size:95%;">';
                            ReportHTML += '                                 <td ><b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</b></td>';
                            ReportHTML += '                             </tr>';
                            ReportHTML += '                         </tbody>';
                            ReportHTML += '                     </table>';
                            ReportHTML += '                 </div>';

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '         </body>';

                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            ReportHTML += '         <hr>';
                            ReportHTML += '         <table id="tblInvoiceSummary" class="table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">';
                            ReportHTML += '             <tbody>';
                            ReportHTML += '                 <tr class="" style="font-size:95%;">';//style="border:solid #000 !important;"
                            ReportHTML += '                     <td colspan=6 style="text-align:left;"><b>' + 'Transfer Funds To: ' + $("#hDefaultCompanyName").val() + '</b></td>';
                            ReportHTML += '                     <td colspan=6 rowspan=6 style="text-align:left;"><b>Mail Payments To: </b><br>';
                            //ReportHTML += '                         THE EGYPTIAN EXPORT & IMPORT CO<br>';
                            //ReportHTML += '                         SEKO GLOBAL LOGISTICS, EGYPT<br>';
                            ReportHTML += '                         ' + $("#hDefaultCompanyName").val() + '<br>';
                            ReportHTML += '                         ' + (pAddressLine1 == "" ? "" : (pAddressLine1 + '<br>'));
                            ReportHTML += '                         ' + (pAddressLine2 == "" ? "" : (pAddressLine2 + '<br>'));
                            ReportHTML += '                         ' + (pAddressLine3 == "" ? "" : (pAddressLine3) + '<br>');
                            ReportHTML += '                         ' + (pPhones == "" ? "" : ('TEL:' + pPhones) + '<br>');
                            ReportHTML += '                     </td>';
                            ReportHTML += '                 </tr>';
                            ReportHTML += '                 <tr class="" style="font-size:95%;">';
                            ReportHTML += '                     <td colspan=1 style="text-align:left;"><b>' + 'Bank:</b></td>';
                            ReportHTML += '                     <td colspan=2 style="text-align:left;">' + pBankName + '</td>';
                            ReportHTML += '                     <td colspan=1 style="text-align:left;"><b>' + 'SWIFT:</b></td>';
                            ReportHTML += '                     <td colspan=2 style="text-align:left;">' + pSwiftCode + '</td>';
                            ReportHTML += '                 </tr>';
                            ReportHTML += '                 <tr class="" style="font-size:95%;">';
                            ReportHTML += '                     <td colspan=1 style="text-align:left;"><b>' + 'Account:</b></td>';
                            ReportHTML += '                     <td colspan=5 style="text-align:left;">' + pAccountNumber + '</td>';
                            ReportHTML += '                 </tr>';
                            ReportHTML += '                 <tr class="" style="font-size:95%;">';
                            ReportHTML += '                     <td colspan=6 style="text-align:left;">' + pBankName + '<br>';
                            ReportHTML += '                     ' + pBankAddress;
                            ReportHTML += '                     </td>';
                            ReportHTML += '                 </tr>';
                            ReportHTML += '                 <tr class="" style="font-size:95%;">';
                            ReportHTML += '                     <td colspan=1 style="text-align:left;"><b>' + 'Pay Ref:</b></td>';
                            ReportHTML += '                     <td colspan=5 style="text-align:left;">' + (pCustomerReference == 0 ? "" : pCustomerReference) + '</td>';
                            ReportHTML += '                 </tr>';
                            ReportHTML += '                 <tr class="" style="font-size:95%;">';
                            ReportHTML += '                     <td colspan=1 style="text-align:left;"><b>' + 'Amt Due:</b></td>';
                            ReportHTML += '                     <td colspan=2 style="text-align:left;">' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</td>';
                            ReportHTML += '                     <td colspan=1 style="text-align:left;"><b>' + 'Invoiced:</b></td>';
                            ReportHTML += '                     <td colspan=2 style="text-align:left;">' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</td>';
                            ReportHTML += '                 </tr>';
                            ReportHTML += '             </tbody>';
                            ReportHTML += '         </table>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //else if (pDefaults.UnEditableCompanyName == "EEL" || pDefaults.UnEditableCompanyName == "PFS") {
                        else if (pDefaults.UnEditableCompanyName == "OAO") { //OAO
                            if (pInvoiceHeader.InvoiceTypeName == "STATEMENT") {

                                var ReportHTML = '';
                                //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                                //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                                ReportHTML += '<html>';
                                ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                                ReportHTML += '         <body style="background-color:white;">';
                                ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber + '</h3></div>';
                                ReportHTML += '                 <div class="col-xs-8">';
                                ReportHTML += '                     <table class="col-xs-12 b-t b-light text-sm table-bordered" style="text-align:left; width:auto; border:solid #000;">';
                                ReportHTML += '                         <td>';
                                ReportHTML += '                             <b>Bill To: </b><br>';
                                ReportHTML += '                             <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                                ReportHTML += '                             ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                ReportHTML += '                             ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                                ReportHTML += '                             ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                ReportHTML += '                             ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                                ReportHTML += '                         </td>';
                                ReportHTML += '                     </table>';

                                ReportHTML += '                 </div>';

                                ReportHTML += '                 <div class="col-xs-4 m-l-n">';
                                //ReportHTML += '                     <b>Date : </b>' + getTodaysDateInddMMyyyyFormat() + '<br>';
                                ReportHTML += '                     <b>Date : </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                                //if (pInvoiceHeader.InvoiceTypeName == "STATEMENT")
                                //ReportHTML += '                     <b>Invoice No : </b>' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(3, 2) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '/' + /*pInvoiceNumber*/ConcatenatedInvoiceNumber + '<br>';
                                ReportHTML += '                     <b>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1] + ' No : </b>' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '<br>';
                                ReportHTML += '                     <b>Payment Due by : </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                                ReportHTML += '                     <b>Reference No. : </b>' + (pCustomerReference == 0 ? "N/A" : pCustomerReference) + '<br>';
                                if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                    ReportHTML += '                 <b>Operation : </b>' + pMasterOperationCode;
                                else
                                    ReportHTML += '                     <b>Operation : </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '<br>';
                                ReportHTML += '                     <b>Currency : </b>' + pInvoiceHeader.CurrencyCode + '<br>';
                                ReportHTML += '                     <b>Salesman : </b>' + pSalesman + '<br><br>';
                                ReportHTML += '                 </div>';
                                //ReportHTML += '             </div>';

                                ReportHTML += '             <div style="clear:both;"><br></div>';
                                if ($("#cbPrintMBL").prop("checked"))
                                    ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                                if ($("#cbPrintHBL").prop("checked")) {
                                    if (pHouseBLs != "0")//Master Operation so show all houses on it
                                        ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                    else if (pHouseNumber != "0")
                                        ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                                }
                                ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                                if (pContainerTypes != 0)
                                    ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pContainerTypes == 0 ? "N/A" : pContainerTypes) + '</div>';
                                else if (pPackageTypes != 0)
                                    ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pPackageTypes == 0 ? "N/A" : pPackageTypes) + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Certificate No: </b>' + (pOperationHeader.CertificateNumber == 0 ? "" : pOperationHeader.CertificateNumber) + '</div>';

                                ReportHTML += '                     <div class="col-xs-12 clear">'
                                ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                                 <tr>';
                                ReportHTML += '                                     <th>Description</th>';
                                ReportHTML += '                                     <th>Quantity</th>';
                                ReportHTML += '                                     <th>Unit Price</th>';
                                ReportHTML += '                                     <th>Sale Price</th>';
                                ReportHTML += '                                     <th>Notes</th>';
                                ReportHTML += '                                 </tr>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                $.each(JSON.parse(data[2]), function (i, item) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) /*+ (item.Notes == 0 || item.Notes == "" ? "" : '-' + item.Notes)*/ + '</td>';
                                    ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                    ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                    ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                    ReportHTML += '                                         <td>' + (item.Notes == "0" ? "" : item.Notes) + '</td>';
                                    ReportHTML += '                                     </tr>';
                                });
                                if (pInvoiceHeader.FixedDiscount > 0) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                     </tr>';
                                }
                                //ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                                //ReportHTML += '                                             <td>' + '' + '</td>';
                                //ReportHTML += '                                         </tr>';

                                //ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                         </tr>';
                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>'
                                //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                                //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                                //ReportHTML += '                         </div>';
                                //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                                //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                                if ($("#cbLargeInvoice").prop("checked")) {
                                    ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                    ReportHTML += '         <div class="break"></div>';
                                }
                                else
                                    ReportHTML += '                         <div class="row m-t-n"></div>';
                                ReportHTML += '                         <div class="col-xs-7">';
                                if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                    ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                    ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                    ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                    ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                    ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                                }
                                else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                    ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                                }
                                else
                                    ReportHTML += '                             <br><br><br><br><br><br>';
                                ReportHTML += '                         </div>';
                                ReportHTML += '                         <div class="col-xs-5 text-right">';
                                if (pTaxAmount != 0 || pDiscountAmount != 0)
                                    ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                                if (pTaxAmount != 0)
                                    ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount + '</br>';
                                //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                                if (pDiscountAmount != 0)
                                    ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount + '</br>';
                                ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</b></br>';
                                ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                                ReportHTML += '                         </div>';

                                //ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                //ReportHTML += '                     <div class="col-xs-3 m-t"><b>' + 'Approved By' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-2 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Prepared By' + '</b></div>';
                                //ReportHTML += '                 </div>'
                                //ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                //ReportHTML += '                     <div class="col-xs-3 m-t-sm"><b>' + '....................................' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-2 m-t-sm text-center"><b>' + '&emsp;' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center"><b>' + '&emsp;' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-3 m-t-sm text-center">' + $("#hLoggedUserNameNotLogin").val() + '</div>';
                                //ReportHTML += '                 </div>'

                                //ReportHTML += '                     </div>'; //of table-responsive
                                //ReportHTML += '                 </section>';
                                //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                                ReportHTML += '         </body>';
                                ReportHTML += '     <footer class="footer col-xs-12 m-t-lg ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '" style="width:100%; position:absolute; bottom:0;">';
                                //ReportHTML += '         <div class="row text-right m-r m-t-sm">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                                ReportHTML += '         <div class="row text-center m-t-n"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                                ReportHTML += '     </footer>';

                                ReportHTML += '</html>';
                                if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                    pFinalReportHTML += ReportHTML;
                                    Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                                }
                                else {
                                    pFinalReportHTML += ReportHTML;
                                    pFinalReportHTML += ' <div class="break"></div>';
                                }
                            }
                            else { //Invoices not Statement

                                var ReportHTML = '';
                                //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                                //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                                ReportHTML += '<html>';
                                ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                                ReportHTML += '         <body style="background-color:white;">';
                                ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber + '</h3></div>';
                                ReportHTML += '                 <div class="col-xs-8">';
                                ReportHTML += '                     <b>' + $("#hDefaultCompanyName").val() + '</b><br>';
                                ReportHTML += '                     ' + (pAddressLine1 == "" ? "" : (pAddressLine1 + '<br>'));
                                ReportHTML += '                     ' + (pAddressLine2 == "" ? "" : (pAddressLine2 + '<br>'));
                                ReportHTML += '                     ' + (pAddressLine3 == "" ? "" : (pAddressLine3) + '<br>');
                                ReportHTML += '                     ' + (pPhones == "" ? "" : ('TEL:' + pPhones) + '<br>');
                                ReportHTML += '                     ' + (pFaxes == "" ? "" : ('Fax:' + pFaxes)) + '<br><br><br>';
                                ReportHTML += '                 </div>';

                                ReportHTML += '                 <div class="col-xs-4 m-l-n">';
                                //ReportHTML += '                     <b>Date : </b>' + getTodaysDateInddMMyyyyFormat() + '<br>';
                                ReportHTML += '                     <b>Date : </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                                //if (pInvoiceHeader.InvoiceTypeName == "STATEMENT")
                                //ReportHTML += '                     <b>Invoice No : </b>' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(3, 2) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '/' + /*pInvoiceNumber*/ConcatenatedInvoiceNumber + '<br>';
                                ReportHTML += '                     <b>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1] + ' No : </b>' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '<br>';
                                ReportHTML += '                     <b>Payment Due by : </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                                ReportHTML += '                     <b>Reference No. : </b>' + (pCustomerReference == 0 ? "N/A" : pCustomerReference) + '<br>';
                                if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                    ReportHTML += '                 <b>Operation : </b>' + pMasterOperationCode;
                                else
                                    ReportHTML += '                     <b>Operation : </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '<br>';
                                ReportHTML += '                     <b>Currency : </b>' + pInvoiceHeader.CurrencyCode + '<br>';
                                ReportHTML += '                     <b>Salesman : </b>' + pSalesman + '<br><br>';
                                ReportHTML += '                 </div>';
                                //ReportHTML += '             </div>';
                                ReportHTML += '             <table class="col-xs-8 m-l m-t-n-lg b-t b-light text-sm table-bordered" style="text-align:left; width:auto; border:solid #000;">';
                                ReportHTML += '                 <td>';
                                ReportHTML += '                     <b>Bill To: </b><br>';
                                ReportHTML += '                     <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                                ReportHTML += '                     ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                                ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                                ReportHTML += '                 </td>';
                                ReportHTML += '             </table>';

                                ReportHTML += '             <div style="clear:both;"><br></div>';
                                if ($("#cbPrintMBL").prop("checked"))
                                    ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                                if ($("#cbPrintHBL").prop("checked")) {
                                    if (pHouseBLs != "0")//Master Operation so show all houses on it
                                        ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                    else if (pHouseNumber != "0")
                                        ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                                }
                                ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                                if (pContainerTypes != 0)
                                    ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pContainerTypes == 0 ? "N/A" : pContainerTypes) + '</div>';
                                else if (pPackageTypes != 0)
                                    ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pPackageTypes == 0 ? "N/A" : pPackageTypes) + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Certificate No: </b>' + (pOperationHeader.CertificateNumber == 0 ? "" : pOperationHeader.CertificateNumber) + '</div>';

                                ReportHTML += '                     <div class="col-xs-12 clear">'
                                ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                                 <tr>';
                                ReportHTML += '                                     <th>Description</th>';
                                ReportHTML += '                                     <th>Quantity</th>';
                                ReportHTML += '                                     <th>Unit Price</th>';
                                ReportHTML += '                                     <th>Sale Price</th>';
                                ReportHTML += '                                     <th>Notes</th>';
                                ReportHTML += '                                 </tr>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                $.each(JSON.parse(data[2]), function (i, item) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) /*+ (item.Notes == 0 || item.Notes == "" ? "" : '-' + item.Notes)*/ + '</td>';
                                    ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                    ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                    ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                    ReportHTML += '                                         <td>' + (item.Notes == "0" ? "" : item.Notes) + '</td>';
                                    ReportHTML += '                                     </tr>';
                                });
                                if (pInvoiceHeader.FixedDiscount > 0) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                     </tr>';
                                }
                                //ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                                //ReportHTML += '                                             <td>' + '' + '</td>';
                                //ReportHTML += '                                         </tr>';

                                //ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                         </tr>';
                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>'
                                //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                                //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                                //ReportHTML += '                         </div>';
                                //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                                //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                                if ($("#cbLargeInvoice").prop("checked")) {
                                    ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                    ReportHTML += '         <div class="break"></div>';
                                }
                                else
                                    ReportHTML += '                         <div class="row m-t-n"></div>';
                                ReportHTML += '                         <div class="col-xs-7">';
                                if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                    ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                    ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                    ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                    ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                    ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                                }
                                else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                    ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                                }
                                else
                                    ReportHTML += '                             <br><br><br><br><br><br>';
                                ReportHTML += '                         </div>';
                                ReportHTML += '                         <div class="col-xs-5 text-right">';
                                if (pTaxAmount != 0 || pDiscountAmount != 0)
                                    ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                                if (pTaxAmount != 0)
                                    ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount + '</br>';
                                //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                                if (pDiscountAmount != 0)
                                    ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount + '</br>';
                                ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</b></br>';
                                ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                                ReportHTML += '                         </div>';

                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-3 m-t"><b>' + 'Approved By' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-2 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Prepared By' + '</b></div>';
                                ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-3 m-t-sm"><b>' + '....................................' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-2 m-t-sm text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 m-t-sm text-center">' + $("#hLoggedUserNameNotLogin").val() + '</div>';
                                ReportHTML += '                 </div>'

                                //ReportHTML += '                     </div>'; //of table-responsive
                                //ReportHTML += '                 </section>';
                                //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                                ReportHTML += '         </body>';
                                ReportHTML += '     <footer class="footer col-xs-12 m-t-lg ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '" style="width:100%; position:absolute; bottom:0;">';
                                //ReportHTML += '         <div class="row text-right m-r m-t-sm">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                                ReportHTML += '         <div class="row text-center m-t-n"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                                ReportHTML += '     </footer>';

                                ReportHTML += '</html>';
                                if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                    pFinalReportHTML += ReportHTML;
                                    Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                                }
                                else {
                                    pFinalReportHTML += ReportHTML;
                                    pFinalReportHTML += ' <div class="break"></div>';
                                }
                            }//EOF Invoices not statement
                        } //EOF OAO
                        else if (pDefaults.UnEditableCompanyName == "BAL" || pDefaults.UnEditableCompanyName == "BHE" || pDefaults.UnEditableCompanyName == "BME") { //BAL, BME

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            if (!$("#cbPrintHeaderInvoice").prop("checked"))
                                ReportHTML += '             <div class="col-xs-12 text-center"><img src="/Content/Images/CompanyHeader-Empty.jpg" alt="logo"/></div>';
                            else if (pDefaults.UnEditableCompanyName == "BME" || pDefaults.UnEditableCompanyName == "BHE") {
                                if (pInvoiceHeader.InvoiceTypeName == "STATEMENT") //header w/o TaxNo
                                    ReportHTML += '             <div class="col-xs-12 text-center"><img src="/Content/Images/CompanyHeader.jpg" alt="logo"/></div>';
                                else
                                    ReportHTML += '             <div class="col-xs-12 text-center"><img src="/Content/Images/CompanyHeaderInvoiceTax.jpg" alt="logo"/></div>';
                            }
                            else if (pDefaults.UnEditableCompanyName == "BAL" && pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1] == "STATEMENT") //header w/o TaxNo
                                ReportHTML += '             <div class="col-xs-12 text-center"><img src="/Content/Images/CompanyHeader-WithoutTax.jpg" alt="logo"/></div>';
                            else
                                ReportHTML += '             <div class="col-xs-12 text-center"><img src="/Content/Images/CompanyHeader.jpg" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1] + '</h3></div>';

                            ReportHTML += '                 <div class="col-xs-8">';
                            ReportHTML += '                     <table class="b-t b-light text-sm table-bordered" style="text-align:left; width:auto; border:solid #000;">';
                            ReportHTML += '                         <td>';
                            ReportHTML += '                             <b>Bill To: </b><br>';
                            ReportHTML += '                             <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                            ReportHTML += '                             ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                             ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                            ReportHTML += '                             ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                             ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '                         </td>';
                            ReportHTML += '                     </table>';
                            ReportHTML += '                 </div>';

                            ReportHTML += '                 <div class="col-xs-4 m-l-n">';
                            //ReportHTML += '                     <b>Date : </b>' + getTodaysDateInddMMyyyyFormat() + '<br>';
                            ReportHTML += '                     <b>Invoice Date : </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                            //ReportHTML += '                     <b>Invoice No : </b>' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(3, 2) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '/' + /*pInvoiceNumber*/ConcatenatedInvoiceNumber + '<br>';
                            ReportHTML += '                     <b>Invoice No : </b>' + pInvoiceTypeCode + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '<br>';
                            // ReportHTML += '                     <b>Payment Due by : </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            // ReportHTML += '                     <b>Reference No. : </b>' + (pCustomerReference == 0 ? "N/A" : pCustomerReference) + '<br>';
                            ReportHTML += '                     <b>Currency : </b>' + pInvoiceHeader.CurrencyCode + '<br>';
                            if (pDefaults.UnEditableCompanyName == "BHE" || pDefaults.UnEditableCompanyName == "BAL")
                                ReportHTML += '                     <b>Operation No : </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '<br>';
                            else
                                ReportHTML += '                     <b>Operation No : </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode).split('-')[3] + '/20' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode).substr(1, 2) + '<br>';
                            //ReportHTML += '                     <b>Tax ID: </b>' + pDefaults.TaxNumber + '<br>';
                            //ReportHTML += '                     <b>Commercial Register: </b>' + pDefaults.CommericalRegNo + '<br>';
                            ReportHTML += '                 </div>';
                            //ReportHTML += '             </div>';

                            ReportHTML += '             <div style="clear:both;"><br></div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else //if (pHouseNumber != "0" && !$("#cbIsDirect").prop("checked"))
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            if (pDefaults.UnEditableCompanyName != "BME") {
                                ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "BME") {
                                if (pOperationHeader.TransportType == OceanTransportType)
                                    ReportHTML += '             <div class="col-xs-6"><b>Vessel-Voy: </b>' + (pOperationHeader.VesselName == 0 ? "" : pOperationHeader.VesselName) + (pOperationHeader.VoyageOrTruckNumber == 0 ? "" : (" - " + pOperationHeader.VoyageOrTruckNumber)) + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Customer Ref: </b>' + (pOperationHeader.CustomerReference == 0 ? "" : pOperationHeader.CustomerReference) + '</div>';
                            }
                            if (pContainerTypes != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pContainerTypes == 0 ? "N/A" : pContainerTypes) + '</div>';
                            else if (pPackageTypes != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pPackageTypes == 0 ? "N/A" : pPackageTypes) + '</div>';
                            if (pDefaults.UnEditableCompanyName != "BME") {
                                ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Containers: </b>' + pContainerNumbers + '</div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">'
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Quantity</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Sale Price</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) /*+ (item.Notes == 0 || item.Notes == "" ? "" : '-' + item.Notes)*/ + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            ReportHTML += '                                         <tr>';
                            ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            ReportHTML += '                                         </tr>';

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'
                            //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                            //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                            //ReportHTML += '                         </div>';
                            //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                            //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="col-xs-12 m-t-n"></div>';
                            ReportHTML += '                         <div class="col-xs-8">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked") && pDefaults.UnEditableCompanyName != "BHE") {
                                //ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                             <b><u>Bank Name:</u></b> ' + 'Commercial International Bank (CIB)' + '</br>';
                                ReportHTML += '                             <b>Bank Code/Branch:</b> ' + '003 / Sultan Hussein Branch' + '</br>';
                                ReportHTML += '                             <b>Beneficiary Name:</b> ' + 'Blue Anchor Logistic for Shipping & Transport' + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + '100, El-Horeya RD, Bab Shark, Alexandria, Egypt' + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + 'CIBEEGCXXXX' + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + '(EGP)100036808254-(USD)100036808181-(EUR)100036808227' + '</br>';
                                ReportHTML += '                             <br>';
                                ReportHTML += '                             <b><u>Bank Name:</u></b> ' + 'QNB AL AHLI' + '</br>';
                                ReportHTML += '                             <b>Bank Code/Branch:</b> ' + 'Sultan Hussein Branch' + '</br>';
                                ReportHTML += '                             <b>Beneficiary Name:</b> ' + 'Blue Anchor Logistic for Shipping & Transport' + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + 'Sultan Hussein Street, Alexandria, Egypt' + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + 'QNBAEGCXXXX' + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + '(EGP/USD/EUR)1001399309' + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br><br><br><br><br><br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right">';
                            ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</b></br>';
                            ReportHTML += '                         </div>';
                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '         </body>';

                            ReportHTML += '     <footer class="footer col-xs-12 m-t-lg ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '" style="width:100%; position:absolute; bottom:0;">';
                            //ReportHTML += '         <div class="row text-right m-r m-t-sm">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                            if (pDefaults.UnEditableCompanyName == "BME")
                                ReportHTML += '         <div class="row text-center m-t-n"><img src="/Content/Images/CompanyFooterInvoice.jpg" alt="footer"/></div>';
                            else
                                ReportHTML += '         <div class="row text-center m-t-n"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF BAL. BME
                        else if (pDefaults.UnEditableCompanyName == "KDS") {
                            if (pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split(' ')[0].toUpperCase()
                                == "DISBURSEMENT") {

                                var ReportHTML = '';
                                //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                                //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                                ReportHTML += '<html>';
                                ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                                //ReportHTML += '         <body style="background-color:white;">';
                                ReportHTML += '         <body style="background-color:white; font-size:160%;">';
                                ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                                //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split(' ')[0] + ' ACCOUNT' + '</h3></div>';
                                //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + ' No. </b>' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + ' No. </b>' + (pOperationHeader.CustomerReference == 0 ? "" : pOperationHeader.CustomerReference) + '</h3></div>';
                                ReportHTML += '                 <div class="col-xs-12"><b>Owner/Charter: </b>' + pInvoiceHeader.PartnerName + '</div>';
                                //ReportHTML += '                 <div class="col-xs-8">';
                                //ReportHTML += '                     <table class="col-xs-12 b-t b-light text-sm table-bordered" style="text-align:left; width:auto; border:solid #000;">';
                                //ReportHTML += '                         <td>';
                                //ReportHTML += '                             <b>Bill To: </b><br>';
                                //ReportHTML += '                             <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                                //ReportHTML += '                             ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                //ReportHTML += '                             ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                                //ReportHTML += '                             ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                //ReportHTML += '                             ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                                //ReportHTML += '                         </td>';
                                //ReportHTML += '                     </table>';
                                //ReportHTML += '                 </div>';

                                ReportHTML += '                     <div class="col-xs-12 clear">';
                                ReportHTML += '                         <table id="tblReportInvoiceHeader" class="table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                                //ReportHTML += '                             <thead>';
                                //ReportHTML += '                                 <tr>';
                                //ReportHTML += '                                     <th>No.</th>';
                                //ReportHTML += '                                     <th>Description</th>';
                                //ReportHTML += '                                     <th>Amount</th>';
                                //ReportHTML += '                                 </tr>';
                                //ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                //ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                     <tr class="input-md" style="font-size:110%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>Port: </b>' + (pOperationHeader.DirectionType == constImportDirectionType ? pPOLName : pPODName) + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>Sailing Date: </b>' + (pETD == "01/01/1900" || pETD == "1/1/1900" ? "N/A" : pETD) + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>GRT: </b>' + (pGRT == 0 ? "N/A" : pGRT) + '</td>';
                                ReportHTML += '                                     </tr>';
                                //ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                     <tr class="input-md" style="font-size:110%;">';
                                //ReportHTML += '                                         <td style="text-align:left;">' + '<b>Operation: </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>Commodity: </b>' + pOperationHeader.CommodityName + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>DWT: </b>' + (pDWT == 0 ? "N/A" : pDWT) + '</td>';
                                ReportHTML += '                                     </tr>';
                                //ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                     <tr class="input-md" style="font-size:110%;">';
                                //ReportHTML += '                                         <td style="text-align:left;">' + '<b>Arrival Date: </b>' + (pETA == "01/01/1900" || pETA == "1/1/1900" ? "N/A" : pETA) + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>Arrival Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival))) + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>Vessel: </b>' + pVesselName + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>NRT: </b>' + (pNRT == 0 ? "N/A" : pNRT) + '</td>';
                                ReportHTML += '                                     </tr>';
                                //ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                     <tr class="input-md" style="font-size:110%;">';
                                //ReportHTML += '                                         <td style="text-align:left;">' + '<b>Arrival Date: </b>' + (pETA == "01/01/1900" || pETA == "1/1/1900" ? "N/A" : pETA) + '</td>';
                                //ReportHTML += '                                         <td style="text-align:left;">' + '<b>&emsp; </b>' + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>Currency: </b>' + pInvoiceHeader.CurrencyCode + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>Voyage: </b>' + (pOperationHeader.VoyageOrTruckNumber == 0 ? "" : pOperationHeader.VoyageOrTruckNumber) + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>LOA: </b>' + (pLOA == 0 ? "N/A" : pLOA) + '</td>';
                                ReportHTML += '                                     </tr>';

                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>'

                                ReportHTML += '                     <div class="col-xs-12 clear">';
                                ReportHTML += '                         <table id="tblReportInvoice" class="table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                                 <tr>';
                                ReportHTML += '                                     <th style="width:5%;">No.</th>';
                                ReportHTML += '                                     <th>Description</th>';
                                ReportHTML += '                                     <th>Amount</th>';
                                ReportHTML += '                                 </tr>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                $.each(JSON.parse(data[2]), function (i, item) {
                                    //ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:110%;">';
                                    ReportHTML += '                                         <td>' + ++i + '</td>';
                                    ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                    ReportHTML += '                                         <td style="text-align:right;">' + item.SaleAmount.toFixed(2) + '</td>';
                                    ReportHTML += '                                     </tr>';
                                });
                                if (pInvoiceHeader.FixedDiscount > 0) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:110%;">';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                    ReportHTML += '                                         <td style="text-align:right;">' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                    ReportHTML += '                                     </tr>';
                                }
                                ReportHTML += '                                         <tr>';
                                ReportHTML += '                                             <td style="text-align:left;" colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                ReportHTML += '                                             <td style="text-align:right;"><b>' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></td>';
                                ReportHTML += '                                         </tr>';
                                if (pTaxAmount != 0) {
                                    ReportHTML += '                                         <tr>';
                                    ReportHTML += '                                             <td style="text-align:left;" colspan=2>' + '<b>VAT (' + pTaxTypeName + ') </b></td>';
                                    ReportHTML += '                                             <td style="text-align:right;"><b>' + pTaxAmount.toFixed(2) + '</b></td>';
                                    ReportHTML += '                                         </tr>';
                                }
                                if (pDiscountAmount != 0) {
                                    ReportHTML += '                                         <tr>';
                                    ReportHTML += '                                             <td style="text-align:left;" colspan=2>' + '<b>Discount (' + pDiscountTypeName + ')</b></td>';
                                    ReportHTML += '                                             <td style="text-align:right;"><b>' + pDiscountAmount.toFixed(2) + '</b></td>';
                                    ReportHTML += '                                         </tr>';
                                }
                                if (pTaxAmount != 0 || pDiscountAmount != 0) {
                                    ReportHTML += '                                         <tr>';
                                    ReportHTML += '                                             <td style="text-align:left;" colspan=2>' + '<b>TOTAL AMOUNT WITH VAT AND DISC : ' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                    ReportHTML += '                                             <td style="text-align:right;"><b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></td>';
                                    ReportHTML += '                                         </tr>';
                                }
                                //ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                         </tr>';
                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>'
                                //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                                //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                                //ReportHTML += '                         </div>';
                                //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                                //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                                //ReportHTML += '                         <div class="row"></div>';
                                if ($("#cbLargeInvoice").prop("checked")) {
                                    ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                    ReportHTML += '         <div class="break"></div>';
                                }
                                else
                                    ReportHTML += '                         <div class="row m-t-n"></div>';
                                ReportHTML += '                         <div class="col-xs-12 m-t-n">';
                                if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                    ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                    ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                    ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                    ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                    ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                                }
                                else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                    ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                                }
                                //else
                                //    ReportHTML += '                             <br><br><br><br><br><br>';
                                ReportHTML += '                         </div>';
                                //ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                                //ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                ////ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                                //ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount + '</br>';
                                ////ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                                //ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount + '</br>';
                                //ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</b></br>';
                                //ReportHTML += '                         </div>';
                                //ReportHTML += '                     </div>'; //of table-responsive
                                //ReportHTML += '                 </section>';
                                //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                                ReportHTML += '         </body>';

                                //ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                //ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                                //ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                 </div>'
                                if ($("#cbPrintStamp").prop("checked"))
                                    ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                                ReportHTML += '     <footer class="footer col-xs-12 m-t-lg ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '" style="width:100%; position:absolute; bottom:0;">';
                                //ReportHTML += '         <div class="row text-center ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '"><img src="/Content/Images/CompanyFooter.jpg" alt="logo"/></div>';
                                /****if KDS the use CompanyFooter-KDS-InvoiceTaxNumbers.jpg***/
                                //ReportHTML += '         <div class="row text-right m-r">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                                //ReportHTML += '         <div class="row text-right m-r">' + '  يوقف صرف شيكات مصر للتأمين لحين تسوية التعويضات  ' + '</div>';
                                //ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بموجب إيصال سداد معتمد من الشركة بتمام قيمة الفاتورة  ' + '</div>';
                                //ReportHTML += '         <div class="row text-center"><img src="/Content/Images/CompanyFooter' + (pDefaults.UnEditableCompanyName == "KDS" ? '-KDS-InvoiceTaxNumbers' : "") + '.jpg"' + ' alt="logo"/></div>';
                                ReportHTML += '         <div class="row text-center"><img src="/Content/Images/CompanyFooter.jpg" alt="logo"/></div>';
                                //else if (pDefaults.UnEditableCompanyName == "KML") //if KML the print on original paper
                                //    ReportHTML += '             <br><br><br><br><br>';
                                ReportHTML += '     </footer>';

                                ReportHTML += '</html>';
                                if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                    pFinalReportHTML += ReportHTML;
                                    Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                                }
                                else {
                                    pFinalReportHTML += ReportHTML;
                                    pFinalReportHTML += ' <div class="break"></div>';
                                }
                            }
                            else if (pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split(' ')[0].toUpperCase()
                                == "SERVICES") {

                                var ReportHTML = '';
                                //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                                //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                                ReportHTML += '<html>';
                                ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                                ReportHTML += '         <body style="background-color:white;">';
                                ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                                //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1] + ' No. </b>' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';
                                //ReportHTML += '                 <div class="col-xs-8">';
                                //ReportHTML += '                     <table class="col-xs-12 b-t b-light text-sm table-bordered" style="text-align:left; width:auto; border:solid #000;">';
                                //ReportHTML += '                         <td>';
                                //ReportHTML += '                             <b>Bill To: </b><br>';
                                //ReportHTML += '                             <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                                //ReportHTML += '                             ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                //ReportHTML += '                             ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                                //ReportHTML += '                             ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                //ReportHTML += '                             ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                                //ReportHTML += '                         </td>';
                                //ReportHTML += '                     </table>';

                                //ReportHTML += '                 </div>';


                                //ReportHTML += '             <div style="clear:both;"><br></div>';
                                ReportHTML += '                 <div class="col-xs-8"><b>Client: </b>' + pInvoiceHeader.PartnerName + '</div>';
                                ReportHTML += '                 <div class="col-xs-4 text-right"><b>Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';
                                ReportHTML += '                     <div class="col-xs-12 clear">';
                                ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                                 <tr>';
                                //ReportHTML += '                                     <th>No.</th>';
                                ReportHTML += '                                     <th>Description</th>';
                                ReportHTML += '                                     <th>Amount</th>';
                                ReportHTML += '                                 </tr>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                $.each(JSON.parse(data[2]), function (i, item) {
                                    if (pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split(' ')[0].toUpperCase() == "G.CARGO"
                                        || pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split(' ')[0].toUpperCase() == "CONTAINER")
                                        ReportHTML += '                                     <tr class="input-md font-bold" style="">';
                                    else
                                        ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    //ReportHTML += '                                         <td>' + ++i + '</td>';
                                    ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                    ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                    ReportHTML += '                                     </tr>';
                                });
                                if (pInvoiceHeader.FixedDiscount > 0) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                    ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                    ReportHTML += '                                     </tr>';
                                }
                                ReportHTML += '                                         <tr>';
                                ReportHTML += '                                             <td colspan=1>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                ReportHTML += '                                             <td><b>' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                ReportHTML += '                                         </tr>';
                                if (pTaxAmount != 0) {
                                    ReportHTML += '                                         <tr>';
                                    ReportHTML += '                                             <td colspan=1>' + '<b>VAT (' + pTaxTypeName + ') </b></td>';
                                    ReportHTML += '                                             <td><b>' + pTaxAmount.toFixed(2) + '</b></td>';
                                    ReportHTML += '                                         </tr>';
                                }
                                if (pDiscountAmount != 0) {
                                    ReportHTML += '                                         <tr>';
                                    ReportHTML += '                                             <td colspan=1>' + '<b>Discount (' + pDiscountTypeName + ')</b></td>';
                                    ReportHTML += '                                             <td><b>' + pDiscountAmount.toFixed(2) + '</b></td>';
                                    ReportHTML += '                                         </tr>';
                                }
                                if (pTaxAmount != 0 || pDiscountAmount != 0) {
                                    ReportHTML += '                                         <tr>';
                                    ReportHTML += '                                             <td colspan=1>' + '<b>TOTAL AMOUNT WITH VAT AND DISC : ' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                    ReportHTML += '                                             <td><b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                    ReportHTML += '                                         </tr>';
                                }
                                //ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                         </tr>';
                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>'
                                //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                                //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                                //ReportHTML += '                         </div>';
                                //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                                //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                                //ReportHTML += '                         <div class="row"></div>';
                                if ($("#cbLargeInvoice").prop("checked")) {
                                    ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                    ReportHTML += '         <div class="break"></div>';
                                }
                                else
                                    ReportHTML += '                         <div class="col-xs-12 m-t-n"></div>';
                                ReportHTML += '                         <div class="col-xs-12 m-t-n">';
                                if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                    ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                    ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                    ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                    ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                    ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                                }
                                else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                    ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                                }
                                //else
                                //    ReportHTML += '                             <br><br><br><br><br><br>';
                                ReportHTML += '                         </div>';
                                //ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                                //ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                ////ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                                //ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount + '</br>';
                                ////ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                                //ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount + '</br>';
                                //ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</b></br>';
                                //ReportHTML += '                         </div>';
                                //ReportHTML += '                     </div>'; //of table-responsive
                                //ReportHTML += '                 </section>';
                                //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                                ReportHTML += '         </body>';

                                //ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                //ReportHTML += '                     <div class="col-xs-9 m-t"><b>' + 'Reviewed By' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Preparation' + '</b></div>';
                                //ReportHTML += '                 </div>'
                                //ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                //ReportHTML += '                     <div class="col-xs-9 m-t-sm"><b>' + '..........................' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-3 m-t-sm text-center">' + $("#hLoggedUserNameNotLogin").val() + '</div>';
                                //ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-9 m-t"><b>' + 'Reviewed By' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Preparation' + '</b></div>';
                                ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-9"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 text-center">' + $("#hLoggedUserNameNotLogin").val() + '</div>';
                                ReportHTML += '                 </div>'
                                if ($("#cbPrintStamp").prop("checked"))
                                    ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                                ReportHTML += '     <footer class="footer col-xs-12 m-t-lg ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '" style="width:100%; position:absolute; bottom:0;">';
                                //ReportHTML += '         <div class="row">'
                                //ReportHTML += '             <div class="col-xs-8 m-l"><b><i>' + ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 1
                                //                                                                ? 'Import Manager'
                                //                                                                : ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 2 ? 'Export Manager' : 'Domestic Manager')
                                //                                                                ) + '</i></b></div>';
                                //ReportHTML += '             <div class="col-xs-4 m-t-n-md float-right"><b><i>Accountant Signature</i></b></div>';
                                //ReportHTML += '         </div>'
                                //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                                //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                                //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                                //else
                                //    if ($("#cbIsImport").prop("checked") && $("#cbIsAir").prop("checked"))
                                //        ReportHTML += '             <div class="row m-l">F/FFI-IA-11-04</div>';
                                //ReportHTML += '         <div class="row text-center ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '"><img src="/Content/Images/CompanyFooter.jpg" alt="logo"/></div>';
                                /****if KDS the use CompanyFooter-KDS-InvoiceTaxNumbers.jpg***/
                                //ReportHTML += '         <div class="row text-right m-r">' + '  الشركة تخضع لنظام الدفعات المقدمة  ' + '</div>';
                                ReportHTML += '         <div class="row text-right m-r">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                                //ReportHTML += '         <div class="row text-right m-r">' + '  يوقف صرف شيكات مصر للتأمين لحين تسوية التعويضات  ' + '</div>';
                                ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بموجب إيصال سداد معتمد من الشركة بتمام قيمة الفاتورة  ' + '</div>';
                                ReportHTML += '         <div class="row text-center"><img src="/Content/Images/CompanyFooter' + (pDefaults.UnEditableCompanyName == "KDS" ? '-KDS-InvoiceTaxNumbers' : "") + '.jpg"' + ' alt="logo"/></div>';
                                ReportHTML += '     </footer>';
                                ReportHTML += '</html>';
                                if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                    pFinalReportHTML += ReportHTML;
                                    Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                                }
                                else {
                                    pFinalReportHTML += ReportHTML;
                                    pFinalReportHTML += ' <div class="break"></div>';
                                }
                            } //EOF Services invoice
                            else { //other invoice types not Disbursement/Services

                                var ReportHTML = '';
                                //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                                //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                                ReportHTML += '<html>';
                                ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                                ReportHTML += '         <body style="background-color:white;">';
                                ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                                //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1] + ' No. </b>' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';
                                //ReportHTML += '                 <div class="col-xs-8">';
                                //ReportHTML += '                     <table class="col-xs-12 b-t b-light text-sm table-bordered" style="text-align:left; width:auto; border:solid #000;">';
                                //ReportHTML += '                         <td>';
                                //ReportHTML += '                             <b>Bill To: </b><br>';
                                //ReportHTML += '                             <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                                //ReportHTML += '                             ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                //ReportHTML += '                             ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                                //ReportHTML += '                             ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                //ReportHTML += '                             ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                                //ReportHTML += '                         </td>';
                                //ReportHTML += '                     </table>';

                                //ReportHTML += '                 </div>';


                                //ReportHTML += '             <div style="clear:both;"><br></div>';
                                if (pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split(' ')[0].toUpperCase() == "DEBIT") {
                                    ReportHTML += '             <div class="col-xs-8"><b>Client: </b>' + pInvoiceHeader.PartnerName + '</div>';
                                    ReportHTML += '             <div class="col-xs-4 text-right"><b>Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';
                                }
                                else {
                                    ReportHTML += '             <div class="col-xs-12"><b>Client: </b>' + pInvoiceHeader.PartnerName + '</div>';
                                    ReportHTML += '             <div class="col-xs-4"><b>Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';
                                    ReportHTML += '             <div class="col-xs-4"><b>Branch: </b>' + pOperationHeader.BranchName + '</div>';
                                    if (pOperationHeader.ShipmentTypeCode != "FCL" && pOperationHeader.ShipmentTypeCode != "CONSOL")
                                        //ReportHTML += '             <div class="col-xs-4"><b>Freight: </b>' + (pOperationHeader.POrCName == 0 ? "" : pOperationHeader.POrCName) + '</div>';
                                        ReportHTML += '             <div class="col-xs-4"><b>Freight: </b>' + (pOperationHeader.POrCName == 0 ? "" : pOperationHeader.POrCName) + '</div>';
                                    else
                                        ReportHTML += '             <div class="col-xs-4"><b>Voyage: </b>' + (pOperationHeader.VoyageOrTruckNumber == 0 ? "" : pOperationHeader.VoyageOrTruckNumber) + '</div>';
                                    ReportHTML += '             <div class="col-xs-4"><b>Vessel: </b>' + pVesselName + '</div>';
                                    ReportHTML += '             <div class="col-xs-4"><b>Vessel Date: </b>' + (pETA == "01/01/1900" || pETA == "1/1/1900" ? "N/A" : pETA) + '</div>';
                                    if ($("#cbPrintMBL").prop("checked"))
                                        ReportHTML += '             <div class="col-xs-4"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                                    if ($("#cbPrintHBL").prop("checked")) {
                                        //if (pHouseBLs != "0")//Master Operation so show all houses on it
                                        //    ReportHTML += '             <div class="col-xs-4"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                        //else
                                        ReportHTML += '             <div class="col-xs-4"><b>MB/L No.:</b> ' + (pHouseNumber == "" || pHouseNumber == "0" ? "" : pHouseNumber) + '</div>';
                                    }

                                    ReportHTML += '             <div class="col-xs-4"><b>POL: </b>' + pPOLName + '</div>';
                                    ReportHTML += '             <div class="col-xs-4"><b>GW: </b>' + pOperationHeader.GrossWeightSum + ' KGM' + '</div>';
                                    //ReportHTML += '             <div class="col-xs-4"><b>Delivery Order No.: </b>' + (pDeliveryOrderNumber == 0 ? "" : pDeliveryOrderNumber) + '</div>';
                                    ReportHTML += '             <div class="col-xs-4"><b>Delivery Order No.: </b>' + pOperationHeader.ID + '</div>';
                                    if (pOperationHeader.ShipmentTypeCode != "FCL" && pOperationHeader.ShipmentTypeCode != "CONSOL")
                                        ReportHTML += '             <div class="col-xs-4"><b>CBM: </b>' + pCBM + ' CBM' + '</div>';
                                    ReportHTML += '             <div class="col-xs-4"><b>POD: </b>' + pPODName + '</div>';
                                    //if (pOperationHeader.ShipmentTypeCode != "FCL" && pOperationHeader.ShipmentTypeCode != "CONSOL")
                                    //    ReportHTML += '             <div class="col-xs-4"><b>Free Time: </b>' + (pOperationHeader.FreeTime == 0 ? "" : pOperationHeader.FreeTime) + '</div>';
                                    if (pOperationHeader.ShipmentTypeCode == "FCL" || pOperationHeader.ShipmentTypeCode == "FTL" || pOperationHeader.ShipmentTypeCode == "CONSOL")
                                        ReportHTML += '             <div class="col-xs-8"><b>Containers: </b>' + (pContainerTypes == 0 ? "N/A" : pContainerTypes) + '</div>';
                                    else
                                        ReportHTML += '             <div class="col-xs-8"><b>Packages: </b>' + (pPackageTypes == 0 ? "N/A" : pPackageTypes) + '</div>';
                                    //ReportHTML += '             <div class="col-xs-4"><b>Commodity: </b>' + pOperationHeader.CommodityName + '</div>';
                                    //ReportHTML += '             <div class="col-xs-4"><b>Departure Date: </b>' + (pETD == "01/01/1900" || pETD == "1/1/1900" ? "N/A" : pETD) + '</div>';
                                    //ReportHTML += '             <div class="col-xs-4"><b>Voyage: </b>' + (pOperationHeader.VoyageOrTruckNumber == 0 ? "" : pOperationHeader.VoyageOrTruckNumber) + '</div>';
                                    //ReportHTML += '             <div class="col-xs-4"><b>Port: </b>' + (pOperationHeader.DirectionType == constImportDirectionType ? pPOLName : pPODName) + '</div>';
                                } //else of (pInvoiceHeader.InvoiceTypeName == "DEBIT") {
                                ReportHTML += '                     <div class="col-xs-12 clear">';
                                ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                                 <tr>';
                                //ReportHTML += '                                     <th>No.</th>';
                                ReportHTML += '                                     <th>Description</th>';
                                ReportHTML += '                                     <th>Amount</th>';
                                ReportHTML += '                                 </tr>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                $.each(JSON.parse(data[2]), function (i, item) {
                                    if (pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split(' ')[0].toUpperCase() == "G.CARGO"
                                        || pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split(' ')[0].toUpperCase() == "CONTAINER")
                                        ReportHTML += '                                     <tr class="input-md font-bold" style="">';
                                    else
                                        ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    //ReportHTML += '                                         <td>' + ++i + '</td>';
                                    ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                    ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                    ReportHTML += '                                     </tr>';
                                });
                                ReportHTML += '                                         <tr>';
                                ReportHTML += '                                             <td colspan=1>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                ReportHTML += '                                             <td><b>' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                ReportHTML += '                                         </tr>';
                                if (pTaxAmount != 0) {
                                    ReportHTML += '                                         <tr>';
                                    ReportHTML += '                                             <td colspan=1>' + '<b>VAT (' + pTaxTypeName + ') </b></td>';
                                    ReportHTML += '                                             <td><b>' + pTaxAmount.toFixed(2) + '</b></td>';
                                    ReportHTML += '                                         </tr>';
                                }
                                if (pDiscountAmount != 0) {
                                    ReportHTML += '                                         <tr>';
                                    ReportHTML += '                                             <td colspan=1>' + '<b>Discount (' + pDiscountTypeName + ')</b></td>';
                                    ReportHTML += '                                             <td><b>' + pDiscountAmount.toFixed(2) + '</b></td>';
                                    ReportHTML += '                                         </tr>';
                                }
                                if (pTaxAmount != 0 || pDiscountAmount != 0) {
                                    ReportHTML += '                                         <tr>';
                                    ReportHTML += '                                             <td colspan=1>' + '<b>TOTAL AMOUNT WITH VAT AND DISC : ' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                    ReportHTML += '                                             <td><b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                    ReportHTML += '                                         </tr>';
                                }
                                //ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                         </tr>';
                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>'
                                //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                                //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                                //ReportHTML += '                         </div>';
                                //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                                //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                                //ReportHTML += '                         <div class="row"></div>';
                                if ($("#cbLargeInvoice").prop("checked")) {
                                    ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                    ReportHTML += '         <div class="break"></div>';
                                }
                                else
                                    ReportHTML += '                         <div class="col-xs-12 m-t-n"></div>';
                                ReportHTML += '                         <div class="col-xs-12 m-t-n">';
                                if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                    ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                    ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                    ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                    ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                    ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                                }
                                else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                    ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                                }
                                //else
                                //    ReportHTML += '                             <br><br><br><br><br><br>';
                                ReportHTML += '                         </div>';
                                //ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                                //ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                ////ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                                //ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount + '</br>';
                                ////ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                                //ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount + '</br>';
                                //ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</b></br>';
                                //ReportHTML += '                         </div>';
                                //ReportHTML += '                     </div>'; //of table-responsive
                                //ReportHTML += '                 </section>';
                                //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                                ReportHTML += '         </body>';

                                //ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                //ReportHTML += '                     <div class="col-xs-3 m-t"><b>' + 'Approved By' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-2 m-t text-center"><b>' + 'Reviewed By' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + 'Customer Service Supervisor' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Preparation' + '</b></div>';
                                //ReportHTML += '                 </div>'
                                //ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                //ReportHTML += '                     <div class="col-xs-3 m-t-sm"><b>' + '....................................' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-2 m-t-sm text-center"><b>' + '..................' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center"><b>' + '......................................................' + '</b></div>';
                                //ReportHTML += '                     <div class="col-xs-3 m-t-sm text-center">' + $("#hLoggedUserNameNotLogin").val() + '</div>';
                                //ReportHTML += '                 </div>'

                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Approved By' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Reviewed By' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + 'Customer Service Supervisor' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-2 m-t text-center"><b>' + 'Preparation' + '</b></div>';
                                ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-3 text-center"><b>' + (pDefaultsRow.InvoiceLeftSignature != "0" ? pDefaultsRow.InvoiceLeftSignature : '....................................') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 text-center"><b>' + (pDefaultsRow.InvoiceMiddleSignature != "0" ? pDefaultsRow.InvoiceMiddleSignature : '..................') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + (pDefaultsRow.InvoiceRightSignature != "0" ? pDefaultsRow.InvoiceRightSignature : '......................................................') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-2 text-center">' + $("#hLoggedUserNameNotLogin").val() + '</div>';
                                ReportHTML += '                 </div>'
                                if ($("#cbPrintStamp").prop("checked")) {
                                    ReportHTML += '         <div class="col-xs-3 text-center">&emsp;</div>';
                                    ReportHTML += '         <div class="col-xs-3 text-center"><img src="/Content/Images/CompanyStamp.jpg" alt="footer"/></div>';
                                    ReportHTML += '         <div class="col-xs-6 text-center">&emsp;</div>'
                                }

                                ReportHTML += '     <footer class="footer col-xs-12 m-t-lg ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '" style="width:100%; position:absolute; bottom:0;">';
                                //ReportHTML += '         <div class="row">'
                                //ReportHTML += '             <div class="col-xs-8 m-l"><b><i>' + ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 1
                                //                                                                ? 'Import Manager'
                                //                                                                : ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 2 ? 'Export Manager' : 'Domestic Manager')
                                //                                                                ) + '</i></b></div>';
                                //ReportHTML += '             <div class="col-xs-4 m-t-n-md float-right"><b><i>Accountant Signature</i></b></div>';
                                //ReportHTML += '         </div>'
                                //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                                //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                                //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                                //else
                                //    if ($("#cbIsImport").prop("checked") && $("#cbIsAir").prop("checked"))
                                //        ReportHTML += '             <div class="row m-l">F/FFI-IA-11-04</div>';
                                //ReportHTML += '         <div class="row text-center ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '"><img src="/Content/Images/CompanyFooter.jpg" alt="logo"/></div>';
                                /****if KDS the use CompanyFooter-KDS-InvoiceTaxNumbers.jpg***/
                                if (pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split(' ')[0].toUpperCase() != "DEBIT") {
                                    //ReportHTML += '         <div class="row text-right m-r">' + '  الشركة تخضع لنظام الدفعات المقدمة  ' + '</div>';
                                    ReportHTML += '         <div class="row text-right m-r">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                                    //ReportHTML += '         <div class="row text-right m-r">' + '  يوقف صرف شيكات مصر للتأمين لحين تسوية التعويضات  ' + '</div>';
                                    ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بموجب إيصال سداد معتمد من الشركة بتمام قيمة الفاتورة  ' + '</div>';
                                }
                                else {
                                    ReportHTML += '         <div class="row text-right m-r">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                                    //ReportHTML += '         <div class="row text-right m-r">' + '  يوقف صرف شيكات مصر للتأمين لحين تسوية التعويضات  ' + '</div>';
                                }
                                ReportHTML += '         <div class="row text-center"><img src="/Content/Images/CompanyFooter' + (pDefaults.UnEditableCompanyName == "KDS" ? '-KDS-InvoiceTaxNumbers' : "") + '.jpg"' + ' alt="logo"/></div>';
                                //else if (pDefaults.UnEditableCompanyName == "KML") //if KML the print on original paper
                                //    ReportHTML += '             <br><br><br><br><br>';
                                ReportHTML += '     </footer>';
                                ReportHTML += '</html>';
                                if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                    pFinalReportHTML += ReportHTML;
                                    Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                                }
                                else {
                                    pFinalReportHTML += ReportHTML;
                                    pFinalReportHTML += ' <div class="break"></div>';
                                }
                            }//other invoice types for KDS
                        } //EOF if (pDefaults.UnEditableCompanyName == "KDS")
                        else if (pDefaults.UnEditableCompanyName == "EGL") {
                            debugger;
                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';

                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            if (pInvoiceHeader.InvoiceTypeName.split(' ')[0].toUpperCase() == "DEBIT")
                                ReportHTML += '         <div class="col-xs-1 m-l-n-md">&emsp;</div>';
                            else
                                ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';
                            ReportHTML += '         <div class="col-xs-11 m-l-n-lg">';

                            ReportHTML += '             <div class="col-xs-6"><b>Bill to: </b>' + pInvoiceHeader.PartnerName + '</div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Inv.Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Pay.Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Address: </b>';
                            ReportHTML += '                 ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                 ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            ReportHTML += '                 ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                 ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Reference No.: </b>' + (pCustomerReference == 0 ? "N/A" : pCustomerReference) + '</div>';
                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + pMasterOperationCode + '</div>';
                            else
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Currency: </b>' + pInvoiceHeader.CurrencyCode + '</div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" || pHouseNumber == "0" ? "" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                            if (pOperationHeader.TransportType == OceanTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Vessel: </b>' + pVesselName + '</div>';
                            }
                            //for inland shipping line is written in LeftSignature
                            if (pOperationHeader.TransportType == InlandTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Shipping Line: </b>' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';
                            }
                            if (pOperationHeader.TransportType != AirTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Arrival Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival))) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Containers: </b>' + (pOperationHeader.ShipmentType == 0 || pOperationHeader.ShipmentType == 2 || pOperationHeader.ShipmentType == 4 ? "LCL" : pContainerTypes) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Container Numbers: </b>' + pContainerNumbers + '</div>';
                            }
                            if (pOperationHeader.PackageTypes != 0 || pOperationHeader.PackageTypesOnContainersTotals != 0 || pOperationHeader.PlacedOnOperationContainersAndPackagesID != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes) + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Commodity: </b>' + (pOperationHeader.CommodityName == 0 ? "" : pOperationHeader.CommodityName) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KGM' + '</div>';
                            if (pOperationHeader.CertificateNumber != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Certificate: </b>' + pOperationHeader.CertificateNumber + '</div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>S</th>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Price</th>';
                            ReportHTML += '                                     <th>Currency</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            debugger;
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + (i + 1) + '</td>';
                                if (pOperationHeader.TransportType == 2 || pDefaults.CompanyName == "EISAS")
                                    ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                else
                                    ReportHTML += '                                         <td style="text-align:left;">' + (item.Notes == 0 ? "" : item.Notes) + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.CurrencyCode + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                            //ReportHTML += '                                         </tr>';
                            //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'

                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="col-xs-12 m-t-n"></div>';
                            ReportHTML += '                         <div class="col-xs-8">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right">';
                            ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';
                            if (pInvoiceHeader.InvoiceTypeName.split(' ')[0].toUpperCase() == "DEBIT")
                                ReportHTML += '                     <div class="m-l" style="width:300px;height:40px;border:1px solid #000;clear:both;">' + '  مبالغ مسددة حساب الغير  ' + '<br>outstanding amount for the account of others' + '</div>';

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '             </div>'; //
                            ReportHTML += '         </body>';


                            //ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            //ReportHTML += '                     <div class="col-xs-3 m-t"><b>' + 'Approved By' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-2 m-t text-center"><b>' + 'Reviewed By' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + 'Customer Service Supervisor' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Preparation' + '</b></div>';
                            //ReportHTML += '                 </div>'
                            //ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            //ReportHTML += '                     <div class="col-xs-3 m-t-sm"><b>' + '....................................' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-2 m-t-sm text-center"><b>' + '..................' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center"><b>' + '......................................................' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-3 m-t-sm text-center">' + $("#hLoggedUserNameNotLogin").val() + '</div>';
                            //ReportHTML += '                 </div>'

                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Accounting Manager' + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Auditing' + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + 'Customer Service Supervisor' + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-2 m-t text-center"><b>' + 'Preparation' + '</b></div>';
                            ReportHTML += '                 </div>'
                            //ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to be in the footer but i added it here to test not put on text
                            //ReportHTML += '                     <div class="col-xs-3 text-center"><b>' + (pDefaultsRow.InvoiceLeftSignature != "0" ? pDefaultsRow.InvoiceLeftSignature : '....................................') + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-3 text-center"><b>' + (pDefaultsRow.InvoiceMiddleSignature != "0" ? pDefaultsRow.InvoiceMiddleSignature : '..................') + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + (pDefaultsRow.InvoiceRightSignature != "0" ? pDefaultsRow.InvoiceRightSignature : '......................................................') + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-2 text-center">' + $("#hLoggedUserNameNotLogin").val() + '</div>';
                            //ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-3 text-center"><b>' + (pInvoiceHeader.LeftSignature != "0" ? pInvoiceHeader.LeftSignature : '....................................') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-3 text-center"><b>' + (pInvoiceHeader.MiddleSignature != "0" ? pInvoiceHeader.MiddleSignature : '..................') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + (pInvoiceHeader.RightSignature != "0" ? pInvoiceHeader.RightSignature : '......................................................') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-2 text-center">' + $("#hLoggedUserNameNotLogin").val() + '</div>';
                            ReportHTML += '                 </div>'
                            if ($("#cbPrintStamp").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-3 text-center">&emsp;</div>';
                                ReportHTML += '         <div class="col-xs-3 text-center"><img src="/Content/Images/CompanyStamp.jpg" alt="footer"/></div>';
                                ReportHTML += '         <div class="col-xs-6 text-center">&emsp;</div>'
                            }
                            else if ($("#cbPrintStamp-Ar").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-3 text-center">&emsp;</div>';
                                ReportHTML += '         <div class="col-xs-3 text-center"><img src="/Content/Images/CompanyStamp-Ar.jpg" alt="footer"/></div>';
                                ReportHTML += '         <div class="col-xs-6 text-center">&emsp;</div>'
                            }
                            else if ($("#cbPrintStamp-Kadmar").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-3 text-center">&emsp;</div>';
                                ReportHTML += '         <div class="col-xs-3 text-center"><img src="/Content/Images/CompanyStamp-Kadmar.jpg" alt="footer"/></div>';
                                ReportHTML += '         <div class="col-xs-6 text-center">&emsp;</div>'
                            }

                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            //ReportHTML += '         <div class="row">'
                            //ReportHTML += '             <div class="col-xs-8 m-l"><b><i>' + ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 1
                            //                                                                ? 'Import Manager'
                            //                                                                : ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 2 ? 'Export Manager' : 'Domestic Manager')
                            //                                                                ) + '</i></b></div>';
                            //ReportHTML += '             <div class="col-xs-4 m-t-n-md float-right"><b><i>Accountant Signature</i></b></div>';
                            //ReportHTML += '         </div>'
                            if (pInvoiceHeader.InvoiceTypeName.split(' ')[0].toUpperCase() == "DEBIT")
                                ReportHTML += '         <div class="row text-right m-r m-t">' + '  مرفق طيه بيان المستندات بمبالغ مدفوعة نيابة عن سيادتكم بناء على تعليماتكم مرفق يها أصول المستندات معنونة باسم سيادتكم  ' + '</div>';
                            else {
                                ReportHTML += '         <div class="row text-right m-r m-t">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                                //ReportHTML += '         <div class="row text-right m-r">' + '  يوقف صرف شيكات مصر للتأمين لحين تسوية التعويضات  ' + '</div>';
                                ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                            }
                            //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            if (pInvoiceHeader.InvoiceTypeName.split(' ')[0].toUpperCase() == "DEBIT" && $("#cbPrintFooterInvoice").prop("checked"))
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/InvoiceDebitFooter_EGL.jpg" alt="footer"/></div>';
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            //else
                            //    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF if (pDefaults.UnEditableCompanyName == "EGL")
                        else if (pDefaults.UnEditableCompanyName == "ABC") {
                            if (pInvoiceHeader.InvoiceTypeName.split(' ')[0].toUpperCase() == "FREIGHT"
                                //&& pOperationHeader.TransportType == AirTransportType
                            ) {

                                var ReportHTML = '';
                                //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                                //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                                ReportHTML += '<html>';
                                ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                                ReportHTML += '         <body style="background-color:white;">';
                                ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                                //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1] + '</h3></div>';

                                ReportHTML += '                 <div class="col-xs-4 m-l" style="text-align:center; border: 1px solid #000;border-radius:15px;">';
                                ReportHTML += '                     <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                                ReportHTML += '                     ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                                ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                                ReportHTML += '                 </div>';
                                ReportHTML += '                 <div class="col-xs-4">';
                                ReportHTML += '                 </div>';
                                ReportHTML += '                 <div class="col-xs-3">';
                                ReportHTML += '                     <table class=" b-t b-light text-sm table-bordered" style="width:100%; border:1px solid #000;">';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">Tax No</td>';
                                ReportHTML += '                             <td style="text-align:center;">' + pDefaults.TaxNumber + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">No</td>';
                                ReportHTML += '                             <td style="text-align:center;">' + pInvoiceTypeCode + ' ' + pInvoiceHeader.InvoiceNumber + '-' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">Inv.Date</td>';
                                ReportHTML += '                             <td style="text-align:center;">' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">Due Date</td>';
                                ReportHTML += '                             <td style="text-align:center;">' + (Date.prototype.compareDates("01/01/1900", pInvoiceHeader.DueDate) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.DueDate))) + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                     </table>';
                                ReportHTML += '                 </div>';

                                ReportHTML += '                 <div class="col-xs-12" style="clear:both;"><br></div>';

                                ReportHTML += '                 <div class="col-xs-4">';
                                ReportHTML += '                     <table class="b-t b-light text-sm table-bordered" style="clear:both; width:100%; border:1px solid #000;">';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">' + (pOperationHeader.TransportType == AirTransportType ? 'MAWB' : 'MBL') + '</td>';
                                ReportHTML += '                             <td style="text-align:center;">' + pMasterBL + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">' + (pOperationHeader.TransportType == AirTransportType ? 'HAWB' : 'HBL') + '</td>';
                                ReportHTML += '                             <td style="text-align:center;">' + pHouseNumber + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">GRS-W</td>';
                                ReportHTML += '                             <td style="text-align:center;">' + pGrossWeightSum + ' KGM' + '</td>';
                                ReportHTML += '                         </tr>';
                                //if (pOperationHeader.TransportType == AirTransportType) {
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">CHG-W</td>';
                                ReportHTML += '                             <td style="text-align:center;">' + (pOperationHeader.ChargeableWeight == 0 ? "" : (pOperationHeader.ChargeableWeight + ' KGM')) + '</td>';
                                ReportHTML += '                         </tr>';
                                //}
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">PCS</td>';
                                ReportHTML += '                             <td style="text-align:center;">'
                                    + (pOperationHeader.NumberOfPackages == 0
                                        ? (pOperationHeader.PackageTypes == 0
                                            ? (pOperationHeader.PackageTypesOnContainersTotals)
                                            : pOperationHeader.PackageTypes)
                                        : pOperationHeader.NumberOfPackages) + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">Road No</td>';
                                ReportHTML += '                             <td style="text-align:center;">' + (pMainRoute.RoadNumber == 0 ? "" : pMainRoute.RoadNumber) + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                     </table>';
                                ReportHTML += '                 </div>';


                                ReportHTML += '                 <div class="col-xs-5">';
                                ReportHTML += '                     <table class="b-t b-light text-sm table-bordered" style="clear:both; width:100%; border:1px solid #000;">';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">SHPR</td >';
                                ReportHTML += '                             <td style="text-align:center;">' + pShipperName + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">CNEE</td>';
                                ReportHTML += '                             <td style="text-align:center;">' + pConsigneeName + '</td>';
                                ReportHTML += '                         </tr>'
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">AGENT</td>';
                                ReportHTML += '                             <td style="text-align:center;">' + (pOperationHeader.AgentName == 0 ? "N/A" : pOperationHeader.AgentName) + '</td>';
                                ReportHTML += '                         </tr>'
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <td style="text-align:center;">ROUTE</td>';
                                ReportHTML += '                             <td style="text-align:center;">' + (pOperationHeader.POLCode + " --> " + pOperationHeader.PODCode) + '</td>';
                                ReportHTML += '                         </tr>'
                                ReportHTML += '                     </table>';
                                ReportHTML += '                 </div>';
                                ReportHTML += '                 <div class="col-xs-3">';
                                ReportHTML += '                 </div>';
                                ReportHTML += '             </div>';


                                ReportHTML += '             <div style="clear:both;"><br></div>';

                                ReportHTML += '                     <div class="col-xs-12 clear">';
                                ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                                 <tr>';
                                ReportHTML += '                                     <th>Details</th>';
                                ReportHTML += '                                     <th style="width:15%;">' + pInvoiceHeader.CurrencyCode + '</th>';
                                ReportHTML += '                                 </tr>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                $.each(JSON.parse(data[2]), function (i, item) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                    ReportHTML += '                                         <td style="text-align:right;">' + item.SaleAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                    ReportHTML += '                                     </tr>';
                                });
                                if (pInvoiceHeader.FixedDiscount > 0) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                    ReportHTML += '                                         <td style="text-align:right;">' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                    ReportHTML += '                                     </tr>';
                                }
                                ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=1>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                ReportHTML += '                                             <td style="text-align:left;" colspan=1>' + '<b>TOTAL ' + '</b></td>';
                                ReportHTML += '                                             <td style="text-align:right;"><b>' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></td>';
                                ReportHTML += '                                         </tr>';
                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>'

                                //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                                //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                                //ReportHTML += '                         </div>';
                                //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                                //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                                ReportHTML += '                         <div class="col-xs-8 m-t-n">';
                                if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                    ReportHTML += '                             <b>ONLY: ' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' </b>' + pInvoiceHeader.CurrencyCode + '</br></br>';
                                    ReportHTML += '                             <b><u>Accounts:</u></b></br>';
                                    ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                    ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                    ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                    ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                    ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                                }
                                else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                    ReportHTML += '                             <b><u>Accounts:</u></b></br>';
                                    ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                                }
                                else {
                                    ReportHTML += '</br>';
                                }
                                ReportHTML += '                         </div>';
                                ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                                //ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                                if (pTaxAmount != 0)
                                    ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                                if (pDiscountAmount != 0)
                                    ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                if (pTaxAmount != 0 || pDiscountAmount != 0)
                                    ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></br>';
                                ReportHTML += '                         </div>';
                                //ReportHTML += '                     </div>'; //of table-responsive
                                //ReportHTML += '                 </section>';
                                //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                                ReportHTML += '         </body>';

                                ReportHTML += '     <footer class="footer col-xs-12 ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '" style="width:100%; position:absolute; bottom:0;">';
                                //ReportHTML += '         <div class="row">'

                                //ReportHTML += '         <div class="row text-right m-r m-t-sm">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                                //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';

                                //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                                //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                                ReportHTML += '     </footer>';
                                ReportHTML += '</html>';
                                if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                    pFinalReportHTML += ReportHTML;
                                    Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                                }
                                else {
                                    pFinalReportHTML += ReportHTML;
                                    pFinalReportHTML += ' <div class="break"></div>';
                                }
                            } //if (pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split(' ')[0].toUpperCase() == "FREIGHT"
                            //&& pOperationHeader.TransportType == 2/*Air*/) {
                            else {

                                var ReportHTML = '';
                                //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                                //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                                ReportHTML += '<html>';
                                ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                                ReportHTML += '         <body style="background-color:white;">';
                                ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                                //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1] + '</h3></div>';

                                ReportHTML += '                 <div class="col-xs-4 m-l" style="text-align:center; border: 1px solid #000;border-radius:15px;">';
                                ReportHTML += '                     <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                                ReportHTML += '                     ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                                ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                                ReportHTML += '                 </div>';
                                ReportHTML += '                 <div class="col-xs-4">';
                                ReportHTML += '                 </div>';
                                ReportHTML += '                 <div class="col-xs-3">';
                                ReportHTML += '                     <table class=" b-t b-light text-sm table-bordered" style="width:100%; border:1px solid #000;">';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">Tax No</th>';
                                ReportHTML += '                             <td style="text-align:center;">' + pDefaults.TaxNumber + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">No</th>';
                                ReportHTML += '                             <td style="text-align:center;">' + pInvoiceTypeCode + ' ' + pInvoiceHeader.InvoiceNumber + '-' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">Inv.Date</th>';
                                ReportHTML += '                             <td style="text-align:center;">' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">Due Date</th>';
                                ReportHTML += '                             <td style="text-align:center;">' + (Date.prototype.compareDates("01/01/1900", pInvoiceHeader.DueDate) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.DueDate))) + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                     </table>';
                                ReportHTML += '                 </div>';

                                ReportHTML += '                 <div class="col-xs-12" style="clear:both;"><br></div>';

                                ReportHTML += '                 <div class="col-xs-4">';
                                ReportHTML += '                     <table class="b-t b-light text-sm table-bordered" style="clear:both; width:100%; border:1px solid #000;">';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">' + (pOperationHeader.TransportType == AirTransportType ? 'MAWB' : 'MBL') + '</th>';
                                ReportHTML += '                             <td style="text-align:center;">' + pMasterBL + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">' + (pOperationHeader.TransportType == AirTransportType ? 'HAWB' : 'HBL') + '</th>';
                                ReportHTML += '                             <td style="text-align:center;">' + pHouseNumber + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">SHPR</th>';
                                ReportHTML += '                             <td style="text-align:center;">' + pShipperName + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">CNEE</th>';
                                ReportHTML += '                             <td style="text-align:center;">' + pConsigneeName + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                     </table>';
                                if (pInvoiceHeader.InvoiceTypeName.split(' ')[0].toUpperCase() != "DELIVERY") {
                                    ReportHTML += '                     <table class="b-t b-light text-sm table-bordered m-t" style="clear:both; width:100%; border:1px solid #000;">';
                                    ReportHTML += '                         <tr>';
                                    ReportHTML += '                             <th style="text-align:center; width:30%;">Certificate#</th>';
                                    ReportHTML += '                             <td style="text-align:center;">' + (pInvoiceHeader.CertificateNumber == 0 ? "" : pInvoiceHeader.CertificateNumber) + '</td>';
                                    ReportHTML += '                         </tr>';
                                    ReportHTML += '                     </table>';
                                }
                                ReportHTML += '                 </div>';


                                ReportHTML += '                 <div class="col-xs-4">';
                                ReportHTML += '                     <table class="b-t b-light text-sm table-bordered" style="clear:both; width:100%; border:1px solid #000;">';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">WGT</th>';
                                ReportHTML += '                             <td style="text-align:center;">' + pGrossWeightSum + ' KGM' + '</td>';
                                ReportHTML += '                         </tr>';
                                if (pOperationHeader.TransportType == AirTransportType) {
                                    ReportHTML += '                         <tr>';
                                    ReportHTML += '                             <th style="text-align:center;">CHG-W</th>';
                                    ReportHTML += '                             <td style="text-align:center;">' + (pOperationHeader.ChargeableWeight == 0 ? "" : (pOperationHeader.ChargeableWeight + ' KGM')) + '</td>';
                                    ReportHTML += '                         </tr>';
                                }
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">PCS</th>';
                                ReportHTML += '                             <td style="text-align:center;">'
                                    + (pOperationHeader.NumberOfPackages == 0
                                        ? (pOperationHeader.PackageTypes == 0
                                            ? (pOperationHeader.PackageTypesOnContainersTotals)
                                            : pOperationHeader.PackageTypes)
                                        : pOperationHeader.NumberOfPackages) + '</td>';
                                ReportHTML += '                         </tr>';
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">BRAND</th>';
                                ReportHTML += '                             <td style="text-align:center;">' + pShipperName + '</td>';
                                ReportHTML += '                         </tr>'
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">SHPR INV</th>';
                                ReportHTML += '                             <td style="text-align:center;">' + (pOperationHeader.CustomerReference == 0 ? "" : pOperationHeader.CustomerReference) + '</td>';
                                ReportHTML += '                         </tr>'
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">COMMD.</th>';
                                ReportHTML += '                             <td style="text-align:center;">' + (pOperationHeader.CommodityName == 0 ? "" : pOperationHeader.CommodityName) + '</td>';
                                ReportHTML += '                         </tr>'
                                ReportHTML += '                         <tr>';
                                ReportHTML += '                             <th style="text-align:center;">CUST PYNT</th>';
                                ReportHTML += '                             <td style="text-align:center;">' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</td>';
                                ReportHTML += '                         </tr>'
                                ReportHTML += '                     </table>';
                                ReportHTML += '                 </div>';

                                ReportHTML += '                 <div class="col-xs-3">';
                                if (pInvoiceHeader.InvoiceTypeName.split(' ')[0].toUpperCase() != "DELIVERY") { //in case of delivery invoice dont add location table
                                    ReportHTML += '                     <table class="b-t b-light text-sm table-bordered m-l" style="clear:both; width:100%; border:1px solid #000;">';
                                    ReportHTML += '                         <tr>';
                                    //ReportHTML += '                             <th rowspan=6 style="text-align:center;">LOCATION</th>';
                                    ReportHTML += '                             <th style="text-align:center; width:25%;">LOCATION</th>';
                                    //if (pOperationHeader.BLType == constHouseBLType)
                                    //    ReportHTML += '                             <td class="" style="text-align:center;">' + (pMasterOperationHeader.Notes == 0 ? "" : pMasterOperationHeader.Notes) + '</td>';
                                    //else
                                    ReportHTML += '                             <td class="" style="text-align:center;">' + (pOperationHeader.Notes == 0 ? "" : pOperationHeader.Notes) + '</td>';
                                    ReportHTML += '                         </tr>';
                                    ReportHTML += '                     </table>';
                                }
                                ReportHTML += '                 </div>';

                                ReportHTML += '             <div style="clear:both;"><br></div>';

                                ReportHTML += '                     <div class="col-xs-12 clear">';
                                ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                                 <tr>';
                                ReportHTML += '                                     <th>Details</th>';
                                ReportHTML += '                                     <th style="width:15%;">' + pInvoiceHeader.CurrencyCode + '</th>';
                                ReportHTML += '                                 </tr>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                $.each(JSON.parse(data[2]), function (i, item) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                    ReportHTML += '                                         <td style="text-align:right;">' + item.SaleAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                    ReportHTML += '                                     </tr>';
                                });
                                ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=1>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                ReportHTML += '                                             <td style="text-align:left;" colspan=1>' + '<b>TOTAL ' + '</b></td>';
                                ReportHTML += '                                             <td style="text-align:right;"><b>' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></td>';
                                ReportHTML += '                                         </tr>';
                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>'

                                //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                                //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                                //ReportHTML += '                         </div>';
                                //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                                //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                                ReportHTML += '                         <div class="col-xs-8 m-t-n">';
                                if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                    ReportHTML += '                             <b>ONLY: ' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' </b>' + pInvoiceHeader.CurrencyCode + '</br></br>';
                                    ReportHTML += '                             <b><u>Accounts:</u></b></br>';
                                    ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                    ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                    ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                    ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                    ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                                }
                                else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                    ReportHTML += '                             <b><u>Accounts:</u></b></br>';
                                    ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                                }
                                else {
                                    ReportHTML += '</br>';
                                }
                                ReportHTML += '                         </div>';
                                ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                                //ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                                if (pTaxAmount != 0)
                                    ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                                if (pDiscountAmount != 0)
                                    ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></br>';
                                ReportHTML += '                         </div>';
                                //ReportHTML += '                     </div>'; //of table-responsive
                                //ReportHTML += '                 </section>';
                                //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                                ReportHTML += '         </body>';

                                ReportHTML += '     <footer class="footer col-xs-12 ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '" style="width:100%; position:absolute; bottom:0;">';
                                //ReportHTML += '         <div class="row">'

                                //ReportHTML += '         <div class="row text-right m-r m-t-sm">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                                //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';

                                //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                                //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                                ReportHTML += '     </footer>';
                                ReportHTML += '</html>';
                                if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                    pFinalReportHTML += ReportHTML;
                                    Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                                }
                                else {
                                    pFinalReportHTML += ReportHTML;
                                    pFinalReportHTML += ' <div class="break"></div>';
                                }
                            }
                        } //else if (pDefaults.UnEditableCompanyName == "ABC") {
                        else if (pDefaults.UnEditableCompanyName == "ARK") {
                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1] + '</h3></div>';
                            if (pInvoiceHeader.InvoiceTypeName == "DEBIT NOTE")
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + ' كشف حساب    ' + '</h3></div>';

                            ReportHTML += '                 <div class="col-xs-8">';
                            ReportHTML += '                     <b>' + $("#hDefaultCompanyName").val() + '</b><br>';
                            if (pInvoiceHeader.InvoiceTypeName != "DEBIT NOTE") {
                                ReportHTML += '                     ' + (pAddressLine1 == "" ? "" : (pAddressLine1 + '<br>'));
                                ReportHTML += '                     ' + (pAddressLine2 == "" ? "" : (pAddressLine2 + '<br>'));
                                ReportHTML += '                     ' + (pAddressLine3 == "" ? "" : (pAddressLine3) + '<br>');
                                ReportHTML += '                     ' + (pPhones == "" ? "" : ('TEL:' + pPhones) + '<br>');
                                ReportHTML += '                     ' + (pFaxes == "" ? "" : ('Fax:' + pFaxes)) + '<br><br><br>';
                            }
                            ReportHTML += '                 </div>';

                            ReportHTML += '                 <div class="col-xs-4 m-l-n">';
                            //ReportHTML += '                     <b>Date : </b>' + getTodaysDateInddMMyyyyFormat() + '<br>';
                            ReportHTML += '                     <b>Date : </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                            //ReportHTML += '                     <b>Invoice No : </b>' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(3, 2) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '/' + /*pInvoiceNumber*/ConcatenatedInvoiceNumber + '<br>';
                            ReportHTML += '                     <b>No : </b>' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '<br>';
                            ReportHTML += '                     <b>Payment Due by : </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '                 <b>Operation : </b>' + pMasterOperationCode;
                            else
                                ReportHTML += '                     <b>Operation : </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '<br>';
                            ReportHTML += '                     <b>Currency : </b>' + pInvoiceHeader.CurrencyCode + '<br>';
                            if (pInvoiceHeader.InvoiceTypeName.split(' ')[0] == "INVOICE") {
                                ReportHTML += '                     <b>Tax No. : </b>' + (pDefaults.TaxNumber == 0 ? "" : pDefaults.TaxNumber) + '<br>';
                                ReportHTML += '                     <b>VAT ID No. : </b>' + (pDefaults.VatIDNo == 0 ? "" : pDefaults.VatIDNo) + '';
                            }
                            ReportHTML += '                 </div>';
                            //ReportHTML += '             </div>';
                            ReportHTML += '             <table class="col-xs-8 m-l m-t-n-lg b-t b-light text-sm table-bordered" style="clear:both; text-align:left; width:auto; border:solid #000;">';
                            ReportHTML += '                 <td>';
                            ReportHTML += '                     <b>Bill To: </b><br>';
                            ReportHTML += '                     <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                            ReportHTML += '                     ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                            ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '                 </td>';
                            ReportHTML += '             </table>';

                            ReportHTML += '             <div style="clear:both;"><br></div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + (pMasterBL == "" ? (pMainRoute.Notes == 0 ? "" : pMainRoute.Notes) : pMasterBL) + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else if (pHouseNumber != "0")
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            if (pContainerTypes != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pContainerTypes == 0 ? "N/A" : pContainerTypes) + '</div>';
                            else if (pPackageTypes != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pPackageTypes == 0 ? "N/A" : pPackageTypes) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Customer Ref. : </b>' + (pOperationHeader.CustomerReference == 0 ? "" : pOperationHeader.CustomerReference) + '</div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Quantity</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Sale Price</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + ($("#cbAddNotesToItems").prop("checked") ? (item.Notes == 0 || item.Notes == "" ? "" : '-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                         </tr>';

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'
                            //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                            //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                            //ReportHTML += '                         </div>';
                            //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                            //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="col-xs-12 m-t-n"></div>';
                            ReportHTML += '                         <div class="col-xs-6">';
                            //if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                            //    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                            //    ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                            //    ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                            //    ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                            //    ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                            //    ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            //}
                            //else
                            if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else {
                                ReportHTML += '</br>';
                            }
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-6 text-right">';
                            if (pTaxAmount != 0 || pDiscountAmount != 0) {
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                                if (pTaxAmount != 0)
                                    ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                                //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                                if (pDiscountAmount != 0)
                                    ReportHTML += '                             <b>Deduction Tax(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                            }
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            ReportHTML += '                         </div>';
                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '         </body>';

                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            if ($("#cbPrintStamp").prop("checked"))
                                ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            if (pInvoiceHeader.InvoiceTypeName.split(' ')[0] == "INVOICE") {
                                ReportHTML += '         <div class="row text-right m-r m-t-sm">' + '  لا تعتبر الفاتورة مسددة الا بإيصال رسمي مختوم من الشركة  ' + '</div>';
                                ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض علي أي بند من بنود الفاتورة من خلال 14 يوما فقط من تاريخ الاستلام وفقاً للقانون  ' + '</div>';
                            }
                            if (pInvoiceHeader.InvoiceTypeName == "DEBIT NOTE") {
                                ReportHTML += '         <div class="row text-right m-r m-t-sm">' + '  البنود أعلاه تمثل رسوم تم سدادها بالنيابة عنكم أمام الجهات المختصة وليست خدمات أو أعمال مقدمة منا  ' + '</div>';
                                ReportHTML += '         <div class="row text-right m-r">' + '  لا يعتبر كشف الحساب مسددة الا بإيصال رسمي مختوم من الشركة   ' + '</div>';
                                ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض علي أي بند من بنود كشف الحساب خلال 14 يوما فقط من تاريخ الاستلام وفقاً للقانون   ' + '</div>';
                            }
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //else if (pDefaults.UnEditableCompanyName != "ARK") {
                        else if (pDefaults.UnEditableCompanyName == "CQL") {

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            if (!$("#cbPrintHeaderInvoice").prop("checked"))
                                ReportHTML += '                 <div class="col-xs-12 text-center">&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1] + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-8">';
                            ReportHTML += '                     <b>' + $("#hDefaultCompanyName").val() + '</b><br>';
                            ReportHTML += '                     ' + (pAddressLine1 == "" ? "" : (pAddressLine1 + '<br>'));
                            ReportHTML += '                     ' + (pAddressLine2 == "" ? "" : (pAddressLine2 + '<br>'));
                            ReportHTML += '                     ' + (pAddressLine3 == "" ? "" : (pAddressLine3) + '<br>');
                            ReportHTML += '                     ' + (pPhones == "" ? "" : ('TEL:' + pPhones) + '<br>');
                            ReportHTML += '                     ' + (pFaxes == "" ? "" : ('Fax:' + pFaxes)) + '<br><br><br>';
                            ReportHTML += '                 </div>';

                            ReportHTML += '                 <div class="col-xs-4 m-l-n">';
                            //ReportHTML += '                     <b>Date : </b>' + getTodaysDateInddMMyyyyFormat() + '<br>';
                            ReportHTML += '                     <b>Date : </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                            //ReportHTML += '                     <b>Invoice No : </b>' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(3, 2) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '/' + /*pInvoiceNumber*/ConcatenatedInvoiceNumber + '<br>';
                            ReportHTML += '                     <b>No : </b>' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '<br>';
                            ReportHTML += '                     <b>Payment Due by : </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            ReportHTML += '                     <b>Reference No. : </b>' + (pCustomerReference == 0 ? "N/A" : pCustomerReference) + '<br>';
                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '                 <b>Operation : </b>' + pMasterOperationCode;
                            else
                                ReportHTML += '                     <b>Operation : </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '<br>';
                            ReportHTML += '                     <b>Currency : </b>' + pInvoiceHeader.CurrencyCode + '<br>';
                            ReportHTML += '                     <b>Salesman : </b>' + pSalesman + '<br><br>';
                            ReportHTML += '                 </div>';
                            //ReportHTML += '             </div>';
                            ReportHTML += '             <table class="col-xs-8 m-l m-t-n-lg b-t b-light text-sm table-bordered" style="text-align:left; width:auto; border:solid #000;">';
                            ReportHTML += '                 <td>';
                            ReportHTML += '                     <b>Bill To: </b><br>';
                            ReportHTML += '                     <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                            ReportHTML += '                     ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                            ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '                 </td>';
                            ReportHTML += '             </table>';

                            ReportHTML += '             <div style="clear:both;"><br></div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else if (pHouseNumber != "0")
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                            if (pContainerTypes != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pContainerTypes == 0 ? "N/A" : pContainerTypes) + '</div>';
                            else if (pPackageTypes != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pPackageTypes == 0 ? "N/A" : pPackageTypes) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Quantity</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Sale Price</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                         </tr>';

                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'
                            //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                            //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                            //ReportHTML += '                         </div>';
                            //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                            //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="col-xs-12 m-t-n"></div>';
                            ReportHTML += '                         <div class="col-xs-7">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else {
                                ReportHTML += '</br>';
                            }
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-5 text-right">';
                            if (pTaxAmount != 0 || pDiscountAmount != 0)
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            if (pTaxAmount != 0)
                                ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            if (pDiscountAmount != 0)
                                ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            ReportHTML += '                         </div>';
                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '         </body>';

                            ReportHTML += '     <footer class="footer col-xs-12 ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '" style="width:100%; position:absolute; bottom:0;">';
                            //ReportHTML += '         <div class="row">'
                            //ReportHTML += '             <div class="col-xs-8 m-l"><b><i>' + ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 1
                            //                                                                ? 'Import Manager'
                            //                                                                : ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 2 ? 'Export Manager' : 'Domestic Manager')
                            //                                                                ) + '</i></b></div>';
                            //ReportHTML += '             <div class="col-xs-4 m-t-n-md float-right"><b><i>Accountant Signature</i></b></div>';
                            //ReportHTML += '         </div>'
                            //ReportHTML += '         <div class="row text-right m-r m-t-sm">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF if (pDefaults.UnEditableCompanyName == "CQL")
                        else if (pDefaults.UnEditableCompanyName == "NAV") {

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';
                            //ReportHTML += '                 <div class="col-xs-8">';
                            //ReportHTML += '                     <table class="col-xs-12 b-t b-light text-sm table-bordered" style="text-align:left; width:auto; border:solid #000;">';
                            //ReportHTML += '                         <td>';
                            //ReportHTML += '                             <b>Bill To: </b><br>';
                            //ReportHTML += '                             <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                            ////ReportHTML += '                             ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ////ReportHTML += '                             ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                            ////ReportHTML += '                             ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ////ReportHTML += '                             ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            //ReportHTML += '                         </td>';
                            //ReportHTML += '                     </table>';

                            //ReportHTML += '                 </div>';


                            //ReportHTML += '                 <div class="col-xs-4 m-l-n">';
                            ////ReportHTML += '                     <b>Date : </b>' + getTodaysDateInddMMyyyyFormat() + '<br>';
                            //ReportHTML += '                     <b>InvoiceDate : </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                            //ReportHTML += '                     <b>Payment Date : </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            ////ReportHTML += '                     <b>No : </b>' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '<br>';
                            ////ReportHTML += '                     <b>Payment Due by : </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            //ReportHTML += '                     <b>Reference No. : </b>' + (pCustomerReference == 0 ? "N/A" : pCustomerReference) + '<br>';
                            //ReportHTML += '                     <b>Operation : </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '<br>';
                            //if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                            //    ReportHTML += '                 <b>Master Operation : </b>' + pMasterOperationCode;
                            //ReportHTML += '                     <b>Currency : </b>' + pInvoiceHeader.CurrencyCode + '<br>';
                            ////ReportHTML += '                     <b>Salesman : </b>' + pSalesman + '<br><br>';
                            //ReportHTML += '                 </div>';
                            ////ReportHTML += '             </div>';

                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement-NAV.jpg' + '" alt="logo"/></div>';
                            //ReportHTML += '         <div class="col-xs-11 m-l-n-lg">';
                            ReportHTML += '         <div class="col-xs-12">';
                            ReportHTML += '             <div class="col-xs-6"><b>Bill to: </b>' + pInvoiceHeader.PartnerName + '</div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Inv.Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Pay.Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Address: </b>';
                            ReportHTML += '                 ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                 ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            ReportHTML += '                 ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                 ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Reference No.: </b>' + (pCustomerReference == 0 ? "N/A" : pCustomerReference) + '</div>';
                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + pMasterOperationCode + '</div>';
                            else
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Currency: </b>' + pInvoiceHeader.CurrencyCode + '</div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" || pHouseNumber == "0" ? "" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>ETD POL: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ExpectedDeparture)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ExpectedDeparture))) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>ETA POD: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ExpectedArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ExpectedArrival))) + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>PO Number: </b>' + (pOperationHeader.PONumber == 0 ? "" : pOperationHeader.PONumber) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Line: </b>' + (pOperationHeader.LineName == 0 ? "" : pOperationHeader.LineName) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Voy/Truck No: </b>' + (pOperationHeader.VoyageOrTruckNumber == 0 ? "" : pOperationHeader.VoyageOrTruckNumber) + '</div>';
                            if (pOperationHeader.TransportType == OceanTransportType) {
                                ReportHTML += '             <div class="col-xs-6"><b>Vessel: </b>' + pVesselName + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Arrival Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival))) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Containers: </b>' + (pOperationHeader.ShipmentType == 0 || pOperationHeader.ShipmentType == 2 || pOperationHeader.ShipmentType == 4 ? "LCL" : pContainerTypes) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Container Numbers: </b>' + pContainerNumbers + '</div>';
                            }
                            if (pOperationHeader.PackageTypes != 0 || pOperationHeader.PackageTypesOnContainersTotals != 0 || pOperationHeader.PlacedOnOperationContainersAndPackagesID != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes) + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KGM' + '</div>';
                            if (pOperationHeader.CertificateNumber != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Certificate No: </b>' + (pOperationHeader.CertificateNumber == 0 ? "" : pOperationHeader.CertificateNumber) + '</div>';
                            //(Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival)))
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>S</th>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Price</th>';
                            ReportHTML += '                                     <th>Currency</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            debugger;
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + (i + 1) + '</td>';
                                ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                ReportHTML += '                                         <td>' + item.CurrencyCode + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                            //ReportHTML += '                                         </tr>';
                            //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'

                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="col-xs-12 m-t-n"></div>';
                            ReportHTML += '                         <div class="col-xs-8">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right">';
                            ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '             </div>'; //
                            ReportHTML += '         </body>';

                            //ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            //ReportHTML += '                     <div class="col-xs-3 m-t"><b>' + 'Accounting Manager' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-2 m-t text-center"><b>' + 'Auditing' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + 'Customer Service Supervisor' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Preparation' + '</b></div>';
                            //ReportHTML += '                 </div>'
                            //ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            //ReportHTML += '                     <div class="col-xs-3 m-t-sm"><b>' + '....................................' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-2 m-t-sm text-center"><b>' + '..................' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center"><b>' + '......................................................' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-3 m-t-sm text-center">' + $("#hLoggedUserNameNotLogin").val() + '</div>';
                            //ReportHTML += '                 </div>'

                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            if (pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split(' ')[0].toUpperCase() != "DEBIT") {
                                ReportHTML += '         <div class="row text-right m-r" style="font-size:85%;">' + '  شركة نافيجيتور ايجيبت للخدماث الملاحية - سجل تجاري رقم: 67992  -  سجل تجاري شرق – الاسكندرية - بطاقة ضريبية رقم: 328197459 - ملف ضريبي: 08-00-554-00040-5 -  مامورية ضرائب رمل ثان – الاسكندرية - تسجيل مبيعات: 328197459 -  ترخيص بمكتب تخليص جمركي: 5862/ 2002067 / 1  - بطاقة استيرادية: 49485  ' + '</div>';
                            }
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            ReportHTML += '         <div class="row text-center m-t ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            //else
                            //    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF if (pDefaults.UnEditableCompanyName == "NAV")
                        else if (pDefaults.UnEditableCompanyName == "NIL") {

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + (pInvoiceHeader.InvoiceTypeName == "DRAFT" ? "Proforma Invoice" : pInvoiceHeader.InvoiceTypeName) + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';

                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';
                            //ReportHTML += '         <div class="col-xs-11 m-l-n-lg">';
                            ReportHTML += '         <div class="col-xs-12">';
                            ReportHTML += '             <div class="col-xs-9"><b>Bill to: </b>' + pInvoiceHeader.PartnerName + '</div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Inv.Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-9"><b>Address: </b>';
                            ReportHTML += '                 ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                 ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            ReportHTML += '                 ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                 ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</div>';

                            ReportHTML += '             <div class="col-xs-12 b-b b-dark m-t-n-xs" style="clear:both;"></div>';

                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '             <div class="col-xs-6" style="clear:both;"><b>Operation: </b>' + pMasterOperationCode + '</div>';
                            else
                                ReportHTML += '             <div class="col-xs-6" style="clear:both;"><b>Operation: </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Service Scope: </b>' + (pOperationHeader.MoveTypeName == 0 ? "" : pOperationHeader.MoveTypeName) + '</div>';
                            //if ($("#cbPrintMBL").prop("checked"))
                            ReportHTML += '             <div class="col-xs-6"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'AWB' : 'MB/L No.') + ': </b>' + pMasterBL + '</div>';
                            //if ($("#cbPrintHBL").prop("checked")) {
                            //    if (pHouseBLs != "0")//Master Operation so show all houses on it
                            //        ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                            //    else
                            //        ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" || pHouseNumber == "0" ? "" : pHouseNumber) + '</div>';
                            //}
                            ReportHTML += '             <div class="col-xs-6"><b>Carrier: </b>' + (pOperationHeader.LineName == 0 ? "" : pOperationHeader.LineName) + '</div>';
                            ReportHTML += '             <div class="col-xs-6" style="clear:both"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Ref / PO No.: </b>' + (pOperationHeader.PONumber == 0 ? (pMasterOperationHeader == null || pMasterOperationHeader.PONumber == 0 ? "" : pMasterOperationHeader.PONumber) : pOperationHeader.PONumber) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pOperationHeader.GrossWeightSum + ' KG ' + (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.ContainerTypes == 0 ? "" : (" - " + pOperationHeader.ContainerTypes)) : (" - " + pOperationHeader.PackageTypes)) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Incoterm: </b>' + (pOperationHeader.IncotermName == 0 ? "" : pOperationHeader.IncotermName) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Volume: </b>' + (pOperationHeader.Volume == 0 ? (pOperationHeader.VolumeSum == 0 ? "" : pOperationHeader.VolumeSum) : pOperationHeader.Volume) + ' CBM' + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Currency: </b>' + pInvoiceHeader.CurrencyCode + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Commodity: </b>' + (pOperationHeader.CommodityName == 0 ? "" : pOperationHeader.CommodityName) + '</div>';

                            //if (pOperationHeader.TransportType == OceanTransportType) {
                            //    ReportHTML += '         <div class="col-xs-6"><b>Vessel: </b>' + pVesselName + '</div>';
                            //}
                            ////for inland shipping line is written in LeftSignature
                            //if (pOperationHeader.TransportType == InlandTransportType) {
                            //    ReportHTML += '         <div class="col-xs-6"><b>Shipping Line: </b>' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';
                            //}
                            //if (pOperationHeader.TransportType != AirTransportType) {
                            //    ReportHTML += '         <div class="col-xs-6"><b>Arrival Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival))) + '</div>';
                            //    ReportHTML += '         <div class="col-xs-6"><b>Containers: </b>' + (pOperationHeader.ShipmentType == 0 || pOperationHeader.ShipmentType == 2 || pOperationHeader.ShipmentType == 4 ? "LCL" : pContainerTypes) + '</div>';
                            //    ReportHTML += '         <div class="col-xs-6"><b>Container Numbers: </b>' + pContainerNumbers + '</div>';
                            //}
                            //if (pOperationHeader.PackageTypes != 0 || pOperationHeader.PackageTypesOnContainersTotals != 0 || pOperationHeader.PlacedOnOperationContainersAndPackagesID != 0)
                            //    ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes) + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            //if (pOperationHeader.CertificateNumber != 0)
                            //    ReportHTML += '         <div class="col-xs-6"><b>Certificate: </b>' + pOperationHeader.CertificateNumber + '</div>';


                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12" style="margin-top:250px;font-size:200%;">Please, see attachment for details.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="col-xs-12"></div>';

                            ReportHTML += '             <div class="col-xs-12 clear">';
                            ReportHTML += '                 <table id="tblReportInvoice" class="table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                     <thead>';
                            ReportHTML += '                         <tr>';
                            ReportHTML += '                             <th>No.</th>';
                            ReportHTML += '                             <th>Description</th>';
                            ReportHTML += '                             <th>Qty</th>';
                            ReportHTML += '                             <th>Unit Price</th>';
                            ReportHTML += '                             <th>Amount</th>';
                            ReportHTML += '                         </tr>';
                            ReportHTML += '                     </thead>';
                            ReportHTML += '                     <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                         <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                             <td style="width:5%;">' + (i + 1) + '</td>';
                                ReportHTML += '                             <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                             <td>' + item.Quantity + '</td>';
                                ReportHTML += '                             <td style="width:15%;">' + item.SalePrice.toFixed(2) + '</td>';
                                ReportHTML += '                             <td style="width:15%;">' + item.SaleAmount.toFixed(2) + '</td>';
                                ReportHTML += '                         </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            ReportHTML += '                                         <tr>';
                            ReportHTML += '                                             <td colspan=5 style="">' + '<b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'
                            //if ($("#cbLargeInvoice").prop("checked")) {
                            //    ReportHTML += '         <div class="col-xs-12">Please, see attachment.</div>';
                            //    ReportHTML += '         <div class="break"></div>';
                            //}
                            //else
                            //    ReportHTML += '                         <div class="col-xs-12"></div>';
                            ReportHTML += '                         <div class="col-xs-8 m-t-n">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                            if (pTaxAmount != 0 || pDiscountAmount != 0)
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            if (pTaxAmount != 0)
                                ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            if (pDiscountAmount != 0)
                                ReportHTML += '                             <b>WHT(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                            //ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';

                            ReportHTML += '             </div>';
                            ReportHTML += '         </body>';

                            //ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            //ReportHTML += '                     <div class="col-xs-3 m-t"><b>' + 'Accounting Manager' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-2 m-t text-center"><b>' + 'Auditing' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + 'Customer Service Supervisor' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Preparation' + '</b></div>';
                            //ReportHTML += '                 </div>'
                            //ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            //ReportHTML += '                     <div class="col-xs-3 m-t-sm"><b>' + '....................................' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-2 m-t-sm text-center"><b>' + '..................' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center"><b>' + '......................................................' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-3 m-t-sm text-center">' + $("#hLoggedUserNameNotLogin").val() + '</div>';
                            //ReportHTML += '                 </div>'

                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            if ($("#cbPrintFooterInvoice").prop("checked")) {
                                //ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/InvoiceFooter_NIL.jpg" alt="footer"/></div>';
                                ReportHTML += '         <div class="row text-center small">' + ' All financial transactions (payments / receipts / transfers) must be handled with only the company financial department and the company not responsible for any transactions that are otherwise.  ' + '</div>';
                                ReportHTML += '         <div class="row text-center small">' + '  جميع المعاملات المالية (المدفوعات/المقبوضات/التحويلات) يجب ان تتم مع الادارة المالية للشركة فقط ، والشركة ليست مسؤولة عن اى من المعاملات التى هى على خلاف ذلك	' + '</div>';

                                ReportHTML += '         <div class="row b-b b-dark m-t-n-xxs" style="clear:both;"></div>'; //This is line

                                ReportHTML += '         <div class="row text-center small">' + '  Nile Logistics International L.L.C	' + '</div>';
                                ReportHTML += '         <div class="row text-center small">' + '  Address : 4 Eltahrir st., Square 1130Sheraton HeliopolisCairo 11361-Egypt  ' + '</div>';
                                ReportHTML += '         <div class="row text-center small">' + '  Email : accounting@nilelogistics.com TEL:+202 2269 2714Fax:+202 2269 2719 ' + '</div>';
                            }
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            //else
                            //    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF if (pDefaults.UnEditableCompanyName == "NIL")
                        else if (pDefaults.UnEditableCompanyName == "DSE") {

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            ReportHTML += '                 <div class="col-xs-12 m-l-n">' + pAddressLine1 + ' ' + pAddressLine2 + ' ' + pAddressLine3 + '</div>';
                            ReportHTML += '                 <div class="col-xs-12 m-l-n">Tel:' + pPhones + ' &emsp;Fax: ' + pFaxes + '</div>';
                            //ReportHTML += '                 <div class="col-xs-12"><hr style="border-width: 1px;" /></div>';
                            ReportHTML += '                 <div style="width:98%;height:0.5px;border:0.5px solid #000;"></div>';

                            ReportHTML += '                 <div class="col-xs-12 text-center"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1] + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-5">';
                            ReportHTML += '                     <b>Bill To: ' + pInvoiceHeader.PartnerName + '</b><br>';
                            ReportHTML += '                     ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                            ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '                 </div>';

                            ReportHTML += '                 <div class="col-xs-2"></div>';

                            ReportHTML += '                 <div class="col-xs-5">';
                            //ReportHTML += '                     <b>Date : </b>' + getTodaysDateInddMMyyyyFormat() + '<br>';
                            ReportHTML += '                     <b>Date : </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                            //ReportHTML += '                     <b>Invoice No : </b>' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(3, 2) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '/' + /*pInvoiceNumber*/ConcatenatedInvoiceNumber + '<br>';
                            ReportHTML += '                     <b>No : </b>' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '<br>';
                            ReportHTML += '                     <b>Payment Due by : </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            ReportHTML += '                     <b>Operation : </b>' + (pOperationHeader.MasterOperationCode == 0 ? pOperationHeader.Code : pOperationHeader.MasterOperationCode) + '<br>';
                            //if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                            //    ReportHTML += '                 <b>Operation : </b>' + pMasterOperationCode;
                            //else
                            //    ReportHTML += '                     <b>Operation : </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '<br>';
                            ReportHTML += '                     <b>Currency : </b>' + pInvoiceHeader.CurrencyCode + '<br>' + '<br>';
                            ReportHTML += '                 </div>';
                            //ReportHTML += '             </div>';

                            ReportHTML += '             <div style="clear:both;"></div>';
                            ReportHTML += '             <div class="col-xs-7"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-5"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '             <div class="col-xs-7"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'ORGN' : 'POL') + ': </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-5"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'DEST' : 'POD') + ': </b>' + pPODName + '</div>';
                            var _NextSize = 7;
                            if ($("#cbPrintMBL").prop("checked")) {
                                ReportHTML += '             <div class="col-xs-' + _NextSize + '"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'MAWB' : 'MBL') + ': </b>' + (pMasterBL == "" ? (pMainRoute.Notes == 0 ? "" : pMainRoute.Notes) : pMasterBL) + '</div>';
                                _NextSize = 12 - _NextSize;
                            }
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-' + _NextSize + '"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'HAWB' : 'HBL') + ': </b>' + pHouseBLs + '</div>';
                                else if (pHouseNumber != "0")
                                    ReportHTML += '             <div class="col-xs-' + _NextSize + '"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'HAWB' : 'HBL') + ': </b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                                _NextSize = 12 - _NextSize;
                            }
                            ReportHTML += '             <div class="col-xs-' + _NextSize + '"><b>Gross Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            _NextSize = 12 - _NextSize;
                            ReportHTML += '             <div class="col-xs-' + _NextSize + '"><b>Net Weight: </b>' + pOperationHeader.NetWeightSum + ' KG</div>';
                            _NextSize = 12 - _NextSize;
                            if (pOperationHeader.TransportType == AirTransportType) {
                                ReportHTML += '             <div class="col-xs-' + _NextSize + '"><b>Chargeable Weight: </b>' + pOperationHeader.VolumeSum + ' KG</div>';
                                _NextSize = 12 - _NextSize;
                            }
                            if (pContainerTypes != 0) {
                                ReportHTML += '         <div class="col-xs-' + _NextSize + '"><b>Volume: </b>' + (pContainerTypes == 0 ? "N/A" : pContainerTypes) + '</div>';
                                _NextSize = 12 - _NextSize;
                            }
                            else if (pPackageTypes != 0) {
                                ReportHTML += '         <div class="col-xs-' + _NextSize + '"><b>Volume: </b>' + (pPackageTypes == 0 ? "N/A" : pPackageTypes) + '</div>';
                                _NextSize = 12 - _NextSize;
                            }
                            if (pOperationHeader.TransportType == OceanTransportType) {
                                ReportHTML += '             <div class="col-xs-' + _NextSize + '"><b>Vessel-Voy: </b>' + (pOperationHeader.VesselName == 0 ? "" : pOperationHeader.VesselName) + (pOperationHeader.VoyageOrTruckNumber == 0 ? "" : (" - " + pOperationHeader.VoyageOrTruckNumber)) + '</div>';
                                _NextSize = 12 - _NextSize;
                            }
                            ReportHTML += '             <div class="col-xs-' + _NextSize + '"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            _NextSize = 12 - _NextSize;
                            ReportHTML += '             <div class="col-xs-' + _NextSize + '"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            _NextSize = 12 - _NextSize;
                            ReportHTML += '             <div class="col-xs-' + _NextSize + '"><b>PO Number: </b>' + (pOperationHeader.PONumber == 0 ? "" : pOperationHeader.PONumber) + '</div>';
                            _NextSize = 12 - _NextSize;
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th style="width:15%;">Quantity</th>';
                            ReportHTML += '                                     <th style="width:15%;">Unit Price</th>';
                            ReportHTML += '                                     <th style="width:15%;">Sale Price</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            if (pTaxAmount != 0 || pDiscountAmount != 0) {
                                ReportHTML += '                                         <tr>';
                                ReportHTML += '                                             <td>' + '<b>Subtotal : ' + '</b></td>';
                                ReportHTML += '                                             <td></td>';
                                ReportHTML += '                                             <td></td>';
                                ReportHTML += '                                             <td><b>' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></td>';
                                ReportHTML += '                                         </tr>';
                            }
                            if (pTaxAmount != 0) {
                                ReportHTML += '                                         <tr>';
                                ReportHTML += '                                             <td>' + '<b>VAT(' + pInvoiceHeader.TaxPercentage + '%) : ' + '</b></td>';
                                ReportHTML += '                                             <td></td>';
                                ReportHTML += '                                             <td></td>';
                                ReportHTML += '                                             <td><b>' + pTaxAmount + '</b></td>';
                                ReportHTML += '                                         </tr>';
                            }
                            if (pDiscountAmount != 0) {
                                ReportHTML += '                                         <tr>';
                                ReportHTML += '                                             <td>' + '<b>Discount(' + pInvoiceHeader.DiscountPercentage + '%) : ' + '</b></td>';
                                ReportHTML += '                                             <td></td>';
                                ReportHTML += '                                             <td></td>';
                                ReportHTML += '                                             <td><b>' + pDiscountAmount + '</b></td>';
                                ReportHTML += '                                         </tr>';
                            }

                            ReportHTML += '                                         <tr>';
                            ReportHTML += '                                             <td>' + '<b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            ReportHTML += '                                             <td></td>';
                            ReportHTML += '                                             <td></td>';
                            ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            ReportHTML += '                                         </tr>';

                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'
                            //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                            //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                            //ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-9"></div>';
                            ReportHTML += '                         <div class="text-center col-xs-3"><b><i>Prepared By ,</i></b></div>';
                            ReportHTML += '                         <div class="col-xs-9"></div>';
                            ReportHTML += '                         <div class="text-center col-xs-3"><b><i>' + $("#hLoggedUserNameNotLogin").val() + '</i></b></div>';

                            //ReportHTML += '                         <div class="col-xs-12 m-t-n">';
                            //if (pTaxAmount != 0 || pDiscountAmount != 0)
                            //    ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            ////ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            //if (pTaxAmount != 0)
                            //    ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount + '</br>';
                            ////ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            //if (pDiscountAmount != 0)
                            //    ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount + '</br>';
                            //ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + pInvoiceHeader.Amount + '</b></br>';
                            //ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            //ReportHTML += '                         </div>';
                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '         </body>';

                            ReportHTML += '     <footer class="footer col-xs-12 m-t" style="width:100%; position:absolute; bottom:0;">';
                            //ReportHTML += '         <div class="row">'
                            //ReportHTML += '             <div class="col-xs-8 m-l"><b><i>' + ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 1
                            //                                                                ? 'Import Manager'
                            //                                                                : ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 2 ? 'Export Manager' : 'Domestic Manager')
                            //                                                                ) + '</i></b></div>';
                            //ReportHTML += '             <div class="col-xs-4 m-t-n-md float-right"><b><i>Accountant Signature</i></b></div>';
                            //ReportHTML += '         </div>'
                            // ReportHTML += '         <div class="row text-right m-r m-t-sm">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                            // ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  الشركة تخضع لنظام الدفعات المقدمه طبقاً لقانون الضريبة على الدخل  ' + '</div>';
                            if ($("#cbPrintFooterInvoice").prop("checked"))
                                ReportHTML += '         <div class="row text-center m-t-lg"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //else if (pDefaults.UnEditableCompanyName == "DSE") {
                        else if (pDefaults.UnEditableCompanyName == "SGA") {

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1]
                                + " No. "
                                + (pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split(' ')[0].toUpperCase() == "DEBIT" ? "D" : "")
                                + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4)
                                + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12">';
                            ReportHTML += '                     <b>' + $("#hDefaultCompanyName").val() + '</b><br>';
                            ReportHTML += '                     <b>Date : </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                            //ReportHTML += '                     <b>Invoice No : </b>' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(3, 2) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '/' + /*pInvoiceNumber*/ConcatenatedInvoiceNumber + '<br>';
                            ReportHTML += '                     <b>Payment Due by : </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '                 <b>Operation : </b>' + pMasterOperationCode;
                            else
                                ReportHTML += '                     <b>Operation : </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '<br>';
                            ReportHTML += '                     <b>Currency : </b>' + pInvoiceHeader.CurrencyCode + '<br>';
                            ReportHTML += '                     <b>Salesman : </b>' + pSalesman + '<br><br>';
                            ReportHTML += '                 </div>';
                            //ReportHTML += '             </div>';
                            ReportHTML += '             <table class="col-xs-8 m-l m-t-n b-t b-light text-sm table-bordered" style="text-align:left; width:auto; border:solid #000;">';
                            ReportHTML += '                 <td>';
                            ReportHTML += '                     <b>Bill To: </b><br>';
                            ReportHTML += '                     <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                            ReportHTML += '                     ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                            ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '                 </td>';
                            ReportHTML += '             </table>';

                            ReportHTML += '             <div class="m-t-xs" style="clear:both;"></div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else if (pHouseNumber != "0")
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Volume: </b>' + (pOperationHeader.Volume == 0 ? pOperationHeader.VolumeSum : pOperationHeader.Volume) + ' CBM</div>';
                            //if (pContainerTypes != 0)
                            //    ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pContainerTypes == 0 ? "N/A" : pContainerTypes) + '</div>';
                            //else if (pPackageTypes != 0)
                            //    ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pPackageTypes == 0 ? "N/A" : pPackageTypes) + '</div>';
                            //if (pShipperName != "N/A")
                            //    ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            //if (pConsigneeName != "N/A")
                            //    ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Quantity</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Sale Price</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                         </tr>';

                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'
                            //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                            //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                            //ReportHTML += '                         </div>';
                            //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                            //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="col-xs-12 m-t-n"></div>';
                            ReportHTML += '                         <div class="col-xs-7">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else {
                                ReportHTML += '</br>';
                            }
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-5 text-right">';
                            if (pTaxAmount != 0 || pDiscountAmount != 0)
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            if (pTaxAmount != 0)
                                ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            if (pDiscountAmount != 0)
                                ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            ReportHTML += '                         </div>';
                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '         </body>';
                            ReportHTML += '     <footer class="footer col-xs-12 ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '" style="width:100%; position:absolute; bottom:0;">';
                            //ReportHTML += '         <div class="row">'
                            //ReportHTML += '             <div class="col-xs-8 m-l"><b><i>' + ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 1
                            //                                                                ? 'Import Manager'
                            //                                                                : ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 2 ? 'Export Manager' : 'Domestic Manager')
                            //                                                                ) + '</i></b></div>';
                            //ReportHTML += '             <div class="col-xs-4 m-t-n-md float-right"><b><i>Accountant Signature</i></b></div>';
                            //ReportHTML += '         </div>'
                            ReportHTML += '         <div class="row text-right m-r m-t-sm">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                            ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            ReportHTML += '         <div class="row text-center m-t ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //else if (pDefaults.UnEditableCompanyName == "SGA") {
                        else if (pDefaults.UnEditableCompanyName == "BSL"
                            || pDefaults.UnEditableCompanyName == "FAI"
                            || pDefaults.UnEditableCompanyName == "HOR"
                            || pDefaults.UnEditableCompanyName == "LAT"
                            || pDefaults.UnEditableCompanyName == "NVS"
                            || pDefaults.UnEditableCompanyName == "RLL"
                            || pDefaults.UnEditableCompanyName == "STR"
                            || pDefaults.UnEditableCompanyName == "TRL"
                            || pDefaults.UnEditableCompanyName == "VER"
                        ) {

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1] + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-8">';
                            ReportHTML += '                     <b>' + $("#hDefaultCompanyName").val() + '</b><br>';
                            ReportHTML += '                     ' + (pAddressLine1 == "" ? "" : (pAddressLine1 + '<br>'));
                            ReportHTML += '                     ' + (pAddressLine2 == "" ? "" : (pAddressLine2 + '<br>'));
                            if (pDefaults.UnEditableCompanyName != "BSL" || (pInvoiceTypeCode != "CA" && pInvoiceTypeCode != "ST"))
                                ReportHTML += '                     ' + (pAddressLine3 == "" ? "" : (pAddressLine3) + '<br>');
                            ReportHTML += '                     ' + (pPhones == "" ? "" : ('TEL:' + pPhones) + '<br>');
                            ReportHTML += '                     ' + (pFaxes == "" ? "" : ('Fax:' + pFaxes)) + '<br>';
                            if (1 == 2) {
                                ReportHTML += '                     <b>Tax ID: </b>' + pDefaults.TaxNumber + '<br>';
                                ReportHTML += '                     <b>Commercial Register: </b>' + pDefaults.CommericalRegNo + '<br>';
                            }
                            ReportHTML += '                 </div>';

                            ReportHTML += '                 <div class="col-xs-4 m-l-n">';
                            //ReportHTML += '                     <b>Date : </b>' + getTodaysDateInddMMyyyyFormat() + '<br>';
                            ReportHTML += '                     <b>Date : </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                            //ReportHTML += '                     <b>Invoice No : </b>' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(3, 2) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '/' + /*pInvoiceNumber*/ConcatenatedInvoiceNumber + '<br>';
                            ReportHTML += '                     <b>No : </b>' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '<br>';
                            ReportHTML += '                     <b>Payment Due by : </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            ReportHTML += '                     <b>Reference No. : </b>' + (pCustomerReference == 0 ? "N/A" : pCustomerReference) + '<br>';
                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '                 <b>Operation : </b>' + pMasterOperationCode;
                            else
                                ReportHTML += '                     <b>Operation : </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '<br>';
                            ReportHTML += '                     <b>Currency : </b>' + pInvoiceHeader.CurrencyCode + '<br>';
                            if (pDefaults.UnEditableCompanyName != "BSL")
                                ReportHTML += '                     <b>Salesman : </b>' + pSalesman + '<br><br>';
                            ReportHTML += '                 </div>';
                            //ReportHTML += '             </div>';
                            ReportHTML += '             <table class="col-xs-8 m-l m-t-n b-t b-light text-sm table-bordered" style="clear:both; text-align:left; width:auto; border:solid #000;">';
                            ReportHTML += '                 <td>';
                            ReportHTML += '                     <b>Bill To: </b><br>';
                            ReportHTML += '                     <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                            ReportHTML += '                     ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                            ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            if (pDefaults.UnEditableCompanyName == "HOR")
                                ReportHTML += '                     <br><b>Tax ID: </b>' + (pClientHeader.BankName == 0 ? "" : pClientHeader.BankName);
                            ReportHTML += '                 </td>';
                            ReportHTML += '             </table>';

                            ReportHTML += '             <div style="clear:both;"></div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else if (pHouseNumber != "0")
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + (pDefaults.UnEditableCompanyName == "FAI" && (pInvoiceHeader.InvoiceTypeName == "CUSTOM-EXPORT-EXPENSES&FEES INVOICE" || pInvoiceHeader.InvoiceTypeName == "CUSTOM-EXP-DUES STATEMENT") ? ' TON' : ' KG') + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                            if (pContainerTypes != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pContainerTypes == 0 ? "N/A" : pContainerTypes) + '</div>';
                            else if (pPackageTypes != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Volume: </b>' + (pPackageTypes == 0 ? "N/A" : pPackageTypes) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "FAI"
                                && pOperationHeader.ShipmentType == constFCLShipmentType
                                && (pInvoiceHeader.InvoiceTypeName == "CUSTOM-IMP-DUES STATEMENT" || pInvoiceHeader.InvoiceTypeName == "CUSTOM-IMPORT-EXPENSES & FEES INVOICE")
                            )
                                ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.NumberOfPackages + 'x' + pOperationHeader.PackageTypeName) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            if (pDefaults.UnEditableCompanyName == "VER" || pDefaults.UnEditableCompanyName == "TRL")
                                ReportHTML += '             <div class="col-xs-6"><b>Line: </b>' + (pOperationHeader.LineName == 0 ? "" : pOperationHeader.LineName) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "BSL")
                                ReportHTML += '             <div class="col-xs-6"><b>ACID No: </b>' + (pOperationHeader.ACIDNumber == 0 ? "" : pOperationHeader.ACIDNumber) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "HOR") {
                                ReportHTML += '             <div class="col-xs-6"><b>Commodity: </b>' + (pOperationHeader.CommodityName == 0 ? "" : pOperationHeader.CommodityName) + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>ETA: </b>' + (pETA == "01/01/1900" || pETA == "1/1/1900" ? "N/A" : pETA) + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>ETD: </b>' + (pETD == "01/01/1900" || pETD == "1/1/1900" ? "N/A" : pETD) + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Line: </b>' + (pOperationHeader.LineName == 0 ? "" : pOperationHeader.LineName) + '</div>';
                                if (pOperationHeader.TransportType == OceanTransportType)
                                    ReportHTML += '             <div class="col-xs-6"><b>Vessel: </b>' + (pOperationHeader.VesselName == 0 ? "" : pOperationHeader.VesselName) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "FAI") {
                                ReportHTML += '             <div class="col-xs-6"><b>Certificate No.: </b>' + (pOperationHeader.CertificateNumber == 0 ? "" : pOperationHeader.CertificateNumber) + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Vessel: </b>' + (pOperationHeader.VesselName == 0 ? "" : pOperationHeader.VesselName) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "RLL") {
                                if (pOperationHeader.TransportType == OceanTransportType)
                                    ReportHTML += '             <div class="col-xs-6"><b>Vessel-Voy: </b>' + (pOperationHeader.VesselName == 0 ? "" : pOperationHeader.VesselName) + (pOperationHeader.VoyageOrTruckNumber == 0 ? "" : (" - " + pOperationHeader.VoyageOrTruckNumber)) + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Customs Cert. No.: </b>' + (pOperationHeader.CertificateNumber == 0 ? "" : pOperationHeader.CertificateNumber) + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Customs Cert. Date: </b>' + (pOperationHeader.CertificateDate == "0" ? "" : pOperationHeader.CertificateDate) + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>ATA POL: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ATAPOLDate)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ATAPOLDate))) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "TRL" || pDefaults.UnEditableCompanyName == "BSL")
                                ReportHTML += '             <div class="col-xs-6"><b>Notes: </b>' + (pInvoiceHeader.EditableNotes == 0 ? "" : pInvoiceHeader.EditableNotes) + '</div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Quantity</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Sale Price</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                         </tr>';

                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'
                            //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                            //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                            //ReportHTML += '                         </div>';
                            //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                            //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                            ReportHTML += '                         <div class="col-xs-7 m-t-n">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else {
                                ReportHTML += '</br>';
                            }
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-5 text-right m-t-n">';
                            if (pTaxAmount != 0 || pDiscountAmount != 0)
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            if (pTaxAmount != 0 || pInvoiceHeader.TaxTypeID != 0)
                                ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            if (pDiscountAmount != 0)
                                ReportHTML += '                             <b>Discount Taxes(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            ReportHTML += '                         </div>';
                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '         </body>';
                            if (pDefaults.UnEditableCompanyName == "RLL" || pDefaults.UnEditableCompanyName == "HOR") {
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + '  Responsible Employee   ' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + '  Revised By  ' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + '  Financial Manager   ' + '</b></div>';
                                ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center"><b>' + '&emsp;'/*$("#hLoggedUserNameNotLogin").val()*/ + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center">' + '&emsp;' + '</div>';
                                ReportHTML += '                 </div>'
                            }
                            else {
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                                ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                 </div>'
                                if ($("#cbPrintStamp").prop("checked"))
                                    ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "LAT") {
                                ReportHTML += '         <div class="row text-right m-r" style="clear:both;">' + '   الشركة تعمل بنظام الدفعات المقدمة عن العام الجاري ولا یجب الخصم من تحت حساب الضرائب   ' + '</div>';
                                ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                                ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            }
                            ReportHTML += '     <footer class="footer col-xs-12 ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '" style="width:100%; position:absolute; bottom:0;">';
                            //ReportHTML += '         <div class="row">'
                            //ReportHTML += '             <div class="col-xs-8 m-l"><b><i>' + ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 1
                            //                                                                ? 'Import Manager'
                            //                                                                : ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 2 ? 'Export Manager' : 'Domestic Manager')
                            //                                                                ) + '</i></b></div>';
                            //ReportHTML += '             <div class="col-xs-4 m-t-n-md float-right"><b><i>Accountant Signature</i></b></div>';
                            //ReportHTML += '         </div>'
                            if (pDefaults.UnEditableCompanyName != "LAT") {
                                ReportHTML += '         <div class="row text-right m-r m-t-sm">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                                ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "RLL")
                                ReportHTML += '         <div class="row text-right m-r">' + '  رقم الملف الضريبي 00\\00\\555\\02677\\5\\001  ' + '  رقم تسجيل المبيعات 903\\405\\331  ' + '</div>';
                            ReportHTML += '         <div class="row text-center m-t ' + ($("#cbPrintFooterInvoice").prop("checked") ? "" : " hide ") + '"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF BSL,FAI,HOR,LAT,NVS,RLL,STR,TRL,VER
                        else if (pDefaults.UnEditableCompanyName == "IFG") {

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';

                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';
                            ReportHTML += '         <div class="col-xs-12">';

                            if (pDefaults.UnEditableCompanyName == "WFE" && pInvoiceHeader.InvoiceTypeName.split(' ')[0].trim().toUpperCase() == "INVOICE") {
                                ReportHTML += '             <div class="col-xs-9"></div>';
                                ReportHTML += '             <div class="col-xs-3"><b>Tax No.: </b>' + '843-592-672' + '</div>';
                                ReportHTML += '             <div class="col-xs-9"></div>';
                                ReportHTML += '             <div class="col-xs-3"><b>Com. Reg. No.: </b>' + '200669' + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-9"><b>Bill to: </b>' + pInvoiceHeader.PartnerName + '</div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Inv.Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-9"><b>Address: </b>';
                            ReportHTML += '                 ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                 ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            ReportHTML += '                 ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                 ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-12 b-b b-dark m-t-n-xs" style="clear:both;"></div>';

                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + pMasterOperationCode + '</div>';
                            else
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Currency: </b>' + pInvoiceHeader.CurrencyCode + '</div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" || pHouseNumber == "0" ? "" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                            if (pOperationHeader.TransportType == OceanTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Vessel: </b>' + pVesselName + '</div>';
                            }
                            //for inland shipping line is written in LeftSignature
                            if (pOperationHeader.TransportType == InlandTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Shipping Line: </b>' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';
                            }
                            if (pOperationHeader.TransportType != AirTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Arrival Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival))) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Containers: </b>' + (pOperationHeader.ShipmentType == 0 || pOperationHeader.ShipmentType == 2 || pOperationHeader.ShipmentType == 4 ? "LCL" : pContainerTypes) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Container Numbers: </b>' + pContainerNumbers + '</div>';
                            }
                            if (pOperationHeader.PackageTypes != 0 || pOperationHeader.PackageTypesOnContainersTotals != 0 || pOperationHeader.PlacedOnOperationContainersAndPackagesID != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes) + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Commodity: </b>' + (pOperationHeader.CommodityName == 0 ? "" : pOperationHeader.CommodityName) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KGM' + '</div>';
                            if (pOperationHeader.CertificateNumber != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Certificate: </b>' + pOperationHeader.CertificateNumber + '</div>';
                            ReportHTML += '                 <div class="col-xs-12 text-right" style="clear:both;"><b>Prepared By : </b>' + $("#hLoggedUserNameNotLogin").val() + '&emsp;</div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Qty</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Sale Price</th>';
                            //ReportHTML += '                                     <th>Notes</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                //ReportHTML += '                                         <td>' + (item.Notes == "0" ? "" : item.Notes) + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                            //ReportHTML += '                                         </tr>';
                            //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'

                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                     <div class="row"></div>';
                            ReportHTML += '                         <div class="col-xs-8 m-t-n">';
                            ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                            if (pTaxAmount != 0 || pDiscountAmount != 0)
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            if (pTaxAmount != 0)
                                ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            if (pDiscountAmount != 0)
                                ReportHTML += '                             <b>Discount(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '             </div>'; //
                            ReportHTML += '         </body>';

                            //ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            //ReportHTML += '                     <div class="col-xs-3 m-t"><b>' + 'Accounting Manager' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-2 m-t text-center"><b>' + 'Auditing' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + 'Customer Service Supervisor' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Preparation' + '</b></div>';
                            //ReportHTML += '                 </div>'
                            //ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            //ReportHTML += '                     <div class="col-xs-3 m-t-sm"><b>' + '....................................' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-2 m-t-sm text-center"><b>' + '..................' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center"><b>' + '......................................................' + '</b></div>';
                            //ReportHTML += '                     <div class="col-xs-3 m-t-sm text-center">' + $("#hLoggedUserNameNotLogin").val() + '</div>';
                            //ReportHTML += '                 </div>'

                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            //ReportHTML += '         <div class="row">'
                            //ReportHTML += '             <div class="col-xs-8 m-l"><b><i>' + ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 1
                            //                                                                ? 'Import Manager'
                            //                                                                : ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 2 ? 'Export Manager' : 'Domestic Manager')
                            //                                                                ) + '</i></b></div>';
                            //ReportHTML += '             <div class="col-xs-4 m-t-n-md float-right"><b><i>Accountant Signature</i></b></div>';
                            //ReportHTML += '         </div>'
                            //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            ReportHTML += '             <div class="col-xs-12 m-t-n-lg text-right"><b>Audited By : </b>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;</div>';
                            ReportHTML += '                         <div class="col-xs-12 m-t-n">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '         <div class="col-xs-12 m-t">' + '  Any discrepancies, what so ever should be notified within maximum seven days from the date from this document.  ' + '</div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            if ($("#cbPrintFooterInvoice").prop("checked"))
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            //else
                            //    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //if (pDefaults.UnEditableCompanyName == "IFG")
                        else if (pDefaults.UnEditableCompanyName == "PHO") {

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';

                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';
                            ReportHTML += '         <div class="col-xs-11">';
                            ReportHTML += '             <div class="col-xs-9"><b>Bill to: </b>' + pInvoiceHeader.PartnerName + '</div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Inv.Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-9"><b>Address: </b>';
                            ReportHTML += '                 ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                 ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            ReportHTML += '                 ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                 ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-12 b-b b-dark m-t-n-xs" style="clear:both;"></div>';

                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + pMasterOperationCode + '</div>';
                            else
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Currency: </b>' + pInvoiceHeader.CurrencyCode + '</div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" || pHouseNumber == "0" ? "" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                            if (pOperationHeader.TransportType == OceanTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Vessel: </b>' + pVesselName + '</div>';
                            }
                            //for inland shipping line is written in LeftSignature
                            if (pOperationHeader.TransportType == InlandTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Shipping Line: </b>' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';
                            }
                            if (pOperationHeader.TransportType != AirTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Arrival Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival))) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Containers: </b>' + (pOperationHeader.ShipmentType == 0 || pOperationHeader.ShipmentType == 2 || pOperationHeader.ShipmentType == 4 ? "LCL" : pContainerTypes) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Container Numbers: </b>' + pContainerNumbers + '</div>';
                            }
                            if (pOperationHeader.PackageTypes != 0 || pOperationHeader.PackageTypesOnContainersTotals != 0 || pOperationHeader.PlacedOnOperationContainersAndPackagesID != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes) + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Commodity: </b>' + (pOperationHeader.CommodityName == 0 ? "" : pOperationHeader.CommodityName) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KGM' + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Customer Ref.: </b>' + (pOperationHeader.CustomerReference == 0 ? "" : pOperationHeader.CustomerReference) + '</div>';
                            if (pOperationHeader.CertificateNumber != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Certificate: </b>' + pOperationHeader.CertificateNumber + '</div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Qty</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Sale Price</th>';
                            //ReportHTML += '                                     <th>Notes</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                //if (pDefaults.UnEditableCompanyName == "TEL")
                                ReportHTML += '                                         <td>' + (item.Notes == 0 ? (item.ChargeTypeName == 0 ? "" : item.ChargeTypeName) : item.Notes) + '</td>';
                                //else
                                //    ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                //ReportHTML += '                                         <td>' + (item.Notes == "0" ? "" : item.Notes) + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                            //ReportHTML += '                                         </tr>';
                            //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'

                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="row"></div>';
                            ReportHTML += '                         <div class="col-xs-8 m-t-n">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                            if (pTaxAmount != 0 || pDiscountAmount != 0)
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            if (pTaxAmount != 0)
                                ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            if (pDiscountAmount != 0)
                                ReportHTML += '                             <b>Discount(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';


                            //ReportHTML += '                     <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            //ReportHTML += '                         <div class="col-xs-3 m-t"><b>' + 'Reviewed By' + '</b></div>';
                            //ReportHTML += '                         <div class="col-xs-2 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                            //ReportHTML += '                         <div class="col-xs-4 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                            //ReportHTML += '                         <div class="col-xs-3 m-t text-right"><b>' + 'Approved By' + '</b></div>';
                            //ReportHTML += '                     </div>'
                            //ReportHTML += '                     <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            //ReportHTML += '                         <div class="col-xs-3"><b>' + $("#hLoggedUserNameNotLogin").val() + '</b></div>';
                            //ReportHTML += '                         <div class="col-xs-2 text-center"><b>' + '&emsp;' + '</b></div>';
                            //ReportHTML += '                         <div class="col-xs-4 text-center"><b>' + '&emsp;' + '</b></div>';
                            //ReportHTML += '                         <div class="col-xs-3 text-right">' + '&emsp;' + '</div>';
                            //ReportHTML += '                     </div>'

                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            if ($("#cbPrintStamp").prop("checked"))
                                ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                            ReportHTML += '                 </div>'; //of InvoiceSideStatement

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '             </div>'; //
                            ReportHTML += '         </body>';

                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            //ReportHTML += '         <div class="row">'
                            //ReportHTML += '             <div class="col-xs-8 m-l"><b><i>' + ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 1
                            //                                                                ? 'Import Manager'
                            //                                                                : ($("#tblInvoices" + pInvoiceTableSuffix + " #" + pID + " td.DirectionType").text() == 2 ? 'Export Manager' : 'Domestic Manager')
                            //                                                                ) + '</i></b></div>';
                            //ReportHTML += '             <div class="col-xs-4 m-t-n-md float-right"><b><i>Accountant Signature</i></b></div>';
                            //ReportHTML += '         </div>'
                            //ReportHTML += '         <div class="row text-right m-r m-t">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                            ReportHTML += '         <div class=" text-right m-r-lg row" style="font-size:115%;"><b>' + '  تخضع الشركة لنظام الدفعات المقدمة  ' + '</b></div>';
                            ReportHTML += '         <div class=" text-right m-r-lg row" style="font-size:115%;"><b>' + '  لايعتد بالفاتوره بدون خاتم الشركة  ' + '</b></div>';
                            ReportHTML += '         <div class=" text-right m-r-lg row" style="font-size:115%;"><b>' + '  الاعتراض على أي بند من الفاتورة خلال ٧ أيام من تاريخ إستلام الفاتورة   ' + '</b></div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            if ($("#cbPrintFooterInvoice").prop("checked"))
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            //else
                            //    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //else if (pDefaults.UnEditableCompanyName == "PHO")
                        else if (pDefaults.UnEditableCompanyName == "LSC" || pDefaults.UnEditableCompanyName == "CSC") {
                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';

                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';

                            ReportHTML += '             <div class="col-xs-8"></div>' + '<div class="col-xs-4" style="font-size:95%;">' + (pDefaults.AddressLine1 == 0 ? "" : pDefaults.AddressLine1) + '</div>';
                            ReportHTML += '             <div class="col-xs-8"></div>' + '<div class="col-xs-4" style="font-size:95%;">' + (pDefaults.AddressLine2 == 0 ? "" : pDefaults.AddressLine2) + '</div>';
                            ReportHTML += '             <div class="col-xs-8"></div>' + '<div class="col-xs-4" style="font-size:95%;">' + 'TEL:' + (pDefaults.Phones == 0 ? "" : pDefaults.Phones) + '</div>';
                            ReportHTML += '             <div class="col-xs-8"></div>' + '<div class="col-xs-4" style="font-size:95%;">' + 'FAX:' + (pDefaults.Faxes == 0 ? "" : pDefaults.Faxes) + '</div>';
                            ReportHTML += '             <div class="col-xs-8"></div>' + '<div class="col-xs-4" style="font-size:95%;">' + 'COMMERCIAL REG# ' + (pDefaults.CommericalRegNo == 0 ? "" : pDefaults.CommericalRegNo) + '</div>';
                            ReportHTML += '             <div class="col-xs-8"></div>' + '<div class="col-xs-4" style="font-size:95%;">' + 'TAX ID NO. ' + (pDefaults.VatIDNo == 0 ? "" : pDefaults.VatIDNo) + '</div>';

                            ReportHTML += '         <div class="col-xs-12">';
                            //ReportHTML += '             <div class="col-xs-8"><b>Address: </b>';
                            //ReportHTML += '                 ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            //ReportHTML += '                 ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            //ReportHTML += '                 ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            //ReportHTML += '                 ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            //ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-8 m-t-lg"><b>Customer Name: </b>' + '</div>' + '<div class="col-xs-4 m-t-lg"><b>Invoice No. : </b>' + pInvoiceHeader.InvoiceNumber + '</div>';
                            ReportHTML += '             <div class="col-xs-8">' + pInvoiceHeader.PartnerName + '</div>' + '<div class="col-xs-4" style="font-size:95%;"><b>Job No. : </b>' + (pOperationHeader.Code == 0 ? pOperationHeader.MasterOperationCode : pOperationHeader.Code) + '</div>';
                            ReportHTML += '             <div class="col-xs-8"></div>' + '<div class="col-xs-4" style="font-size:95%;"><b>Date : </b>' + pInvoiceDate + '</div>';
                            ReportHTML += '             <div class="col-xs-8"></div>' + '<div class="col-xs-4" style="font-size:95%;"><b>Currency : </b>' + pInvoiceHeader.CurrencyCode + '</div>';

                            ReportHTML += '             <div class="col-xs-12 b-b b-dark" style="clear:both;"></div>';

                            ReportHTML += '             <div class="col-xs-8"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-8"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>POD: </b>' + pPODName + '</div>';
                            ReportHTML += '             <div class="col-xs-8"><b>Notify: </b>' + (pOperationHeader.Notify1Name == 0 ? "" : pOperationHeader.Notify1Name) + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>PO# / REF: </b>' + (pInvoiceHeader.MiddleSignature == 0 ? "" : pInvoiceHeader.MiddleSignature) + '</div>';
                            //if ($("#cbPrintMBL").prop("checked"))
                            ReportHTML += '             <div class="col-xs-8"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            ReportHTML += '             <div class="col-xs-8">' + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Volume: </b>' + pOperationHeader.VolumeSum + ' CBM</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-4"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else
                                    ReportHTML += '             <div class="col-xs-4"><b>HB/L No.:</b> ' + (pHouseNumber == "" || pHouseNumber == "0" ? "" : pHouseNumber) + '</div>';
                            }
                            //ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                            //if (pOperationHeader.TransportType == OceanTransportType) {
                            //    ReportHTML += '         <div class="col-xs-8"><b>Vessel: </b>' + pVesselName + '</div>';
                            //}
                            //if (pOperationHeader.TransportType != AirTransportType) {
                            //    ReportHTML += '         <div class="col-xs-4"><b>Arrival Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival))) + '</div>';
                            //    ReportHTML += '         <div class="col-xs-8"><b>Containers: </b>' + (pOperationHeader.ShipmentType == 0 || pOperationHeader.ShipmentType == 2 || pOperationHeader.ShipmentType == 4 ? "LCL" : pContainerTypes) + '</div>';
                            //    ReportHTML += '         <div class="col-xs-4"><b>Cont.Nos: </b>' + pContainerNumbers + '</div>';
                            //}
                            //if (pOperationHeader.NumberOfPackages > 0 || pOperationHeader.PackageTypes != 0 || pOperationHeader.PackageTypesOnContainersTotals != 0 || pOperationHeader.PlacedOnOperationContainersAndPackagesID != 0)
                            //    ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.NumberOfPackages > 0 ? (pOperationHeader.NumberOfPackages  + 'x' + pOperationHeader.PackageTypeName) : (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes)) + '</div>';
                            //if (pOperationHeader.PackageTypes != 0 || pOperationHeader.PackageTypesOnContainersTotals != 0 || pOperationHeader.PlacedOnOperationContainersAndPackagesID != 0)
                            //    ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes) + '</div>';
                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-lg">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="row"></div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th style="width:5%;">Serial</th>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Qty</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Amount</th>';
                            //ReportHTML += '                                     <th>Notes</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + (i + 1) + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                //ReportHTML += '                                         <td>' + (item.Notes == "0" ? "" : item.Notes) + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }

                            if (pTaxAmount != 0 || pDiscountAmount != 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>Subtotal</b>' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' /*+ pInvoiceHeader.CurrencyCode + ' '*/ + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            if (pTaxAmount != 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>VAT tax ' + pInvoiceHeader.TaxPercentage + '% </b>' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' /*+ pInvoiceHeader.CurrencyCode + ' '*/ + pTaxAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            if (pDiscountAmount != 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>Tax deduction ' + pInvoiceHeader.DiscountPercentage + '% </b>' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' /*+ pInvoiceHeader.CurrencyCode + ' '*/ + pDiscountAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td colspan=3 style="text-align:left;">' + '<b>Total: </b>' + '</td>';
                                ReportHTML += '                                         <td>' + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b>' + '</td>';
                                ReportHTML += '                                     </tr>';

                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td colspan=5 style="text-align:left;">' + '&emsp;&emsp;&emsp;&emsp;<b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</td>';
                                ReportHTML += '                                     </tr>';
                            }

                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                //ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter-BankDetails.jpg" alt="footer"/></div>';
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '<div class="col-xs-12">'; //style="border:1px solid black"
                                ReportHTML += '                             <b>OUR BANK:</b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>").replace(/\ /g, "&nbsp;");
                                ReportHTML += '                 </div>';
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            }
                            ReportHTML += '             </div>';

                            ReportHTML += '         </body>';

                            ReportHTML += '                 <div class="m-t-lg" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            if ($("#cbPrintStamp").prop("checked"))
                                ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                            ReportHTML += '     <footer class="footer col-xs-12 " style="width:100%; position:absolute; bottom:0;">';

                            if ($("#cbPrintFooterInvoice").prop("checked"))
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            //else
                            //    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF else if (pDefaults.UnEditableCompanyName == "LSC" || pDefaults.UnEditableCompanyName == "CSC")
                        else if (pDefaults.UnEditableCompanyName == "KDM") {
                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';

                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';
                            ReportHTML += '         <div class="col-xs-12 m-t">';

                            ReportHTML += '             <div class="col-xs-8"><b>Bill to: </b>' + pInvoiceHeader.PartnerName + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Inv.Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-8"><b>Address: </b>';
                            ReportHTML += '                 ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                 ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            ReportHTML += '                 ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                 ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-12" style="clear:both;"><b>Reference Number: </b> ' + (pOperationHeader.ReleaseNumber == 0 ? "" : pOperationHeader.ReleaseNumber) + '</div>';
                            ReportHTML += '             <div class="col-xs-12 b-b b-dark" style="clear:both;"></div>';

                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '             <div class="col-xs-8"><b>Operation: </b>' + pMasterOperationCode + '</div>';
                            else
                                ReportHTML += '             <div class="col-xs-8"><b>Operation: </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Currency: </b>' + pInvoiceHeader.CurrencyCode + '</div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-8"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'MAWB' : 'MB/L') + ' No.: </b>' + pMasterBL + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-4"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'HAWB' : 'HBL') + '</b>: ' + pHouseBLs + '</div>';
                                else
                                    ReportHTML += '             <div class="col-xs-4"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'HAWB' : 'HB/L No.:') + '</b> ' + (pHouseNumber == "" || pHouseNumber == "0" ? "" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-8"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'AOL: ' : 'POL: ') + '</b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'AOD: ' : 'POD: ') + '</b>' + pPODName + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>CBM: </b>' + pCBM + ' CBM</div>';
                            if (pOperationHeader.TransportType == OceanTransportType) {
                                ReportHTML += '         <div class="col-xs-8"><b>Vessel: </b>' + pVesselName + '</div>';
                            }
                            //for inland shipping line is written in LeftSignature
                            if (pOperationHeader.TransportType == InlandTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Shipping Line: </b>' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';
                            }
                            if (pOperationHeader.TransportType != AirTransportType) {
                                ReportHTML += '         <div class="col-xs-4"><b>Arrival Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival))) + '</div>';
                                ReportHTML += '         <div class="col-xs-8"><b>Containers: </b>' + (pOperationHeader.ShipmentType == 0 || pOperationHeader.ShipmentType == 2 || pOperationHeader.ShipmentType == 4 ? "LCL" : pContainerTypes) + '</div>';
                                ReportHTML += '         <div class="col-xs-4"><b>Cont.Nos: </b>' + pContainerNumbers + '</div>';
                            }
                            //if (pOperationHeader.NumberOfPackages > 0 || pOperationHeader.PackageTypes != 0 || pOperationHeader.PackageTypesOnContainersTotals != 0 || pOperationHeader.PlacedOnOperationContainersAndPackagesID != 0)
                            //    ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.NumberOfPackages > 0 ? (pOperationHeader.NumberOfPackages  + 'x' + pOperationHeader.PackageTypeName) : (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes)) + '</div>';
                            if (pOperationHeader.PackageTypes != 0 || pOperationHeader.PackageTypesOnContainersTotals != 0 || pOperationHeader.PlacedOnOperationContainersAndPackagesID != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes) + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            ReportHTML += '             <div class="col-xs-8"><b>Commodity: </b>' + (pOperationHeader.CommodityName == 0 ? "" : pOperationHeader.CommodityName) + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-8"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Weight: </b>' + pGrossWeightSum + ' KGM' + '</div>';
                            if (pOperationHeader.TransportType == AirTransportType)
                                ReportHTML += '             <div class="col-xs-6"><b>ChargeableWeight: </b>' + pOperationHeader.ChargeableWeight + ' KGM' + '</div>';
                            if (pOperationHeader.CertificateNumber != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Certificate: </b>' + pOperationHeader.CertificateNumber + '</div>';
                            if (pInvoiceHeader.EditableNotes != "0")
                                ReportHTML += '         <div class="col-xs-12 clear"><b>Notes: </b>' + pInvoiceHeader.EditableNotes + '</div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>' + (pOperationHeader.TransportType == AirTransportType ? "KG/Qty" : (pOperationHeader.TransportType == OceanTransportType ? "Cont./Qty" : "Qty")) + '</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Sale Price</th>';
                            //ReportHTML += '                                     <th>Notes</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                //ReportHTML += '                                         <td>' + (item.Notes == "0" ? "" : item.Notes) + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }

                            if (pTaxAmount != 0 || pDiscountAmount != 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>Subtotal</b>' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' /*+ pInvoiceHeader.CurrencyCode + ' '*/ + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            if (pTaxAmount != 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>VAT tax ' + pInvoiceHeader.TaxPercentage + '% </b>' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' /*+ pInvoiceHeader.CurrencyCode + ' '*/ + pTaxAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            if (pDiscountAmount != 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + '<b>Tax deduction ' + pInvoiceHeader.DiscountPercentage + '% </b>' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' /*+ pInvoiceHeader.CurrencyCode + ' '*/ + pDiscountAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td colspan=3 style="text-align:left;">' + '<b>Total: </b>' + pInvoiceHeader.CurrencyCode + '</td>';
                                ReportHTML += '                                         <td>' + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b>' + '</td>';
                                ReportHTML += '                                     </tr>';

                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td colspan=4 style="text-align:left;">' + '<b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</td>';
                                ReportHTML += '                                     </tr>';
                            }


                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'
                            ReportHTML += '             <div class="col-xs-12"><b>Tax ID: </b>' + pDefaultsRow.TaxNumber + '</div>';
                            ReportHTML += '             <div class="col-xs-12"><b>Tax File: </b>' + '5/03905/555' + '</div>';

                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="row"></div>';
                            //ReportHTML += '                         <div class="col-xs-8">';
                            //if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                            //    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                            //    ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                            //    ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                            //    ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                            //    ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                            //    ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            //}
                            //    //kk: added 2nd condition
                            //else if ($("#cbPrintBankDetailsFromTemplate").prop("checked") && pDefaults.UnEditableCompanyName != "KDM") {
                            //    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                            //    ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            //}
                            //else
                            //    ReportHTML += '                             <br>';
                            //ReportHTML += '                         </div>';
                            //ReportHTML += '                         <div class="col-xs-4">';
                            ////if (pTaxAmount != 0 || pDiscountAmount != 0)
                            ////    ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //////ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            ////if (pTaxAmount != 0)
                            ////    ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                            //////ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            ////if (pDiscountAmount != 0)
                            ////    ReportHTML += '                             <b>WHT(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                            ////ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                            ////ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            ////if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                            ////    ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).toFixed(2) + '</b></br>';
                            //ReportHTML += '                         </div>';

                            ReportHTML += '             </div>';

                            ReportHTML += '         </body>';

                            ReportHTML += '                 <div class="m-t-lg" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            if ($("#cbPrintStamp").prop("checked"))
                                ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                            ReportHTML += '     <footer class="footer col-xs-12 " style="width:100%; position:absolute; bottom:0;">';
                            if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '<div class="col-xs-12" style="border:1px solid black"> ';
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>").replace(/\ /g, "&nbsp;");
                                ReportHTML += '                 </div>';
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            }
                            else if ($("#cbPrintFooterInvoice").prop("checked"))
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter-BankDetails.jpg" alt="footer"/></div>';
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            //else
                            //    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //else if (pDefaults.UnEditableCompanyName == "KDM")
                        else if (pDefaults.UnEditableCompanyName == "FRE") {
                            //var cnt = 0;
                            //var InvoiceNumber = ConcatenatedInvoiceNumber;
                            //for (cnt = 0; cnt < 5; cnt++) {
                            //    if (InvoiceNumber.length < 5) {
                            //        InvoiceNumber = "0" + InvoiceNumber;
                            //    }
                            //}
                            //ReportHTML += '                         <p class="text-center">' + InvoiceNumber + '</p>';
                            if (pInvoiceHeader.BranchName == "JEDDAH") {

                                var ReportHTML = "";
                                ReportHTML += '<html>';
                                ReportHTML += '     <head><title></title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                                ReportHTML += '         <body style="background-color:white;">';
                                //        ReportHTML += '         <div class="break"></div>'; //to start a new page
                                ReportHTML += '        <div class="" style="height:100%;">';
                                ReportHTML += '                 <div class="col-xs-12 b-blue" style="height:4.2cm;">';
                                ReportHTML += '                 </div>';

                                ReportHTML += '             <div class="col-xs-12 b-blue" style="height:3.5cm;">';
                                ReportHTML += '                 <div class="col-xs-6 b-blue ">';
                                ReportHTML += '                     <div class="b-blue row" style="height:2.8cm; font-size:12px;">';
                                ReportHTML += '                         <p class="text-center">' + pInvoiceHeader.PartnerName;
                                ReportHTML += '                             <br><b> </b>';
                                ReportHTML += '                             ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                ReportHTML += '                             ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                                ReportHTML += '                             ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                ReportHTML += '                             ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                                ReportHTML += '                             <br><b>VAT No: </b>';
                                ReportHTML += '                             ' + (pClientHeader.VATNumber == "" ? "" : pClientHeader.VATNumber);
                                ReportHTML += '                         </p>';
                                ReportHTML += '                     </div>';
                                ReportHTML += '                 </div>';
                                ReportHTML += '                 <div class="col-xs-6 b-blue" style="height:2.8cm;">';
                                ReportHTML += '                     <div class="b-blue row" style="height:1cm; font-size:14px;">';
                                ReportHTML += '                         <p class="text-center">' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</p>';
                                ReportHTML += '                     </div>';
                                ReportHTML += '                     <div class="b-blue row" style="height:.9cm; font-size:14px;">';
                                var cnt = 0;
                                var InvoiceNumber = pInvoiceHeader.InvoiceNumber;
                                for (cnt = 0; cnt < 5; cnt++) {
                                    if (InvoiceNumber.length < 5) {
                                        InvoiceNumber = "0" + InvoiceNumber;
                                    }
                                }
                                ReportHTML += '                         <p class="text-center">' + InvoiceNumber + '</p>';

                                //ReportHTML += '                         <p class="text-center">' + pInvoiceHeader.InvoiceNumber + '</p>';
                                ReportHTML += '                     </div>';
                                ReportHTML += '                     <div class="b-blue row" style="height:.9cm; font-size:14px;">';
                                ReportHTML += '                         <p class="text-center">' + pOperationHeader.Code + '</p>';
                                ReportHTML += '                     </div>';
                                ReportHTML += '                 </div>';
                                ReportHTML += '             </div>';

                                ReportHTML += '                 <div class="col-xs-12 b-blue"  style="height:2.6cm;">';
                                ReportHTML += '                     <div class="b-blue row" style="height:1cm; font-size:12px;">';
                                ReportHTML += '                     </div>';
                                ReportHTML += '                     <div class="b-blue row m-t-n" style="height:1.6cm; font-size:12px;">';
                                ReportHTML += '                         <table id="tblOperationContainersAndPackages" class="table table-striped m-l-md m-r-md" style="font-size:14 px; ">';
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                ReportHTML += '                                 <tr class="" style="font-size:95%;">';
                                ReportHTML += '                                     <td style="width:28%; border-color:white!Important; text-align:center; vertical-align: center;">' + (pOperationHeader.ContainerTypes == 0 ? "" : pOperationHeader.ContainerTypes) + '<br>BL: ' + (pOperationHeader.MasterBL == 0 ? "" : pOperationHeader.MasterBL) + '</td>';
                                ReportHTML += '                                     <td style="width:8%; border-color:white!Important; text-align:left; vertical-align: center;">' + '0'/*pInvoiceHeader.InvoiceNumber*/ + '</td>';
                                ReportHTML += '                                     <td style="width:16.4%; border-color:white!Important; text-align:center; vertical-align: center;">' + pOperationHeader.PackageTypes + '</td>';
                                ReportHTML += '                                     <td style="width:34.8%; border-color:white!Important; text-align:center; vertical-align: center;">' + (pOperationHeader.CommodityName == 0 ? "" : pOperationHeader.CommodityName) /*pOperationHeader.DescriptionOfGoods*/ + '</td>';
                                ReportHTML += '                                     <td style="width:11.9%; border-color:white!Important; text-align:center; vertical-align: center;">' + pOperationHeader.GrossWeightSum + '</td>';
                                ReportHTML += '                                 </tr>';
                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>';
                                ReportHTML += '                 </div>';


                                ReportHTML += '                <br> <div class="col-xs-12 b-blue"  style="height:2.1cm;">';
                                ReportHTML += '                     <div class="b-blue row" style="height:.2cm; font-size:12px;">';
                                ReportHTML += '                     </div>';
                                ReportHTML += '                     <div class="b-blue row" style="height:1.1cm; font-size:12px;">';
                                ReportHTML += '                         <table id="tblOperationContainersAndPackages" class="table table-striped m-l-md" style="font-size:14px; ">';
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                ReportHTML += '                                 <tr style="font-size:95%;">';
                                ReportHTML += '                                     <td style="width:21%; border-color:white!Important; text-align:center; vertical-align: center;">' + (pOperationHeader.LineName == 0 ? "" : pOperationHeader.LineName) + '</td>';
                                ReportHTML += '                                     <td style="width:18.6%; border-color:white!Important; text-align:center; vertical-align: center;">' + (pPOLName == 0 ? "" : pPOLName) + '</td>';
                                ReportHTML += '                                     <td style="width:18.6%; border-color:white!Important; text-align:center; vertical-align: center;">' + (pPODName == 0 ? "" : pPODName) + '</td>';
                                ReportHTML += '                                     <td style="width:16.7%; border-color:white!Important; text-align:center; vertical-align: center;">' + (GetDateWithFormatMDY(pOperationHeader.ActualArrival) == "01/01/1900" || GetDateWithFormatMDY(pOperationHeader.ActualArrival) == "1/1/1900" ? "" : GetDateWithFormatMDY(pOperationHeader.ActualArrival)) + '</td>';
                                ReportHTML += '                                     <td style="width:24%; border-color:white!Important; text-align:center; vertical-align: center;">' + (pShipperName == 0 ? "" : pShipperName) + '</td>';
                                ReportHTML += '                                 </tr>';
                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>';
                                ReportHTML += '                 </div>';


                                ReportHTML += '                 <div class="col-xs-12 b-blue"  style="height:10.5cm;">';
                                ReportHTML += '                     <div class="b-blue row" style="height:.4cm; font-size:12px;">';
                                ReportHTML += '                     </div>';
                                ReportHTML += '                     <div class="b-blue row" style="height:10cm; font-size:12px;">';
                                ReportHTML += '                         <table id="tblOperationContainersAndPackages" class="table table-striped m-l-md m-r-md" style="font-size:12px;">';
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                var TotalAmount_Footer = 0;
                                var TotalVATAmount_Footer = 0;
                                var GrandTotal_Footer = 0;
                                $.each(JSON.parse(data[2]), function (i, item) {
                                    ReportHTML += '                                 <tr style="font-size:95%;">';
                                    //ReportHTML += '                                     <td style="width:51%; border-color:white!Important; text-align:left; vertical-align: text-top;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                    //ReportHTML += '                                     <td style="width:15.5%; border-color:white!Important; text-align:left; vertical-align: text-top;">' + item.SaleAmount + '</td>';
                                    //ReportHTML += '                                     <td style="width:8.5%; border-color:white!Important; text-align:left; vertical-align: text-top;">' + pInvoiceHeader.TaxPercentage + '</td>';
                                    //ReportHTML += '                                     <td style="width:8.5%; border-color:white!Important; text-align:left; vertical-align: text-top;">' + item.SaleAmount * (parseFloat(pInvoiceHeader.TaxPercentage)) / 100 + '</td>';
                                    //ReportHTML += '                                     <td style="width:16.5%; border-color:white!Important; text-align:left; vertical-align: text-top;">' + (item.SaleAmount + (item.SaleAmount * (parseFloat(pInvoiceHeader.TaxPercentage)) / 100)) + '</td>';
                                    ReportHTML += '                                     <td style="width:51%; border-color:white!Important; text-align:left; vertical-align: text-top; font-size:14px;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                    ReportHTML += '                                     <td style="width:15.5%; border-color:white!Important; text-align:right; vertical-align: text-top; font-size:14px;">' + item.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '&nbsp;&nbsp;</td>';
                                    ReportHTML += '                                     <td style="width:8.5%; border-color:white!Important; text-align:center; vertical-align: text-top; font-size:14px;">' + item.TaxTypeName + '</td>';
                                    ReportHTML += '                                     <td style="width:10.5%; border-color:white!Important; text-align:right; vertical-align: text-top; font-size:14px;">' + item.TaxAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>';
                                    ReportHTML += '                                     <td style="width:11.5%; border-color:white!Important; text-align:right; vertical-align: text-top; font-size:14px; margin-right:20px!important;position: absolute;">' + item.SaleAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                    ReportHTML += '                                 </tr>';
                                    TotalAmount_Footer += item.AmountWithoutVAT;
                                    TotalVATAmount_Footer += item.TaxAmount;
                                    GrandTotal_Footer += item.SaleAmount;
                                });
                                if (pInvoiceHeader.FixedDiscount > 0) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td style="width:51%; border-color:white!Important; text-align:left; vertical-align: text-top; font-size:14px;">' + 'Special Discount' + '</td>';
                                    ReportHTML += '                                         <td style="width:15.5%; border-color:white!Important; text-align:right; vertical-align: text-top; font-size:14px;">' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '&nbsp;&nbsp;</td>';
                                    ReportHTML += '                                         <td style="width:8.5%; border-color:white!Important; text-align:center; vertical-align: text-top; font-size:14px;">' + '0 %' + '</td>';
                                    ReportHTML += '                                         <td style="width:10.5%; border-color:white!Important; text-align:right; vertical-align: text-top; font-size:14px;">' + '' + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>';
                                    ReportHTML += '                                         <td style="width:11.5%; border-color:white!Important; text-align:right; vertical-align: text-top; font-size:14px; margin-right:20px!important;position: absolute;">' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                    ReportHTML += '                                     </tr>';
                                }

                                ReportHTML += '                                 <tr style="font-size:95%;">';
                                ReportHTML += '                                     <td colspan="5" style="border-color:white!Important; text-align:left; vertical-align: text-top;font-size:14px;">';
                                if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                    ReportHTML += '                                     </br>BANK ACCOUNT DETAILS:' + '</br>';
                                    ReportHTML += '                                     Account Name: ' + pAccountName + '</br>';
                                    ReportHTML += '                                     Bank Name: ' + pBankName + '</br>';
                                    ReportHTML += '                                     Bank Address: ' + pBankAddress + '</br>';
                                    ReportHTML += '                                     Swift Code: ' + pSwiftCode + '</br>';
                                    ReportHTML += '                                     Account Number: ' + pAccountNumber + '</br>';
                                }
                                else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                    ReportHTML += '                                     </br>BANK ACCOUNT DETAILS:' + '</br>';
                                    ReportHTML += '                                     ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                                }
                                ReportHTML += '                                     </td>';
                                ReportHTML += '                                 </tr>';

                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>';
                                ReportHTML += '                 </div>';


                                //ReportHTML += '                 <div class="col-xs-12 b-blue" style="height:1.5cm;">';
                                //ReportHTML += '                 </div>';

                                ReportHTML += '                 <div class="col-xs-12 b-blue"  style="height:3cm;">';
                                //ReportHTML += '                     <div class="b-blue row" style="height:10cm; font-size:12px;">';
                                ReportHTML += '                         <table id="tblOperationContainersAndPackages" class="table table-striped m-l-md m-r-md" style="height:8cm;">';
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                ReportHTML += '                             <tr class="" style="font-size:100%;">';
                                ReportHTML += '                                     <td rowspan="3" style="width:51%;border-top:0px; text-align:center; vertical-align: center;"><p style="margin-top:20px; font-size:14px;">' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</p></td>';
                                ReportHTML += '                                     <td style="border-top:0px;"><div class="b-blue" style="width:4.5cm; font-size:12px;"></div><p style=" width:53%;margin-left: 45%; text-align:center; vertical-align: center;margin-top:30px; font-size:14px;">' + pInvoiceHeader.CurrencyCode + '  ' + parseFloat(TotalAmount_Footer - pInvoiceHeader.FixedDiscount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</p></td>';
                                ReportHTML += '                             </tr>';
                                ReportHTML += '                             <tr class="" style="font-size:100%;">';
                                ReportHTML += '                                     <td style="border-top:0px;"><div class="b-blue" style="width:4.5cm;border-top:0px; font-size:12px;"></div><p style="width:53%;margin-left: 45%; text-align:center; vertical-align: center; font-size:14px;">' + pInvoiceHeader.CurrencyCode + '  ' + TotalVATAmount_Footer.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</p></td>';
                                ReportHTML += '                             </tr>';
                                ReportHTML += '                             <tr class="" style="font-size:100%;">';
                                ReportHTML += '                                     <td style="border-top:0px;"><div class="b-blue" style="width:4.5cm;border-top:0px; font-size:12px;"></div><p style="width:53%;margin-left: 45%; text-align:center; vertical-align: center; margin-top:10px; font-size:14px;">' + pInvoiceHeader.CurrencyCode + '  ' + parseFloat(GrandTotal_Footer - pInvoiceHeader.FixedDiscount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</p></td>';
                                ReportHTML += '                             </tr>';
                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                //ReportHTML += '                     </div>';
                                ReportHTML += '                 </div>';
                                ReportHTML += '        </div>';
                                ReportHTML += '     </body>';
                                ReportHTML += '</html>';
                                if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                    pFinalReportHTML += ReportHTML;
                                    Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                                }
                                else {
                                    pFinalReportHTML += ReportHTML;
                                    pFinalReportHTML += ' <div class="break"></div>';
                                }
                            }
                            else { //Riyadh and other branches

                                var ReportHTML = '';
                                //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                                //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                                ReportHTML += '<html>';
                                ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                                ReportHTML += '         <body style="background-color:white;">';
                                //ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader-FRE-RIYADH.jpg' : 'CompanyHeader-Empty.jpg') + '" alt=""/></div>';
                                ReportHTML += '                 <div class="col-xs-6"><img src="/Content/Images/' + (1 == 1 ? 'CompanyHeader-FRE-RIYADH.jpg' : 'CompanyHeader-Empty.jpg') + '" alt=""/></div>';
                                ReportHTML += '                 <div class="col-xs-6">';
                                ReportHTML += '                     <br><div class="col-xs-8"><b>Invoice Date : تاريخ الفاتورة' + '</b></div>' + '<div class="col-xs-4">' + pInvoiceDate + '</div>';
                                ReportHTML += '                     <div class="col-xs-8"><b>Due Date : تاريخ انتهاء الفاتورة' + '</b></div>' + '<div class="col-xs-4">' + pInvoiceDueDate + '</div>';
                                ReportHTML += '                     <div class="col-xs-8"><b>VAT No. : رقم ضريبة القيمة المضافة' + '</b></div>' + '<div class="col-xs-4">' + '300252169400003' + '</div>';
                                ReportHTML += '                     <div class="col-xs-8"><b>Payment Terms : شروط الدفع' + '</b></div>' + '<div class="col-xs-4">' + (pInvoiceHeader.PaymentTermName == 0 ? "" : pInvoiceHeader.PaymentTermName) + '</div>';
                                ReportHTML += '                 </div>';
                                //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                                ReportHTML += '                 <div class="col-xs-12 text-center" style="clear:both;"><h3>' + pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split('-')[0].trim() + ' No. ' + pInvoiceHeader.InvoiceNumber + '</h3></div>';

                                //ReportHTML += '             <table class="col-xs-8 m-l b-t b-light text-sm table-bordered" style="text-align:left; width:auto; border:solid #000;">';
                                ReportHTML += '             <div class="col-sm-7">';

                                ReportHTML += '                 <div class="col-sm-12 m-l-n"><b><u>' + (pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split('-')[0].trim() == "DRAFT" ? "Draft:" : "Original:") + '</u></b></div>';
                                ReportHTML += '                 <table class="col-xs-7 b-light text-sm table-bordered" style="text-align:left;">';
                                ReportHTML += '                     <td>';
                                ReportHTML += '                         <b>Invoice To: </b><br>';
                                ReportHTML += '                         <b>' + pInvoiceHeader.PartnerName + '</b><br>';
                                ReportHTML += '                         ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                ReportHTML += '                         ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2 + '<br>'));
                                ReportHTML += '                         ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                ReportHTML += '                         ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                                ReportHTML += '                     </td>';
                                ReportHTML += '                 </table>';
                                ReportHTML += '             </div>';
                                ReportHTML += '             <div class="col-sm-5">';
                                ReportHTML += '                 <b><i>&emsp;&emsp;&emsp;&emsp;References : </i></b><br>';
                                ReportHTML += '                 <table class="col-xs-4 b-light text-sm table-bordered float-right" style="text-align:left;">';
                                ReportHTML += '                     <td>';
                                ReportHTML += '                         <b>' + 'Our Reference No. : ' + pOperationHeader.Code + '</b>';
                                ReportHTML += '                         <br><b>' + 'Client Reference : ' + (pOperationHeader.CustomerReference == 0 ? "" : pOperationHeader.CustomerReference) + '</b>';
                                ReportHTML += '                     </td>';
                                ReportHTML += '                 </table>';
                                ReportHTML += '             </div>';

                                ReportHTML += '             <div class="m-l" style="clear:both;"><b>Gerneral Information</b>';
                                ReportHTML += '                 <table class="col-xs-12 b-light text-sm table-bordered" style="text-align:left; width:98%;">';
                                ReportHTML += '                     <td>';
                                ReportHTML += '                         <div class="col-xs-6"><b>Shipperشاحن البضاعة: </b>' + pShipperName + '</div>';
                                ReportHTML += '                         <div class="col-xs-6"><b>Fromمن: </b>' + pPOLName + '</div>';
                                ReportHTML += '                         <div class="col-xs-6"><b>Consigneeصاحب البضاعة: </b>' + pConsigneeName + '</div>';
                                ReportHTML += '                         <div class="col-xs-6"><b>Toإلى: </b>' + pPODName + '</div>';
                                ReportHTML += '                         <div class="col-xs-6"><b>Lineميناء الشحن: </b>' + (pOperationHeader.LineName == 0 ? "" : pOperationHeader.LineName) + '</div>';
                                ReportHTML += '                         <div class="col-xs-6"><b>DisCharge Portميناء التفريغ: </b>' + pPODName + '</div>';
                                if (pOperationHeader.TransportType == OceanTransportType)
                                    ReportHTML += '                     <div class="col-xs-6"><b>Vessel-Voy: </b>' + (pOperationHeader.VesselName == 0 ? "" : pOperationHeader.VesselName) + (pOperationHeader.VoyageOrTruckNumber == 0 ? "" : (" - " + pOperationHeader.VoyageOrTruckNumber)) + '</div>';
                                //if($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '                         <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                                //if ($("#cbPrintHBL").prop("checked")) {
                                //    if (pHouseBLs != "0")//Master Operation so show all houses on it
                                //        ReportHTML += '                 <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                //    else if (pHouseNumber != "0")
                                //        ReportHTML += '                 <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                                //}
                                ReportHTML += '                         <div class="col-xs-12 m-t"><b><u>Packagesالبضائع:</u></b>' + '</div>';
                                ReportHTML += '                     <div class="col-xs-6"><b>Chargeable Wt.وزن التحميل: </b>' + pOperationHeader.ChargeableWeightSum + ' KG</div>';
                                ReportHTML += '                     <div class="col-xs-6"><b>Gross Wt.الوزن الإجمالي: </b>' + pOperationHeader.GrossWeightSum + ' KG</div>';
                                ReportHTML += '                     <div class="col-xs-12"><b>Number Of Packagesعدد البضائع: </b>' + (pOperationHeader.NumberOfPackages == 0 ? "" : pOperationHeader.NumberOfPackages) + '</div>';
                                if (pOperationHeader.TransportType != 2)
                                    ReportHTML += '                     <div class="col-xs-12"><b>Containers No.sأرقام الحاويات: </b>' + (pOperationHeader.ContainerNumbers == 0 ? "" : pOperationHeader.ContainerNumbers) + '</div>';
                                ReportHTML += '                     <div class="col-xs-12"><b>Description Of Goodsوصف البضاعة: </b>' + (pOperationHeader.DescriptionOfGoods == 0 ? "" : pOperationHeader.DescriptionOfGoods) + '</div><br>';
                                //ReportHTML += '                         <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';

                                ReportHTML += '                     </td>';
                                ReportHTML += '                 </table>';
                                ReportHTML += '             </div>';

                                ReportHTML += '                     <div class="col-xs-12" style="clear:both;">';
                                ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="">'; // table-hover
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                                 <tr>';
                                if (pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split('-')[0].trim() == "DRAFT") {
                                    ReportHTML += '                                     <th style="width:40%;">Description</th>';
                                    ReportHTML += '                                     <th>Chrg.Wt</th>';
                                    ReportHTML += '                                     <th>Per Kgs<br>Rates</th>';
                                    ReportHTML += '                                     <th>VAT Type</th>';
                                    ReportHTML += '                                     <th>Foreign Amount</th>';
                                    ReportHTML += '                                     <th>Amount ' + $("#hDefaultCurrencyCode").val() + '</th>';
                                }
                                else {
                                    ReportHTML += '                                     <th style="width:40%;">Description الوصف</th>';
                                    ReportHTML += '                                     <th>Qty<br>الكمية</th>';
                                    ReportHTML += '                                     <th>Unit.Price<br>الوحدة</th>';
                                    ReportHTML += '                                     <th>VAT Type<br>ضريبة القيمة المضافة</th>';
                                    ReportHTML += '                                     <th>Foreign Amount<br> سعر الكمية</th>';
                                    ReportHTML += '                                     <th>Amount ' + $("#hDefaultCurrencyCode").val() + '<br>' + ' السعر</th>';
                                }
                                ReportHTML += '                                 </tr>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                $.each(JSON.parse(data[2]), function (i, item) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) /*+ (item.Notes == 0 || item.Notes == "" ? "" : '-' + item.Notes)*/ + '</td>';
                                    ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                    ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                    ReportHTML += '                                         <td style="text-align:right;">' + item.TaxTypeName + '</td>';
                                    ReportHTML += '                                         <td style="text-align:right;">' + item.CurrencyCode + ' ' + item.SaleAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                    ReportHTML += '                                         <td style="text-align:right;">' + (item.SaleAmount * pInvoiceHeader.ExchangeRate).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                    ReportHTML += '                                     </tr>';
                                });
                                if (pInvoiceHeader.FixedDiscount > 0) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td style="text-align:right;">' + '' + '</td>';
                                    ReportHTML += '                                         <td style="text-align:right;">' + pInvoiceHeader.CurrencyCode + ' -' + pInvoiceHeader.FixedDiscount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                    ReportHTML += '                                         <td style="text-align:right;">' + '-' + (pInvoiceHeader.FixedDiscount * pInvoiceHeader.ExchangeRate).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                    ReportHTML += '                                     </tr>';
                                }

                                //ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                                //ReportHTML += '                                         </tr>';

                                //ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                         </tr>';
                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>'
                                //ReportHTML += '                         <div class="form-group float-right m-r-lg strong">';
                                //ReportHTML += '                             <b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + ' / (' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + ')' + '</b>';
                                //ReportHTML += '                         </div>';
                                //ReportHTML += '                         <div class="clear m-l col-xs-6 text-left"><b>ACCOUNTING</b></div>';
                                //ReportHTML += '                         <div class="float-right text-right m-t-n col-xs-6 m-r"><b>APPROVAL</b></div>';
                                if ($("#cbLargeInvoice").prop("checked")) {
                                    ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                    ReportHTML += '         <div class="break"></div>';
                                }
                                else
                                    ReportHTML += '                         <div class="col-xs-12 m-t-n"></div>';
                                ReportHTML += '                         <div class="col-xs-6">';
                                //if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                //    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                //    ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                //    ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                //    ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                //    ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                //    ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                                //}
                                //else
                                if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                    ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                                }
                                else {
                                    ReportHTML += '</br>';
                                }
                                ReportHTML += '                         </div>';
                                ReportHTML += '                         <div class="col-xs-6 text-right">';
                                if (pTaxAmount != 0 || pDiscountAmount != 0) {
                                    ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                    //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                                    if (pTaxAmount != 0)
                                        ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                                    //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                                    if (pDiscountAmount != 0)
                                        ReportHTML += '                             <b>Deduction Tax(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                                }
                                ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                                ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                                ReportHTML += '                         </div>';
                                if (pInvoiceHeader.ConcatenatedInvoiceNumber.split('/')[1].split('-')[0].trim() == "DRAFT") {
                                    ReportHTML += '                         <div class="col-xs-12">';
                                    ReportHTML += '                             <b>Terms and conditions:</b><br>';
                                    ReportHTML += '                             1 - All payments should be made in favor of Freight world Al Ofi Est by Cheque/Bank Transfer as per agreement.<br>';
                                    ReportHTML += '                             2 - Once make the payment please let us have forward copy of bank transfer receipt.<br>';
                                    ReportHTML += '                             3 - Let us know the details of payment against invoice numbers.<br>';
                                    ReportHTML += '                         </div>';
                                }
                                //ReportHTML += '                     </div>'; //of table-responsive
                                //ReportHTML += '                 </section>';
                                //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                                ReportHTML += '         </body>';

                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                                ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                 </div>'
                                if ($("#cbPrintStamp").prop("checked"))
                                    ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                                ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                                if (pDefaults.UnEditableCompanyName == "FRE") {
                                    ReportHTML += '         <div class="col-xs-2">' + '<b>BankDetails:</b>' + '</div>';
                                    ReportHTML += '         <div class="col-xs-5 m-l-n">' + 'Name: Freight World Al Ofi Establishment' + '</div>';
                                    ReportHTML += '         <div class="col-xs-5 text-right">' + '<b>Issued by : </b>' + $("#hLoggedUserNameNotLogin").val() + ' / Freight World' + '</div>';

                                    ReportHTML += '         <div class="col-xs-2">' + '<b>معلومات البنك</b>' + '</div>';
                                    ReportHTML += '         <div class="col-xs-10 m-l-n">' + 'Riyadh Bank A/C 1471356439940' + '</div>';

                                    ReportHTML += '         <div class="col-xs-2">' + '' + '</div>';
                                    ReportHTML += '         <div class="col-xs-10 m-l-n">' + 'IBAN NO: SA 18 2000 0001 471356439940' + '</div>';
                                    ReportHTML += '         <div class="col-xs-2">' + '<b></b>' + '</div>';
                                    ReportHTML += '         <div class="col-xs-10 m-l-n">' + 'Swift code: RIBLSARI' + '</div>';

                                    ReportHTML += '         <div class="col-xs-12">' + '<hr style="border: solid 1px;">' + '</div>';

                                    ReportHTML += '         <div class="col-xs-12 m-t-n">' + 'Freight World' + '</div>';
                                    ReportHTML += '         <div class="col-xs-12">' + 'Next Building to Dar Al Kitab Printing Press, office No 6, First Floor,Omar Bin' + '</div>';
                                    ReportHTML += '         <div class="col-xs-12">' + 'Al-Khatab Street- POB 315826, Riyadh' + '</div>';
                                    ReportHTML += '         <div class="col-xs-12">' + 'Riyadh -KSA' + '</div>';
                                }
                                //if ($("#cbPrintFooterInvoice").prop("checked"))
                                //ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                                //ReportHTML += '         <div class="row text-right m-r m-t-sm">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                                //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                                ReportHTML += '     </footer>';
                                ReportHTML += '</html>';
                                if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                    pFinalReportHTML += ReportHTML;
                                    Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                                }
                                else {
                                    pFinalReportHTML += ReportHTML;
                                    pFinalReportHTML += ' <div class="break"></div>';
                                }
                            } //Riyadh and other branches
                        } //else if (pDefaults.UnEditableCompanyName == "FRE") {
                        else if (pDefaults.UnEditableCompanyName == "FIV") {

                            var ReportHTML = "";
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title></title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            //        ReportHTML += '         <div class="break"></div>'; //to start a new page
                            ReportHTML += '        <div class="" style="height:100%;">';
                            if (pDefaults.UnEditableCompanyName == "FIV")
                                ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader-Invoice.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            else
                                ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';

                            ReportHTML += '                 <div class="col-xs-8">';
                            ReportHTML += '                     <b>' + pDefaults.CompanyName + '</b>';
                            ReportHTML += '                     <br><b>' + pDefaults.AddressLine1 + '</b>';
                            ReportHTML += '                     <br><b>' + pDefaults.AddressLine2 + '</b>';
                            ReportHTML += '                     <br><b>' + pDefaults.Phones + '</b>';
                            ReportHTML += '                     <br><b>' + 'E-MAIL: ' + pDefaults.Email + '</b>';
                            ReportHTML += '                     <br><b>' + 'VAT TRN: ' + pDefaults.VatIDNo + '</b>';
                            ReportHTML += '                 </div>';

                            ReportHTML += '                 <div class="col-xs-4">';
                            ReportHTML += '                     ' + '&emsp;';
                            ReportHTML += '                     <br>' + '<b>' + 'Invoice No: ' + pInvoiceHeader.InvoiceNumber + '</b>';
                            ReportHTML += '                     <br>' + '<b>' + 'Date: ' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate))) + '</b>';
                            ReportHTML += '                 </div>';

                            ReportHTML += '             <div class="col-xs-12"style="clear:both;"><br><hr style="border:solid #000 .2px;" /></div>';

                            ReportHTML += '                 <div class="col-xs-6 m-t-n" style="clear:both;"><b>';
                            ReportHTML += '                     ' + pInvoiceHeader.PartnerName + '';
                            ReportHTML += '                     <br>' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '                     <br>' + (pClientHeader.PhonesAndFaxes == 0 ? "" : pClientHeader.PhonesAndFaxes);
                            //ReportHTML += '                     <br>' + '&nbsp;';
                            ReportHTML += '                     <br>VAT TRN ' + (pClientHeader.VATNumber == 0 ? "" : pClientHeader.VATNumber);
                            ReportHTML += '                 </b></div>';

                            ReportHTML += '                 <div class="col-xs-6 m-t-n m-l-n">';
                            ReportHTML += '                     ' + 'VESSEL/FLIGHT: ' + (pOperationHeader.VesselName == 0 ? "" : pOperationHeader.VesselName) + (pOperationHeader.VoyageOrTruckNumber == 0 ? "" : (" - " + pOperationHeader.VoyageOrTruckNumber));
                            ReportHTML += '                     <br>' + 'B/L: ' + (pOperationHeader.MasterBL == 0 ? "" : pOperationHeader.MasterBL);
                            ReportHTML += '                     <br>' + 'NO OF PKGS: ' + pOperationHeader.NumberOfPackages + 'x' + (pOperationHeader.PackageTypeName == 0 ? "" : pOperationHeader.PackageTypeName);
                            ReportHTML += '                     <br>' + 'WEIGHT/VOL: ' + (pOperationHeader.GrossWeightSum == 0 ? "" : pOperationHeader.GrossWeightSum) + ' KG';
                            ReportHTML += '                     <br>' + 'BOE: ' + (pOperationHeader.HouseNumber == 0 ? "" : pOperationHeader.HouseNumber);
                            ReportHTML += '                     <br>' + 'CLIENT REF: ' + (pOperationHeader.CustomerReference == 0 ? "" : pOperationHeader.CustomerReference);
                            ReportHTML += '                 </div>';


                            ReportHTML += '                 <div class="col-xs-12">&nbsp;</div>';
                            ReportHTML += '                     <div class="col-xs-12 m-t-n">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th colspan=3>JOB TYPE</th>';
                            ReportHTML += '                                     <th colspan=2>JOB REF NO</th>';
                            ReportHTML += '                                     <th>PAY.TERM</th>';
                            ReportHTML += '                                     <th>DUE DATE</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                                 <tr>';
                            //ReportHTML += '                                     <td colspan=3>' + (pOperationHeader.ContainerTypes == 0 ? (pOperationHeader.PackageTypes == 0 ? "" : pOperationHeader.PackageTypes) : pOperationHeader.ContainerTypes) + '</td>';
                            ReportHTML += '                                     <td colspan=3>' + (pOperationHeader.MasterOperationCode == 0 ? pOperationHeader.Code.slice(4, 10) : pOperationHeader.MasterOperationCode.slice(4, 10)) + '</td>';
                            ReportHTML += '                                     <td colspan=2>' + (pOperationHeader.MasterOperationCode == 0 ? pOperationHeader.Code : pOperationHeader.MasterOperationCode) + '</td>';
                            ReportHTML += '                                     <td>' + (pInvoiceHeader.PaymentTermName == 0 ? "" : pInvoiceHeader.PaymentTermName) + '</td>';
                            ReportHTML += '                                     <td>' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.DueDate)) + '</td>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description </th>';
                            ReportHTML += '                                     <th>Qty</th>';
                            ReportHTML += '                                     <th>Cur.</th>';
                            ReportHTML += '                                     <th>Amount</th>';
                            ReportHTML += '                                     <th>Rate</th>';
                            ReportHTML += '                                     <th>Amount in ' + pDefaults.CurrencyCode + '</th>';
                            ReportHTML += '                                     <th>VAT</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            var TotalAmount_Footer = 0;
                            var TotalVATAmount_Footer = 0;
                            var GrandTotal_Footer = 0;
                            $.each(pInvoiceItem, function (i, item) {
                                ReportHTML += '                                 <tr style="font-size:100%;">';
                                ReportHTML += '                                     <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                     <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                     <td>' + (pDefaults.UnEditableCompanyName == "FIV" ? item.CurrencyCode_Foreign : pInvoiceHeader.CurrencyCode) + '</td>';
                                ReportHTML += '                                     <td>' + (pDefaults.UnEditableCompanyName == "FIV" ? (item.SalePrice_Foreign).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") : item.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")) + '</td>';
                                ReportHTML += '                                     <td>' + (pDefaults.UnEditableCompanyName == "FIV" ? (item.ExchangeRate_Foreign * item.SalePrice_Foreign).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") : (pInvoiceHeader.ExchangeRate).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")) + '</td>';
                                ReportHTML += '                                     <td>' + (item.AmountWithoutVAT * pInvoiceHeader.ExchangeRate).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                ReportHTML += '                                     <td>' + item.TaxTypeName + '</td>';
                                ReportHTML += '                                 </tr>';
                                TotalAmount_Footer += (item.SalePrice * item.Quantity * item.ExchangeRate);
                                TotalVATAmount_Footer += (item.TaxAmount * item.ExchangeRate);
                                GrandTotal_Footer += (item.SaleAmount * item.ExchangeRate);
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '1' + '</td>';
                                ReportHTML += '                                         <td>' + (pInvoiceHeader.CurrencyCode) + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                ReportHTML += '                                         <td>' + (pInvoiceHeader.ExchangeRate).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                ReportHTML += '                                         <td>' + '-' + (pInvoiceHeader.FixedDiscount * pInvoiceHeader.ExchangeRate).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                     </tr>';
                            }

                            TotalAmount_Footer -= (pInvoiceHeader.FixedDiscount * pInvoiceHeader.ExchangeRate);
                            GrandTotal_Footer -= (pInvoiceHeader.FixedDiscount * pInvoiceHeader.ExchangeRate);

                            ReportHTML += '                                     <tr class="input-md" style="">';
                            ReportHTML += '                                         <th colspan=5>' + 'VAT Summary' + '</th>';
                            ReportHTML += '                                         <td colspan=2 rowspan=2>';
                            ReportHTML += '                                             <div class="col-xs-6 text-left">' + '<b>Subtotal</b>' + '</div>';
                            ReportHTML += '                                             <div class="col-xs-6 text-left">' + pDefaults.CurrencyCode + ' ' + (pInvoiceHeader.AmountWithoutVAT * pInvoiceHeader.ExchangeRate).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</div>';
                            ReportHTML += '                                         </td>';
                            ReportHTML += '                                     </tr>';

                            ReportHTML += '                                     <tr class="input-md" style="">';
                            ReportHTML += '                                         <td colspan=5>';
                            ReportHTML += '                                             <div class="col-xs-4 text-center">' + 'Rate' + '</div>';
                            ReportHTML += '                                             <div class="col-xs-4 text-center">' + pDefaults.CurrencyCode + ' VAT' + '</div>';
                            ReportHTML += '                                             <div class="col-xs-4 text-center">' + pDefaults.CurrencyCode + ' NET' + '</div>';
                            ReportHTML += '                                         </td>';
                            ReportHTML += '                                     </tr>';

                            let _GroupedVATAmounts = CalculateSumOfArrayWithGroupBy(pInvoiceItem, "AmountWithoutVAT", "TaxPercentage").split(',');
                            debugger;
                            //_GroupedVATAmounts = "1321.00 0, 50.00 10";

                            ReportHTML += '                                     <tr class="input-md" style="">';
                            ReportHTML += '                                         <td colspan=5 rowspan=2>';
                            for (var y = 0; y < _GroupedVATAmounts.length; y++) {
                                ReportHTML += '                                             <div class="col-xs-4 text-center">' + _GroupedVATAmounts[y].trim().split(' ')[1].replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '%' + '</div>';
                                ReportHTML += '                                             <div class="col-xs-4 text-center">' + (_GroupedVATAmounts[y].trim().split(' ')[0] * _GroupedVATAmounts[y].trim().split(' ')[1] * pInvoiceHeader.ExchangeRate / 100).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</div>';
                                ReportHTML += '                                             <div class="col-xs-4 text-center">' + (_GroupedVATAmounts[y].trim().split(' ')[0] * pInvoiceHeader.ExchangeRate).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</div>';
                            }
                            ReportHTML += '                                         </td>';

                            ReportHTML += '                                         <td colspan=2>';
                            ReportHTML += '                                             <div class="col-xs-6 text-left">' + '<b>VAT Total</b>' + '</div>';
                            ReportHTML += '                                             <div class="col-xs-6 text-left">' + pDefaults.CurrencyCode + ' ' + TotalVATAmount_Footer.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</div>';
                            ReportHTML += '                                         </td>';
                            ReportHTML += '                                     </tr>';

                            ReportHTML += '                                     <tr class="input-md" style="">';
                            ReportHTML += '                                         <td colspan=2>';
                            ReportHTML += '                                             <div class="col-xs-6 text-left">' + '<b>Total</b>' + '</div>';
                            ReportHTML += '                                             <div class="col-xs-6 text-left">' + pDefaults.CurrencyCode + ' ' + GrandTotal_Footer.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</div>';
                            ReportHTML += '                                         </td>';
                            ReportHTML += '                                     </tr>';

                            ReportHTML += '                         <tbody>';
                            ReportHTML += '                     </table>';
                            ReportHTML += '               </div>';

                            ReportHTML += '                 <div class="col-xs-12 text-right m-t-n">';
                            ReportHTML += '                     <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            ReportHTML += '                 </div>';

                            ReportHTML += '               <div class="col-xs-8 m-t">';
                            //ReportHTML += '               BANK DETAILS <br> ';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                //ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             &emps;<br>';
                            ReportHTML += '               </div>';
                            ReportHTML += '               <div class="col-xs-4">';
                            if ($("#cbPrintStamp").prop("checked") && pInvoiceTypeCode != "DRAFT")
                                ReportHTML += '             <img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/>';
                            else
                                ReportHTML += '               </div>';
                            ReportHTML += '               </div>';
                            ReportHTML += '        </div>';
                            ReportHTML += '     </body>';

                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            //if ($("#cbPrintFooterInvoice").prop("checked"))
                            if ($("#cbPrintFooterInvoice").prop("checked") && pDefaults.UnEditableCompanyName == "FIV")
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter-Invoice.jpg" alt="footer"/></div>';
                            else if ($("#cbPrintFooterInvoice").prop("checked"))
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            ReportHTML += '     </footer>';

                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF else if (pDefaults.UnEditableCompanyName == "FIV")
                        else if (pDefaults.UnEditableCompanyName == "GLD") {

                            var ReportHTML = "";
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title></title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            //        ReportHTML += '         <div class="break"></div>'; //to start a new page
                            ReportHTML += '        <div class="" style="height:100%;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-6 text-right">';
                            //ReportHTML += '                     <br>GLS Logistics Services LLC <br> B2106 Latifa Tower, Sheikh Zayed Road <br> Dubai, United Arab Emirates <br> Tel: +971 4 3930303 <br> <b>TRN: 100489292100003 </b>';
                            //ReportHTML += '                 </div>';

                            ReportHTML += '             <div class="col-xs-12"><h3>' + pInvoiceHeader.InvoiceTypeName + '</h3></div>';
                            ReportHTML += '<hr>';

                            ReportHTML += '          <div class="col-xs-12">';
                            ReportHTML += '             <div class="col-xs-6">';

                            ReportHTML += '             <b>To</b> : ' + pClientHeader.Name + ' <br>';
                            ReportHTML += '             <b>Reference </b> : ' + pInvoiceHeader.ConcatenatedInvoiceNumber + ' <br>';
                            ReportHTML += '             <b>Customer ID</b> : <br>';
                            ReportHTML += '             <b>Origin</b> : ' + pPOLName + ' <br><br>';
                            ReportHTML += '             <b>MB/L</b> : ' + (pOperationHeader.MasterBL == 0 ? "" : pOperationHeader.MasterBL) + '  <br>';
                            ReportHTML += '             <b>Weight/</b>  :  ' + (pOperationHeader.GrossWeightSum == 0 ? "" : pOperationHeader.GrossWeightSum) + ' KGM' + '  <br>';
                            ReportHTML += '             <b>Volume</b> :  ' + pCBM + ' CBM <br>';
                            //ReportHTML += '             <b>Status</b> :   <br>';

                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-6">';

                            ReportHTML += '             <b> Customer VAT No</b> :  ' + (pClientHeader.VATNumber == 0 ? "" : pClientHeader.VATNumber) + ' <br>';
                            ReportHTML += '             <b>Date </b> :  ' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate))) + ' <br>';
                            ReportHTML += '             <b>Due Date</b> :  ' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + ' <br>';
                            ReportHTML += '             <b>Destination</b> :   ' + pPODName + ' <br><br>';
                            ReportHTML += '             <b>HB/L</b> :  ' + (pOperationHeader.HouseNumber == 0 ? "" : pOperationHeader.HouseNumber) + ' <br>';
                            //ReportHTML += '             <b>No.&Kind Of Packages</b> :  ' + (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes) + ' <br>';
                            ReportHTML += '             <b>No.&Kind Of Packages</b> :  ' + (pOperationHeader.NumberOfPackages + (pOperationHeader.PackageTypeName == 0 ? "" : (' x ' + pOperationHeader.PackageTypeName))) + ' <br>';
                            ReportHTML += '             </div>';
                            ReportHTML += '          </div>';

                            ReportHTML += '                     <div class="col-xs-12">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description </th>';
                            //ReportHTML += '                                     <th> Rate per </th>';
                            ReportHTML += '                                     <th>Currency  </th>';
                            ReportHTML += '                                     <th>Unit price </th>';
                            ReportHTML += '                                     <th>Quantity  </th>';
                            ReportHTML += '                                     <th>SubTotal(' + $("#hDefaultCurrencyCode").val() + ') </th>';
                            ReportHTML += '                                     <th>VAT(' + $("#hDefaultCurrencyCode").val() + ') </th>';
                            ReportHTML += '                                     <th>Total(' + $("#hDefaultCurrencyCode").val() + ') </th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            var TotalAmount_Footer = 0;
                            var TotalVATAmount_Footer = 0;
                            var GrandTotal_Footer = 0;
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                 <tr style="font-size:100%;">';
                                ReportHTML += '                                     <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                     <td>' + ((item.ChargeTypeName == "OCEAN FREIGHT" && item.CurrencyCode == $("#hDefaultCurrencyID").val()) ? "USD" : item.CurrencyCode) + '</td>';
                                ReportHTML += '                                     <td>' + ((item.ChargeTypeName == "OCEAN FREIGHT" && item.CurrencyCode == $("#hDefaultCurrencyID").val()) ? ((parseFloat(item.SalePrice) / parseFloat($("#hReadySlCurrencies option:Contains('USD')").attr("MasterDataExchangeRate")))).toFixed(2) : item.SalePrice.toFixed(2)) + '</td>';
                                ReportHTML += '                                     <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                     <td>' + (item.SalePrice * item.Quantity * pInvoiceHeader.ExchangeRate).toFixed(2) + '</td>';
                                ReportHTML += '                                     <td>' + (item.TaxAmount * pInvoiceHeader.ExchangeRate).toFixed(2) + '</td>';
                                ReportHTML += '                                     <td>' + (item.SaleAmount * pInvoiceHeader.ExchangeRate).toFixed(2) + '</td>';
                                ReportHTML += '                                 </tr>';
                                TotalAmount_Footer += (item.SalePrice * item.Quantity * item.ExchangeRate);
                                TotalVATAmount_Footer += (item.TaxAmount * item.ExchangeRate);
                                GrandTotal_Footer += (item.SaleAmount * item.ExchangeRate);
                            });
                            TotalAmount_Footer -= (pInvoiceHeader.FixedDiscount * pInvoiceHeader.ExchangeRate);
                            GrandTotal_Footer -= (pInvoiceHeader.FixedDiscount * pInvoiceHeader.ExchangeRate);
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + (pInvoiceHeader.FixedDiscount * pInvoiceHeader.ExchangeRate).toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + (pInvoiceHeader.FixedDiscount * pInvoiceHeader.ExchangeRate).toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            ReportHTML += '                                 <tr style="font-size:100%;">';
                            ReportHTML += '                                     <td colspan="3"></td>';
                            ReportHTML += '                                     <td><b>Total</b></td>';
                            ReportHTML += '                                     <td><b>' + TotalAmount_Footer.toFixed(2) + '</b></td>';
                            ReportHTML += '                                     <td><b>' + TotalVATAmount_Footer.toFixed(2) + '</b></td>';
                            ReportHTML += '                                     <td><b>' + GrandTotal_Footer.toFixed(2) + '</b></td>';
                            ReportHTML += '                                 </tr>';

                            ReportHTML += '                                 <tr style="font-size:100%;">';
                            ReportHTML += '                                     <td colspan="3"></td>';
                            ReportHTML += '                                     <td><b>Total In Words</b></td>';
                            ReportHTML += '                                     <td colspan="3"><b>' + toWords_WithFractionNumbers(GrandTotal_Footer.toFixed(2)) + '</b></td>';
                            ReportHTML += '                                 </tr>';

                            ReportHTML += '                         <tbody>';
                            ReportHTML += '                     </table>';
                            ReportHTML += '               </div>';

                            ReportHTML += '               <div class="row col-xs-12 m-l-md">';
                            //ReportHTML += '               BANK DETAILS <br> ';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '               </div>';

                            ReportHTML += '        </div>';
                            ReportHTML += '     </body>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF else if (pDefaults.UnEditableCompanyName == "GLD")
                        else if (pDefaults.UnEditableCompanyName == "GLS") {

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            if (pInvoiceHeader.InvoiceTypeCode != "DRAFT")
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';

                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';
                            ReportHTML += '         <div class="col-xs-12">';

                            if (pInvoiceHeader.InvoiceTypeCode != "DRAFT") {
                                ReportHTML += '             <div class="col-xs-9"><b>Adress: </b>';
                                ReportHTML += '                     <b>' + $("#hDefaultCompanyName").val() + '</b><br>';
                                ReportHTML += '                     ' + (pAddressLine1 == "" ? "" : (pAddressLine1 + ','));
                                ReportHTML += '                     ' + (pAddressLine2 == "" ? "" : (pAddressLine2 + ','));
                                ReportHTML += '                     ' + (pAddressLine3 == "" ? "" : (pAddressLine3) + '');
                                ReportHTML += '             </div>';

                                ReportHTML += '             <div class="col-xs-4"><b>Tel: </b>' + pDefaultsRow.Phones + '</div>';
                                ReportHTML += '             <div class="col-xs-8"><b>Fax: </b>' + pDefaultsRow.Faxes + '</div>';
                                ReportHTML += '             <div class="col-xs-4"><b>Tax ID: </b>' + pDefaultsRow.TaxNumber + '</div>';
                                ReportHTML += '             <div class="col-xs-8"><b>Commercial Register: </b>' + pDefaultsRow.CommericalRegNo + '</div>';
                            } //if (pInvoiceHeader.InvoiceTypeCode != "DRAFT") {
                            ReportHTML += '                     <div class="col-xs-4">';
                            ReportHTML += '                         <table id="tblReportInvoice1" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Due Date</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            ReportHTML += '                                 <tr class="input-md" style="font-size:95%;">';
                            ReportHTML += '                                     <td>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</td>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                         <tbody>';
                            ReportHTML += '                     </table>';
                            ReportHTML += '               </div>';
                            if (pInvoiceHeader.InvoiceTypeCode != "DRAFT")
                                ReportHTML += '             <div class="col-xs-4 text-center"><h1>INVOICE</h1></div>';
                            else
                                ReportHTML += '             <div class="col-xs-4 text-center"><h1>' + (pOperationHeader.DirectionType == 1 ? '   بيان مطالبة وارد   ' : '   بيان مطالبة    ') + '</h1></div>';
                            ReportHTML += '             <div class="col-xs-4">';
                            ReportHTML += '                 <table id="tblReportInvoice2" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                     <thead>';
                            ReportHTML += '                         <tr>';
                            ReportHTML += '                             <th>Serial#</th>';
                            ReportHTML += '                         </tr>';
                            ReportHTML += '                     </thead>';
                            ReportHTML += '                     <tbody>';
                            ReportHTML += '                         <tr class="input-md" style="font-size:95%;">';
                            ReportHTML += '                             <td>' + (pOperationHeader.Code == 0 ? pOperationHeader.MasterOperationCode : pOperationHeader.Code) + '</td>';
                            ReportHTML += '                         </tr>';
                            ReportHTML += '                     <tbody>';
                            ReportHTML += '                 </table>';
                            ReportHTML += '               </div>';

                            ReportHTML += '                     <div class="col-xs-12">';
                            ReportHTML += '                         <table id="tblReportInvoice3" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th colspan="2">Bill To</th>';
                            ReportHTML += '                                     <th></th>';
                            ReportHTML += '                                     <th>Shipment Datails</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            ReportHTML += '                                 <tr class="input-md" style="font-size:95%;">';
                            ReportHTML += '                                     <td><b>Messer</b></td>';
                            //ReportHTML += '                                     <td>' + pConsigneeName + '</td>';
                            ReportHTML += '                                     <td>';
                            ReportHTML += pInvoiceHeader.PartnerName + '<br>';
                            ReportHTML += '                                         <b>Address:</b> ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                                         ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            ReportHTML += '                                         ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                                         ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '                                     </td>';
                            ReportHTML += '                                     <td><b>B/L#</b></td>';
                            ReportHTML += '                                     <td>' + (pHouseNumber == "" || pHouseNumber == "0" ? "" : pHouseNumber) + '</td>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                                 <tr class="input-md" style="font-size:95%;">';
                            ReportHTML += '                                     <td><b>Tax ID:</b></td>';
                            ReportHTML += '                                     <td>' + (pClientHeader.BankName == "0" ? "" : pClientHeader.BankName) + '</td>';
                            ReportHTML += '                                     <td><b>VOLUME</b></td>';
                            ReportHTML += '                                     <td>' + (pCBM == "" || pCBM == "0" ? "" : pCBM) + ' CBM</td>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                         <tbody>';
                            ReportHTML += '                     </table>';
                            ReportHTML += '               </div>';

                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Currency</th>';
                            //ReportHTML += '                                     <th>Qty</th>';
                            //ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Amount</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                if (pDefaults.UnEditableCompanyName == "TEL")
                                    ReportHTML += '                                         <td>' + (item.Notes == 0 ? (item.ChargeTypeName == 0 ? "" : item.ChargeTypeName) : item.Notes) + '</td>';
                                else
                                    ReportHTML += '                                         <td>' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.CurrencyCode + '</td>';
                                //ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                //ReportHTML += '                                         <td>' + item.SalePrice + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'

                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="row"></div>';
                            ReportHTML += '                         <div class="row col-xs-12">';
                            ReportHTML += '                         <div class="col-xs-8 m-t-n">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + (pDefaults.UnEditableCompanyName == "QUI" ? (" " + pDefaults.CompanyName) : "") + '</br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            //kk: added 2nd condition
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + (pDefaults.UnEditableCompanyName == "QUI" ? (" " + pDefaults.CompanyName) : "") + '</br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                            if (pTaxAmount != 0 || pDiscountAmount != 0)
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            if (pTaxAmount != 0)
                                ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            if (pDiscountAmount != 0)
                                ReportHTML += '                             <b>Deduction tax(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         </div>';
                            if (pInvoiceHeader.InvoiceTypeCode != "DRAFT") {
                                ReportHTML += '             <br><br><br><div class="row col-xs-12 text-center"> Invoice contents if not confirmed after 10 days should be considered Clarification & info. </div>'; //
                                ReportHTML += '             <div class="row col-xs-12 text-center"> Please contact Mr.Tamer Heikal Mobil: 01090767578 Email:acc@gls.com.eg </div>'; //
                                ReportHTML += '             <br><div class="col-xs-12"><div class="col-xs-6"> REF : ' + pCustomerReference + '</div>'; //
                                //ReportHTML += '             <br><div class="col-xs-4"> <label></label></div>'; //
                                ReportHTML += '             <div class="col-xs-6 text-right"> Created By : ' + pSalesman + '</div></div>'; //
                            } //if (pInvoiceHeader.InvoiceTypeCode != "DRAFT")
                            ReportHTML += '         </body>';
                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            //kk




                            if ($("#cbPrintFooterInvoice").prop("checked"))
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            //else
                            //    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF else if (pDefaults.UnEditableCompanyName == "GLS") {
                        else if (pDefaults.UnEditableCompanyName == "MAR") {
                            debugger;
                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';

                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + ' ' + $("#slInvoiceOriginal").val() + '</h3></div>';

                            ReportHTML += '         <div class="col-xs-12 m-t">';

                            ReportHTML += '             <div class="col-xs-8">';
                            if (pDefaults.UnEditableCompanyName == "ELC")
                                ReportHTML += '                 <b>Client: </b>' + pOperationHeader.ClientName + "<br>";
                            ReportHTML += '                 <b>Bill to: </b>' + pInvoiceHeader.PartnerName;
                            if (pDefaults.UnEditableCompanyName == "GBL") {
                                ReportHTML += '                 <br><b>Address: </b>' + (pClientHeader.Address == 0 ? "" : pClientHeader.Address.replace(/\n/g, "<br/>"));
                            }
                            else {
                                ReportHTML += '                 <br><b>Address: </b>' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                                ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            }
                            ReportHTML += '                 <br><b>VAT ID No: </b>' + (pClientHeader.VATNumber == 0 ? "" : pClientHeader.VATNumber);
                            ReportHTML += '                 <br><b>Com. Reg. No: </b>' + (pClientHeader.IBANNumber == 0 ? "" : pClientHeader.IBANNumber);
                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-4">';
                            ReportHTML += '                 <b>Billing Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                            ReportHTML += '                 <b>Billing Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            ReportHTML += '                 <b>ETD: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ExpectedDeparture)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ExpectedDeparture))) + '<br>';
                            ReportHTML += '                 <b>ETA: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ExpectedArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ExpectedArrival)));
                            ReportHTML += '             </div>';
                            //if (pInvoiceTypeCode == "DRAFT") {
                            //    ReportHTML += '             <div style="position:absolute;left:50px;top:250px;">';
                            //    ReportHTML += '             <img src="/Content/Images/DraftWaterMark.jpg" alt="logo" width=612px; height=200px;></div>';
                            //}

                            ReportHTML += '             <div class="col-xs-12 clear"><hr style="border:solid #000 1px;" /></div>';

                            ReportHTML += '         <div class="col-xs-6"><b>Operation: </b>' + (pOperationHeader.Code == 0 ? "" : pOperationHeader.Code) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>Vessel-Voy: </b>' + (pOperationHeader.VesselName == 0 ? "" : pOperationHeader.VesselName) + (pOperationHeader.VoyageOrTruckNumber == 0 ? "" : (" - " + pOperationHeader.VoyageOrTruckNumber)) + '</div>';
                            if ($("#cbPrintHBL").prop("checked") && pDefaults.UnEditableCompanyName != "NEW") {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else if (pHouseNumber != "0")
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '         <div class="col-xs-6"><b>Line: </b>' + (pOperationHeader.LineName == 0 ? "" : pOperationHeader.LineName) + '</div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + (pOperationHeader.MasterBL == 0 ? "" : pOperationHeader.MasterBL) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>Cont.Types: </b>' + (pOperationHeader.ContainerTypes == 0 ? "" : pOperationHeader.ContainerTypes) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>POL: </b>' + (pPOLName == 0 ? "" : pPOLName) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>Service: </b>' + (pOperationHeader.MoveTypeName == 0 ? "" : pOperationHeader.MoveTypeName) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>POD: </b>' + (pPODName == 0 ? "" : pPODName) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>Weight: </b>' + pOperationHeader.GrossWeightSum + ' KG</div>';

                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="m-l" style="clear:both;"><h3><br><br><br>Please, see attachment.</h3></div>';
                                ReportHTML += '         <div class="break"></div>';
                            }

                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            if (pInvoiceHeader.InvoiceTypeName != "CLAIM") {
                                ReportHTML += '                                     <th>Qty</th>';
                                ReportHTML += '                                     <th>Unit Price</th>';
                                ReportHTML += '                                     <th>SubTotal</th>';
                                ReportHTML += '                                     <th>WHT</th>';
                                ReportHTML += '                                     <th>VAT %</th>';
                                ReportHTML += '                                     <th>VAT</th>';
                            }
                            ReportHTML += '                                     <th>Total</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            var _TotalTaxOnItems = 0;
                            var _TotalDiscountOnItems = 0;
                            $.each(JSON.parse(data[2]), function (i, item) {
                                _TotalTaxOnItems += item.TaxAmount;
                                _TotalDiscountOnItems += item.DiscountAmount;
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 && item.ChargeTypeLocalName != undefined ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes.replace(/\n/g, "<br/>")) : "") + '</td>';
                                if (pInvoiceHeader.InvoiceTypeName != "CLAIM") {
                                    ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                    ReportHTML += '                                         <td>' + item.SalePrice.toFixed(2) + '</td>';
                                    ReportHTML += '                                         <td>' + item.AmountWithoutVAT.toFixed(2) + '</td>';
                                    ReportHTML += '                                         <td>' + item.DiscountAmount.toFixed(2) + '</td>';
                                    ReportHTML += '                                         <td>' + item.TaxPercentage.toFixed(2) + '</td>';
                                    ReportHTML += '                                         <td>' + item.TaxAmount.toFixed(2) + '</td>';
                                }
                                ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                if (pInvoiceHeader.InvoiceTypeName != "CLAIM") {
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td colspan=5>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                }
                                else {
                                    ReportHTML += '                                         <td>' + 'Special Discount' + '</td>';
                                    ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                }
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                            //ReportHTML += '                                         </tr>';
                            //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'
                            ReportHTML += '                     <div class="col-xs-12 m-t-n">';
                            if (pInvoiceHeader.InvoiceTypeName != "CLAIM" && (_TotalTaxOnItems != 0 || _TotalDiscountOnItems != 0)) {
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                //ReportHTML += '                             <b>VAT: </b>' + (_TotalTaxOnItems - _TotalDiscountOnItems).toFixed(2) + '</br>';
                                if (_TotalTaxOnItems != 0)
                                    ReportHTML += '                             <b>VAT: </b>' + (_TotalTaxOnItems).toFixed(2) + '</br>';
                                if (_TotalDiscountOnItems != 0)
                                    ReportHTML += '                             <b>WHT: </b>' + (_TotalDiscountOnItems).toFixed(2) + '</br>';
                            }
                            ReportHTML += '                             <b>Total Due: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).replace(/\B(?=(\d{3})+(?!\d))/g, ",").toFixed(2) + '</b></br>';
                            ReportHTML += '                     </div>';

                            ReportHTML += '                     <div class="col-sm-12 text-center" style="font-size:125%;"><b>' + '   لا يعتد بالفاتورة إلا بعد استلام إيصال السداد    ' + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-12"><b>Notes: </b>' + (pInvoiceHeader.EditableNotes == 0 ? "" : pInvoiceHeader.EditableNotes) + '</div>';
                            ReportHTML += '                     <div class="col-xs-12 m-t">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked") && pDefaults.UnEditableCompanyName != "MAR") {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked") && pDefaults.UnEditableCompanyName != "MAR") {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '             </div>';
                            ReportHTML += '         </body>';

                            //ReportHTML += '                 <div class="col-xs-12 m-t m-l" style="clear:both;"><b>Invoice considered paid if a stamped receipt issued</b></div>';
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>';
                            if ($("#cbPrintStamp").prop("checked") && pInvoiceTypeCode != "DRAFT")
                                ReportHTML += '         <div class="text-left m-l-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                            ReportHTML += '     <footer class="footer col-xs-12 m-t-lg" style="width:100%; position:absolute; bottom:0;">';
                            if (!$("#cbPrintBankDetailsNone").prop("checked") && pDefaults.UnEditableCompanyName == "MAR") {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                             Commercial International Bank - CIB (Manshia Branch)' + '</br>';
                                ReportHTML += '                             10, Orabi Square - Manshia Alexandria, Egypt' + '</br>';
                                ReportHTML += '                             SWIFT: CIBEEGCX008' + '</br>';
                                ReportHTML += '                             A/C : EGP 100035343983 USD 100035344041 EUR 100035344084';
                            }
                            if ($("#cbPrintFooterInvoice").prop("checked")) {
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter' + '.jpg" alt="footer"/></div>';
                            }
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //else if (pDefaults.UnEditableCompanyName == "MAR") {
                        else if (pDefaults.UnEditableCompanyName == "SAF") {
                            debugger;
                            if (pInvoiceHeader.MasterBL == 0 || pOperationHeader.CertificateNumber == 0)
                                swal("Sorry", "Please, make sure that Master B/L & Certificate Number are entered.");
                            else if (pClientHeader.BankName == 0 || pClientHeader.BankName == "" || pClientHeader.IBANNumber == 0 || pClientHeader.IBANNumber == "")
                                swal("Sorry", "Please, make sure that TaxID & Commercial Reg. are entered.");
                            else {

                                var ReportHTML = '';
                                //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                                //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                                ReportHTML += '<html>';
                                ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                                ReportHTML += '         <body style="background-color:white;">';
                                ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                                //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                                //if (!(pDefaults.UnEditableCompanyName == "SAF" && pInvoiceTypeCode == "DRAFT")) //Dont print for Safena
                                //    ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';
                                //else { //i.e. (pDefaults.UnEditableCompanyName == "SAF" && pInvoiceTypeCode == "DRAFT") {
                                //    ReportHTML += '             <div style="position:absolute;left:50px;top:170px;">';
                                //    ReportHTML += '             <img src="/Content/Images/DraftWaterMark.jpg" alt="logo" width=612px; height=200px;></div>';
                                //}
                                ////ReportHTML += '             <div style="clear:both;"><br></div>';
                                //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';


                                ReportHTML += '         <div class="col-xs-12 m-t">';

                                ReportHTML += '             <div class="col-xs-5">';
                                ReportHTML += '                 <b>Invoiced to: </b>' + pInvoiceHeader.PartnerName;
                                ReportHTML += '                 <br><b>Address: </b>' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                                ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                                ReportHTML += '             </div>';

                                ReportHTML += '             <div class="col-xs-3">';
                                if (pDefaults.UnEditableCompanyName == "SAF")
                                    ReportHTML += '                 <b>Ship to: </b>' + pPODName;
                                ReportHTML += '             </div>';

                                ReportHTML += '             <div class="col-xs-4">';
                                if (pInvoiceTypeCode != "DRAFT" || pDefaults.UnEditableCompanyName != "SAF") {
                                    if (pInvoiceTypeCode == "SOA" && pInvoiceHeader.RelatedToInvoiceID != 0 && pDefaults.UnEditableCompanyName == "SAF")
                                        ReportHTML += '             <b>Related To: </b>' + pInvoiceHeader.RelatedToInvoiceTypeName + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + "#" + pInvoiceHeader.RelatedToInvoiceNumber.toString().padStart(5, 0) + '<br>';
                                    else //InvoiceNumber for all companies
                                        ReportHTML += '             <b>Billing Number: </b>' + pInvoiceHeader.InvoiceTypeName + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + "#" + pInvoiceHeader.InvoiceNumber.toString().padStart(5, 0) + '<br>';
                                }
                                ReportHTML += '                 <b>Billing Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                                ReportHTML += '                 <b>Billing Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate);
                                ReportHTML += '             </div>';
                                if (pInvoiceTypeCode == "DRAFT") {
                                    ReportHTML += '             <div style="position:absolute;left:50px;top:250px;">';
                                    ReportHTML += '             <img src="/Content/Images/DraftWaterMark.jpg" alt="logo" width=612px; height=200px;></div>';
                                }

                                if (pInvoiceHeader.PartnerTypeCode == "BOOKING PARTY" && pDefaults.UnEditableCompanyName == "SAF") {
                                    if (pOperationHeader.DirectionType == constImportDirectionType)
                                        ReportHTML += '         <div class="col-xs-12 clear"><b>Consignee: </b>' + (pOperationHeader.ConsigneeName == 0 ? "" : pOperationHeader.ConsigneeName) + '</div>';
                                    else
                                        ReportHTML += '         <div class="col-xs-12 clear"><b>Shipper: </b>' + (pOperationHeader.ShipperName == 0 ? "" : pOperationHeader.ShipperName) + '</div>';
                                }
                                if (pOperationHeader.MasterBL != "N/A")
                                    ReportHTML += '         <div class="col-xs-12 clear"><b>B/L: </b>' + (pOperationHeader.MasterBL == 0 ? "" : pOperationHeader.MasterBL) + '</div>';
                                if (pOperationHeader.CertificateNumber != "N/A")
                                    ReportHTML += '         <div class="col-xs-12 clear"><b>Certificate Number: </b>' + (pOperationHeader.CertificateNumber == 0 ? "" : pOperationHeader.CertificateNumber) + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Notes: </b>' + (pInvoiceHeader.EditableNotes == 0 ? "" : pInvoiceHeader.EditableNotes) + '</div>';

                                if (pInvoiceTypeCode == "SOA" && pDefaults.UnEditableCompanyName == "SAF") {
                                    ReportHTML += '         <br><div class="col-xs-12 clear">To be paid to IACC Logistics</div>';
                                    ReportHTML += '         <br><div class="col-xs-12 clear">Claim for settlement of Official Receipts, Storage, Demurrage & Detention paid on behalf of your respectful company.</div>';
                                }

                                ReportHTML += '                     <div class="col-xs-12 clear">';
                                ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                                ReportHTML += '                             <thead>';
                                ReportHTML += '                                 <tr>';
                                ReportHTML += '                                     <th>Item</th>';
                                ReportHTML += '                                     <th>Description</th>';
                                ReportHTML += '                                     <th>Qty</th>';
                                ReportHTML += '                                     <th>Unit Price</th>';
                                ReportHTML += '                                     <th>VAT</th>';
                                ReportHTML += '                                     <th>WHT</th>';
                                ReportHTML += '                                     <th>Total</th>';
                                ReportHTML += '                                 </tr>';
                                ReportHTML += '                             </thead>';
                                ReportHTML += '                             <tbody>';
                                var _TotalTaxOnItems = 0;
                                var _TotalDiscountOnItems = 0;
                                $.each(JSON.parse(data[2]), function (i, item) {
                                    _TotalTaxOnItems += item.TaxAmount;
                                    _TotalDiscountOnItems += item.DiscountAmount;
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td>' + (i + 1) + '</td>';
                                    ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                    ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                    ReportHTML += '                                         <td>' + item.SalePrice.toFixed(2) + '</td>';
                                    ReportHTML += '                                         <td>' + item.TaxAmount.toFixed(2) + '</td>';
                                    ReportHTML += '                                         <td>' + item.DiscountAmount.toFixed(2) + '</td>';
                                    ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                    //ReportHTML += '                                         <td>' + (item.Notes == "0" ? "" : item.Notes) + '</td>';
                                    ReportHTML += '                                     </tr>';
                                });
                                if (pInvoiceHeader.FixedDiscount > 0) {
                                    ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td colspan=4>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                    //ReportHTML += '                                         <td>' + _TotalTaxOnItems + '</td>';
                                    //ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                     </tr>';
                                }
                                //ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                                //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                                //ReportHTML += '                                         </tr>';
                                //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                                //ReportHTML += '                                         <tr>';
                                //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                //ReportHTML += '                                         </tr>';
                                ReportHTML += '                             </tbody>';
                                ReportHTML += '                         </table>';
                                ReportHTML += '                     </div>'

                                if ($("#cbLargeInvoice").prop("checked")) {
                                    ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                    ReportHTML += '         <div class="break"></div>';
                                }
                                else
                                    ReportHTML += '                         <div class="row"></div>';
                                ReportHTML += '                         <div class="col-xs-8 m-t">';
                                if (pDefaults.UnEditableCompanyName == "SAF") { //($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                    if (pInvoiceTypeCode == "SOA") {
                                        ReportHTML += '                     <div class="col-xs-12 m-l-n">' + '- This statement is for Official receipts, Storage, Demurrage & Detention doesnt consider as Official Invoice from IACC Logistics.' + '</div>';
                                        ReportHTML += '                     <div class="col-xs-12 m-l-n">' + '- Please settle the amount on our bank account details below with separate transfer than the invoice.' + '</div><br>';
                                    }
                                    else
                                        ReportHTML += '                     <div class="col-xs-12 m-l-n">' + '- The invoice cannot be modified 15 days after the date of receipt.' + '</div><br>';
                                    ReportHTML += '                             <b>Bank:</b> ' + pBankName + '</br>';
                                    ReportHTML += '                             <b>Branch:</b> ' + pBankAddress + '</br>';
                                    ReportHTML += '                             <b>Beneficiary:</b> ' + pAccountName + '</br>';
                                    //ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                                    ReportHTML += '                             <b>Account Number:</b> ' + '</br>';
                                    ReportHTML += '                             (EGP) 100005281118' + '</br>';
                                    ReportHTML += '                             (USD) 100009734435' + '</br>';
                                    ReportHTML += '                             (EUR) 100013426508' + '</br>';
                                    ReportHTML += '                             <b>Swift:</b> ' + pSwiftCode + '</br>';
                                    ReportHTML += '                             <b>Tax Card No:</b> ' + (pDefaultsRow.TaxNumber == 0 ? "" : pDefaultsRow.TaxNumber) + '</br>';

                                }
                                else if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                    ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                    ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                    ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                    ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                    ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                                }
                                else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                    ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                    ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                                }
                                else
                                    ReportHTML += '                             <br>';
                                ReportHTML += '                         </div>';
                                ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                                if (_TotalTaxOnItems != 0 || _TotalDiscountOnItems != 0) {
                                    ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                    //ReportHTML += '                             <b>VAT: </b>' + (_TotalTaxOnItems - _TotalDiscountOnItems).toFixed(2) + '</br>';
                                    ReportHTML += '                             <b>VAT: </b>' + (_TotalTaxOnItems).toFixed(2) + '</br>';
                                    ReportHTML += '                             <b>WHT: </b>' + (_TotalDiscountOnItems).toFixed(2) + '</br>';
                                }
                                //if (pDiscountAmount != 0)
                                //    ReportHTML += '                             <b>WHT(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></br>';
                                ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                                if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                    ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).replace(/\B(?=(\d{3})+(?!\d))/g, ",").toFixed(2) + '</b></br>';
                                ReportHTML += '                         </div>';

                                //ReportHTML += '                     </div>'; //of table-responsive
                                //ReportHTML += '                 </section>';
                                //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                                ReportHTML += '             </div>';
                                ReportHTML += '         </body>';

                                ReportHTML += '                 <div class="col-xs-12 m-t m-l" style="clear:both;"><b>Invoice considered paid if a stamped receipt issued</b></div>';
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                                ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                                ReportHTML += '                 </div>'
                                if ($("#cbPrintStamp").prop("checked") && pInvoiceTypeCode != "DRAFT")
                                    ReportHTML += '         <div class="text-left m-l-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                                ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';

                                //ReportHTML += '         <div class="row text-right m-r m-t">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                                //ReportHTML += '         <div class="row text-right m-r">' + '  يوقف صرف شيكات مصر للتأمين لحين تسوية التعويضات  ' + '</div>';
                                //ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                                //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                                //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                                //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                                if ($("#cbPrintFooterInvoice").prop("checked"))
                                    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter' + (pInvoiceTypeCode == "SOA" ? "-Statement" : "") + '.jpg" alt="footer"/></div>';
                                else
                                    ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                                ReportHTML += '     </footer>';
                                ReportHTML += '</html>';
                                if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                    pFinalReportHTML += ReportHTML;
                                    Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                                }
                                else {
                                    pFinalReportHTML += ReportHTML;
                                    pFinalReportHTML += ' <div class="break"></div>';
                                }
                            } //if (pInvoiceHeader.MasterBL == 0 || pInvoiceHeader.CertificateNumber == 0)
                        } //EOF if (pDefaults.UnEditableCompanyName == "SAF")
                        else if (pDefaults.UnEditableCompanyName == "SEF-WithOptions") {
                            debugger;

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';

                            ReportHTML += '                 <div class="col-xs-12 text-center"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + ' ' + $("#slInvoiceOriginal").val() + '</h3></div>';

                            ReportHTML += '         <div class="col-xs-12 m-t">';

                            ReportHTML += '             <div class="col-xs-8">';
                            ReportHTML += '                 <b>Bill to: </b>' + pInvoiceHeader.PartnerName;
                            if (pDefaults.UnEditableCompanyName == "GBL") {
                                ReportHTML += '                 <br><b>Address: </b>' + (pClientHeader.Address == 0 ? "" : pClientHeader.Address.replace(/\n/g, "<br/>"));
                            }
                            else {
                                ReportHTML += '                 <br><b>Address: </b>' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                                ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            }
                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-4">';
                            ReportHTML += '                 <b>Billing Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                            ReportHTML += '                 <b>Billing Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            ReportHTML += '             </div>';
                            //if (pInvoiceTypeCode == "DRAFT") {
                            //    ReportHTML += '             <div style="position:absolute;left:50px;top:250px;">';
                            //    ReportHTML += '             <img src="/Content/Images/DraftWaterMark.jpg" alt="logo" width=612px; height=200px;></div>';
                            //}

                            ReportHTML += '             <div class="col-xs-12 clear"><hr style="border:solid #000 1px;" /></div>';

                            ReportHTML += '         <div class="col-xs-6"><b>Operation: </b>' + (pOperationHeader.Code == 0 ? pOperationHeader.MasterOperationCode : pOperationHeader.Code) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>' + "FileNo.:" + ' </b>' + ((pMasterOperationHeader != undefined && pMasterOperationHeader != null) ? pMasterOperationHeader.CustomerReference : pOperationHeader.CustomerReference) + '</div>';

                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'MAWB: ' : 'MBL: ') + '</b>' + pMasterBL + '</div>';

                            if ($("#cbPrintHBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>' + (pOperationHeader.TransportType == AirTransportType ? "HAWB" : 'HBL') + '</b>: ' + (pHouseNumber == "" ? pHouseBLs : pHouseNumber) + '</div>';

                            if ($("#cbPrintCourier").prop("checked"))
                                ReportHTML += '         <div class="col-xs-6"><b>Courier: </b>' + ((pOperationHeader.LineName == 0 && pMasterOperationHeader != undefined && pMasterOperationHeader != null) ? pMasterOperationHeader.LineName : pOperationHeader.LineName) + '</div>';
                            if ($("#cbPrintAWB").prop("checked"))
                                ReportHTML += '         <div class="col-xs-6"><b>AWB: </b>' + (pMainRoute.Notes == 0 ? "" : pMainRoute.Notes) + '</div>';

                            if ($("#cbPrintLine").prop("checked"))
                                ReportHTML += '         <div class="col-xs-6"><b>Line: </b>' + ((pOperationHeader.LineName == 0 && pMasterOperationHeader != undefined && pMasterOperationHeader != null) ? pMasterOperationHeader.LineName : pOperationHeader.LineName) + '</div>';
                            if ($("#cbPrintPOL").prop("checked"))
                                ReportHTML += '         <div class="col-xs-6"><b>POL: </b>' + (pPOLName == 0 ? "" : pPOLName) + '</div>';
                            if ($("#cbPrintPOD").prop("checked"))
                                ReportHTML += '         <div class="col-xs-6"><b>POD: </b>' + (pPODName == 0 ? "" : pPODName) + '</div>';
                            if ($("#cbPrintRefNo").prop("checked"))
                                ReportHTML += '         <div class="col-xs-6"><b>' + "Ref Number: " + ' </b>' + (pOperationHeader.BLType == constHouseBLType ? pMasterOperationHeader.Notes : pOperationHeader.Notes) + '</div>';
                            if ($("#cbPrintPONumber").prop("checked"))
                                ReportHTML += '         <div class="col-xs-6"><b>' + "PO Number: " + ' </b>' + (pOperationHeader.BLType == constHouseBLType ? pOperationHeader.FreightPayableAt : pOperationHeader.PONumber) + '</div>';
                            if ($("#cbPrintNoOfContainers").prop("checked"))
                                ReportHTML += '         <div class="col-xs-6"><b>No of CTRs: </b>' + (pOperationHeader.ContainerTypes == 0 ? "" : pOperationHeader.ContainerTypes) + '</div>';
                            if ($("#cbPrintNoOfPackages").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>No of packages: </b>' + (pOperationHeader.PackageTypeName != 0 ? (pOperationHeader.NumberOfPackages + 'x' + pOperationHeader.PackageTypeName) : pOperationHeader.PackageTypes) + '</div>';

                            if ($("#cbPrintChargeableWeight").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>ChargeableWeight: </b>' + pOperationHeader.ChargeableWeightSum + ' KGM' + '</div>';
                            if ($("#cbPrintVolume").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>Volume: </b>' + pCBM + ' CBM</div>';
                            if ($("#cbPrintSONumber").prop("checked"))
                                ReportHTML += '         <div class="col-xs-6"><b>' + "SO Number: " + ' </b>' + (pOperationHeader.Notes == 0 ? "" : pOperationHeader.Notes) + '</div>';
                            if ($("#cbPrintShipper").prop("checked"))
                                ReportHTML += '         <div class="col-xs-6"><b>' + "Shipper: " + ' </b>' + (pOperationHeader.ShipperName == 0 ? "" : pOperationHeader.ShipperName) + '</div>';
                            if ($("#cbPrintBookingNumber").prop("checked"))
                                ReportHTML += '         <div class="col-xs-6"><b>' + "Booking No: " + ' </b>' + (pOperationHeader.BookingNumbers == 0 || pOperationHeader.BookingNumbers == "" ? "N/A" : pOperationHeader.BookingNumbers) + '</div>';
                            if ($("#cbPrintGrossWeight").prop("checked"))
                                ReportHTML += '             <div class="col-xs-4"><b>Gross Weight: </b>' + pOperationHeader.GrossWeightSum + ' KGM' + '</div>';
                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="m-l" style="clear:both;"><h3><br><br><br>Please, see attachment.</h3></div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Qty</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>WHT</th>';
                            ReportHTML += '                                     <th>VAT</th>';
                            ReportHTML += '                                     <th>Total</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            var _TotalTaxOnItems = 0;
                            var _TotalDiscountOnItems = 0;
                            $.each(JSON.parse(data[2]), function (i, item) {
                                _TotalTaxOnItems += item.TaxAmount;
                                _TotalDiscountOnItems += item.DiscountAmount;
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 && item.ChargeTypeLocalName != undefined ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes.replace(/\n/g, "<br/>")) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.DiscountAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.TaxAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                //ReportHTML += '                                         <td>' + (item.Notes == "0" ? "" : item.Notes) + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td colspan=4>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                //ReportHTML += '                                         <td>' + _TotalTaxOnItems + '</td>';
                                //ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                            //ReportHTML += '                                         </tr>';
                            //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'

                            ReportHTML += '                         <div class="row"></div>';

                            ReportHTML += '                         <div class="col-xs-8 m-t">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                            if (_TotalTaxOnItems != 0 || _TotalDiscountOnItems != 0) {
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                //ReportHTML += '                             <b>VAT: </b>' + (_TotalTaxOnItems - _TotalDiscountOnItems).toFixed(2) + '</br>';
                                if (_TotalTaxOnItems != 0)
                                    ReportHTML += '                             <b>VAT: </b>' + (_TotalTaxOnItems).toFixed(2) + '</br>';
                                if (_TotalDiscountOnItems != 0)
                                    ReportHTML += '                             <b>WHT: </b>' + (_TotalDiscountOnItems).toFixed(2) + '</br>';
                            }
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).replace(/\B(?=(\d{3})+(?!\d))/g, ",").toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '             </div>';
                            ReportHTML += '         </body>';

                            //ReportHTML += '                 <div class="col-xs-12 m-t m-l" style="clear:both;"><b>Invoice considered paid if a stamped receipt issued</b></div>';
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>';
                            if ($("#cbPrintStamp").prop("checked") && pInvoiceTypeCode != "DRAFT") {
                                ReportHTML += '         <div class="text-left m-l-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';
                            }
                            //ReportHTML += '                     <div class="col-xs-12 m-t-lg text-center"><b>' + '   الشركة لا تخضع لنظام الخصم تطبيقا لأحكام المادة رفم 59 من القانون 91 لسنة 2005 حيث يتم تطبيق نظام الدفعات المقدمة طبقا لأحكام المادة 62   ' + '</b></div>';
                            ReportHTML += '     <footer class="footer col-xs-12 m-t-lg" style="width:100%; position:absolute; bottom:0;">';
                            //ReportHTML += '         <div class="row text-right m-r m-t">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                            if ($("#cbPrintFooterInvoice").prop("checked")) {
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter' + (pInvoiceHeader.InvoiceTypeName == "DN" ? "-Debit" : "") + '.jpg" alt="footer"/></div>';
                            }
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //else if (pDefaults.UnEditableCompanyName == "SAF")
                        else if (pDefaults.UnEditableCompanyName == "SEF") {
                            debugger;

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';

                            ReportHTML += '                 <div class="col-xs-12 text-center"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + ' ' + $("#slInvoiceOriginal").val() + '</h3></div>';

                            ReportHTML += '         <div class="col-xs-12 m-t">';

                            ReportHTML += '             <div class="col-xs-8">';
                            ReportHTML += '                 <b>Bill to: </b>' + pInvoiceHeader.PartnerName;
                            if (pDefaults.UnEditableCompanyName == "GBL") {
                                ReportHTML += '                 <br><b>Address: </b>' + (pClientHeader.Address == 0 ? "" : pClientHeader.Address.replace(/\n/g, "<br/>"));
                            }
                            else {
                                ReportHTML += '                 <br><b>Address: </b>' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                                ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            }
                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-4">';
                            ReportHTML += '                 <b>Billing Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                            ReportHTML += '                 <b>Billing Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            ReportHTML += '             </div>';
                            //if (pInvoiceTypeCode == "DRAFT") {
                            //    ReportHTML += '             <div style="position:absolute;left:50px;top:250px;">';
                            //    ReportHTML += '             <img src="/Content/Images/DraftWaterMark.jpg" alt="logo" width=612px; height=200px;></div>';
                            //}

                            ReportHTML += '             <div class="col-xs-12 clear"><hr style="border:solid #000 1px;" /></div>';

                            ReportHTML += '         <div class="col-xs-6"><b>Operation: </b>' + (pOperationHeader.Code == 0 ? pOperationHeader.MasterOperationCode : pOperationHeader.Code) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>' + "FileNo.:" + ' </b>' + ((pMasterOperationHeader != undefined && pMasterOperationHeader != null) ? pMasterOperationHeader.CustomerReference : pOperationHeader.CustomerReference) + '</div>';
                            if (pOperationHeader.LineName.split(" ")[0] != "DHL" && pOperationHeader.LineName.split(" ")[0] != "TNT"
                                && pOperationHeader.LineName.split(" ")[0] != "FEDEX" && pOperationHeader.LineName.split(" ")[0] != "UPS"
                                && pOperationHeader.LineName.split(" ")[0] != "ARAMEX") {
                                ReportHTML += '         <div class="col-xs-6"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'Airline' : 'Shipping Line') + ': </b>' + ((pOperationHeader.LineName == 0 && pMasterOperationHeader != undefined && pMasterOperationHeader != null) ? (pMasterOperationHeader.LineName == 0 || pMasterOperationHeader.LineName == "" ? "N/A" : pMasterOperationHeader.LineName) : (pOperationHeader.LineName == 0 || pOperationHeader.LineName == "" ? "N/A" : pOperationHeader.LineName)) + '</div>';
                                if (pOperationHeader.ShipmentType == constConsolidationShipmentType)
                                    ReportHTML += '         <div class="col-xs-6"><b>' + "Shipper: " + ' </b>' + (pOperationHeader.ShipperName == 0 || pOperationHeader.ShipperName == "" ? "N/A" : pOperationHeader.ShipperName) + '</div>';
                                else
                                    ReportHTML += '         <div class="col-xs-6"><b>' + "Booking No: " + ' </b>' + (pOperationHeader.BookingNumbers == 0 || pOperationHeader.BookingNumbers == "" ? "N/A" : pOperationHeader.BookingNumbers) + '</div>';
                            }
                            //if ($("#cbPrintMBL").prop("checked"))
                            ReportHTML += '             <div class="col-xs-6"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'MAWB: ' : 'MBL: ') + '</b>' + (pMasterBL == 0 || pMasterBL == "" ? "N/A" : pMasterBL) + '</div>';
                            //if ($("#cbPrintHBL").prop("checked")) {
                            //ReportHTML += '             <div class="col-xs-6"><b>' + (pOperationHeader.TransportType == AirTransportType ? "HAWB" : 'HBL') + '</b>: ' + (pHouseNumber == "" ? (pHouseBLs == 0 || pHouseBLs == "" ? "N/A" : pHouseBLs) : (pHouseNumber == 0 || pHouseNumber == "" ? "N/A" : pHouseNumber)) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>' + (pOperationHeader.TransportType == AirTransportType ? "HAWB" : 'HBL') + '</b>: ' + (pOperationHeader.TransportType == AirTransportType ? (pOperationHeader.MAWBSuffix == "" ? "N/A" : pOperationHeader.MAWBSuffix) : (pOperationHeader.HouseNumber == "" ? "N/A" : pOperationHeader.HouseNumber)) + '</div>';

                            //Ocean Export FCL
                            if (pOperationHeader.TransportType == OceanTransportType && pOperationHeader.DirectionType == constExportDirectionType && pOperationHeader.ShipmentType == constFCLShipmentType) {
                                ReportHTML += '         <div class="col-xs-6"><b>POL: </b>' + (pPOLName == 0 || pPOLName == "" ? "N/A" : pPOLName) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>POD: </b>' + (pPODName == 0 || pPODName == "" ? "N/A" : pPODName) + '</div>';
                                if (pOperationHeader.DirectionType == constExportDirectionType)
                                    ReportHTML += '         <div class="col-xs-6"><b>' + "Ref Number: " + ' </b>' + (pOperationHeader.BLType == constHouseBLType ? (pMasterOperationHeader.Notes == 0 || pMasterOperationHeader.Notes == "" ? "N/A" : pMasterOperationHeader.Notes) : (pOperationHeader.Notes == 0 || pOperationHeader.Notes == "" ? "N/A" : pOperationHeader.Notes)) + '</div>';
                                else
                                    ReportHTML += '         <div class="col-xs-6"><b>' + "SO Number: " + ' </b>' + (pOperationHeader.Notes == 0 || pOperationHeader.Notes == "" ? "N/A" : pOperationHeader.Notes) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>' + "PO Number: " + ' </b>' + (pOperationHeader.BLType == constHouseBLType ? 
                                    (pMasterOperationHeader.TransportType == AirTransportType ? 
                                        (pOperationHeader.AccountingInformation == 0 || pOperationHeader.AccountingInformation == "" ? "N/A" : pOperationHeader.AccountingInformation.toUpperCase()) 
                                        : (pOperationHeader.FreightPayableAt == 0 || pOperationHeader.FreightPayableAt == "" ? "N/A" : pOperationHeader.FreightPayableAt.toUpperCase()))
                                : (pOperationHeader.PONumber == 0 || pOperationHeader.PONumber == "" ? "N/A" : pOperationHeader.PONumber)) + '</div>';
                                
                                ReportHTML += '         <div class="col-xs-6"><b>No of CTRs: </b>' + (pOperationHeader.ContainerTypes == 0 || pOperationHeader.ContainerTypes == "" ? "N/A" : pOperationHeader.ContainerTypes) + '</div>';
                            } //EOF if (pOperationHeader.TransportType == OceanTransportType && pOperationHeader.DirectionType == constExportDirectionType && pOperationHeader.ShipmentType == constFCLShipmentType) {
                            else {
                                if (pOperationHeader.LineName.split(" ")[0] == "DHL" || pOperationHeader.LineName.split(" ")[0] == "TNT"
                                    || pOperationHeader.LineName.split(" ")[0] == "FEDEX" || pOperationHeader.LineName.split(" ")[0] == "UPS"
                                    || pOperationHeader.LineName.split(" ")[0] == "ARAMEX") { //line 2
                                    ReportHTML += '         <div class="col-xs-6"><b>Courier: </b>' + ((pOperationHeader.LineName == 0 && pMasterOperationHeader != undefined && pMasterOperationHeader != null) ? (pMasterOperationHeader.LineName == 0 || pMasterOperationHeader.LineName == "" ? "N/A" : pMasterOperationHeader.LineName) : (pOperationHeader.LineName == 0 || pOperationHeader.LineName == "" ? "N/A" : pOperationHeader.LineName)) + '</div>';
                                    ReportHTML += '         <div class="col-xs-6"><b>AWB: </b>' + (pMainRoute.Notes == 0 || pMainRoute.Notes == "" ? "N/A" : pMainRoute.Notes) + '</div>';
                                }
                                ReportHTML += '         <div class="col-xs-6"><b>POL: </b>' + (pPOLName == 0 || pPOLName == "" ? "N/A" : pPOLName) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>POD: </b>' + (pPODName == 0 || pPODName == "" ? "N/A" : pPODName) + '</div>';
                                //ReportHTML += '         <div class="col-xs-6"><b>' + "PO Number: " + ' </b>' + (pOperationHeader.BLType == constHouseBLType ? (pOperationHeader.AccountingInformation == 0 || pOperationHeader.AccountingInformation == "" ? "N/A" : pOperationHeader.AccountingInformation) : (pOperationHeader.PONumber == 0 || pOperationHeader.PONumber == "" ? "N/A" : pOperationHeader.PONumber)) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>' + "PO Number: " + ' </b>' + (pOperationHeader.BLType == constHouseBLType ?
                                    (pMasterOperationHeader.TransportType == AirTransportType ?
                                        (pOperationHeader.AccountingInformation == 0 || pOperationHeader.AccountingInformation == "" ? "N/A" : pOperationHeader.AccountingInformation.toUpperCase())
                                        : (pOperationHeader.FreightPayableAt == 0 || pOperationHeader.FreightPayableAt == "" ? "N/A" : pOperationHeader.FreightPayableAt.toUpperCase())) 
                                : (pOperationHeader.PONumber == 0 || pOperationHeader.PONumber == "" ? "N/A" : pOperationHeader.PONumber)) + '</div>';
                                //if (pInvoiceHeader.InvoiceTypeCode == "ST" && !(pOperationHeader.TransportType == OceanTransportType && pOperationHeader.DirectionType == constExportDirectionType && pOperationHeader.ShipmentType == constFCLShipmentType))
                                if (pOperationHeader.DirectionType == constExportDirectionType)
                                    ReportHTML += '         <div class="col-xs-6"><b>' + "Ref Number: " + ' </b>' + (pOperationHeader.BLType == constHouseBLType ? (pMasterOperationHeader.Notes == 0 || pMasterOperationHeader.Notes == "" ? "N/A" : pMasterOperationHeader.Notes) : (pOperationHeader.Notes == 0 || pOperationHeader.Notes == "" ? "N/A" : pOperationHeader.Notes)) + '</div>';
                                else
                                    ReportHTML += '         <div class="col-xs-6"><b>' + "SO Number: " + ' </b>' + (pOperationHeader.Notes == 0 || pOperationHeader.Notes == "" ? "N/A" : pOperationHeader.Notes) + '</div>';

                                //if (pOperationHeader.CustomerReference != 0)
                                //    ReportHTML += '         <div class="col-xs-6"><b>' + "Consol.FileNo." + ' </b>' + (pOperationHeader.CustomerReference == 0 ? "" : pOperationHeader.CustomerReference) + '</div>';

                                if (pOperationHeader.ShipmentType == constFCLShipmentType || pOperationHeader.ShipmentType == constFCLShipmentType)
                                    ReportHTML += '         <div class="col-xs-6"><b>No of CTRs: </b>' + (pOperationHeader.ContainerTypes == 0 || pOperationHeader.ContainerTypes == "" ? "N/A" : pOperationHeader.ContainerTypes) + '</div>';
                                else {
                                    ReportHTML += '             <div class="col-xs-6"><b>No of packages: </b>' + (pOperationHeader.PackageTypeName != 0 ? (pOperationHeader.NumberOfPackages + 'x' + pOperationHeader.PackageTypeName) : pOperationHeader.PackageTypes) + '</div>';
                                    ReportHTML += '             <div class="col-xs-6"><b>Description: </b>' + (pOperationHeader.DescriptionOfGoods == 0 || pOperationHeader.DescriptionOfGoods == "" ? "N/A" : pOperationHeader.DescriptionOfGoods) + '</div>';
                                }
                                //ReportHTML += '             <div class="col-xs-6"><b>Com. Reg. No.: </b>' + (pDefaults.CommericalRegNo == 0 ? "" : pDefaults.CommericalRegNo) + '</div>';
                                //ReportHTML += '             <div class="col-xs-6"><b>VAT ID No.: </b>' + (pDefaults.VatIDNo == 0 ? "" : pDefaults.VatIDNo) + '</div>';
                                //ReportHTML += '             <div class="col-xs-6"><b>Service: </b>' + (pOperationHeader.MoveTypeName == 0 ? "" : pOperationHeader.MoveTypeName) + '</div>';
                            } //else if (pOperationHeader.TransportType == OceanTransportType && pOperationHeader.DirectionType == constExportDirectionType && pOperationHeader.ShipmentType == constFCLShipmentType) {
                            ReportHTML += '             <div class="col-xs-6"><b>Gross Weight: </b>' + (pGrossWeightSum + ' KG') + '</div>';
                            if (
                                !(pOperationHeader.TransportType == OceanTransportType && pOperationHeader.DirectionType == constExportDirectionType && pOperationHeader.ShipmentType == constFCLShipmentType)
                            ) {
                                if (pOperationHeader.TransportType == AirTransportType)
                                    ReportHTML += '             <div class="col-xs-6"><b>ChargeableWeight: </b>' + pOperationHeader.ChargeableWeightSum + ' KGM' + '</div>';
                                if (pOperationHeader.ShipmentType == constLCLShipmentType || pOperationHeader.ShipmentType == constLTLShipmentType)
                                    ReportHTML += '             <div class="col-xs-6"><b>Volume: </b>' + pCBM + ' CBM</div>';
                            }
                            if (pOperationHeader.TransportType == OceanTransportType && pOperationHeader.DirectionType == constExportDirectionType)
                                ReportHTML += '         <div class="col-xs-6"><b>Form 13 : </b>' + (pOperationHeader.Form13Number == 0 ? (pMasterOperationHeader == null || pMasterOperationHeader.Form13Number == 0 ? "N/A" : pMasterOperationHeader.Form13Number) : pOperationHeader.Form13Number) + '</div>';
                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="m-l" style="clear:both;"><h3><br><br><br>Please, see attachment.</h3></div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Qty</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>WHT</th>';
                            ReportHTML += '                                     <th>VAT</th>';
                            ReportHTML += '                                     <th>Total</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            var _TotalTaxOnItems = 0;
                            var _TotalDiscountOnItems = 0;
                            $.each(JSON.parse(data[2]), function (i, item) {
                                _TotalTaxOnItems += item.TaxAmount;
                                _TotalDiscountOnItems += item.DiscountAmount;
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 && item.ChargeTypeLocalName != undefined ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes.replace(/\n/g, "<br/>")) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.DiscountAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.TaxAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                //ReportHTML += '                                         <td>' + (item.Notes == "0" ? "" : item.Notes) + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td colspan=4>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                //ReportHTML += '                                         <td>' + _TotalTaxOnItems + '</td>';
                                //ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                            //ReportHTML += '                                         </tr>';
                            //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'

                            ReportHTML += '                         <div class="row"></div>';

                            ReportHTML += '                         <div class="col-xs-8 m-t">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                            if (_TotalTaxOnItems != 0 || _TotalDiscountOnItems != 0) {
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                //ReportHTML += '                             <b>VAT: </b>' + (_TotalTaxOnItems - _TotalDiscountOnItems).toFixed(2) + '</br>';
                                if (_TotalTaxOnItems != 0)
                                    ReportHTML += '                             <b>VAT: </b>' + (_TotalTaxOnItems).toFixed(2) + '</br>';
                                if (_TotalDiscountOnItems != 0)
                                    ReportHTML += '                             <b>WHT: </b>' + (_TotalDiscountOnItems).toFixed(2) + '</br>';
                            }
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).replace(/\B(?=(\d{3})+(?!\d))/g, ",").toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '             </div>';
                            ReportHTML += '         </body>';

                            //ReportHTML += '                 <div class="col-xs-12 m-t m-l" style="clear:both;"><b>Invoice considered paid if a stamped receipt issued</b></div>';
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>';
                            if ($("#cbPrintStamp").prop("checked") && pInvoiceTypeCode != "DRAFT") {
                                ReportHTML += '         <div class="text-left m-l-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';
                            }
                            //ReportHTML += '                     <div class="col-xs-12 m-t-lg text-center"><b>' + '   الشركة لا تخضع لنظام الخصم تطبيقا لأحكام المادة رفم 59 من القانون 91 لسنة 2005 حيث يتم تطبيق نظام الدفعات المقدمة طبقا لأحكام المادة 62   ' + '</b></div>';
                            ReportHTML += '     <footer class="footer col-xs-12 m-t-lg" style="width:100%; position:absolute; bottom:0;">';
                            //ReportHTML += '         <div class="row text-right m-r m-t">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                            if ($("#cbPrintFooterInvoice").prop("checked")) {
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter' + (pInvoiceHeader.InvoiceTypeName == "DN" ? "-Debit" : "") + '.jpg" alt="footer"/></div>';
                            }
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //else if (pDefaults.UnEditableCompanyName == "SEF-Del")
                        else if (pDefaults.UnEditableCompanyName == "MEL"
                            || pDefaults.UnEditableCompanyName == "GBL"
                            || pDefaults.IsTaxOnItems) {
                            debugger;

                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            //if (pDefaults.UnEditableCompanyName == "MEL")
                            //    ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader' + (pInvoiceHeader.InvoiceTypeName == "DN" ? "-Debit" : "-Invoice") + '.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //else
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';

                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            if (pDefaults.UnEditableCompanyName == "MEL" && (pInvoiceHeader.InvoiceTypeName == "SW" || pInvoiceHeader.InvoiceTypeName == "AA")) //Dont print for Safena
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + '  مطالبة   ' + '</h3></div>';

                            else if (pDefaults.UnEditableCompanyName == "MEL" && pInvoiceHeader.InvoiceTypeName == "AAEXP")
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + '  مطالبة  صادر  ' + '</h3></div>';
                            else if (pDefaults.UnEditableCompanyName == "MEL" && pInvoiceHeader.InvoiceTypeName == "DAAEXP")
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + '  مطالبة لحساب الغير  صادر  ' + '</h3></div>';
                            else if (pDefaults.UnEditableCompanyName == "MEL" && pInvoiceHeader.InvoiceTypeName == "AAIMP")
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + '  مطالبة وارد  ' + '</h3></div>';
                            else if (pDefaults.UnEditableCompanyName == "MEL" && pInvoiceHeader.InvoiceTypeName == "DAAIMP")
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + '  مطالبة لحساب الغير  وارد  ' + '</h3></div>';
                            else if (pDefaults.UnEditableCompanyName == "MEL" && (pInvoiceHeader.InvoiceTypeName == "DN" || pInvoiceHeader.InvoiceTypeName == "DAA")) //Dont print for Safena
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + '  متحصلات لحساب الغير  ' + '<br>' + 'Debit Note' + '</h3></div>';
                            else if (pDefaults.UnEditableCompanyName == "ALF")
                                ReportHTML += '                 <div class="col-xs-12 text-center"><h3>' + ' ' + pInvoiceHeader.InvoiceNumber + " / " + pInvoiceHeader.InvoiceTypeName + ' ' + '&emsp;&emsp;' + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + ' ' + $("#slInvoiceOriginal").val() + '</h3></div>';
                            else if (pDefaults.UnEditableCompanyName == "GBL")
                                //ReportHTML += '                 <div class="col-xs-12 text-center m-t-lg"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + ' ' + (pInvoiceHeader.IsApproved ? $("#slInvoiceOriginal").val() : " (Draft) ") + '</h3></div>';
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-lg"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + ' '
                                    + (!pInvoiceHeader.IsApproved
                                        ? "(Draft)"
                                        : (pInvoiceHeader.IsApproved && pInvoiceHeader.IsPrintOriginal
                                            ? "(Original)"
                                            : (pInvoiceHeader.IsApproved && !pInvoiceHeader.IsPrintOriginal && $("#slInvoiceOriginal").val() == ""
                                                ? "(Copy)"
                                                : $("#slInvoiceOriginal").val())
                                        )
                                    )
                                    + '</h3></div>';
                            else if (pDefaults.UnEditableCompanyName == "NEW" && pInvoiceHeader.InvoiceTypeCode == "STATMEN-SH")
                                ReportHTML += '                 <div class="col-xs-12 text-center"><h3>' + pInvoiceHeader.InvoiceTypeName + '</h3></div>';
                            else if (pDefaults.UnEditableCompanyName == "NEW" && pInvoiceHeader.InvoiceTypeCode == "INV.REC")
                                ReportHTML += '                 <div class="col-xs-12 text-center"><h3>' + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + ' ' + $("#slInvoiceOriginal").val() + '</h3></div>';
                            else
                                ReportHTML += '                 <div class="col-xs-12 text-center"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + ' ' + $("#slInvoiceOriginal").val() + '</h3></div>';
                            //if (!(pDefaults.UnEditableCompanyName == "MEL" && pInvoiceHeader.InvoiceTypeName == "SW")) //Dont print for Safena
                            //    ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';
                            //else { //i.e. (pDefaults.UnEditableCompanyName == "SAF" && pInvoiceTypeCode == "DRAFT") {
                            //    ReportHTML += '             <div style="position:absolute;left:50px;top:170px;">';
                            //    ReportHTML += '             <img src="/Content/Images/DraftWaterMark.jpg" alt="logo" width=612px; height=200px;></div>';
                            //}
                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';

                            ReportHTML += '         <div class="col-xs-12 m-t">';

                            ReportHTML += '             <div class="col-xs-8">';
                            if (pDefaults.UnEditableCompanyName == "ELC")
                                ReportHTML += '                 <b>Client: </b>' + pOperationHeader.ClientName + "<br>";
                            ReportHTML += '                 <b>' + (pDefaults.UnEditableCompanyName == "MEL" ? 'To:' : 'Bill to:') + ' </b>' + pInvoiceHeader.PartnerName;
                            if (pDefaults.UnEditableCompanyName == "GBL") {
                                ReportHTML += '                 <br><b>Address: </b>' + (pClientHeader.Address == 0 ? "" : pClientHeader.Address.replace(/\n/g, "<br/>"));
                            }
                            else {
                                ReportHTML += '                 <br><b>Address: </b>' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                                ReportHTML += '                     ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                                ReportHTML += '                     ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                                ReportHTML += '                     ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            }
                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-4">';
                            if (pInvoiceTypeCode == "SOA" && pInvoiceHeader.RelatedToInvoiceID != 0)
                                ReportHTML += '             <b>Related To: </b>' + pInvoiceHeader.RelatedToInvoiceTypeName + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + "#" + pInvoiceHeader.RelatedToInvoiceNumber.toString().padStart(5, 0) + '<br>';
                            else if (pDefaults.UnEditableCompanyName == "MEL")
                                ReportHTML += '             <b>Statement No.: </b>' + pInvoiceHeader.InvoiceTypeName /*+ ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + "#"*/ + ' ' + pInvoiceHeader.InvoiceNumber + '<br>';
                            ReportHTML += '                 <b>' + (pDefaults.UnEditableCompanyName == "MEL" ? 'Statement' : 'Billing') + ' Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '<br>';
                            if (!(pDefaults.UnEditableCompanyName == "NEW" && (pInvoiceHeader.InvoiceTypeCode == "STATMEN-SH" || pInvoiceHeader.InvoiceTypeCode == "INV.REC")))
                                ReportHTML += '                 <b>' + (pDefaults.UnEditableCompanyName == "MEL" ? 'Statement' : 'Billing') + ' Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '<br>';
                            if (pDefaults.UnEditableCompanyName == "ELC" && pTruckingOrders.length > 0)
                                ReportHTML += '                 <b>Issue Date: </b>' + pTruckingOrders[0].StuffingDate + '<br>';
                            else if (pDefaults.UnEditableCompanyName == "MEL" && pOperationHeader.DirectionType == constImportDirectionType)
                                ReportHTML += '                 <b>' + 'Arrival Date:' + ' </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ExpectedArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ExpectedArrival)));
                            else if (!(pDefaults.UnEditableCompanyName == "GBL" && pOperationHeader.MoveTypeName == "WAREHOUSING")
                                && !(pDefaults.UnEditableCompanyName == "NEW" && (pInvoiceHeader.InvoiceTypeCode == "STATMEN-SH" || pInvoiceHeader.InvoiceTypeCode == "INV.REC"))
                                && pDefaults.UnEditableCompanyName != "SEF" && pDefaults.UnEditableCompanyName != "DGL"
                            )
                                ReportHTML += '                 <b>' + (pDefaults.UnEditableCompanyName == "LOG" ? 'Delivery Date:' : 'Sailing Date:') + ' </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ExpectedDeparture)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ExpectedDeparture)));
                            ReportHTML += '             </div>';
                            //if (pInvoiceTypeCode == "DRAFT") {
                            //    ReportHTML += '             <div style="position:absolute;left:50px;top:250px;">';
                            //    ReportHTML += '             <img src="/Content/Images/DraftWaterMark.jpg" alt="logo" width=612px; height=200px;></div>';
                            //}

                            ReportHTML += '                 <div class="col-xs-12 clear"><hr style="border:solid #000 1px;" /></div>';
                            if (pInvoiceHeader.InvoiceTypeCode == "CREDITMEMO" && pDefaults.UnEditableCompanyName == "GBL")
                                ReportHTML += '             <div class="col-xs-12" style="clear:both;"><b>Cancelled Invoice: </b>' + (pInvoiceHeader.Notes == 0 ? "" : pInvoiceHeader.Notes) + '</div>';

                            ReportHTML += '         <div class="col-xs-6"><b>Operation: </b>' + (pOperationHeader.Code == 0 ? pOperationHeader.MasterOperationCode : pOperationHeader.Code) + (pDefaults.UnEditableCompanyName == "NEW" ? (" / " + pInvoiceHeader.BranchName) : "") + '</div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>' + (pDefaults.UnEditableCompanyName == "LOG" ? "Dossier: " : (pOperationHeader.TransportType != AirTransportType ? (pDefaults.UnEditableCompanyName == "MEL" ? 'BL: ' : 'MB/L: ') : 'MAWB: ')) + '</b>' + (pDefaults.UnEditableCompanyName == "NEW" && (pInvoiceHeader.InvoiceTypeCode == "STATMEN-SH" || pInvoiceHeader.InvoiceTypeCode == "INV.REC") ? (pInvoiceHeader.MiddleSignature == 0 ? "" : pInvoiceHeader.MiddleSignature) : pMasterBL) + '</div>';

                            if ($("#cbPrintHBL").prop("checked") && pDefaults.UnEditableCompanyName != "NEW") {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>' + (pOperationHeader.TransportType == AirTransportType ? "HAWB" : 'HBL') + '</b>: ' + pHouseBLs + '</div>';
                                else if (pHouseNumber != "0")
                                    ReportHTML += '             <div class="col-xs-6"><b>' + (pOperationHeader.TransportType == AirTransportType ? "HAWB" : 'HB/L No.:') + '</b> ' + (pHouseNumber == "" ? "N/A" : pHouseNumber) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "MEL")
                                ReportHTML += '         <div class="col-xs-6"><b>Form 13 : </b>' + (pOperationHeader.Form13Number == 0 ? "" : pOperationHeader.Form13Number) + '</div>';
                            if (pOperationHeader.CertificateNumber != "N/A"
                                && !(pDefaults.UnEditableCompanyName == "GBL" && pOperationHeader.MoveTypeName == "WAREHOUSING") && pDefaults.UnEditableCompanyName != "MEL"
                                && !(pDefaults.UnEditableCompanyName == "NEW" && (pInvoiceHeader.InvoiceTypeCode == "STATMEN-SH" || pInvoiceHeader.InvoiceTypeCode == "INV.REC"))
                            )
                                ReportHTML += '         <div class="col-xs-6"><b>Certificate Number: </b>' + (pOperationHeader.CertificateNumber == 0 ? "" : pOperationHeader.CertificateNumber) + '</div>';
                            if (!(pDefaults.UnEditableCompanyName == "GBL" && pOperationHeader.MoveTypeName == "WAREHOUSING")) {
                                if (!(pDefaults.UnEditableCompanyName == "NEW" && pInvoiceHeader.InvoiceTypeCode == "STATMEN-SH"))
                                    ReportHTML += '         <div class="col-xs-6"><b>' + (pDefaults.UnEditableCompanyName == "CFR" && pInvoiceHeader.TransportType == AirTransportType ? "A" : "") + 'POL: </b>' + (pPOLName == 0 ? "" : pPOLName) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>' + (pDefaults.UnEditableCompanyName == "CFR" && pInvoiceHeader.TransportType == AirTransportType ? "A" : "") + 'POD: </b>' + (pPODName == 0 ? "" : pPODName) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "CAP")
                                ReportHTML += '         <div class="col-xs-6"><b>Consignee: </b>' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';
                            //ReportHTML += '         <div class="col-xs-6"><b>Consignee: </b>' + (pOperationHeader.ConsigneeName == 0 ? "" : pOperationHeader.ConsigneeName) + '</div>';
                            if (pOperationHeader.CustomerReference != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>' + "Customer Ref:" + ' </b>' + (pOperationHeader.CustomerReference == 0 ? "" : pOperationHeader.CustomerReference) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "DGL"
                                || (pDefaults.UnEditableCompanyName == "CFR" && pOperationHeader.SupplierReference != 0))
                                ReportHTML += '         <div class="col-xs-6"><b>' + (pDefaults.UnEditableCompanyName == "CFR" ? "C/D No.:" : "Supplier Ref:") + ' </b>' + (pOperationHeader.SupplierReference == 0 ? "" : pOperationHeader.SupplierReference) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "SWI")
                                ReportHTML += '         <div class="col-xs-6"><b>' + "PO Number: " + ' </b>' + (pOperationHeader.PONumber == 0 ? "" : pOperationHeader.PONumber) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "CAP")
                                ReportHTML += '         <div class="col-xs-6"><b>Booking No: </b>' + (pOperationHeader.BookingNumbers == 0 ? "" : pOperationHeader.BookingNumbers) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "CAP")
                                ReportHTML += '         <div class="col-xs-6"><b>Ref#: </b>' + (pOperationHeader.DispatchNumber == 0 ? "" : pOperationHeader.DispatchNumber) + '</div>';
                            //if (pDefaults.UnEditableCompanyName == "MEL")
                            //    ReportHTML += '         <div class="col-xs-6"><b>Dispatch#: </b>' + (pOperationHeader.DispatchNumber == 0 ? "" : pOperationHeader.DispatchNumber) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "CAP" && pInvoiceTypeCode == "SOA" && pInvoiceHeader.RelatedToInvoiceID != 0)
                                ReportHTML += '             <b>Related To: </b>' + pInvoiceHeader.RelatedToInvoiceTypeName + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + "#" + pInvoiceHeader.RelatedToInvoiceNumber.toString().padStart(5, 0) + '<br>';
                            if (pInvoiceItem.length > 0 && pDefaults.UnEditableCompanyName == "GBL")
                                if (pInvoiceItem[0].TruckingOrderID != 0) {
                                    ReportHTML += '         <div class="col-xs-6"><b>Loading Zone: </b>' + (pInvoiceItem[0].LoadingZoneName == 0 ? "N/A" : pInvoiceItem[0].LoadingZoneName) + '</div>';
                                    ReportHTML += '         <div class="col-xs-6"><b>First Curing Zone: </b>' + (pInvoiceItem[0].FirstCuringAreaName == 0 ? "" : pInvoiceItem[0].FirstCuringAreaName) + '</div>';
                                    ReportHTML += '         <div class="col-xs-6"><b>Second Curing Zone: </b>' + (pInvoiceItem[0].SecondCuringAreaName == 0 ? "" : pInvoiceItem[0].SecondCuringAreaName) + '</div>';
                                    ReportHTML += '         <div class="col-xs-6"><b>Third Curing Zone: </b>' + (pInvoiceItem[0].ThirdCuringAreaName == 0 ? "" : pInvoiceItem[0].ThirdCuringAreaName) + '</div>';
                                }
                            if (pDefaults.UnEditableCompanyName == "GBL") {
                                ReportHTML += '         <div class="col-xs-6"><b>Business Unit: </b>' + (pOperationHeader.BusinessUnit == 0 ? "N/A" : pOperationHeader.BusinessUnit) + '</div>';
                            }
                            if (!(pDefaults.UnEditableCompanyName == "GBL" && pOperationHeader.MoveTypeName == "WAREHOUSING")
                                && pDefaults.UnEditableCompanyName != "CFR"
                                && !(pDefaults.UnEditableCompanyName == "NEW" && (pInvoiceHeader.InvoiceTypeCode == "STATMEN-SH" || pInvoiceHeader.InvoiceTypeCode == "INV.REC")))
                                ReportHTML += '         <div class="col-xs-6"><b>Line: </b>' + ((pDefaults.UnEditableCompanyName == "CAP") ? (pOperationHeader.ShippingLineName == 0 ? "" : pOperationHeader.ShippingLineName) : (pOperationHeader.LineName == 0 ? "" : pOperationHeader.LineName)) + '</div>';
                            if ((pOperationHeader.TransportType == OceanTransportType || pDefaults.UnEditableCompanyName == "ELC")
                                && !(pDefaults.UnEditableCompanyName == "NEW" && (pInvoiceHeader.InvoiceTypeCode == "STATMEN-SH" || pInvoiceHeader.InvoiceTypeCode == "INV.REC"))
                            ) {
                                //ReportHTML += '         <div class="col-xs-6"><b>Container No.s: </b>' + (pOperationHeader.ContainerNumbers == 0 ? "" : pOperationHeader.ContainerNumbers) + '</div>';
                                if (pOperationHeader.ShipmentType != constLCLShipmentType && pOperationHeader.ShipmentType != constLTLShipmentType)
                                    ReportHTML += '         <div class="col-xs-6"><b>Cont.Types: </b>' + (pOperationHeader.ContainerTypes == 0 ? "" : pOperationHeader.ContainerTypes) + '</div>';
                                if (pDefaults.UnEditableCompanyName == "MEL")
                                    ReportHTML += '         <div class="col-xs-6"><b>Cont.Nos: </b>' + (pOperationHeader.ContainerNumbers == 0 ? "" : pOperationHeader.ContainerNumbers) + '</div>';
                                if (pDefaults.UnEditableCompanyName != "SEF")
                                    ReportHTML += '         <div class="col-xs-6"><b>Vessel-Voy: </b>' + (pOperationHeader.VesselName == 0 ? "" : pOperationHeader.VesselName) + (pOperationHeader.VoyageOrTruckNumber == 0 ? "" : (" - " + pOperationHeader.VoyageOrTruckNumber)) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "NEW") {
                                if (pInvoiceHeader.InvoiceTypeCode == 'INV.REC') {
                                    ReportHTML += '             <div class="col-xs-6"><b>Cargo Type: </b>' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';
                                    ReportHTML += '         <div class="col-xs-6"><b>Vessel-Voy: </b>' + (pOperationHeader.VesselName == 0 ? "" : pOperationHeader.VesselName) + (pOperationHeader.VoyageOrTruckNumber == 0 ? "" : (" - " + pOperationHeader.VoyageOrTruckNumber)) + '</div>';
                                }
                                ReportHTML += '         <div class="col-xs-6"><b>Voy.Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ExpectedArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ExpectedArrival))) + '</div>';
                            }
                            // next condition to add any new required fields to all except old TaxOnItemsCompanies
                            if (pDefaults.UnEditableCompanyName != "GBL"
                                && pDefaults.UnEditableCompanyName != "SAF") {
                                if (!(pDefaults.UnEditableCompanyName == "NEW" && pInvoiceHeader.InvoiceTypeCode == "STATMEN-SH") && pDefaults.UnEditableCompanyName != "MEL")
                                    ReportHTML += '             <div class="col-xs-6"><b>Com. Reg. No.: </b>' + (pDefaults.CommericalRegNo == 0 ? "" : pDefaults.CommericalRegNo) + '</div>';
                                if (pDefaults.UnEditableCompanyName != "NEW" && pDefaults.UnEditableCompanyName != "SEF" && pDefaults.UnEditableCompanyName != "MEL")
                                    ReportHTML += '             <div class="col-xs-6"><b>Service: </b>' + (pOperationHeader.MoveTypeName == 0 ? "" : pOperationHeader.MoveTypeName) + '</div>';
                                if (!(pDefaults.UnEditableCompanyName == "NEW" && pInvoiceHeader.InvoiceTypeCode == "STATMEN-SH")
                                )
                                    ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + (pDefaults.UnEditableCompanyName == "NEW" && pInvoiceHeader.InvoiceTypeCode == "INV.REC" ? (pInvoiceHeader.RightSignature == 0 ? "" : pInvoiceHeader.RightSignature) : (pGrossWeightSum + ' KG')) + '</div>';
                                if (pOperationHeader.TransportType == AirTransportType
                                    || (pDefaults.UnEditableCompanyName == "CFR" && (pOperationHeader.TransportType == InlandTransportType || pOperationHeader.ShipmentType == constLCLShipmentType))
                                )
                                    ReportHTML += '             <div class="col-xs-6"><b>ChargeableWeight: </b>' + pOperationHeader.ChargeableWeightSum + ' KGM' + '</div>';
                                if (pDefaults.UnEditableCompanyName == "ELC" && pTruckingOrders.length > 0)
                                    ReportHTML += '             <div class="col-xs-6"><b>Tr.Order Cert.No.: </b>' + (pTruckingOrders[0].Delays == 0 ? "" : pTruckingOrders[0].Delays) + '</div>';
                                if (pDefaults.UnEditableCompanyName == "LOG" || pOperationHeader.TransportType == AirTransportType
                                    || (pDefaults.UnEditableCompanyName == "CFR" && (pOperationHeader.TransportType == InlandTransportType || pOperationHeader.ShipmentType == constLCLShipmentType))
                                )
                                    ReportHTML += '             <div class="col-xs-6"><b>No of packages: </b>' + (pOperationHeader.NumberOfPackages + 'x' + pOperationHeader.PackageTypeName) + '</div>';
                                if ((pOperationHeader.TransportType == AirTransportType || pOperationHeader.ShipmentType == constLCLShipmentType || pOperationHeader.ShipmentType == constLTLShipmentType)
                                    && pDefaults.UnEditableCompanyName != "CFR" && pDefaults.UnEditableCompanyName != "MEL")
                                    ReportHTML += '             <div class="col-xs-6"><b>Volume: </b>' + pCBM + ' CBM</div>';
                                if (pDefaults.UnEditableCompanyName == "ALF" || pDefaults.UnEditableCompanyName == "DGL" || pDefaults.UnEditableCompanyName == "SWI") {
                                    ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + (pOperationHeader.ShipperName == 0 ? "" : pOperationHeader.ShipperName) + '</div>';
                                    ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + (pOperationHeader.ConsigneeName == 0 ? "" : pOperationHeader.ConsigneeName) + '</div>';
                                }
                                if (pDefaults.UnEditableCompanyName == "ALF") {
                                    ReportHTML += '             <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.NumberOfPackages + 'x' + pOperationHeader.PackageTypeName) + '</div>';
                                    ReportHTML += '         <div class="col-xs-6"><b>ETA POD: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ExpectedArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ExpectedArrival))) + '</div>';
                                    if (pInvoiceHeader.InvoiceTypeName == "HALLIBURTON") {
                                        ReportHTML += '             <div class="col-xs-6"><b>COM INVOICE: </b>' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';
                                        ReportHTML += '             <div class="col-xs-6"><b>FC#: </b>' + (pInvoiceHeader.MiddleSignature == 0 ? "" : pInvoiceHeader.MiddleSignature) + '</div>';
                                    }
                                }
                                if (!(pDefaults.UnEditableCompanyName == "NEW" && pInvoiceHeader.InvoiceTypeCode == "STATMEN-SH") && pDefaults.UnEditableCompanyName != "MEL")
                                    ReportHTML += '             <div class="col-xs-6"><b>VAT ID No.: </b>' + (pDefaults.VatIDNo == 0 ? "" : pDefaults.VatIDNo) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "CFR")
                                ReportHTML += '             <div class="col-xs-6"><b>ACID No: </b>' + (pOperationHeader.ACIDNumber == 0 ? "" : pOperationHeader.ACIDNumber) + '</div>';
                            if ((pDefaults.UnEditableCompanyName == "DGL" || pDefaults.UnEditableCompanyName == "CFR") && pMasterBL == "")
                                ReportHTML += '             <div class="col-xs-6"><b>Courier: </b>' + (pMainRoute.Notes == 0 ? "" : pMainRoute.Notes) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "LOG")
                                ReportHTML += '             <div class="col-xs-6"><b>Contact Person: </b>' + (pOperationPartner == null ? "" : (pOperationPartner.ContactName == 0 ? "" : pOperationPartner.ContactName)) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "SWI") {
                                ReportHTML += '         <div class="col-xs-6"><b>ATA: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualDeparture)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualDeparture))) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>ATD: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival))) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "MEL")
                                ReportHTML += '             <div class="col-xs-6"><b>Notes: </b>' + (pInvoiceHeader.EditableNotes == 0 ? "" : pInvoiceHeader.EditableNotes) + '</div>';
                            if (pInvoiceHeader.EditableNotes != 0
                                && (pDefaults.UnEditableCompanyName == "ELC" || pDefaults.UnEditableCompanyName == "SAF" || pDefaults.UnEditableCompanyName == "SWI" || pDefaults.UnEditableCompanyName == "DGL" || pDefaults.UnEditableCompanyName == "CFR" || pDefaults.UnEditableCompanyName == "ALF"))
                                ReportHTML += '             <div class="col-xs-6"><b>Notes: </b>' + (pInvoiceHeader.EditableNotes == 0 ? "" : pInvoiceHeader.EditableNotes) + '</div>';
                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="m-l" style="clear:both;"><h3><br><br><br>Please, see attachment.</h3></div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "GBL" && $("#cbPrintOriginalChassisDetails").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>Attention: </b>' + 'This is just to show the original generated items, and might not reflect the invoice total in case of manually edited.' + '</div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            if (pDefaults.UnEditableCompanyName == "SAF" || pDefaults.UnEditableCompanyName == "MEL" || pDefaults.UnEditableCompanyName == "GBL")
                                ReportHTML += '                                     <th>Item</th>';
                            ReportHTML += '                                     <th>Description</th>';
                            if (pDefaults.UnEditableCompanyName == "CAP")
                                ReportHTML += '                                     <th>Container#</th>';
                            ReportHTML += '                                     <th>Qty</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            if (pDefaults.UnEditableCompanyName == "GBL")
                                ReportHTML += '                                     <th>SubTotal</th>';
                            else
                                ReportHTML += '                                     <th>WHT</th>';
                            ReportHTML += '                                     <th>VAT</th>';
                            ReportHTML += '                                     <th>Total</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            var _TotalTaxOnItems = 0;
                            var _TotalDiscountOnItems = 0;
                            $.each(JSON.parse(data[2]), function (i, item) {
                                _TotalTaxOnItems += item.TaxAmount;
                                _TotalDiscountOnItems += item.DiscountAmount;
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                if (pDefaults.UnEditableCompanyName == "SAF" || pDefaults.UnEditableCompanyName == "MEL" || pDefaults.UnEditableCompanyName == "GBL")
                                    ReportHTML += '                                         <td>' + (i + 1) + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 && item.ChargeTypeLocalName != undefined ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes.replace(/\n/g, "<br/>")) : "") + '</td>';
                                if (pDefaults.UnEditableCompanyName == "CAP" && i == 0)
                                    ReportHTML += '                                         <td rowspan=' + pInvoiceItem.length + '>' + pOperationHeader.ContainerNumbers.replace(/\-/g, "<br/>")/*(item.ContainerNumber == 0 ? "" : item.ContainerNumber)*/ + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice.toFixed(2) + '</td>';
                                if (pDefaults.UnEditableCompanyName == "GBL")
                                    ReportHTML += '                                         <td>' + item.AmountWithoutVAT.toFixed(2) + '</td>';
                                else
                                    ReportHTML += '                                         <td>' + item.DiscountAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.TaxAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                //ReportHTML += '                                         <td>' + (item.Notes == "0" ? "" : item.Notes) + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td colspan=4>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                //ReportHTML += '                                         <td>' + _TotalTaxOnItems + '</td>';
                                //ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                            //ReportHTML += '                                         </tr>';
                            //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'

                            ReportHTML += '                         <div class="row"></div>';

                            ReportHTML += '                         <div class="col-xs-8 m-t">';
                            if (pDefaults.UnEditableCompanyName == "GBL" && pDefaults.CompanyName != "IST") {
                                ReportHTML += "&emsp;";
                            }
                            else if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked") && pDefaults.UnEditableCompanyName != "DGL") {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                            if (_TotalTaxOnItems != 0 || _TotalDiscountOnItems != 0) {
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                //ReportHTML += '                             <b>VAT: </b>' + (_TotalTaxOnItems - _TotalDiscountOnItems).toFixed(2) + '</br>';
                                if (_TotalTaxOnItems != 0)
                                    ReportHTML += '                             <b>VAT: </b>' + (_TotalTaxOnItems).toFixed(2) + '</br>';
                                if (_TotalDiscountOnItems != 0)
                                    ReportHTML += '                             <b>WHT: </b>' + (_TotalDiscountOnItems).toFixed(2) + '</br>';
                            }
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).replace(/\B(?=(\d{3})+(?!\d))/g, ",").toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '             </div>';
                            ReportHTML += '         </body>';

                            //ReportHTML += '                 <div class="col-xs-12 m-t m-l" style="clear:both;"><b>Invoice considered paid if a stamped receipt issued</b></div>';
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>';
                            if ($("#cbPrintStamp").prop("checked") && pInvoiceTypeCode != "DRAFT") {
                                if (pDefaults.UnEditableCompanyName == "NEW")
                                    //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                                    ReportHTML += '         <div class="col-xs-4"></div><div class="col-xs-4 text-center" style="border:1px solid #000;">  الشركة لا تخضع لنظام الخصم تطبيقا لأحكام المادة  <br>  رقم59من القانون91لسنة2005حيث يتم تطبيق  <br>  نظام الدفعات المقدمة طبقا لأحكام المادة 61  </div>';
                                else
                                    ReportHTML += '         <div class="text-left m-l-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "CFR")
                                ReportHTML += '                     <div class="col-xs-12 text-center m-t-lg">&emsp;<br>&emsp;<br><b>' + '   الشركة تطبق نظام الدفعات المقدمة بداية من يناير 2014 طبقا للقانون رقم 91 لسنه 2005 /  س.ت293040  /  ب.ض320-229-288    ' + '</b></div>';
                            else if (pDefaults.UnEditableCompanyName == "ALF")
                                ReportHTML += '                     <div class="col-xs-12 text-center"><b>' + '   الشركة تخضع لنظام الدفعات المقدمة   ' + '</b></div>';
                            else if (pInvoiceHeader.InvoiceTypeName != "DN" && pDefaults.UnEditableCompanyName != "GBL"
                                && pDefaults.UnEditableCompanyName != "ACS" && pDefaults.UnEditableCompanyName != "WAV"
                                && pDefaults.UnEditableCompanyName != "MEL" && pDefaults.UnEditableCompanyName != "ALF"
                                && pDefaults.UnEditableCompanyName != "CAP" && pDefaults.UnEditableCompanyName != "SEF"
                                && !(pDefaults.UnEditableCompanyName == "NEW" && pInvoiceHeader.InvoiceTypeCode == "STATMEN-SH")) {
                                ReportHTML += '                     <div class="col-xs-12 m-t-lg text-center" style="clear:both;"><b>' + '   لا يعتد بالفاتورة إلا بعد استلام إيصال السداد   ' + '</b></div>';
                                if (pInvoiceHeader.InvoiceTypeCode == "DRAFT") //Remove Condition when make separate copy for Milmar
                                    ReportHTML += '                     <div class="col-xs-12 text-center"><b>' + '   الشركة تخضع لنظام الدفعات المقدمة   ' + '</b></div>';
                            }
                            else if (pDefaults.UnEditableCompanyName == "NEW" && pInvoiceHeader.InvoiceTypeCode == "INV.REC") {
                                ReportHTML += '                     <div class="col-xs-12 m-t-lg text-center"><b>' + '   الشركة لا تخضع لنظام الخصم تطبيقا لأحكام المادة رفم 59 من القانون 91 لسنة 2005 حيث يتم تطبيق نظام الدفعات المقدمة طبقا لأحكام المادة 62   ' + '</b></div>';
                            }
                            ReportHTML += '     <footer class="footer col-xs-12 m-t-lg" style="width:100%; position:absolute; bottom:0;">';
                            if ($("#cbPrintBankDetailsFromTemplate").prop("checked") && pDefaults.UnEditableCompanyName == "DGL") {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>").replace(/\ /g, "&nbsp;");
                            }
                            if (pDefaults.UnEditableCompanyName == "GBL" && pDefaults.CompanyName != "IST") {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                             Account Name: GB LOGISTICS S A E ' + '</br>';
                                ReportHTML += '                             Bank Name: SOCIETE ARABE INTERNATIONALE DE BANQUE' + '</br>';
                                ReportHTML += '                             Account number : 0220-3010314-10010 EGP / 0205-3010314-10010 CHF / 0203-3010314-10010 EUR' + '</br>';
                                ReportHTML += '                             Account Type : CURRENT ACCOUNT' + '</br>';
                                ReportHTML += '                             Branch Name : SHOOTING CLUB' + '</br>';
                                ReportHTML += '                             Branch Address : 50 SHOOTING CLUB ST. DOKKI GIZA, Cairo, Egypt' + '</br>';
                                //ReportHTML += '                             Country : Egypt' + '</br>';
                                //ReportHTML += '                             Town/City : Cairo' + '</br>';
                                ReportHTML += '                             Swift Code : SBNKEGCXXXX' + '</br></br>';

                                ReportHTML += '                             Bank Name: Abu Dhabi Islamic Bank-Egypt ' + '</br>';
                                ReportHTML += '                             Bank Address : 54 Lebanon str., Giza, Egypt' + '</br>';
                                ReportHTML += '                             Account number : 100000603372 USD' + '</br>';
                                ReportHTML += '                             Swift Code : ABDIEGCAXXX' + '</br>';
                                ReportHTML += '                             IBAN: EG900030552400000100000603372' + '</br>';

                                //ReportHTML += '                     <br><br><div style="font-size:12px;" class="col-xs-12 text-center"><b>' + '   برجاء عدم استقطاع او خصم أي مبالغ مالية تحت حساب الضريبة حيث أن الشركة تخضع لنظام الدفعات المقدمة عن الفترة الضريبية من 1/1/2021 حتى 31/12/2021   ' + '</b></div><br><br>';
                                //ReportHTML += '                     <div style="font-size:12px;" class="col-xs-12 m-t-lg text-center"><b>' + '   شكرا لتعاونكم   ' + '</b></div>';
                            }
                            //ReportHTML += '         <div class="row text-right m-r m-t">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  يوقف صرف شيكات مصر للتأمين لحين تسوية التعويضات  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            if ($("#cbPrintFooterInvoice").prop("checked")) {
                                if (pDefaults.UnEditableCompanyName == "ALF") {
                                    ReportHTML += '                     <div class="col-xs-12 text-center"><b>' + '  رقم البطاقة الضريبي : 605     رقم الملف الضريبي : 1/2/555/70/5 عطارين ثاني    رقم تسجيل ضريبة المبيعات : 432/286/632  ' + '</b></div>';
                                    ReportHTML += '                     <div class="col-xs-12 text-center"><b>' + '  (المركز الرئيسي: 1 فيكتور باسيلى– الإسكندرية  - تليفون : 4805020 – 4819264 (203) – فاكس : 4819262 (203  ' + '</b></div>';
                                }
                                else
                                    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter' + (pInvoiceHeader.InvoiceTypeName == "DN" && 1 == 2 ? "-Debit" : "") + '.jpg" alt="footer"/></div>';
                            }
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF if (pDefaults.UnEditableCompanyName == "MEL" || pDefaults.UnEditableCompanyName == "GBL")
                        else if (pDefaults.UnEditableCompanyName == "ELI") { //else if (pDefaults.UnEditableCompanyName == "ELI")
                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += "     <b>";
                            ReportHTML += '         <body style="background-color:white; font-size=140%;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + "/" + pELIInvoicePrefix + '-' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).split("/")[1].split("/")[0] + '-' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(8, 2) + '</h3></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';
                            var _InvoicePrefix = (pInvoiceHeader.InvoiceTypeName.split(' ')[0] == "INVOICE" ? "01" : "02");
                            ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + _InvoicePrefix + pad_with_zeroes(pInvoiceHeader.InvoiceNumber, 5) + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';
                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';
                            ReportHTML += '         <div class="col-xs-12">';

                            ReportHTML += '             <div class="col-xs-8"></div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Tax No.: </b>' + (pDefaults.TaxNumber == 0 ? "" : pDefaults.TaxNumber) + '</div>';
                            ReportHTML += '             <div class="col-xs-8"></div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Com. Reg. No.: </b>' + (pDefaults.CommericalRegNo == 0 ? "" : pDefaults.CommericalRegNo) + '</div>';

                            ReportHTML += '             <div class="col-xs-8"></div>';
                            ReportHTML += '             <div class="col-xs-4"><b>VAT ID No.: </b>' + (pDefaults.VatIDNo == 0 ? "" : pDefaults.VatIDNo) + '</div>';

                            ReportHTML += '             <div class="col-xs-8"><b>Bill to: </b>' + pInvoiceHeader.PartnerName + '</div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Inv.Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';

                            ReportHTML += '             <div class="col-xs-8"><b>Address: </b>';
                            ReportHTML += '                 ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                 ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            ReportHTML += '                 ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                 ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</div>';

                            ReportHTML += '             <div class="col-xs-8"></div>';
                            ReportHTML += '             <div class="col-xs-4"><b>Issue Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pInvoiceHeader.CreationDate)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.CreationDate))) + '</div>';
                            ReportHTML += '             <div class="col-xs-12 b-b b-dark m-t-n-xs" style="clear:both;"></div>';

                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + pMasterOperationCode + '</div>';
                            else
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>OperWithInv.Ser: </b>' + (pOperationHeader.OperationWithInvoiceSerial == 0 ? "" : pOperationHeader.OperationWithInvoiceSerial) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Currency: </b>' + pInvoiceHeader.CurrencyCode + '</div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" || pHouseNumber == "0" ? "" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            if (pOperationHeader.TransportType == OceanTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Vessel: </b>' + pVesselName + '</div>';
                            }
                            //for inland shipping line is written in LeftSignature
                            if (pOperationHeader.TransportType == InlandTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Shipping Line: </b>' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';
                            }
                            if (pOperationHeader.TransportType != AirTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Arrival Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival))) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Containers: </b>' + (pOperationHeader.ShipmentType == 0 || pOperationHeader.ShipmentType == 2 || pOperationHeader.ShipmentType == 4 ? "LCL" : pContainerTypes) + '</div>';
                            }
                            if (pOperationHeader.PackageTypes != 0 || pOperationHeader.PackageTypesOnContainersTotals != 0 || pOperationHeader.PlacedOnOperationContainersAndPackagesID != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes) + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Commodity: </b>' + (pOperationHeader.CommodityName == 0 ? "" : pOperationHeader.CommodityName) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KGM' + '</div>';

                            ReportHTML += '         <div class="col-xs-6"><b>Certificate No: </b>' + (pOperationHeader.CertificateNumber == 0 ? "" : pOperationHeader.CertificateNumber) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>Customer Ref: </b>' + (pOperationHeader.CustomerReference == 0 ? "" : pOperationHeader.CustomerReference) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>Form 13 : </b>' + (pOperationHeader.Form13Number == 0 ? "" : pOperationHeader.Form13Number) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>Booking No : </b>' + (pOperationHeader.BookingNumbers == 0 ? "" : pOperationHeader.BookingNumbers) + '</div>';


                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr style="font-size:120%;">';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Qty</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Sale Price</th>';
                            //ReportHTML += '                                     <th>Notes</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md  font-bold "style="font-size:120%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                //ReportHTML += '                                         <td>' + (item.Notes == "0" ? "" : item.Notes) + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                            //ReportHTML += '                                         </tr>';
                            //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'

                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="row"></div>';
                            ReportHTML += '                         <div class="col-xs-8 m-t-n">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked") || $("#cbPrintBankDetailsNone").prop("checked")) {
                                ReportHTML += '                             <b>SIGNATURE</b>';
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                            if (pTaxAmount != 0 || pDiscountAmount != 0)
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            if (pTaxAmount != 0)
                                ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            if (pDiscountAmount != 0)
                                ReportHTML += '                             <b>Discount(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '             </div>'; //
                            ReportHTML += '         </body>';

                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            if ($("#cbPrintStamp").prop("checked"))
                                ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                            //kk
                            if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                         <div class="col-xs-7">';
                                ReportHTML += '                             <b style="font-size:125%;">' + '  الشركة خاضعة لنظام الدفعات المقدمة  ' + '</b></br>';
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>").replace(/\ /g, "&nbsp;");
                                ReportHTML += '                         </div>';
                                if ($("#cbPrintNotification").prop("checked")) {
                                    ReportHTML += '                         <div class="col-xs-5 text-right">';
                                    ReportHTML += '                              نود أن  نخطر سيادتكم أنه تم بيع الحقوق المالية الخاصة بالفانورة بعاليه  و المستحقة  في ذمتكم لشركتنا (شركة ايليت للخدمات اللوجيستية ش.م.م) لصالح شركة كيو ان بى الاهلى للتخصيم (ش.م.م) و نقبل نحن شركة ( شركة..................................) الحوالة و الاخطار بعاليه ولا يوجد لدينا اى مانع وفى حالة السداد عن طريق الإيداع البنكى أو التحويلات يتم سداد مبلغ الفواتير في حسابنا رقم 00733-20311916075-49 طرف بنك قطر الوطنى الاهلى فرع سيتى ستارز و في حالة السداد عن طريق شيكات يتم اصدار الشيكات باسم شركة (شركة ايليت للخدمات اللوجيستية ش.م.م) فى تاريخ الاستحقاق   ';
                                    ReportHTML += '                         </div>';
                                }
                            }
                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';

                            //ReportHTML += '         <div class="row text-right m-r m-t">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  يوقف صرف شيكات مصر للتأمين لحين تسوية التعويضات  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            if ($("#cbPrintFooterInvoice").prop("checked"))
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            //else
                            //    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF else if (pDefaults.UnEditableCompanyName == "ELI")
                        else if (pDefaults.UnEditableCompanyName == "ELH") {
                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            if (pDefaults.UnEditableCompanyName == "BAD" && pInvoiceHeader.InvoiceTypeName.split(' ')[0].trim().toUpperCase() == "STATEMENT")
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '</h3></div>';
                            else if (!(pDefaults.UnEditableCompanyName == "SAF" && pInvoiceTypeCode == "DRAFT")) //Dont print for Safena
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';

                            else { //i.e. (pDefaults.UnEditableCompanyName == "SAF" && pInvoiceTypeCode == "DRAFT") {
                                ReportHTML += '             <div style="position:absolute;left:50px;top:170px;">';
                                ReportHTML += '             <img src="/Content/Images/DraftWaterMark.jpg" alt="logo" width=612px; height=200px;></div>';
                            }
                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';
                            ReportHTML += '         <div class="col-xs-12">';

                            if (pInvoiceHeader.InvoiceTypeName.split(' ')[0].trim().toUpperCase() == "INVOICE"
                                && (pDefaults.UnEditableCompanyName == "WFE")
                            ) {
                                ReportHTML += '             <div class="col-xs-9"></div>';
                                ReportHTML += '             <div class="col-xs-3"><b>Tax No.: </b>' + (pDefaults.TaxNumber == 0 ? "" : pDefaults.TaxNumber) + '</div>';
                                ReportHTML += '             <div class="col-xs-9"></div>';
                                ReportHTML += '             <div class="col-xs-3"><b>Com. Reg. No.: </b>' + (pDefaults.CommericalRegNo == 0 ? "" : pDefaults.CommericalRegNo) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "EGY") {
                                ReportHTML += '             <div class="col-xs-9"></div>';
                                ReportHTML += '             <div class="col-xs-3"><b>Ref.: </b>' + (pOperationHeader.Reference == 0 ? "" : pOperationHeader.Reference) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-9"><b>Bill to: </b>' + pInvoiceHeader.PartnerName + '</div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Inv.Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-9"><b>Address: </b>';
                            ReportHTML += '                 ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                 ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            ReportHTML += '                 ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                 ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '             </div>';
                            //ReportHTML += '             <div class="col-xs-3"><b>Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-12 b-b b-dark m-t-n-xs" style="clear:both;"></div>';

                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + pMasterOperationCode + '</div>';
                            else
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Currency: </b>' + pInvoiceHeader.CurrencyCode + '</div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                            if (pDefaults.UnEditableCompanyName == "DGL" && pMasterBL == "")
                                ReportHTML += '             <div class="col-xs-6"><b>Courier: </b>' + (pMainRoute.Notes == 0 ? "" : pMainRoute.Notes) + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" || pHouseNumber == "0" ? "" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            if (pOperationHeader.TransportType == OceanTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Vessel: </b>' + pVesselName + '</div>';
                            }
                            //for inland shipping line is written in LeftSignature
                            if (pOperationHeader.TransportType == InlandTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Shipping Line: </b>' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';
                            }
                            if (pOperationHeader.TransportType != AirTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Arrival Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival))) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Containers: </b>' + (pOperationHeader.ShipmentType == 0 || pOperationHeader.ShipmentType == 2 || pOperationHeader.ShipmentType == 4 ? "LCL" : pContainerTypes) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Container Numbers: </b>' + pContainerNumbers + '</div>';
                            }
                            if (pOperationHeader.PackageTypes != 0 || pOperationHeader.PackageTypesOnContainersTotals != 0 || pOperationHeader.PlacedOnOperationContainersAndPackagesID != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes) + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Commodity: </b>' + (pOperationHeader.CommodityName == 0 ? "" : pOperationHeader.CommodityName) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Notify: </b>' + (pOperationHeader.Notify1Name == 0 ? 'N/A' : pOperationHeader.Notify1Name) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KGM' + '</div>';

                            if (pOperationHeader.CertificateNumber != 0) {
                                ReportHTML += '         <div class="col-xs-6"><b>Certificate No: </b>' + (pOperationHeader.CertificateNumber == 0 ? "" : pOperationHeader.CertificateNumber) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Customer Ref: </b>' + (pOperationHeader.CustomerReference == 0 ? "" : pOperationHeader.CustomerReference) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "DGL" || pDefaults.UnEditableCompanyName == "BAD")
                                ReportHTML += '             <div class="col-xs-6"><b>Notes: </b>' + (pInvoiceHeader.MiddleSignature == 0 ? "" : pInvoiceHeader.MiddleSignature) + '</div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            if (pDefaults.UnEditableCompanyName == "BAD")
                                ReportHTML += '                                     <th>Ser.</th>';
                            ReportHTML += '                                     <th>Description</th>';
                            //ReportHTML += '                                     <th>Qty</th>';
                            //ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th style="width:15%;">Amount</th>';
                            ReportHTML += '                                     <th style="width:15%;">Draft</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                if (pDefaults.UnEditableCompanyName == "BAD")
                                    ReportHTML += '                                         <td>' + (i + 1) + '</td>';
                                if (pDefaults.UnEditableCompanyName == "TEL")
                                    ReportHTML += '                                         <td style="text-align:left;">' + (item.Notes == 0 ? (item.ChargeTypeName == 0 ? "" : item.ChargeTypeName) : item.Notes) + '</td>';
                                else
                                    ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                //ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                //ReportHTML += '                                         <td>' + item.SalePrice.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                if (pDefaults.UnEditableCompanyName == "BAD")
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                            //ReportHTML += '                                         </tr>';
                            //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'

                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="row"></div>';
                            ReportHTML += '                         <div class="col-xs-8 m-t-n">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + (pDefaults.UnEditableCompanyName == "QUI" ? (" " + pDefaults.CompanyName) : "") + '</br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            //kk: added 2nd condition
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + (pDefaults.UnEditableCompanyName == "QUI" ? (" " + pDefaults.CompanyName) : "") + '</br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                            if (pTaxAmount != 0 || pDiscountAmount != 0)
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            if (pTaxAmount != 0 || pInvoiceHeader.TaxTypeID != 0)
                                ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            if (pDiscountAmount != 0)
                                ReportHTML += '                             <b>Discount(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '             </div>'; //
                            ReportHTML += '         </body>';
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            if ($("#cbPrintStamp").prop("checked"))
                                ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                            if (pDefaults.UnEditableCompanyName == "TEL") {
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-3 m-t"><b>' + 'Financial Manager' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-2 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Auditor' + '</b></div>';
                                ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-3 m-t-sm"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-2 m-t-sm text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 m-t-sm text-center">' + '&emsp;' + '</div>';
                                ReportHTML += '                 </div>'
                            }
                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';

                            if (pDefaults.UnEditableCompanyName == "DYN")
                                ReportHTML += '         <div class="row m-l">' + '  Please, Issue checks with our company name داينميك لخدمات النقل  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r m-t">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  يوقف صرف شيكات مصر للتأمين لحين تسوية التعويضات  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            if ($("#cbPrintFooterInvoice").prop("checked"))
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            //else
                            //    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF else if (pDefaults.UnEditableCompanyName == "ELH")
                        else if (pDefaults.UnEditableCompanyName == "CAL") {
                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader-Invoice.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            if (!(pDefaults.UnEditableCompanyName == "SAF" && pInvoiceTypeCode == "DRAFT")) //Dont print for Safena
                                ; //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';

                            else { //i.e. (pDefaults.UnEditableCompanyName == "SAF" && pInvoiceTypeCode == "DRAFT") {
                                ReportHTML += '             <div style="position:absolute;left:50px;top:170px;">';
                                ReportHTML += '             <img src="/Content/Images/DraftWaterMark.jpg" alt="logo" width=612px; height=200px;></div>';
                            }
                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';
                            ReportHTML += '         <div class="col-xs-12">';
                            ReportHTML += '             <div class="col-xs-9">Bill to:<b><br>' + pInvoiceHeader.PartnerName + '</b></div>';
                            //ReportHTML += '             <div class="col-xs-3 text-right">Invoice#<br><b>' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</b></div>';
                            ReportHTML += '             <div class="col-xs-3 text-right">Invoice#<br><b>' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + pInvoiceHeader.InvoiceNumber + '</b></div>';
                            ReportHTML += '             <div class="col-xs-12">';
                            ReportHTML += '                 ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                 ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            ReportHTML += '                 ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                 ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-12">Billing Details: ' + (pClientHeader.BillingDetails == 0 ? "" : pClientHeader.BillingDetails) + '</div>';
                            ReportHTML += '             <div class="col-xs-12">VAT No.: ' + (pClientHeader.VATNumber == 0 ? "" : pClientHeader.VATNumber) + '</div>';
                            ReportHTML += '             <div class="col-xs-12">NIF: ' + (pClientHeader.BankName == 0 ? "" : pClientHeader.BankName) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Customer Ref.:</b> ' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';

                            //ReportHTML += '             <div class="col-xs-3"><b>Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</div>';
                            //ReportHTML += '             <div class="col-xs-12 b-b b-dark m-t-n-xs" style="clear:both;"></div>';

                            ReportHTML += '                     <div class="col-xs-12 clear m-t-lg">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Invoice Date</th>';
                            ReportHTML += '                                     <th>Terms</th>';
                            ReportHTML += '                                     <th>Due Date</th>';
                            ReportHTML += '                                     <th>Shipment Number</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <td>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</td>';
                            ReportHTML += '                                     <td>' + (pInvoiceHeader.PaymentTermName == 0 ? "" : pInvoiceHeader.PaymentTermName) + '</td>';
                            ReportHTML += '                                     <td>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</td>';
                            ReportHTML += '                                     <td>' + (pOperationHeader.HouseNumber == 0 ? pOperationHeader.MasterBL : pOperationHeader.HouseNumber) + '</td>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>';

                            ReportHTML += '             <div class="col-xs-12"><b>Subject:</b> ' + '' + '</div>';

                            ReportHTML += '                     <div class="col-xs-12 clear m-t-lg">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th style="width:5%;">#</th>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Qty</th>';
                            ReportHTML += '                                     <th>Rate</th>';
                            ReportHTML += '                                     <th>Amount</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td>' + (i + 1) + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + ((($("#cbAddNotesToItems").prop("checked") || pDefaults.UnEditableCompanyName == "CAL") && item.Notes != 0 && item.Notes != "") ? (' - ' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                            //ReportHTML += '                                         </tr>';
                            //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'

                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="row"></div>';
                            ReportHTML += '                         <div class="col-xs-8 m-t-n">';
                            if (pDefaults.UnEditableCompanyName == "CAL")
                                ReportHTML += '             <div class="col-xs-12">' + 'Thanks for your business.' + '</div>';
                            else if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + (pDefaults.UnEditableCompanyName == "QUI" ? (" " + pDefaults.CompanyName) : "") + '</br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                            if (pTaxAmount != 0 || pDiscountAmount != 0)
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            if (pTaxAmount != 0 || pInvoiceHeader.TaxTypeID != 0) {
                                ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                            }
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            if (pDiscountAmount != 0)
                                ReportHTML += '                             <b>Discount(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                            //ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '             </div>'; //
                            ReportHTML += '         </body>';
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            if ($("#cbPrintStamp").prop("checked"))
                                ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                            if (pDefaults.UnEditableCompanyName == "TEL") {
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-3 m-t"><b>' + 'Financial Manager' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-2 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Auditor' + '</b></div>';
                                ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-3 m-t-sm"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-2 m-t-sm text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 m-t-sm text-center">' + '&emsp;' + '</div>';
                                ReportHTML += '                 </div>'
                            }
                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';

                            ReportHTML += '         <div class="row m-l font-bold">' + '  Terms & Conditions  ' + '</div>';
                            ReportHTML += '         <div class="row m-l">' + '  Transferencia bancaria / Bank transfer  ' + '</div>';
                            ReportHTML += '         <div class="row m-l">' + '  ES74 0049 0712 2821 1015 2066 - BANCO SANTANDER  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r m-t">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  يوقف صرف شيكات مصر للتأمين لحين تسوية التعويضات  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            if ($("#cbPrintFooterInvoice").prop("checked"))
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/' + (1 == 1 ? 'CompanyFooter.jpg' : 'CompanyFooter-Invoice.jpg') + '" alt="footer"/></div>';
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            //else
                            //    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF else if (pDefaults.UnEditableCompanyName == "CAL")
                        else if (pDefaults.UnEditableCompanyName == "SHO") {
                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            if (!(pDefaults.UnEditableCompanyName == "SAF" && pInvoiceTypeCode == "DRAFT")) //Dont print for Safena
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';

                            else { //i.e. (pDefaults.UnEditableCompanyName == "SAF" && pInvoiceTypeCode == "DRAFT") {
                                ReportHTML += '             <div style="position:absolute;left:50px;top:170px;">';
                                ReportHTML += '             <img src="/Content/Images/DraftWaterMark.jpg" alt="logo" width=612px; height=200px;></div>';
                            }
                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';
                            ReportHTML += '         <div class="col-xs-12">';

                            if (pInvoiceHeader.InvoiceTypeName.split(' ')[0].trim().toUpperCase() == "INVOICE") {
                                ReportHTML += '             <div class="col-xs-9"></div>';
                                ReportHTML += '             <div class="col-xs-3"><b>Tax No.: </b>' + (pDefaults.TaxNumber == 0 ? "" : pDefaults.TaxNumber) + '</div>';
                                ReportHTML += '             <div class="col-xs-9"></div>';
                                ReportHTML += '             <div class="col-xs-3"><b>Com. Reg. No.: </b>' + (pDefaults.CommericalRegNo == 0 ? "" : pDefaults.CommericalRegNo) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-9"><b>Bill to: ' + pInvoiceHeader.PartnerName + '</b></div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Inv.Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-9"><b>Address: </b>';
                            ReportHTML += '                 ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                 ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            ReportHTML += '                 ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                 ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            ReportHTML += '             </div>';
                            //ReportHTML += '             <div class="col-xs-3"><b>Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-12 b-b b-dark m-t-n-xs" style="clear:both;"></div>';

                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + pMasterOperationCode + '</div>';
                            else
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Currency: </b>' + pInvoiceHeader.CurrencyCode + '</div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>MB/L No.: </b>' + pMasterBL + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" || pHouseNumber == "0" ? "" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            if (pOperationHeader.TransportType == OceanTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Vessel: </b>' + pVesselName + '</div>';
                            }
                            //for inland shipping line is written in LeftSignature
                            if (pOperationHeader.TransportType == InlandTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Shipping Line: </b>' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';
                            }
                            if (pOperationHeader.TransportType != AirTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Arrival Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival))) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Containers: </b>' + (pOperationHeader.ShipmentType == 0 || pOperationHeader.ShipmentType == 2 || pOperationHeader.ShipmentType == 4 ? "LCL" : pContainerTypes) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Container Numbers: </b>' + pContainerNumbers + '</div>';
                            }
                            if (pOperationHeader.PackageTypes != 0 || pOperationHeader.PackageTypesOnContainersTotals != 0 || pOperationHeader.PlacedOnOperationContainersAndPackagesID != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes) + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Commodity: </b>' + (pOperationHeader.CommodityName == 0 ? "" : pOperationHeader.CommodityName) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KGM' + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Line: </b>' + (pOperationHeader.LineName == 0 ? "" : pOperationHeader.LineName) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>Certificate No: </b>' + (pOperationHeader.CertificateNumber == 0 ? "" : pOperationHeader.CertificateNumber) + '</div>';
                            ReportHTML += '         <div class="col-xs-6"><b>Customer Ref: </b>' + (pOperationHeader.CustomerReference == 0 ? "" : pOperationHeader.CustomerReference) + '</div>';

                            ReportHTML += '             <div class="col-xs-6"><b>Volume: </b>' + pCBM + ' CBM</div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            ReportHTML += '                                     <th>Description</th>';
                            ReportHTML += '                                     <th>Qty</th>';
                            ReportHTML += '                                     <th>Unit Price</th>';
                            ReportHTML += '                                     <th>Amount</th>';
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbodystyle="font-size:120%;">';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                ReportHTML += '                                         <td>' + item.SalePrice.toFixed(2) + '</td>';
                                ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                ReportHTML += '                                         <td style="text-align:left;">' + 'Special Discount' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2) + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            ReportHTML += '                                         <tr>';
                            ReportHTML += '                                             <td colspan=3>' + '<b>Total without VAT : ' + '</b></td>';
                            ReportHTML += '                                             <td><b>' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></td>';
                            ReportHTML += '                                         </tr>';
                            if (1 == 1) { //if (pTaxAmount != 0) {
                                ReportHTML += '                                         <tr>';
                                ReportHTML += '                                             <td colspan=3>' + '<b>VAT ' + (pTaxTypeName == 0 ? "" : pTaxTypeName) + ' </b></td>';
                                ReportHTML += '                                             <td><b>' + pTaxAmount + '</b></td>';
                                ReportHTML += '                                         </tr>';
                            }
                            if (pDiscountAmount != 0) {
                                ReportHTML += '                                         <tr>';
                                ReportHTML += '                                             <td colspan=3>' + '<b>Discount (' + pDiscountTypeName + ')</b></td>';
                                ReportHTML += '                                             <td><b>' + pDiscountAmount + '</b></td>';
                                ReportHTML += '                                         </tr>';
                            }
                            ReportHTML += '                                         <tr>';
                            ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            ReportHTML += '                                         </tr>';

                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'

                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="row"></div>';
                            ReportHTML += '                         <div class="col-xs-8 m-t-n">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + '</br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            //kk: added 2nd condition
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + (pDefaults.UnEditableCompanyName == "QUI" ? (" " + pDefaults.CompanyName) : "") + '</br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right m-t-n">';
                            if (pTaxAmount != 0 || pDiscountAmount != 0)
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            if (pTaxAmount != 0 || pInvoiceHeader.TaxTypeID != 0) {
                                if (pDefaults.UnEditableCompanyName == "ALL" && pTaxAmount == 0)
                                    ReportHTML += '                             0% VAT-Table II, item b1 Law OB 1968' + '</br>';
                                else
                                    ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2) + '</br>';
                            }
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            if (pDiscountAmount != 0)
                                ReportHTML += '                             <b>Discount(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '             </div>'; //
                            ReportHTML += '         </body>';
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            if ($("#cbPrintStamp").prop("checked"))
                                ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                            if (pDefaults.UnEditableCompanyName == "TEL") {
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-3 m-t"><b>' + 'Financial Manager' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-2 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Auditor' + '</b></div>';
                                ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-3 m-t-sm"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-2 m-t-sm text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 m-t-sm text-center">' + '&emsp;' + '</div>';
                                ReportHTML += '                 </div>'
                            }
                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            //kk
                            if ($("#cbPrintBankDetailsFromTemplate").prop("checked") && pDefaults.UnEditableCompanyName == "DGL") {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>").replace(/\ /g, "&nbsp;");
                            }

                            if (pDefaults.UnEditableCompanyName == "DYN")
                                ReportHTML += '         <div class="row m-l">' + '  Please, Issue checks with our company name داينميك لخدمات النقل  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r m-t">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  يوقف صرف شيكات مصر للتأمين لحين تسوية التعويضات  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            if ($("#cbPrintFooterInvoice").prop("checked"))
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            //else
                            //    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //else if (pDefaults.UnEditableCompanyName == "SHO") {
                        else { //All Other Companies
                            debugger;
                            var ReportHTML = '';
                            //<div style="width:500px;height:100px;border:1px solid #000;">This is a rectangle!</div>
                            //ReportHTML += '             <div class="col-xs-12 m-l" style="width:95%; height:45%; border: 1px solid #000;border-radius: 25px;padding: 20px;">This is a rounded rectangle</div>';
                            ReportHTML += '<html>';
                            ReportHTML += '     <head><title>Invoice</title><link rel="stylesheet" href="/Content/CSS/app.v2.css" type="text/css" /></head>';
                            ReportHTML += '         <body style="background-color:white;">';
                            ReportHTML += '                 <div class="col-xs-12 text-center"><img src="/Content/Images/' + ($("#cbPrintHeaderInvoice").prop("checked") ? 'CompanyHeader' + (pDefaults.UnEditableCompanyName == "BED" ? ("-") + pInvoiceHeader.InvoiceTypeCode : "") + '.jpg' : 'CompanyHeader-Empty.jpg') + '" alt="logo"/></div>';
                            //ReportHTML += '                 <div class="col-xs-12 text-center"><img width="100px" id="imgUserImage" src="data:image/jpeg;base64,'+  data[73] + '" /></div>';

                            //ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>Invoice (' + pInvoiceHeader.ConcatenatedInvoiceNumber + ')' + '</h3></div>';
                            if (pDefaults.UnEditableCompanyName == "BAD" && pInvoiceHeader.InvoiceTypeName.split(' ')[0].trim().toUpperCase() == "STATEMENT")
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '</h3></div>';
                            else if (!(pDefaults.UnEditableCompanyName == "SAF" && pInvoiceTypeCode == "DRAFT")) //Dont print for Safena
                                ReportHTML += '                 <div class="col-xs-12 text-center m-t-n"><h3>' + pInvoiceHeader.InvoiceTypeName + ' No. ' + pInvoiceHeader.InvoiceNumber + '/' + ConvertDateFormat(GetDateWithFormatMDY(pInvoiceHeader.InvoiceDate)).substr(6, 4) + '</h3></div>';

                            else { //i.e. (pDefaults.UnEditableCompanyName == "SAF" && pInvoiceTypeCode == "DRAFT") {
                                ReportHTML += '             <div style="position:absolute;left:50px;top:170px;">';
                                ReportHTML += '             <img src="/Content/Images/DraftWaterMark.jpg" alt="logo" width=612px; height=200px;></div>';
                            }
                            ////ReportHTML += '             <div style="clear:both;"><br></div>';
                            //ReportHTML += '         <div class="col-xs-1 m-l-n-md"><img src="/Content/Images/' + 'InvoiceSideStatement.jpg' + '" alt="logo"/></div>';
                            ReportHTML += '         <div class="col-xs-12 ' + (pDefaultsRow.UnEditableCompanyName == "FEL" ? "m-t-lg" : "") + '">';

                            if (pInvoiceHeader.InvoiceTypeName.split(' ')[0].trim().toUpperCase() == "INVOICE"
                                && (pDefaults.UnEditableCompanyName == "TEU" || pDefaults.UnEditableCompanyName == "WFE"
                                    || pDefaults.UnEditableCompanyName == "OCE" || pDefaults.UnEditableCompanyName == "CHM"
                                    || pDefaults.UnEditableCompanyName == "COS" || pDefaults.UnEditableCompanyName == "DYN"
                                    || pDefaults.UnEditableCompanyName == "ELC"/*WEF is called ELC*/)
                            ) {
                                ReportHTML += '             <div class="col-xs-9"></div>';
                                ReportHTML += '             <div class="col-xs-3"><b>Tax ID.: </b>' + (pDefaults.TaxNumber == 0 ? "" : pDefaults.TaxNumber) + '</div>';
                                ReportHTML += '             <div class="col-xs-9"></div>';
                                ReportHTML += '             <div class="col-xs-3"><b>Com. Reg. No.: </b>' + (pDefaults.CommericalRegNo == 0 ? "" : pDefaults.CommericalRegNo) + '</div>';
                                ReportHTML += '             <div class="col-xs-9"></div>';
                                if (pDefaults.UnEditableCompanyName == "OCE" || pDefaults.UnEditableCompanyName == "CHM")
                                    ReportHTML += '             <div class="col-xs-3"><b>VAT ID No.: </b>' + (pDefaults.VatIDNo == 0 ? "" : pDefaults.VatIDNo) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "EGY") {
                                ReportHTML += '             <div class="col-xs-9"></div>';
                                ReportHTML += '             <div class="col-xs-3"><b>Ref.: </b>' + (pOperationHeader.Reference == 0 ? "" : pOperationHeader.Reference) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-9"><b>Bill to: </b>' + pInvoiceHeader.PartnerName + '</div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Inv.Date: </b>' + (pInvoiceDate == "01/01/1900" || pInvoiceDate == "1/1/1900" ? "N/A" : pInvoiceDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-9"><b>Address: </b>';
                            ReportHTML += '                 ' + (pClientStreetLine1 == "" ? "" : (pClientStreetLine1));
                            ReportHTML += '                 ' + (pClientStreetLine2 == "" ? "" : (", " + pClientStreetLine2));
                            ReportHTML += '                 ' + (pClientCityName == "" ? "" : ("," + pClientCityName));
                            ReportHTML += '                 ' + (pClientCountryName == "" ? "" : ("," + pClientCountryName));
                            if (pDefaults.UnEditableCompanyName == "COS" || pDefaults.UnEditableCompanyName == "TBL" || pDefaults.UnEditableCompanyName == "NEX" || pDefaults.UnEditableCompanyName == "MSL")
                                ReportHTML += '                 <br><b>Customer Tax ID.: </b>' + (pClientHeader.VATNumber == 0 ? "" : pClientHeader.VATNumber);
                            ReportHTML += '             </div>';
                            ReportHTML += '             <div class="col-xs-3"><b>Due Date: </b>' + (pInvoiceDueDate == "01/01/1900" || pInvoiceDueDate == "1/1/1900" ? "N/A" : pInvoiceDueDate) + '</div>';
                            ReportHTML += '             <div class="col-xs-12 b-b b-dark" style="clear:both;"></div>';
                            if (pDefaults.UnEditableCompanyName == "FEL")
                                ReportHTML += '             <div class="col-xs-12">&emsp;<br></div>';
                            if (pMasterOperationCode != "" && pMasterOperationCode != "0")
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + pMasterOperationCode + '</div>';
                            else
                                ReportHTML += '             <div class="col-xs-6"><b>Operation: </b>' + (pInvoiceHeader.OperationCode == 0 ? pInvoiceHeader.MasterOperationCode : pInvoiceHeader.OperationCode) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Currency: </b>' + pInvoiceHeader.CurrencyCode + '</div>';
                            if ($("#cbPrintMBL").prop("checked"))
                                ReportHTML += '             <div class="col-xs-6"><b>' + (pOperationHeader.TransportType == AirTransportType ? 'AWB:' : 'MB/L No.:') + ' </b>' + (pOperationHeader.TransportType == AirTransportType && (pMasterBL == "" || pMasterBL.endsWith("-0")) ? pMainRoute.Notes : pMasterBL) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "NIS"
                                || (pDefaults.UnEditableCompanyName == "DGL" && pMasterBL == "")
                            )
                                ReportHTML += '             <div class="col-xs-6"><b>Courier: </b>' + (pMainRoute.Notes == 0 ? "" : pMainRoute.Notes) + '</div>';
                            if ($("#cbPrintHBL").prop("checked")) {
                                if (pHouseBLs != "0")//Master Operation so show all houses on it
                                    ReportHTML += '             <div class="col-xs-6"><b>HBL</b>: ' + pHouseBLs + '</div>';
                                else
                                    ReportHTML += '             <div class="col-xs-6"><b>HB/L No.:</b> ' + (pHouseNumber == "" || pHouseNumber == "0" ? "" : pHouseNumber) + '</div>';
                            }
                            ReportHTML += '             <div class="col-xs-6"><b>POL: </b>' + pPOLName + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>POD: </b>' + pPODName + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Weight: </b>' + pGrossWeightSum + ' KG</div>';
                            if (pOperationHeader.TransportType == OceanTransportType) {
                                ReportHTML += '         <div class="col-xs-6"><b>Vessel: </b>' + pVesselName + '</div>';
                            }
                            //for inland shipping line is written in LeftSignature
                            if (pOperationHeader.TransportType == InlandTransportType && pDefaults.UnEditableCompanyName != "BAK") {
                                ReportHTML += '         <div class="col-xs-6"><b>Shipping Line: </b>' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "SEA") {
                                ReportHTML += '         <div class="col-xs-6"><b>Start Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ETAPOLDate)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ETAPOLDate))) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>End Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ExpectedArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ExpectedArrival))) + '</div>';
                            }
                            if (pOperationHeader.TransportType != AirTransportType) {
                                if (pDefaults.UnEditableCompanyName != "FEL" && pDefaults.UnEditableCompanyName != "BAK")
                                    ReportHTML += '         <div class="col-xs-6"><b>' + (pDefaults.UnEditableCompanyName == "SEA" ? "Vessel Date:" : "Arrival Date:") + ' </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ActualArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ActualArrival))) + '</div>';
                                
                                if (pDefaults.UnEditableCompanyName == "BOM")
                                    ReportHTML += '         <div class="col-xs-6"><b>Service Type: </b>' + (pOperationHeader.MoveTypeName == "0" ? "N/A" : pOperationHeader.MoveTypeName) + '</div>';
                                
                                if (!(pDefaults.UnEditableCompanyName == "BOM" && pOperationHeader.ShipmentType == "2"))
                                {
                                    ReportHTML += '         <div class="col-xs-6"><b>Containers: </b>' + (pOperationHeader.ShipmentType == 0 || pOperationHeader.ShipmentType == 2 || pOperationHeader.ShipmentType == 4 ? "LCL" : pContainerTypes) + '</div>';
                                    if (pDefaults.UnEditableCompanyName == "COS")
                                        ReportHTML += '         <div class="col-xs-6"><b>No of Container: </b>' + (pOperationHeader.Description == 0 ? "" : pOperationHeader.Description) + '</div>';
                                    if (pDefaults.UnEditableCompanyName != "TEU" && pDefaults.UnEditableCompanyName != "BAK" && pDefaults.UnEditableCompanyName != "FEL")
                                        ReportHTML += '         <div class="col-xs-6"><b>Container Numbers: </b>' + pContainerNumbers + '</div>';
                                }
                                    
                            }
                            if (pDefaults.UnEditableCompanyName == "TEU")
                                ReportHTML += '         <div class="col-xs-6"><b>ETA: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pOperationHeader.ExpectedArrival)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pOperationHeader.ExpectedArrival))) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "NIS")
                                ReportHTML += '         <div class="col-xs-6"><b>Number of Pieces: </b>' + pOperationHeader.NumberOfPackages + '</div>';
                            if (pOperationHeader.PackageTypes != 0 || pOperationHeader.PackageTypesOnContainersTotals != 0 || pOperationHeader.PlacedOnOperationContainersAndPackagesID != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Packages: </b>' + (pOperationHeader.PackageTypes == 0 ? (pOperationHeader.PackageTypesOnContainersTotals == 0 ? (pOperationHeader.PlacedOnOperationContainersAndPackagesID == 0 ? "0" : pOperationHeader.PlacedOnOperationContainersAndPackagesID) : pOperationHeader.PackageTypesOnContainersTotals) : pOperationHeader.PackageTypes) + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Category: </b>' + pShipmentTypeCode + '</div>';
                            //ReportHTML += '             <div class="col-xs-6"><b>Shipment Term: </b>' + pIncotermName + '</div>';
                            if (pDefaults.UnEditableCompanyName == "ILS" || pDefaults.UnEditableCompanyName == "ILSEG") {
                                ReportHTML += '             <div class="col-xs-6"><b>Booking: </b>' + (pOperationHeader.BookingNumbers == 0 ? "" : pOperationHeader.BookingNumbers) + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>ACID No: </b>' + (pOperationHeader.ACIDNumber == 0 ? "" : pOperationHeader.ACIDNumber) + '</div>';
                                ReportHTML += '             <div class="col-xs-6"><b>Incoterm: </b>' + (pOperationHeader.IncotermName == 0 ? "" : pOperationHeader.IncotermName) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Certificate Number: </b>' + (pOperationHeader.CertificateNumber == 0 ? "" : pOperationHeader.CertificateNumber) + '</div>';
                                ReportHTML += '         <div class="col-xs-6"><b>Line: </b>' + ((pDefaults.UnEditableCompanyName == "CAP") ? (pOperationHeader.ShippingLineName == 0 ? "" : pOperationHeader.ShippingLineName) : (pOperationHeader.LineName == 0 ? "" : pOperationHeader.LineName)) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName != "FEL")
                                ReportHTML += '             <div class="col-xs-6"><b>Commodity: </b>' + (pOperationHeader.CommodityName == 0 ? "" : pOperationHeader.CommodityName) + '</div>';
                            ReportHTML += '             <div class="col-xs-6"><b>Shipper: </b>' + pShipperName + '</div>';
                            if (pDefaults.UnEditableCompanyName != "SEA")
                                ReportHTML += '             <div class="col-xs-6"><b>Consignee: </b>' + pConsigneeName + '</div>';

                            if (pOperationHeader.ShipmentType == constBulkShipmentType){
                                ReportHTML += '             <div class="col-xs-6"><b>' + (pDefaults.UnEditableCompanyName == "BAK" ? "Gross " : "") + 'Weight: </b>' + pOperationHeader.GrossWeightTONSum + ' TON' + '</div>';
                            } else {
                                ReportHTML += '             <div class="col-xs-6"><b>' + (pDefaults.UnEditableCompanyName == "BAK" ? "Gross " : "") + 'Weight: </b>' + pGrossWeightSum + ' KGM' + '</div>';
                            }

                            if (pDefaults.UnEditableCompanyName == "MIL" || pDefaults.UnEditableCompanyName == "BAK" || pDefaults.UnEditableCompanyName == "NIS")
                                ReportHTML += '             <div class="col-xs-6"><b>Line: </b>' + (pOperationHeader.LineName == 0 ? "" : pOperationHeader.LineName) + '</div>';
                            if (pOperationHeader.CertificateNumber != 0)
                                ReportHTML += '         <div class="col-xs-6"><b>Certificate No: </b>' + (pOperationHeader.CertificateNumber == 0 ? "" : pOperationHeader.CertificateNumber) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "BAK") {
                                if (pCustomsClearance != null) {
                                    ReportHTML += '         <div class="col-xs-6"><b>Clearance Type: </b>' + (pCustomsClearance.CC_ClearanceTypeName == 0 ? "" : pCustomsClearance.CC_ClearanceTypeName) + '</div>';
                                    ReportHTML += '         <div class="col-xs-6"><b>Certificate Date: </b>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(pCustomsClearance.CertificateDate)) < 1 ? "" : ConvertDateFormat(GetDateWithFormatMDY(pCustomsClearance.CertificateDate))) + '</div>';
                                }
                                ReportHTML += '         <div class="col-xs-6"><b>Country of Origin: </b>' + (pInvoiceHeader.LeftSignature == 0 ? "" : pInvoiceHeader.LeftSignature) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "AOL" || pDefaults.UnEditableCompanyName == "FEL" || pDefaults.UnEditableCompanyName == "TEU" || pDefaults.UnEditableCompanyName == "BED")
                                ReportHTML += '         <div class="col-xs-6"><b>PO Number: </b>' + (pOperationHeader.PONumber == 0 ? "" : pOperationHeader.PONumber) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "AOL")
                                ReportHTML += '         <div class="col-xs-6"><b>GAFFI No: </b>' + (pOperationHeader.DispatchNumber == 0 ? "" : pOperationHeader.DispatchNumber) + '</div>';
                            if (pOperationHeader.CustomerReference != 0 && pDefaults.UnEditableCompanyName != "SEA")
                                ReportHTML += '         <div class="col-xs-6"><b>Customer Ref: </b>' + (pOperationHeader.CustomerReference == 0 ? "" : pOperationHeader.CustomerReference) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "TEU" || pDefaults.UnEditableCompanyName == "DYN" || pDefaults.UnEditableCompanyName == "MIL" || pDefaults.UnEditableCompanyName == "BAK" || pDefaults.UnEditableCompanyName == "NIS" || pDefaults.UnEditableCompanyName == "NEX")
                                ReportHTML += '             <div class="col-xs-6"><b>ChargeableWeight: </b>' + pOperationHeader.ChargeableWeightSum + ' KGM' + '</div>';
                            if ((pOperationHeader.ShipmentType == constLCLShipmentType && pDefaults.UnEditableCompanyName == "MIL")
                                || pDefaults.UnEditableCompanyName == "TEU" || pDefaults.UnEditableCompanyName == "TMP"
                                || pDefaults.UnEditableCompanyName == "GCS")
                                ReportHTML += '             <div class="col-xs-6"><b>Volume: </b>' + pCBM + ' CBM</div>';
                            if (pDefaults.UnEditableCompanyName == "ASL" || pDefaults.UnEditableCompanyName == "TEU")
                                ReportHTML += '             <div class="col-xs-6"><b>ACID No: </b>' + (pOperationHeader.ACIDNumber == 0 ? "" : pOperationHeader.ACIDNumber) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "OCE" || pDefaults.UnEditableCompanyName == "CHM") {
                                ReportHTML += '             <div class="col-xs-6"><b>Tank: </b>' + (pInvoiceItem.length > 0 && pInvoiceItem[0].TankOrFlexiNumber != 0 ? pInvoiceItem[0].TankOrFlexiNumber : pTankOrFlexiNumbers) + '</div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "DGL" || pDefaults.UnEditableCompanyName == "BAD"
                                || pDefaults.UnEditableCompanyName == "OCE" || pDefaults.UnEditableCompanyName == "CHM")
                                ReportHTML += '             <div class="col-xs-6"><b>Notes: </b>' + (pInvoiceHeader.MiddleSignature == 0 ? "" : pInvoiceHeader.MiddleSignature) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "WEF" || pDefaults.UnEditableCompanyName == "NIS")
                                ReportHTML += '             <div class="col-xs-12" style="clear:both;"><b>Notes: </b>' + (pInvoiceHeader.EditableNotes == 0 ? "" : pInvoiceHeader.EditableNotes) + '</div>';
                            if (pDefaults.UnEditableCompanyName == "FEL")
                                ReportHTML += '             <div class="col-xs-12">&emsp;<br></div>';
                            ReportHTML += '                     <div class="col-xs-12 clear">';
                            ReportHTML += '                         <table id="tblReportInvoice" class="m-t table table-striped b-t b-light text-sm table-bordered" style="border:solid #000;">'; // table-hover
                            ReportHTML += '                             <thead>';
                            ReportHTML += '                                 <tr>';
                            if (pDefaults.UnEditableCompanyName == "ACS") {
                                ReportHTML += '                                     <th style="width:80%;">Description</th>';
                                ReportHTML += '                                     <th>Sale Price</th>';
                            }
                            else {
                                if (pDefaults.UnEditableCompanyName == "BAD")
                                    ReportHTML += '                                     <th>Ser.</th>';
                                ReportHTML += '                                     <th style="width:55%;">Description</th>';
                                if (pDefaults.UnEditableCompanyName != "BAK"
                                    && pDefaults.UnEditableCompanyName != "BOM"
                                    && !(pDefaults.UnEditableCompanyName == "COS" && pClientHeader.IsExternal)) {
                                    ReportHTML += '                                     <th>Qty</th>';
                                    ReportHTML += '                                     <th>Unit Price</th>';
                                }

                                if (pDefaults.UnEditableCompanyName == "BOM")
                                    ReportHTML += '                                     <th>Price</th>';
                                else
                                    ReportHTML += '                                     <th>Sale Price</th>';

                                if (/*pDefaults.UnEditableCompanyName == "BOM" && */pInvoiceHeader.InvoiceTypeName == "STATEMENT") {
                                    ReportHTML += '                                     <th>Receipt No.</th>';
                                    ReportHTML += '                                     <th>Receipt Date</th>';
                                    ReportHTML += '                                     <th>Notes</th>';
                                }
                            }
                            ReportHTML += '                                 </tr>';
                            ReportHTML += '                             </thead>';
                            ReportHTML += '                             <tbody>';
                            $.each(JSON.parse(data[2]), function (i, item) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                if (pDefaults.UnEditableCompanyName == "ACS") {
                                    ReportHTML += '                                         <td style="text-align:left;">' + item.ChargeTypeName + ($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 ? (" - " + item.Notes) : "") + '</td>';
                                    ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2) + '</td>';
                                }
                                else {
                                    if (pDefaults.UnEditableCompanyName == "BAD")
                                        ReportHTML += '                                         <td>' + (i + 1) + '</td>';
                                    if (pDefaults.UnEditableCompanyName == "TEL")
                                        ReportHTML += '                                         <td style="text-align:left;">' + (item.Notes == 0 ? (item.ChargeTypeName == 0 ? "" : item.ChargeTypeName) : item.Notes) + '</td>';
                                    else
                                        ReportHTML += '                                         <td style="text-align:left;">' + ($("#cbPrintArabicItems").prop("checked") && item.ChargeTypeLocalName != 0 ? item.ChargeTypeLocalName : item.ChargeTypeName) + (($("#cbAddNotesToItems").prop("checked") && item.Notes != 0 && item.Notes != "") ? ('-' + item.Notes) : "") + '</td>';
                                    if (pDefaults.UnEditableCompanyName != "BAK"
                                        && pDefaults.UnEditableCompanyName != "BOM"
                                        && !(pDefaults.UnEditableCompanyName == "COS" && pClientHeader.IsExternal)) {
                                        ReportHTML += '                                         <td>' + item.Quantity + '</td>';
                                        ReportHTML += '                                         <td>' + item.SalePrice.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                    }
                                    ReportHTML += '                                         <td>' + item.SaleAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                    if (/*pDefaults.UnEditableCompanyName == "BOM" &&*/ pInvoiceHeader.InvoiceTypeName == "STATEMENT") {
                                        ReportHTML += '                                         <td>' + (item.ReceiptNo == "0" ? "" : item.ReceiptNo) + '</td>';
                                        ReportHTML += '                                         <td>' + (Date.prototype.compareDates("01/01/1900", GetDateWithFormatMDY(item.ReceiptDate)) > 0 ? ConvertDateFormat(GetDateWithFormatMDY(item.ReceiptDate)) : "") + '</td>';
                                        ReportHTML += '                                         <td>' + item.Notes + '</td>';
                                        
                                    }
                                }
                                ReportHTML += '                                     </tr>';
                            });
                            if (pInvoiceHeader.FixedDiscount > 0) {
                                ReportHTML += '                                     <tr class="input-md" style="font-size:95%;">';
                                if (pDefaults.UnEditableCompanyName == "BAD")
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                ReportHTML += '                                         <td style="text-align:left;">' + (pDefaults.UnEditableCompanyName == "BAK" ? 'Deductive Amount' : 'Special Discount') + '</td>';
                                if (pDefaults.UnEditableCompanyName != "BAK"
                                    && !(pDefaults.UnEditableCompanyName == "COS" && pClientHeader.IsExternal)) {
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                    ReportHTML += '                                         <td>' + '' + '</td>';
                                }
                                ReportHTML += '                                         <td>' + '-' + pInvoiceHeader.FixedDiscount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</td>';
                                ReportHTML += '                                     </tr>';
                            }
                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=2>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>' + pInvoiceHeader.Amount + '</b></td>';
                            //ReportHTML += '                                             <td>' + pInvoiceHeader.CurrencyCode + '</td>';
                            //ReportHTML += '                                         </tr>';
                            //$("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")

                            //ReportHTML += '                                         <tr>';
                            //ReportHTML += '                                             <td colspan=3>' + '<b>TOTAL AMOUNT ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.Amount) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                             <td><b>Total Amount : ' + pInvoiceHeader.Amount + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                            //ReportHTML += '                                         </tr>';
                            if (pDefaults.UnEditableCompanyName == "FEL") {
                                if (pTaxAmount == 0 && pDiscountAmount == 0) { //In this case AmountWithoutVAT is the total amount
                                    ReportHTML += '                                         <tr>';
                                    ReportHTML += '                                             <td style="text-align:left;" colspan=3>' + '<b>ONLY : ' + toWords_WithFractionNumbers(pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                    ReportHTML += '                                             <td style=""><b>' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></td>';
                                    ReportHTML += '                                         </tr>';
                                } //if (pTaxAmount != 0 || pDiscountAmount != 0)
                                if (pTaxAmount != 0) {
                                    ReportHTML += '                                         <tr>';
                                    ReportHTML += '                                             <td style="text-align:left;" colspan=3>' + '<b>VAT (' + pTaxTypeName + ') </b></td>';
                                    ReportHTML += '                                             <td style=""><b>' + pTaxAmount.toFixed(2) + '</b></td>';
                                    ReportHTML += '                                         </tr>';
                                }
                                if (pDiscountAmount != 0) {
                                    ReportHTML += '                                         <tr>';
                                    ReportHTML += '                                             <td style="text-align:left;" colspan=3>' + '<b>Discount (' + pDiscountTypeName + ')</b></td>';
                                    ReportHTML += '                                             <td style=""><b>' + pDiscountAmount.toFixed(2) + '</b></td>';
                                    ReportHTML += '                                         </tr>';
                                }
                                if (pTaxAmount != 0 || pDiscountAmount != 0) {
                                    ReportHTML += '                                         <tr>';
                                    ReportHTML += '                                             <td style="text-align:left;" colspan=3>' + '<b>ONLY : ' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</b></td>';
                                    ReportHTML += '                                             <td style=""><b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2) + '</b></td>';
                                    ReportHTML += '                                         </tr>';
                                }
                            } //if (pDefaults.UnEditableCompanyName == "FEL") {
                            ReportHTML += '                             </tbody>';
                            ReportHTML += '                         </table>';
                            ReportHTML += '                     </div>'

                            if ($("#cbLargeInvoice").prop("checked")) {
                                ReportHTML += '         <div class="col-xs-12 m-t-n">Please, see attachment.</div>';
                                ReportHTML += '         <div class="break"></div>';
                            }
                            else
                                ReportHTML += '                         <div class="row"></div>';
                            if (pDefaults.UnEditableCompanyName == "FEL")
                                ReportHTML += '             <div class="col-xs-12">&emsp;<br></div>';
                            ReportHTML += '                         <div class="col-xs-8 m-t-n" style="' + (pDefaultsRow.UnEditableCompanyName == "FEL" ? "font-size:12px;" : "") + '">';
                            if ($("#cbPrintBankDetailsFromDefaults").prop("checked")) {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + (pDefaults.UnEditableCompanyName == "QUI" ? (" " + pDefaults.CompanyName) : "") + '</br>';
                                ReportHTML += '                             <b>Account Name:</b> ' + pAccountName + '</br>';
                                ReportHTML += '                             <b>Bank Name:</b> ' + pBankName + '</br>';
                                ReportHTML += '                             <b>Bank Address:</b> ' + pBankAddress + '</br>';
                                ReportHTML += '                             <b>Swift Code:</b> ' + pSwiftCode + '</br>';
                                ReportHTML += '                             <b>Account Number:</b> ' + pAccountNumber + '</br>';
                            }
                            //kk: added 2nd condition
                            else if ($("#cbPrintBankDetailsFromTemplate").prop("checked") && pDefaults.UnEditableCompanyName != "DGL") {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b>' + (pDefaults.UnEditableCompanyName == "QUI" ? (" " + pDefaults.CompanyName) : "") + '</br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>");
                            }
                            else
                                ReportHTML += '                             <br>';
                            ReportHTML += '                         </div>';
                            ReportHTML += '                         <div class="col-xs-4 text-right m-t-n ' + (pDefaults.UnEditableCompanyName == "FEL" ? "hide" : "") + '">';
                            if (pTaxAmount != 0 || pDiscountAmount != 0)
                                ReportHTML += '                             <b>Subtotal: </b>' + pInvoiceHeader.CurrencyCode + ' ' + pInvoiceHeader.AmountWithoutVAT.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            //ReportHTML += '                             <b>VAT Rate: </b>' + '% ' + pInvoiceHeader.TaxPercentage + '</br>';
                            if (pTaxAmount != 0 || pInvoiceHeader.TaxTypeID != 0) {
                                if (pDefaults.UnEditableCompanyName == "ALL" && pTaxAmount == 0)
                                    ReportHTML += '                             0% VAT-Table II, item b1 Law OB 1968' + '</br>';
                                else if (pDefaults.UnEditableCompanyName == "NEX")
                                    ReportHTML += '                             <b>' + pInvoiceHeader.TaxTypeName + ': </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                else
                                    ReportHTML += '                             <b>VAT(' + pInvoiceHeader.TaxPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            }
                            //ReportHTML += '                             <b>Discount Taxes Rate: </b>' + '% ' + pInvoiceHeader.DiscountPercentage + '</br>';
                            if (pDiscountAmount != 0) {
                                if (pDefaults.UnEditableCompanyName == "AOL")
                                    ReportHTML += '                             <b>Deducted Tax(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2) + '</br>';
                                else if (pDefaults.UnEditableCompanyName == "NIS"
                                    || (pDefaults.UnEditableCompanyName == "TEU" && parseInt(pInvoiceHeader.DiscountPercentage) == 3)
                                )
                                    ReportHTML += '                             <b>Withholding Tax(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                else if (pDefaults.UnEditableCompanyName == "NEX")
                                    ReportHTML += '                             <b>' + pInvoiceHeader.DiscountTypeName + ': </b>' + pInvoiceHeader.CurrencyCode + ' ' + pTaxAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                                else
                                    ReportHTML += '                             <b>' + (pDefaults.UnEditableCompanyName == "ASL" || pDefaults.UnEditableCompanyName == "COS" ? "Withholding Tax" : "Discount") + '(' + pInvoiceHeader.DiscountPercentage + '%): </b>' + pInvoiceHeader.CurrencyCode + ' ' + pDiscountAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</br>';
                            }
                            ReportHTML += '                             <b>Total: </b>' + pInvoiceHeader.CurrencyCode + ' <b>' + parseFloat(pInvoiceHeader.Amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '</b></br>';
                            ReportHTML += '                             <b>ONLY : </b>' + toWords_WithFractionNumbers(parseFloat(pInvoiceHeader.Amount).toFixed(2)) + ' ' + pInvoiceHeader.CurrencyCode + '</br>';
                            if ($("#cbPrintUSDTotal").prop("checked") && pInvoiceHeader.CurrencyCode.trim() == "EGP")
                                ReportHTML += '                             <b>USD Total: </b>' + ' <b>' + (pInvoiceHeader.Amount / $("#hReadySlCurrencies :contains('USD')").attr("MasterDataExchangeRate")).toFixed(2) + '</b></br>';
                            ReportHTML += '                         </div>';

                            //ReportHTML += '                     </div>'; //of table-responsive
                            //ReportHTML += '                 </section>';
                            //ReportHTML += '             <div class="static-text-primary">asfafs</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</br></br></br></br></br>dasda</div>';
                            ReportHTML += '             </div>'; //
                            ReportHTML += '         </body>';
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftPosition != 0 ? pDefaultsRow.InvoiceLeftPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddlePosition != 0 ? pDefaultsRow.InvoiceMiddlePosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightPosition != 0 ? pDefaultsRow.InvoiceRightPosition : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintLeftSignature").prop("checked") && pDefaultsRow.InvoiceLeftSignature != 0 ? pDefaultsRow.InvoiceLeftSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintMiddleSignature").prop("checked") && pDefaultsRow.InvoiceMiddleSignature != 0 ? pDefaultsRow.InvoiceMiddleSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                     <div class="col-xs-4 text-center"><b>' + ($("#cbPrintRightSignature").prop("checked") && pDefaultsRow.InvoiceRightSignature != 0 ? pDefaultsRow.InvoiceRightSignature : '&emsp;') + '</b></div>';
                            ReportHTML += '                 </div>'
                            if ($("#cbPrintStamp").prop("checked"))
                                ReportHTML += '         <div class="text-right m-r-lg"><img src="/Content/Images/CompanyStamp.jpg" alt="stamp"/></div>';

                            if (pDefaults.UnEditableCompanyName == "TEL") {
                                ReportHTML += '                 <div class="" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-3 m-t"><b>' + 'Financial Manager' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-2 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 m-t text-center"><b>' + 'Auditor' + '</b></div>';
                                ReportHTML += '                 </div>'
                                ReportHTML += '                 <div class="m-t" style="clear:both;">'; //this is supposed to  be in the footer but i added it here to test not put on text
                                ReportHTML += '                     <div class="col-xs-3 m-t-sm"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-2 m-t-sm text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-4 m-t-sm text-center"><b>' + '&emsp;' + '</b></div>';
                                ReportHTML += '                     <div class="col-xs-3 m-t-sm text-center">' + '&emsp;' + '</div>';
                                ReportHTML += '                 </div>'
                            }
                            ReportHTML += '     <footer class="footer col-xs-12" style="width:100%; position:absolute; bottom:0;">';
                            //kk
                            if ($("#cbPrintBankDetailsFromTemplate").prop("checked") && pDefaults.UnEditableCompanyName == "DGL") {
                                ReportHTML += '                             <b><u>BANK DETAILS:</u></b></br>';
                                ReportHTML += '                         ' + pBankDetailsTemplate.replace(/\n/g, "<br/>").replace(/\ /g, "&nbsp;");
                            }

                            if (pDefaults.UnEditableCompanyName == "DYN")
                                ReportHTML += '         <div class="row m-l">' + '  Please, Issue checks with our company name داينميك لخدمات النقل  ' + '</div>';
                            if ((pDefaults.UnEditableCompanyName == "ACS" || pDefaults.UnEditableCompanyName == "ELC"/*WEF is called ELC*/)
                                && pInvoiceHeader.InvoiceTypeName == "INVOICE") {
                                ReportHTML += '         <div style="width:98%;border:1px solid #000;" class="m-t">';
                                ReportHTML += '             <div class="row text-center">' + '  The company is subject to the system of advance payments in accordance with article 62 of the income tax law  ' + '</div>';
                                ReportHTML += '             <div class="row text-center">' + '   الشركة تخضع لنظام الدفعات المقدمة طبقا  للمادة (62) من قانون الضريبة علي الدخل      ' + '</div>';
                                ReportHTML += '         </div>';
                            }
                            if (pDefaults.UnEditableCompanyName == "AOL" && pInvoiceHeader.InvoiceTypeName == "STATEMENT") {
                                ReportHTML += '         <div class="row text-right m-r m-t">' + '  مرفق طيه بيان المستندات بمبالغ مدفوعة نيابة عن سيادتكم بناء على تعليماتكم مرفق يها أصول المستندات معنونة باسم سيادتكم  ' + '</div>';
                            }
                            //ReportHTML += '         <div class="row text-right m-r m-t">' + '  يتنبه نحو عدم الخصم من تحت حساب الضريبة حيث أن الشركة تتبع نظام الدفعات المقدمة تطبيقا لأحكام لمادة (62) من القانون رقم 91 لسنة 2005  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  يوقف صرف شيكات مصر للتأمين لحين تسوية التعويضات  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  لاتعتبر الفاتورة مسددة إلا بايصال رسمى مختوم من الشركة  ' + '</div>';
                            //ReportHTML += '         <div class="row text-right m-r">' + '  الاعتراض على اى بند من الفاتورة خلال 15 يوم من تاريخ استلام الفاتورة  ' + '</div>';
                            //if ($("#cbIsImport").prop("checked") && $("#cbIsOcean").prop("checked"))
                            //    ReportHTML += '                 <div class="row m-l">F/FFI-IS-11-03</div>';
                            if ($("#cbPrintFooterInvoice").prop("checked"))
                                ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            else
                                ReportHTML += '         &emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;<br>';
                            //else
                            //    ReportHTML += '         <div class="row text-center m-t"><img src="/Content/Images/CompanyFooter.jpg" alt="footer"/></div>';
                            ReportHTML += '     </footer>';
                            ReportHTML += '</html>';
                            if (_NumberOfInvoices == (_CurrentInvoiceIndex + 1)) {
                                pFinalReportHTML += ReportHTML;
                                Invoices_DrawOrSend(pOption, pFinalReportHTML, pClientHeader);
                            }
                            else {
                                pFinalReportHTML += ReportHTML;
                                pFinalReportHTML += ' <div class="break"></div>';
                            }
                        } //EOF All other companies
                    } //EOF else fields are complete
                    if (pInvoiceHeader.IsPrintOriginal
                        && (pOption == "Print" || pOption == undefined || pOption == null)) {
                        CallGETFunctionWithParameters("/api/Invoices/SetIsPrintOriginal"
                            , { pInvoiceIDToSetPrintOriginal: pInvoiceHeader.ID, pIsPrintOriginal: false }
                            , function () { FadePageCover(false); }
                            , null);
                    }
                    else if (pOption == "Print" || pOption == undefined || pOption == null)
                        FadePageCover(false);

                }
                , null
                , pIsCallBackAsync);//, _NumberOfInvoices > 1 ? false : true /*async : default is true*/);
        } //for (var _CurrentInvoiceIndex = 0; _CurrentInvoiceIndex < _NumberOfInvoices; _CurrentInvoiceIndex++) {
    }

}


//to check if column is locked by another user
// i commented it coz i wan to disable it
function Check(pFunctionName, pRowID, callback, pPartnerTypeID) { // i used the last parameter to handle the case of restarting when trying to edit a locked row
    //$.ajax({
    //    type: "GET",
    //    url: strServerURL + pFunctionName,
    //    data: pRowID,
    //    contentType: "application/json; charset=utf-8",
    //    dataType: "json",
    //    beforeSend: function () { },
    //    success: function (xyz) { // xyz The return value of pFunction Name
    //            if (xyz == false) {//false means row is available and not locked

    //                if (callback != null && callback != undefined) {
    //                    callback();
    //                    //$("#btn-Update").click();
    //                } 
    //            } else {// row is locked
    //                debugger;
    //                if (pPartnerTypeID == null || pPartnerTypeID == undefined || pPartnerTypeID == 1)
    //                    $("#btnClose").click();
    //                else if (pPartnerTypeID == 2) //Agent
    //                    $("#btnAgentClose").click();
    //                else if (pPartnerTypeID == 3) //ShippingAgent
    //                    $("#btnShippingAgentClose").click();
    //                else if (pPartnerTypeID == 4) //CustomsClearanceAgent
    //                    $("#btnCustomsClearanceAgentClose").click();
    //                else if (pPartnerTypeID == 5) //ShippingLine
    //                    $("#btnShippingLineClose").click();
    //                else if (pPartnerTypeID == 6) //Airline
    //                    $("#btnAirlineClose").click();
    //                else if (pPartnerTypeID == 7) //Trucker
    //                    $("#btnTruckerClose").click();
    //                else if (pPartnerTypeID == 8) //Supplier
    //                    $("#btnSupplierClose").click();
    //                swal(strSorry, 'Another user is editing this record now!', 'warning');
    //            }
    //    },
    //    error: function (jqXHR, exception) {
    //        alert('Error when trying to call function [' + pFunctionName + '].');
    //    }
    //});
}
// ******************************************************************************
// Date Functions ---------------------------------------------------------------
// Convert Date To mm DD YYYY ---------------------------------------------------
function GetDateWithFormatMDY(pSenderDate) {
    var dtFormatedMDY = new Date(1 * pSenderDate.substring(6, pSenderDate.length - 2));
    return dtFormatedMDY.toLocaleDateString();
}
function GetFullDateTime(pSenderDate) {
    debugger;
    var dtFormatedMDY = new Date(1 * pSenderDate.substring(6, pSenderDate.length - 2));
    return dtFormatedMDY.toString().substring(0, 24);
}
//sherif: returns Date with Format yyyyMMdd from dd/MM/yyyy
function GetDateWithFormatyyyyMMdd(pDate) {
    return pDate.split('/')[2] + pDate.split('/')[1].padStart(2, 0) + pDate.split('/')[0].padStart(2, 0);
}
function GetFullDateTime_DD_MM_YY(pSenderDate) {
    debugger;
    var dtFormatedMDY = new Date(1 * pSenderDate.substring(6, pSenderDate.length - 2));
    var hours = dtFormatedMDY.getHours();
    var minutes = dtFormatedMDY.getMinutes();
    var ampm = hours >= 12 ? 'pm' : 'am';
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0' + minutes : minutes;
    var strTime = hours + ':' + minutes + ' ' + ampm;

    return (dtFormatedMDY.getDate() + "-" + (dtFormatedMDY.getMonth() + 1) + "-" + dtFormatedMDY.getFullYear() + " " +
        //  dtFormatedMDY.getHours() + ":" + dtFormatedMDY.getMinutes() + ":" + dtFormatedMDY.getSeconds()
        strTime);
    // return dtFormatedMDY.toString().substring(0, 24);
}

function GetFullDateTime_DD_MM_YY_LastMile(pSenderDate) {
    debugger;
    var dtFormatedMDY = new Date(1 * pSenderDate.substring(6, pSenderDate.length - 2));
    var hours = dtFormatedMDY.getHours();
    var minutes = dtFormatedMDY.getMinutes();
    //var ampm = hours >= 12 ? 'pm' : 'am';
    //hours = hours % 12;
    //hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0' + minutes : minutes;
    var strTime = hours + ':' + minutes;

    var Day = (dtFormatedMDY.getDate().toString().length == 1 ? ("0" + dtFormatedMDY.getDate()) : dtFormatedMDY.getDate());
    var Month = (dtFormatedMDY.getMonth().toString().length == 1 ? ("0" + (dtFormatedMDY.getMonth() + 1)) : (dtFormatedMDY.getMonth() + 1));
    var Year = (dtFormatedMDY.getFullYear().toString().length == 1 ? ("0" + dtFormatedMDY.getFullYear()) : dtFormatedMDY.getFullYear());

    return (Day + "/" + (Month) + "/" + Year + " " + strTime);
    //  dtFormatedMDY.getHours() + ":" + dtFormatedMDY.getMinutes() + ":" + dtFormatedMDY.getSeconds()

    // return dtFormatedMDY.toString().substring(0, 24);
}

function GetFullDateTime_DD_MM_YY_hh_mm(pSenderDate) {
    debugger;
    var dtFormatedMDY = new Date(1 * pSenderDate.substring(6, pSenderDate.length - 2));

    return (dtFormatedMDY.getDate() + "/" + (dtFormatedMDY.getMonth() + 1) + "/" + dtFormatedMDY.getFullYear() + " " +
        dtFormatedMDY.getHours() + ":" + dtFormatedMDY.getMinutes()
    );
    // return dtFormatedMDY.toString().substring(0, 24);
}
//sherif: Convert mm/dd/yyyy to dd/mm/yyyy and vice versa
function ConvertDateFormat(pDateToConvert) {
    if (pDateToConvert != "") {
        //if (isValidDate(pDateToConvert, 1)) { //the 2nd param is 1 coz its still in dd/mm/yyyy format(if correct format then convert)
        var ddmmyyy = (pDateToConvert.split('/')[1].length == 1 ? "0" + pDateToConvert.split('/')[1] : pDateToConvert.split('/')[1]) + "/"
            + (pDateToConvert.split('/')[0].length == 1 ? "0" + pDateToConvert.split('/')[0] : pDateToConvert.split('/')[0]) + "/"
            + pDateToConvert.split('/')[2];
        return ddmmyyy;
        //}
        //else
        //    return 0;
    }
    else
        return "1";
}
function PadDateWithZeroes(pDateToPad) {
    if (pDateToPad != "") {
        //if (isValidDate(pDateToPad, 1)) { //the 2nd param is 1 coz its still in dd/mm/yyyy format(if correct format then convert)
        var ddmmyyy = (pDateToPad.split('/')[0].length == 1 ? "0" + pDateToPad.split('/')[0] : pDateToPad.split('/')[0]) + "/"
            + (pDateToPad.split('/')[1].length == 1 ? "0" + pDateToPad.split('/')[1] : pDateToPad.split('/')[1]) + "/"
            + pDateToPad.split('/')[2];
        return ddmmyyy;
        //}
        //else
        //    return 0;
    }
    else
        return "1";
}
//sherif: to show date as today or tomorrow
function GetShownDate(pFirstDate, pSecondDate) {
    var i = Date.prototype.compareDates(pFirstDate, pSecondDate);
    if (i == 0)
        return "Today";
    if (i == -1)
        return "Yesterday";
    if (i == 1)
        return "Tomorrow";
    return ConvertDateFormat(pSecondDate);
}
// GLOBAL FUNCTIONS -------------------------------------------------------------
Date.prototype.subtractDates = function (pFirstDate, pSecondDate) {
    var _firstDate = new Date(pFirstDate);
    var _secondDate = new Date(pSecondDate);
    var _timeDiff = Math.abs(_secondDate.getTime() - _firstDate.getTime());
    var _diffDays = Math.ceil(_timeDiff / (1000 * 3600 * 24));
    // console.log(_diffDays.toString());

    return _diffDays;
}

//sherif: if return is 0 then they are equal, if return < 0 then 1stdate is larger else smaller
//the return value is the number of days different between the 2 dates
Date.prototype.compareDates = function (pFirstDate, pSecondDate) {
    var _firstDate = new Date(pFirstDate);
    var _secondDate = new Date(pSecondDate);
    //var _timeDiff = Math.abs(_secondDate.getTime() - _firstDate.getTime());
    var _timeDiff = _secondDate.getTime() - _firstDate.getTime();
    var _diffDays = Math.ceil(_timeDiff / (1000 * 3600 * 24));
    // console.log(_diffDays.toString());

    //***By Mostafa** sometimes date comparing return -0 (when day is 31) that is equal +0 and we need negative value
    // -0 == 0 true
    // Object.is(-0, +0) false //>>>>>[ Mostafa ]
    //**************************************************
    if (Object.is(-0, _diffDays)) {
        _diffDays = -1;
    }
    //*****EOF By Mostafa******************************************
    return _diffDays;
}

Date.prototype.addDays = function (pDays) {
    debugger;
    var dat = new Date(this.valueOf());
    dat.setDate(dat.getDate() + pDays);
    return dat;
}
//returns MM/DD/YYYY
Date.prototype.addDays = function (pFirstDate, pDays) {

    var someDate = new Date(pFirstDate);
    var numberOfDaysToAdd = pDays * 1;

    someDate.setDate(someDate.getDate() + numberOfDaysToAdd);

    var dd = someDate.getDate();
    var mm = someDate.getMonth() + 1;
    var y = someDate.getFullYear();
    var someFormattedDate = dd + '/' + mm + '/' + y;

    return someFormattedDate;
}

function getTodaysDateInddMMyyyyFormat() {
    var today = new Date();

    var dd = today.getDate().toString().length == 1 ? ("0" + today.getDate().toString()) : today.getDate().toString();
    var MM = (today.getMonth() + 1).toString().length == 1 ? ("0" + (today.getMonth() + 1).toString()) : (today.getMonth() + 1).toString();
    var yyyy = today.getFullYear().toString();

    return dd + "/" + MM + "/" + yyyy;
}
function getTodaysDateInyyyyMMddhhmmFormat() {
    var today = new Date();

    var dd = today.getDate().toString().length == 1 ? ("0" + today.getDate().toString()) : today.getDate().toString();
    var MM = (today.getMonth() + 1).toString().length == 1 ? ("0" + (today.getMonth() + 1).toString()) : (today.getMonth() + 1).toString();
    var yyyy = today.getFullYear().toString();

    var hhmm = get24Houre(getTime());
    return yyyy + "/" + MM + "/" + dd + " " + hhmm;
}
function getTime() {
    //// debugger;
    var pDate = new Date();
    return pDate.toLocaleTimeString();
}
function getMonthFromString(mon) {
    return new Date(Date.parse(mon + " 1, 2012")).getMonth() + 1
}
function getDayInLetters(pDateInddMMyyyyFormat, pLanguage) { //pLanguage 1:En, 2:Ar
    debugger;
    var pDay = "";
    //var dayOrder = new Date(Date.parse("10" + " 07, 2018")).getDay() + 1
    if (pDateInddMMyyyyFormat == "01/01/1900")
        return "";
    var dayOrder = new Date(Date.parse(pDateInddMMyyyyFormat.split("/")[1]/*Month*/ + " " + pDateInddMMyyyyFormat.split("/")[0]/*day*/ + ", " + pDateInddMMyyyyFormat.split("/")[2]/*year*/)).getDay() + 1
    if (pLanguage == 1) { //En
        switch (dayOrder) {
            case 1:
                return "Sunday";
            case 2:
                return "Monday";
            case 3:
                return "Tuesday";
            case 4:
                return "Wednesday";
            case 5:
                return "Thursday";
            case 6:
                return "Friday";
            case 7:
                return "Saturday";
            default:
                return "";
        }
    }
    else if (pLanguage == 2) { //Ar
        switch (dayOrder) {
            case 1:
                return "الأحد";
            case 2:
                return "الأثنين";
            case 3:
                return "الثلاثاء";
            case 4:
                return "الأربعاء";
            case 5:
                return "الخميس";
            case 6:
                return "الجمعة";
            case 7:
                return "السبت";
            default:
                return "";
        }
    }
}
function getMonthInLetters(pMonthInNumber, pLanguage) { //pLanguage 1:En, 2:Ar
    debugger;
    var _intMonth = parseInt(pMonthInNumber);
    switch (_intMonth) {
        case 1:
            return "Jan";
        case 2:
            return "Feb";
        case 3:
            return "Mar";
        case 4:
            return "Apr";
        case 5:
            return "Mai";
        case 6:
            return "Jun";
        case 7:
            return "Jul";
        case 8:
            return "Aug";
        case 9:
            return "Sep";
        case 10:
            return "Oct";
        case 11:
            return "Nov";
        case 12:
            return "Dec";
        default:
            return "";
    }
}
function get24Houre(pTime) {
    var time = pTime;
    var hours = Number(time.match(/^(\d+)/)[1]);
    var minutes = Number(time.match(/:(\d+)/)[1]);
    var AMPM = time.match(/\s(.*)$/)[1];
    if (AMPM == "PM" && hours < 12) hours = hours + 12;
    if (AMPM == "AM" && hours == 12) hours = hours - 12;
    var sHours = hours.toString();
    var sMinutes = minutes.toString();
    if (hours < 10) sHours = "0" + sHours;
    if (minutes < 10) sMinutes = "0" + sMinutes;
    console.log(sHours + ":" + sMinutes)
    return (sHours + ":" + sMinutes);
}

function convertTo24Hour(time) {
    var hours = parseInt(time.substr(0, 2));
    if (time.indexOf('am') != -1 && hours == 12) {
        time = time.replace('12', '0');
    }
    if (time.indexOf('pm') != -1 && hours < 12) {
        time = time.replace(hours, (hours + 12));
    }
    return time.replace(/(am|pm)/, '');
}

// Context Menu Section *********************************************
function CreateCustomContextMenu(pSelector, pItems, callback) {
    $.contextMenu({
        selector: pSelector,
        callback: function (key, options) {
            callback(key);
        },
        items: pItems,
        autoHide: true
    });
}
//*******************************************************************

; $.fn.reverseChildren = function () {
    return this.each(function () {
        var $this = $(this);
        $this.children().each(function () { $this.prepend(this) });
        $this.addClass("reversed");
    });
};

function HighlightText(pContainerName, pHighlightString) {
    $(pContainerName).highlight(pHighlightString);
}

function Print(pServiceFunctionName, pPageNumber, pPageSize, callback, pRoleID, pUserID) {
    FadePageCover(true);
    if (pPageNumber <= 0)
        pPageNumber = 1;
    debugger;//sherif
    if (pPageSize <= 0)
        pPageSize = 10;
    if (pPageSize == null)
        pPageSize = 0;
    $.ajax({
        type: "GET",
        url: strServerURL + pServiceFunctionName,
        data: { pPageNumber: pPageNumber, pPageSize: pPageSize, pSearchKey: ($("#txt-Search").val() == null ? "" : $("#txt-Search").val().trim()), pRoleID: (pRoleID == null ? EditedRoleID : pRoleID), pUserID: (pUserID == null ? EditedUserID : pUserID) },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $("#cb-CheckAll").prop('checked', false);

            debugger; //sherif : fix so when delete all last page, then get the previous
            if (data[1] == 0 && parseInt(pPageNumber) > 1)
                LoadWithPaging(pServiceFunctionName, (parseInt(pPageNumber) - 1), pPageSize, callback);
            else {
                callback(JSON.parse(data[0]));
                InitiPaging("div-Pager", pPageNumber, data[1]);
                FadePageCover(false);
            }
        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again. This is LoadWithPaging in mainapp.master !", "");
            FadePageCover(false);
        }
    });
    //if (callbackForDelete != null)
    //    callbackForDelete();
}

function Operations_SetCloseDate(pCallingControlID, pControlToBeSet) {
    debugger;
    if ($("#cbIsImport").prop('checked') && $("#cbIsOcean").prop('checked')) //ImportOceanDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultImportOceanDays").val()));
    else if ($("#cbIsImport").prop('checked') && ($("#cbIsAir").prop('checked'))) //ImportAirDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultImportAirDays").val()));
    else if ($("#cbIsImport").prop('checked') && ($("#cbIsInland").prop('checked'))) //InmportInlandDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultImportInlandDays").val()));
    else if ($("#cbIsExport").prop('checked') && $("#cbIsOcean").prop('checked')) //ExportOceanDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultExportOceanDays").val()));
    else if ($("#cbIsExport").prop('checked') && ($("#cbIsAir").prop('checked'))) //ExportAirDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultExportAirDays").val()));
    else if ($("#cbIsExport").prop('checked') && ($("#cbIsInland").prop('checked'))) //ExportInlandDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultExportInlandDays").val()));
    else if ($("#cbIsDomestic").prop('checked') && $("#cbIsOcean").prop('checked')) //DomesticOceanDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultDomesticOceanDays").val()));
    else if ($("#cbIsDomestic").prop('checked') && ($("#cbIsAir").prop('checked'))) //DomesticAirDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultDomesticAirDays").val()));
    else if ($("#cbIsDomestic").prop('checked') && ($("#cbIsInland").prop('checked'))) //DomesticInlandDays
        $("#" + pControlToBeSet).val(Date.prototype.addDays(ConvertDateFormat($("#" + pCallingControlID).val()), $("#hDefaultDomesticInlandDays").val()));
}

function Operations_ClearFilters() {
    glbOperationTransportFilter = 0;
    glbOperationDirectionFilter = 0;
    glbOperationBLTypeFilter = 0;
    glbOperationStageFilter = "";
    glbOperationTxtSearchFilter = "";
    //SetAsideSearchControls(0);
}
function Quotations_ClearFilters() {
    glbQuotationTransportFilter = 0;
    glbQuotationDirectionFilter = 0;
    glbQuotationStageFilter = "";
    glbQuotationTxtSearchFilter = "";
}
//pOption 0:Clear,1:Operations
//function SetAsideSearchControls(pOption) {
//    debugger;
//    var htmlSearchControls = "";
//    if (pOption == 0) {
//        $("#asideSearch").addClass("hide");
//    }
//    else if (pOption == 1) { //Search Operations
//        $("#asideSearch").addClass("hide"); //the default is hide
//        htmlSearchControls = '<a class="list-group-item" style="height:70px;"><label>Operation Code</label><input type="text" id="txtFilterOperationCode" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" class="form-control input-sm" maxlength="200" placeholder="Op. Code" style="text-transform:uppercase"></a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>From Open Date</label><input id="txtFilterFromOpenDate" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="background-color:white; cursor:text;" class="datepicker-input form-control input-sm" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" /> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>To Open Date</label><input id="txtFilterToOpenDate" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="background-color:white; cursor:text;" class="datepicker-input form-control input-sm" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" /> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>From ETD Date</label><input id="txtFilterFromETDDate" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="background-color:white; cursor:text;" class="datepicker-input form-control input-sm" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" /> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>To ETD Date</label><input id="txtFilterToETDDate" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="background-color:white; cursor:text;" class="datepicker-input form-control input-sm" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" /> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>From ETA Date</label><input id="txtFilterFromETADate" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="background-color:white; cursor:text;" class="datepicker-input form-control input-sm" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" /> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>To ETA Date</label><input id="txtFilterToETADate" type="text" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" style="background-color:white; cursor:text;" class="datepicker-input form-control input-sm" data-required="false" data-date-format="dd/mm/yyyy" placeholder="Select Date" /> </a> ';
//        //Operations  here w/o dashes
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>Service</label><select id="slFilterMoveType" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item '+($("#hDefaultUnEditableCompanyName").val() == "EGL" ? " hide ": "")+'" style="height:70px;"><label>Shipper</label><select id="slFilterShipper" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item '+($("#hDefaultUnEditableCompanyName").val() == "EGL" ? " hide ": "")+'" style="height:70px;"><label>Consignee</label><select id="slFilterConsignee" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item '+($("#hDefaultUnEditableCompanyName").val() == "EGL" ? " hide ": "")+'" style="height:70px;"><label>Agent</label><select id="slFilterAgent" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>State</label><select id="ulOperationStages" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>POL Country</label><select id="slFilterPOLCountry" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>POL</label><select id="slFilterPOL" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"><option value=""><--All--></option></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>POD Country</label><select id="slFilterPODCountry" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>POD</label><select id="slFilterPOD" onfocus="DisableBackspaceKey(id);" onkeydown="DisableBackspaceKey(id);" onkeypress="DisableBackspaceKey(id);" class="input-sm col-sm-12"><option value=""><--All--></option></select> </a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>Invoice No.</label><input type="text" id="txtFilterInvoiceNumber" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" class="form-control input-sm" maxlength="200" placeholder="Invoice No." style="text-transform:uppercase"></a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>Gross Wgt(kg)</label><input type="text" id="txtFilterGrossWeight" name="txtSalePrice" onkeypress="CheckValueIsDecimal(id);" onfocus="CheckValueIsDecimal(id);" onblur="CheckDecimalFormat(id);" class="form-control input-sm" maxlength="10" placeholder="0.0"></a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>Container No.</label><input type="text" id="txtFilterContainerNumber" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" class="form-control input-sm" maxlength="200" placeholder="Container No." style="text-transform:uppercase"></a> ';
//        htmlSearchControls += '<a class="list-group-item" style="height:70px;"><label>Certificate No.</label><input type="text" id="txtFilterCertificateNumber" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);" class="form-control input-sm" maxlength="200" placeholder="Certificate No." style="text-transform:uppercase"></a> ';
//        //$("#asideSearch").removeClass("hide"); //i transferred this line to the callback of load views not to be shown early
//        $("#btnFilterOptions").attr("onclick", "Operations_LoadingWithPaging();");
//    }
//    $("#divSearchControls").html(htmlSearchControls);
//}
function GetTotalEquivalantDefaultCurrencyAmount(pCurrenciesBalance) { //pCurrenciesBalance: like "387.4 EGP, 4873 USD, 2937 EUR"
    debugger;
    var pEquivalantAmountInDefaultCurrency = 0;
    var arrRowBalance = pCurrenciesBalance.split(',');
    if (arrRowBalance[0].trim() != "")
        for (var i = 0; i < arrRowBalance.length; i++) {
            var row = arrRowBalance[i].trim();
            if (row != "0") {
                pEquivalantAmountInDefaultCurrency += parseFloat(row)
                    *
                    $("#hReadySlCurrencies option:Contains('" + row.substr(row.length - 3, 3) + "')").attr("MasterDataExchangeRate");
            }
        }
    return pEquivalantAmountInDefaultCurrency;
}


function OpenUploadedFile_Global(pFileNameAndPath) {
    //example: '/api\\eFBL\\21631\\617735591DA81158B.pdf'
    window.open(pFileNameAndPath, '_blank');
    //var myWindow = window.open("", "_blank");
    //myWindow.document.write("<p>I replaced the current window.</p>");
}
function OpenUploadedFile(pFileName) {
    debugger;
    window.open(constDocsInFilesPath + $("#hOperationCreationYear").val() + "\\" + $("#hOperationCode").val() + "\\" + pFileName, '_blank');
    //var myWindow = window.open("", "_blank");
    //myWindow.document.write("<p>I replaced the current window.</p>");
}
//SaveUploadedFile - DownloadUploadedFile
function SaveFile(pFileName) {
    debugger;
    //window.open(constDocsInFilesPath + $("#hOperationCode").val() + "\\" + pFileName, '_blank');
    var link = document.createElement('a');//a is <anchor>
    if (typeof link.download === 'string') {
        link.href = constDocsInFilesPath + pFileName;
        link.setAttribute('download', pFileName);
        document.body.appendChild(link);//Firefox requires the link to be in the body
        link.click();//simulate click
        document.body.removeChild(link); //remove the link when done
    } else {
        window.open(constDocsInFilesPath + pFileName);
    }
    var file = constDocsInFilesPath + $("#hOperationCode").val() + "\\" + pFileName;
    saveAs(file);
}
function IsDefault_GetICON(pIsDefault) {
    var _strIcon = "";
    switch (pIsDefault) {
        case true:
            {
                _strIcon = "<a href='#' class='active' ><i class='fa fa-check text-success text-active'></i><i class='fa fa-times text-danger text'></i></a>";
                break;
            }
        default:
            {
                _strIcon = "<a href='#'><i class='fa fa-check text-success text-active'></i><i class='fa fa-times text-danger text'></i></a>";
                break;
            }

    }
    return _strIcon;
}

function ShowliChequeAlarm() {
    $("#liChequeAlarm").addClass("hidden-xs");
    $("#liChequeAlarm").removeClass("hide");
}
function HideliChequeAlarm() {
    $("#liChequeAlarm").removeClass("hidden-xs");
    $("#liChequeAlarm").addClass("hide");
}

function InvoiceReports_SumColumn(pTableName, pClassName) {
    debugger;
    var result = 0;
    $("#" + pTableName + " td." + pClassName).each(function () {
        var value = $(this).text();
        if (!isNaN(value) && value.length != 0)
            result += parseInt(value);
    });
}
function ExportToExcel(pArray, pHeader, pFileName, pExcludedColumns) {
    debugger;
    if (pExcludedColumns != null && pExcludedColumns != undefined && pExcludedColumns != "" && pExcludedColumns != "0") {
        for (var i = 0; i < pArray.length; i++) {
            for (var j = 0; j < pExcludedColumns.split(',').length; j++)
                delete pArray[i][pExcludedColumns.split(',')[j]];
        }
    }
    exportToCsv = function () {
        var CsvString = "";
        //pHeader is the column names separated by commas
        for (var i = 0; i < pHeader.split(',').length; i++)
            CsvString += pHeader.split(',')[i] + ',';
        CsvString += "\r\n";
        pArray.forEach(function (RowItem, RowIndex) {
            for (var key in RowItem) {
                CsvString += RowItem[key] + ','
            }
            CsvString += "\r\n";
        });
        //CsvString = "data:application/csv," + encodeURIComponent(CsvString);
        CsvString = "data:text/csv;charset=utf-8,%EF%BB%BF" + encodeURIComponent(CsvString);
        var x = document.createElement("A");
        x.setAttribute("href", CsvString);
        if (pFileName == undefined) pFileName = "NewFile";
        x.setAttribute("download", pFileName + ' ' + getTodaysDateInddMMyyyyFormat() + ' ' + getTime() + ".csv");
        document.body.appendChild(x);
        x.click();
    }
    exportToCsv();
}
function ExportHtmlTableToCsv(pTblName, pFileName) {
    debugger;
    exportToCsv = function () {
        var CsvString = "";
        var mytable = document.getElementById(pTblName);
        var rowCount = mytable.rows.length;
        var colCount = mytable.getElementsByTagName("tr")[0].getElementsByTagName("th").length;
        for (var i = 0; i < rowCount; i++) {
            for (var j = 0; j < colCount; j++) {
                if (i == 0) {
                    CsvString += mytable.getElementsByTagName("thead")[i].getElementsByTagName("th")[j].innerText + ',';
                }
                else {
                    CsvString += mytable.getElementsByTagName("tr")[i].getElementsByTagName("td")[j].innerText.replace(/,/g, "-") + ',';
                }
            }
            CsvString += "\r\n";
        }
        CsvString = "data:text/csv;charset=utf-8,%EF%BB%BF" + encodeURIComponent(CsvString);
        var x = document.createElement("A");
        x.setAttribute("href", CsvString);
        if (pFileName == undefined) pFileName = "NewFile";
        x.setAttribute("download", pFileName + ' ' + getTodaysDateInddMMyyyyFormat() + ' ' + getTime() + ".csv");
        document.body.appendChild(x);
        x.click();
    }
    exportToCsv();
}
function ExportHtmlTableToCsv_RemovingCommasForNumbers(pTblName, pFileName) {
    debugger;
    exportToCsv = function () {
        var CsvString = "";
        var mytable = document.getElementById(pTblName);
        var rowCount = mytable.rows.length;
        var colCount = mytable.getElementsByTagName("tr")[0].getElementsByTagName("th").length;
        //Header
        for (var j = 0; j < colCount; j++)
            CsvString += mytable.getElementsByTagName("thead")[0].getElementsByTagName("th")[j].innerText + ',';
        CsvString += "\r\n";
        //Rows
        for (var i = 1; i < rowCount; i++) {
            for (var j = 0; j < colCount; j++)
                CsvString += mytable.getElementsByTagName("tr")[i].getElementsByTagName("td")[j].innerText.replace(/,/g, "") + ',';
            CsvString += "\r\n";
        }
        CsvString = "data:text/csv;charset=utf-8,%EF%BB%BF" + encodeURIComponent(CsvString);
        var x = document.createElement("A");
        x.setAttribute("href", CsvString);
        if (pFileName == undefined) pFileName = "NewFile";
        x.setAttribute("download", pFileName + ' ' + getTodaysDateInddMMyyyyFormat() + ' ' + getTime() + ".csv");
        document.body.appendChild(x);
        x.click();
    }
    exportToCsv();
}
function Receptionists_GetAvailableUsers(pWhereClause) {
    $("#lblShownItems").html("Receptionists - المرسل لهم");
    $("#divCheckboxesList").html("");
    jQuery("#CheckboxesListModal").modal("show");
    var pStrFnName = "/api/Users/LoadAll";
    var pDivName = "divCheckboxesList";
    var pCheckboxNameAttr = "cbAddedItemID";
    if (pWhereClause == null || pWhereClause == undefined) {
        //pWhereClause = " WHERE IsInactive=0 AND ID <> " + $("#hLoggedUserID").val();
        pWhereClause = " WHERE IsInactive=0 ";
        //pWhereClause += " AND ( Name LIKE N'%" + $("#txtSearchItems").val().trim().toUpperCase() + "%' OR LocalName LIKE N'%" + $("#txtSearchItems").val().trim().toUpperCase() + "%') ";
        pWhereClause += " AND Name LIKE N'%" + $("#txtSearchItems").val().trim().toUpperCase() + "%' ";
        pWhereClause += " ORDER BY Name ";
    }
    debugger;
    FadePageCover(true);
    GetListAsCheckboxes(pStrFnName, pWhereClause, pDivName, pCheckboxNameAttr
        , function () {
            HighlightText("#" + pDivName, $("#txtSearchItems").val().trim());
            FadePageCover(false);
        });
}
function Receptionists_GetAvailableDepartments(pWhereClause) {
    $("#lblShownItems").html("Receptionists - المرسل لهم");
    $("#divCheckboxesList").html("");
    jQuery("#CheckboxesListModal").modal("show");
    var pStrFnName = "/api/NoAccessDepartments/LoadAll";
    var pDivName = "divCheckboxesList";
    var pCheckboxNameAttr = "cbAddedItemID";
    if (pWhereClause == null || pWhereClause == undefined) {
        //pWhereClause = " WHERE IsInactive=0 AND ID <> " + $("#hLoggedUserID").val();
        pWhereClause = " WHERE 1=1 ";
        pWhereClause += " AND Name LIKE N'%" + $("#txtSearchItems").val().trim().toUpperCase() + "%' ";
        pWhereClause += " ORDER BY Name ";
    }
    debugger;
    FadePageCover(true);
    GetListAsCheckboxes(pStrFnName, pWhereClause, pDivName, pCheckboxNameAttr
        , function () {
            HighlightText("#" + pDivName, $("#txtSearchItems").val().trim());
            FadePageCover(false);
        });
}

function SendNormalAndLocalEmail(pSubject, pBody, pOperationID, pIsSendNormalEmail) {
    debugger;
    var pModalName = "CheckboxesListModal";
    var pCheckboxNameAttr = "cbAddedItemID";
    var pSelectedItemsIDs = GetAllSelectedIDsAsStringWithNameAttr(pCheckboxNameAttr);
    if (pSelectedItemsIDs == "")
        swal("Sorry", "You have to select at least one receptionist.");
    else { //send
        FadePageCover(true);
        var pParametersWithValues = {
            pUserIDs: pSelectedItemsIDs
            , pSubject: pSubject
            , pBody: pBody
            , pQuotationRouteID: 0
            , pPricingID: 0
            , pRequestOrReply: 0
            , pOperationID: pOperationID
            , pIsAlarm: true
            , pParentID: 0
            , pEmailSource: 0
            , pIsSendNormalEmail: pIsSendNormalEmail
            //LoadWithPaging parameters
            , pWhereClauseForLoadWithPaging: ("WHERE 1=1")
            , pPageSize: 1 //$("#select-page-size").val()
            //pPageNumber is 1 coz its insert so it will be on the top
            , pPageNumber: 1 //$("#div-Pager li.active a").text() == "" ? 1 : $("#div-Pager li.active a").text() 
            , pOrderBy: "ID DESC"
        };
        CallGETFunctionWithParameters("/api/LocalEmails/SendEmail", pParametersWithValues
            , function (pData) {
                if (pData[0]) {
                    jQuery("#CheckboxesListModal").modal("hide");
                    swal("Success", "Sent successfully.");
                }
                else
                    swal("Sorry", "Connection failed, please try again.");
                FadePageCover(false);
            }
            , null);
    }
}
//************************ Excel Function (Dynamic Fields Title) ************* 
//#tblExcel      ,  #InputFileID
function ImportExcel(HashUplaodFileID, HashTableID) {
    debugger
    $(HashTableID).html("")
    var regex = /^([a-zA-Z0-9\s_\\.\-:]\\(\\))+(.xlsx|.xls)$/;
    /*Checks whether the file is a valid excel file*/
    if ($(HashUplaodFileID).val().toLowerCase().indexOf(".xlsx") > 0 || $(HashUplaodFileID).val().toLowerCase().indexOf(".xls") > 0) {
        var xlsxflag = false; /*Flag for checking whether excel is .xls format or .xlsx format*/
        if ($(HashUplaodFileID).val().toLowerCase().indexOf(".xlsx") > 0) {
            xlsxflag = true;
        }
        /*Checks whether the browser supports HTML5*/
        if (typeof (FileReader) != "undefined") {
            var reader = new FileReader();
            reader.onload = function (e) {
                var data = e.target.result;
                /*Converts the excel data in to object*/
                if (xlsxflag) {

                    var binary = "";
                    var bytes = new Uint8Array(data);
                    var length = bytes.byteLength;
                    for (var i = 0; i < length; i++) {
                        binary += String.fromCharCode(bytes[i]);
                    }
                    // call 'xlsx' to read the file
                    var workbook = XLSX.read(binary, { type: 'binary', cellDates: true, cellStyles: true });

                }
                else {
                    var workbook = XLS.read(data, { type: 'binary' });
                }
                /*Gets all the sheetnames of excel in to a variable*/
                var sheet_name_list = workbook.SheetNames;

                var cnt = 0; /*This is used for restricting the script to consider only first sheet of excel*/
                sheet_name_list.forEach(function (y) { /*Iterate through all sheets*/
                    /*Convert the cell value to Json*/
                    if (xlsxflag) {
                        var exceljson = XLSX.utils.sheet_to_json(workbook.Sheets[y]);
                    }
                    else {
                        var exceljson = XLS.utils.sheet_to_row_object_array(workbook.Sheets[y]);
                    }
                    if (exceljson.length > 0 && cnt == 0) {
                        BindTable(exceljson, HashTableID);
                        cnt++;
                    }
                });
                $(HashTableID).show();
            }
            if (xlsxflag) {/*If excel file is .xlsx extension than creates a Array Buffer from excel*/
                reader.readAsArrayBuffer($(HashUplaodFileID)[0].files[0]);
            }
            else {
                reader.readAsBinaryString($(HashUplaodFileID)[0].files[0]);
            }
        }
        else {
            alert("Sorry! Your browser does not support HTML5!");
        }
    }
    else {
        alert("Please upload a valid Excel file!");
    }
}
function BindTable(jsondata, tableid) {/*Function used to convert the JSON array to Html Table*/
    debugger;
    var columns = BindTableHeader(jsondata, tableid); /*Gets all the column headings of Excel*/
    for (var i = 0; i < jsondata.length; i++) {
        var row$ = $('<tr/>');
        for (var colIndex = 0; colIndex < columns.length; colIndex++) {
            var cellValue = jsondata[i][columns[colIndex]];
            if (cellValue != null && cellValue.toString().indexOf("GMT+") >= 0) {
                var myDate = new Date(cellValue);

                row$.append($('<td/>').html(myDate.getFullYear() + '-' + (myDate.getMonth() + 1) + '-' + (myDate.getDate() + 1)));
            }
            else {
                if (cellValue == null)
                    cellValue = "";
                row$.append($('<td/>').html(cellValue));
            }
        }
        $(tableid).append(row$);
    }
}
function BindTableHeader(jsondata, tableid) {/*Function used to get all column names from JSON and bind the html table header*/
    debugger;
    var columnSet = [];
    var headerTr$ = $('<tr/>');
    for (var i = 0; i < jsondata.length; i++) {
        var rowHash = jsondata[i];
        for (var key in rowHash) {
            if (rowHash.hasOwnProperty(key)) {
                if ($.inArray(key, columnSet) == -1) {/*Adding each unique column names to a variable array*/
                    columnSet.push(key);
                    headerTr$.append($('<th/>').html(key));
                }
            }
        }
    }
    $(tableid).append(headerTr$);
    return columnSet;
}

//var tableToExcel = (function() {
//    var uri = 'data:application/vnd.ms-excel;base64,'
//      , template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><meta http-equiv="content-type" content="text/plain; charset=UTF-8"/></head><body><table>{table}</table></body></html>'
//      , base64 = function(s) { return window.btoa(unescape(encodeURIComponent(s))) }
//      , format = function(s, c) { return s.replace(/{(\w+)}/g, function(m, p) { return c[p]; }) }
//    debugger;
//    return function(table, name) {
//        if (!table.nodeType) table = document.getElementById(table);
//        debugger;
//        var ctx = {worksheet: name || 'Worksheet', table: table.innerHTML}
//        window.location.href = uri + base64(format(template, ctx))
//    }
//})()

function UnifyArabicLetters(pControlID) {
    debugger;
    // UniCodes -->  ا :0627 , إ :0625 , أ :0623 , آ :0622
    var strText = $("#" + pControlID).val();
    strText = strText.replace(new RegExp("\u0623", "g"), "\u0627"); //the parameter "g" is to replace all occurances globally
    strText = strText.replace(new RegExp("\u0625", "g"), "\u0627");
    strText = strText.replace(new RegExp("\u0622", "g"), "\u0627");
    $("#" + pControlID).val(strText);
}
function pad_with_zeroes(number, length) {

    var my_string = '' + number;
    while (my_string.length < length) {
        my_string = '0' + my_string;
    }
    return my_string;
}
function GetColumnSum(pTableName, pColumnClassName) {
    //debugger;
    var pSum = 0;
    //var RowsCount = $("#" + pTableName + " tbody tr").length;
    //for (var i = 0; i < RowsCount; i++) {
    //    pSum += parseFloat($("#" + pTableName + " tbody tr td." + pColumnClassName).text());
    //}
    $("#" + pTableName + " tbody tr td." + pColumnClassName).each(function () {
        //debugger;
        //if ($(tr).find("input[name='Delete']").prop("checked"))
        this.innerText = this.innerText.replace(/,/g, "");
        pSum += (isNaN(this.innerText) || this.innerText.length == 0 ? 0 : parseFloat(this.innerText));
    });
    return pSum;
}
function GetColumnSumForNotChecked(pTableName, pColumnClassName, pExcludedClassNameIfChecked) {
    debugger;
    //var pSum = 0;
    $("#" + pTableName + " tbody tr td." + pColumnClassName).each(function () {
        var tr = this.parentElement;
        if (!$(tr).find("input[name='" + pExcludedClassNameIfChecked + "']").prop("checked")) {
            this.innerText = this.innerText.replace(/,/g, "");
            pSum += (isNaN(this.innerText) || this.innerText.length == 0 ? 0 : parseFloat(this.innerText));
        }
    });
    return pSum;
}
function CalculateTotalCurrenciesSummaryFromArray(pArray) {
    debugger;
    var temp = {};
    var row = null;
    tempArray = JSON.parse(JSON.stringify(pArray)); //not to change the original Array so i make a copy
    for (var i = 0; i < tempArray.length; i++) {
        row = tempArray[i];
        if (!temp[row.CurrencyCode]) {
            temp[row.CurrencyCode] = row;
        } else {
            temp[row.CurrencyCode].Amount += row.Amount;
            row.Amount = 0; //to avoid duplication
            //temp[row.CurrencyCode].PaidAmount += row.PaidAmount;
            //row.PaidAmount = 0; //to avoid duplication
            //temp[row.CurrencyCode].RemainingAmount += row.RemainingAmount;
            //row.RemainingAmount = 0; //to avoid duplication
        }
    }
    var ArrResultTotals = [];
    var pTotalSummary = "";
    for (var prop in temp) {
        ArrResultTotals.push(temp[prop]);
        pTotalSummary += (pTotalSummary == "" ? (temp[prop].Amount.toFixed(2) + ' ' + prop) : (", " + temp[prop].Amount.toFixed(2) + " " + prop));
    }
    return pTotalSummary;
}

function CalculateSumOfArrayWithGroupBy(pArray, pColumnNameToSum, pGroupBy) {
    debugger;
    var temp = {};
    var row = null;
    tempArray = JSON.parse(JSON.stringify(pArray)); //not to change the original Array so i make a copy
    for (var i = 0; i < tempArray.length; i++) {
        row = tempArray[i];
        if (!temp[row[pGroupBy]]) {
            temp[row[pGroupBy]] = row;
        } else {
            temp[row[pGroupBy]][pColumnNameToSum] += row[pColumnNameToSum];
            row[pColumnNameToSum] = 0; //to avoid duplication
        }
    }
    var ArrResultTotals = [];
    var pTotalSummary = "";
    for (var prop in temp) {
        ArrResultTotals.push(temp[prop]);
        pTotalSummary += (pTotalSummary == "" ? (temp[prop][pColumnNameToSum].toFixed(2) + ' ' + prop) : (", " + temp[prop][pColumnNameToSum].toFixed(2) + " " + prop));
    }
    return pTotalSummary;
}
function CalculateTotalInDefaultCurrencyFromArray(pArray, pColumnNameToSum, pExchangeRateColumnName) {
    debugger;
    var temp = {};
    var row = null;
    var _TotalInDefaultCurrency = 0;
    //tempArray = JSON.parse(JSON.stringify(pArray)); //not to change the original Array so i make a copy
    for (var i = 0; i < pArray.length; i++) {
        row = pArray[i];
        _TotalInDefaultCurrency += (row[pColumnNameToSum] * row[pExchangeRateColumnName]);
    }
    return (_TotalInDefaultCurrency.toFixed(2) + " " + pDefaults.CurrencyCode);
}
function CheckExistenceInTableTd(pTableName, pTdClassName, pSearchKey) {
    debugger;
    var _ReturnedMessage = "";
    for (var i = 0; i < $("#" + pTableName + " tbody tr").length; i++) {
        if ($("#" + pTableName + " tbody tr td." + pTdClassName)[i].innerText == pSearchKey)
            _ReturnedMessage = pSearchKey + " already exsists.";
    }
    return _ReturnedMessage;
}
function CheckDifferenceInTableTd(pTableName, pTdClassName, pSearchKey) {
    debugger;
    var _ReturnedMessage = "";
    for (var i = 0; i < $("#" + pTableName + " tbody tr").length; i++) {
        if ($("#" + pTableName + " tbody tr td." + pTdClassName)[i].innerText != pSearchKey)
            _ReturnedMessage = pSearchKey + " is not unique.";
    }
    return _ReturnedMessage;
}

function GetArraySum(pArray, pColumnName) {
    var _total = 0;
    for (var i = 0; i < pArray.length; i++) {
        _total += pArray[i][pColumnName];
    }
    return _total;
}

function cbIsReceivedFromShipperChanged(){
    debugger;
    if (pDefaults.UnEditableCompanyName == "ELI"){
        if ($("#cbIsReceivedFromShipper").prop("checked")){
            $("#ShippedOnBoardDateLabel").text("Received From Shipper Date");
        } else {
            $("#ShippedOnBoardDateLabel").text("Shipped On Board Date");
        }

    }
}
//function Print() {
//    $.ajax({
//        type: "GET",
//        //url: strServerURL + "/api/Regions/PrintReport",
//        url: strServerURL + "/MasterData/PrintReport",
//        //data: { pCutlureID: $("#hf_ChangeLanguage").val() },
//        data: { },
//        contentType: "application/json; charset=utf-8",
//        dataType: "html",
//        success: function (data) {
//            debugger;
//        },
//        error: function (jqXHR, exception) {
//            debugger;
//            swal("Sorry", "Please, try again. This is print region !", "error");
//            FadePageCover(false);
//        }
//    });
//}


//@@@@@@ MOSTAA @@@@@@@@@

//C# date to javascript Time
function GetTimeFromServer(pServerDate) {
    try {
        var dtFormatedMDY = new Date(1 * pServerDate.substring(6, pServerDate.length - 2));
        return dtFormatedMDY.toLocaleTimeString();
    }
    catch (Exc) {
        return ' ';
    }
}

function IsNull(_in, _out) {
    var res = _in;
    if (typeof _in === "undefined" || _in == null || _in == "" || _in == "0" || _in == 0 || _in == "01/01/1900" || (typeof (_in) === 'number' && isNaN(parseFloat(_in))))
        res = _out;
    return res;
}
function IsNullElse(_in, _out_of_null, _outelse) {
    var res = _in;
    if (typeof _in === "undefined" || _in == null || _in == "" || _in == "0" || _in == 0 || _in == "01/01/1900" || (typeof (_in) === 'number' && isNaN(parseFloat(_in))))
        res = _out_of_null;
    else
        res = _outelse


    return res;
}
function SendPDF_ReportByEmail(pSendTo, pReportHTML, pReportTitle, pIsUser) {
    debugger;
    var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    if (regex.test(pSendTo)) {
        CallPOSTFunctionWithParameters("/api/Defaults/SendPDFEmailWithBodyTemplate"
            , {
                pEmail_Subject: pReportTitle
                , pEmail_To: pSendTo
                , pEmail_Body: "Dear Sir, <br><br>Please check the attached file ..... <br><br>Thanks & best regards.<br>"
                , pHTML_ForPDF: pReportHTML
                , pHTML_ForExcel: null
                , pEmail_ReportName: pReportTitle
            }, function (pData) {
                var _MessageReturned = pData[0];
                if (_MessageReturned == "") {
                    swal("Great !", "Email Is Sending", "success");
                }
                else {
                    swal("Sorry !", _MessageReturned, "warning");
                }
            });
    }
    else {
        swal("Excuse me !", "Insert Correct [To] Email", "warning");
    }
}
function SendTestEmail() {
    FadePageCover(true);
    debugger;
    $.ajax({
        type: 'GET',
        url: 'api/Defaults/EmailSending',
        data: {},
        contentType: "application/json; charset=utf-8",
        success: function (pData) {
            FadePageCover(false)
        }
    });
}
function SendPDFEmail_General(pEmail_Subject, pEmail_To, pReportHTML, pReportTitle, pCallback) {
    debugger;
    var pParametersWithValues = {
        pEmail_Subject: pEmail_Subject
        , pEmail_To: pEmail_To
        , pEmail_Body: "Dear Sir, <br><br>Please check the attached file ..... <br><br>Thanks & best regards.<br>"
        , pHTML_ForPDF: pReportHTML
        , pHTML_ForExcel: null
        , pEmail_ReportName: pReportTitle
    };
    CallPOSTFunctionWithParameters("/api/Defaults/SendPDFEmail_General", pParametersWithValues
        , function (pData) {
            var _MessageReturned = pData[0];
            if (pData[0] == "") {
                swal("Success", "Sent successfully.");
            }
            else
                swal("Mail is not sent", _MessageReturned);
            FadePageCover(false);
        }
        , pCallback);
}
function SendUrlEmail_General(pEmail_Subject, pEmail_To, pEmailInfo, pUrl, pReportTitle, pCallback) {
    debugger;
    var pParametersWithValues = {
        pEmail_Subject: pEmail_Subject
        , pEmail_To: pEmail_To
        , pEmail_Body: "Dear Sir, <br><br>Please check the following link : <br> " + "<a href='" + pUrl + "'>" + pEmail_Subject + "</a>" + "<br>" + (IsNull(pEmailInfo, "")) + ""
        , pHTML_ForPDF: ""
        , pHTML_ForExcel: null
        , pEmail_ReportName: pReportTitle
    };
    CallPOSTFunctionWithParameters("/api/Defaults/SendUrlEmail_General", pParametersWithValues
        , function (pData) {
            var _MessageReturned = pData[0];
            if (pData[0] == "") {
                swal("Success", "Sent successfully.");
            }
            else
                swal("Sorry", _MessageReturned);
            FadePageCover(false);
        }
        , pCallback);
}
function SendEmailWithAttachment(pMapPath, pEmail_Subject, pEmail_To, pEmail_Body, pFileName, pCallback) {
    debugger;
    var pParametersWithValues = {
        pFileName: pFileName
        , pMapPath: pMapPath
        , pEmail_Subject: pEmail_Subject
        , pEmail_To: pEmail_To
        , pEmail_Body: pEmail_Body
    };
    CallPOSTFunctionWithParameters("/api/Defaults/SendEmailWithAttachment", pParametersWithValues
        , function (pData) {
            let pReturnedMessage = pData[0];
            if (pReturnedMessage == "")
                swal("Success", "Saved successfully");
            else
                swal("Sorry", pReturnedMessage);
        }
        , null);
}
//C# date to javascript Date
function GetDateFromServer(pServerDate) {
    try {
        var a = ConvertDateFormat(GetDateWithFormatMDY(pServerDate));
        return a;
    }
    catch (Exc) {

        return " ";
    }

}



var _OverlapArr = new Array();
var _IsOverlap = "false"




function isOverlap(tblID, FromClass, ToClass, callback) {
    debugger
    _OverlapArr = [];


    $(tblID).find("tbody tr").each(function (j, tr) {
        // var obj = new Object();
        //  obj.start = moment($(tr).find("td." + FromClass).find("input").val(), 'DD/MM/YYYY').unix();
        // obj.end = moment($(tr).find("td." + ToClass).find("input").val(), 'DD/MM/YYYY').unix();
        _OverlapArr.push(moment($(tr).find("td." + FromClass).find("input").val(), 'DD/MM/YYYY').unix());
        _OverlapArr.push(moment($(tr).find("td." + ToClass).find("input").val(), 'DD/MM/YYYY').unix());

        if ((moment($(tr).find("td." + FromClass).find("input").val(), 'DD/MM/YYYY').unix()) > (moment($(tr).find("td." + ToClass).find("input").val(), 'DD/MM/YYYY').unix())) {

            if (typeof callback != "undefined" && callback != null) {
                callback("true");
                return false;
            }
            else
                return "true"

        }



        if (j == $(tblID).find("tbody tr").length - 1) {
            if (multipleDateRangeOverlaps(_OverlapArr) == "false") {
                if (typeof callback != "undefined" && callback != null)
                    callback("false")
                else
                    return "false"
            }
            else {
                if (typeof callback != "undefined" && callback != null)
                    callback("true")
                else
                    return "true"

            }


        }
    });


}


function dateRangeOverlaps(a_start, a_end, b_start, b_end) {
    if (a_start <= b_start && b_start <= a_end) return true; // b starts in a
    if (a_start <= b_end && b_end <= a_end) return true; // b ends in a
    if (b_start < a_start && a_end < b_end) return true; // a in b
    return false;
}
function multipleDateRangeOverlaps(arguments) {
    var i, j;
    if (arguments.length % 2 !== 0)
        throw new TypeError('Arguments length must be a multiple of 2');
    for (i = 0; i < arguments.length - 2; i += 2) {
        for (j = i + 2; j < arguments.length; j += 2) {
            if (
                dateRangeOverlaps(
                    arguments[i], arguments[i + 1],
                    arguments[j], arguments[j + 1]
                )
            ) {
                console.log("Is Overlap"); return "true"
            }
        }
    }
    {
        console.log("Is NOT Overlap"); return "false"
    }
}


/******************************Mostafa fns*************************************/


function Fill_SelectInputAfterLoadData_DynamicTypesCustomizedForInvoices(data, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, IsDate) {
    var option = "";

    if (Title != null)
        option = '<option value="0">' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);
        if (item[ID_Name] == Selected_ID) {
            if (!IsDate) {
                option += '<option value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]) + '</option>';
            }
            else {
                option += '<option value="' + GetDateFromServer(item[ID_Name]) + '" selected "> ' + GetDateFromServer((item[Item_Name])) + '</option>';
            }
        }
        else {
            if (!IsDate) {
                option += '<option value="' + item[ID_Name] + '"> ' + (item[Item_Name]) + '</option>';
            }
            else {
                option += '<option value="' + GetDateFromServer(item[ID_Name]) + '"> ' + GetDateFromServer((item[Item_Name])) + '</option>';
            }
        }
    });
    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);
}

function Fill_SelectInputAfterLoadData_DynamicTypesCustomizedForPS_Invoice(data, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, IsDate) {
    var option = "";

    if (Title != null)
        option = '<option value="0">' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);
        if (item[ID_Name] == Selected_ID) {
            if (!IsDate) {
                option += '<option SupplierName="' + item.SupplierName + '"  SupplierID="' + item.SupplierID + '" value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]) + '</option>';
            }
            else {
                option += '<option SupplierName="' + item.SupplierName + '"  SupplierID="' + item.SupplierID + '" value="' + GetDateFromServer(item[ID_Name]) + '" selected "> ' + GetDateFromServer((item[Item_Name])) + '</option>';
            }
        }
        else {
            if (!IsDate) {
                option += '<option  SupplierName="' + item.SupplierName + '" SupplierID="' + item.SupplierID + '" value="' + item[ID_Name] + '"> ' + (item[Item_Name]) + '</option>';
            }
            else {
                option += '<option SupplierName="' + item.SupplierName + '"  SupplierID="' + item.SupplierID + '" value="' + GetDateFromServer(item[ID_Name]) + '"> ' + GetDateFromServer((item[Item_Name])) + '</option>';
            }
        }
    });
    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);
}



function FillHTMLtblInputs(Selector) {
    debugger;
    $.each($(Selector), function (j, tr) {
        try {
            var sl = $(tr).find('input[type=select]');
            console.log("sl" + sl.length)
            $.each($(tr).find('select'), function (i1, i_sl) {
                $(i_sl).val($(i_sl).attr('tag'));
                $(i_sl).trigger("change");

            });
        } catch (ex1) { }
        //---------------------------------------------------------------------------------------------------------
        try {
            var nu = $(tr).find('input[type=number]');
            console.log("nu" + nu.length)
            $.each($(tr).find('input[type=number]'), function (i2, i_nu) {
                $(i_nu).val($(i_nu).attr('tag'));
                $(i_nu).trigger("blur");
            });
        } catch (ex2) { }
        //---------------------------------------------------------------------------------------------------------
        try {
            var txt = $(tr).find('input[type=text]');
            console.log("txt" + txt.length)
            $.each($(tr).find('input[type=text]'), function (i3, i_txt) {
                $(i_txt).val($(i_txt).attr('tag'));
                $(i_txt).trigger("blur");

                if ($(i_txt).hasClass("datepicker-input")) {
                    try {
                        $(i_txt).datepicker().on('changeDate'
                            , function () {
                                $(this).datepicker('hide');
                                FireDateChangingEvent();

                            });
                        $(i_txt).datepicker().on('keydown', function (ev) { if (ev.keyCode == 9) $(this).datepicker('hide'); });

                    }
                    catch (ex) {


                    }
                }
            });
        } catch (ex3) { }
    });
}
//FunUrl,
//ID_Name ,
//Item_Name,
//Title, 
//SelectInput_ID,
//Selected_ID
function Fill_SelectInput(FunUrl, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID) {

    $.ajax({
        type: "POST",
        url: strServerURL + FunUrl,
        data: {},
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (d) {
            // console.log(r.d[0]);

            var option = "";
            if (Title != null)
                option = '<option value="0">' + Title + '</option>';
            $.each(JSON.parse(d[0]), function (i, item) {
                console.log(item[ID_Name]);


                if (item[ID_Name] == Selected_ID) {

                    option += '<option value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]).trim() + '</option>';

                }
                else {
                    option += '<option value="' + item[ID_Name] + '"> ' + (item[Item_Name]).trim() + '</option>';
                }
            });


            $(SelectInput_ID).html("");
            $(SelectInput_ID).append(option);

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again.", "");
        }
    });


}
function Fill_SelectInputAfterLoadData_WithMultiAttrWithoutOptionText(data, ID_Name, Title, SelectInput_ID, Selected_ID, AttrItemNames) {
    var selectAttrs = "";
    var option = "";
    if (Title != null)
        option += '<option value="' + 0 + '" selected "> ' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);
        selectAttrs = "";
        $(AttrItemNames.split(",")).each(function (attrindex, attr) {
            // element == this
            selectAttrs += ' ' + attr + ' = "' + item[attr] + '" ';
            if (attrindex == AttrItemNames.split(",").length - 1) {
                if (item[ID_Name] == Selected_ID) {
                    option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '" selected> ' + '' + '</option>';
                }
                else {
                    option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '"> ' + '' + '</option>';
                }
            }
        });
    });
    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);
}
function Fill_SelectInput_WithDependedID(FunUrl, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, DependedID) {
    FadePageCover(true);
    $.ajax({
        type: "GET",
        url: strServerURL + FunUrl,
        data: { pID: DependedID },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (d) {
            //  console.log(r.d[0]);

            var option = "";
            if (Title != null)
                option = '<option value="">' + Title + '</option>';
            $.each(JSON.parse(d[0]), function (i, item) {
                console.log(item[ID_Name]);


                if (item[ID_Name] == Selected_ID) {

                    option += '<option value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]).trim() + '</option>';

                }
                else {
                    option += '<option value="' + item[ID_Name] + '"> ' + (item[Item_Name]).trim() + '</option>';
                }
            });


            $(SelectInput_ID).html("");
            $(SelectInput_ID).append(option);
            FadePageCover(false);

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again.", "");
        }
    });
}

function GetAllSelectedIDsAsStringWithNameAttrRPT(pCheckboxNameAttr) {
    debugger;
    var listOfIDs = "";
    $('input[name="' + pCheckboxNameAttr + '"]:checked').each(function () {
        listOfIDs += ((listOfIDs == "") ? "" : "*") + ($(this).attr('value'));
    });
    return listOfIDs;
}
function InsertUpdateFunctionAndReturnID(pValidateFormID, pFunctionName, pParametersWithValues, pSaveandAddNew, pModalID, phID, callback) {
    debugger;
    if (ValidateForm(pValidateFormID, pModalID)) {
        FadePageCover(true);
        $.ajax({
            type: "GET",
            url: strServerURL + pFunctionName,
            data: pParametersWithValues,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () { },
            success: function (data) {
                debugger;
                if (data != undefined && data.length > 1) {
                    if (data != 0) {
                        $(phID).val(data[0]);
                        if (callback != null && callback != undefined) {
                            if (data[1] != null && data[1] != undefined) //data[1] is the ID: for opening quotation or operation after saving a new one / or strMessageReturned
                                callback(data);
                        }

                        if (!pSaveandAddNew && pModalID != null) {
                            jQuery.noConflict();
                            (function ($) {
                                //  $('#' + pModalID).modal('hide');
                            })(jQuery);
                        }
                    }
                    else //data[0] = false
                        //swal(strSorry, strUniqueFailInsertUpdateMessage, "warning");
                        swal(strSorry, data[1]);
                }
                else {
                    if (data != 0) {
                        $(phID).val(data);
                        if (callback != null && callback != undefined) {
                            callback();
                        }
                        if (!pSaveandAddNew && pModalID != null) {
                            jQuery.noConflict();
                            (function ($) {
                                // $('#' + pModalID).modal('hide');
                            }
                            )(jQuery);
                        }
                    }
                    else //unique key violated
                        swal(strSorry, strUniqueFailInsertUpdateMessage);
                }
                FadePageCover(false);
            },
            error: function (jqXHR, exception) {
                FadePageCover(false);
                alert('Error when trying to call function [' + pFunctionName + ']. InsertUpdateFunction fn in mainapp.master');
            }
        });
    }
    else
        FadePageCover(false);
}
function Fill_SelectInput_WithWhereCondition(FunUrl, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, WhereClause) {
    FadePageCover(true);
    $.ajax({
        type: "GET",
        url: strServerURL + FunUrl,
        data: { pWhereClause: WhereClause },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (d) {
            //  console.log(r.d[0]);

            var option = "";
            if (Title != null)
                option = '<option value="0">' + Title + '</option>';
            $.each(JSON.parse(d[0]), function (i, item) {
                console.log(item[ID_Name]);


                if (item[ID_Name] == Selected_ID) {

                    option += '<option value="' + item[ID_Name] + '" selected ">' + (item[Item_Name]).trim() + '</option>';

                }
                else {
                    option += '<option value="' + item[ID_Name] + '">' + (item[Item_Name]).trim() + '</option>';
                }
            });


            $(SelectInput_ID).html("");
            $(SelectInput_ID).append(option);
            FadePageCover(false);

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again.", "");
        }
    });
}


//-------------------------
function Fill_SelectInputAfterLoadData(data, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID) {

    debugger;

    var option = "";
    if (Title != null)
        option = '<option value="0">' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);

        if (Selected_ID == "ActionPercent") {
            option += '<option ActionOrder="' + item.ActionPercent + '" value="' + item[ID_Name] + '"> ' + (item[Item_Name]).trim() + '</option>';
        }
        else {
            if (item[ID_Name] == Selected_ID) {
                option += '<option value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]).trim() + '</option>';
            }
            else {
                option += '<option value="' + item[ID_Name] + '"> ' + (item[Item_Name]).trim() + '</option>';
            }
        }

    });


    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);





}

function Fill_SelectInput_WithDependedID(FunUrl, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, DependedID) {
    FadePageCover(true);
    $.ajax({
        type: "GET",
        url: strServerURL + FunUrl,
        data: { pID: DependedID },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (d) {
            //  console.log(r.d[0]);

            var option = "";
            if (Title != null)
                option = '<option value="0">' + Title + '</option>';
            $.each(JSON.parse(d[0]), function (i, item) {
                console.log(item[ID_Name]);


                if (item[ID_Name] == Selected_ID) {

                    option += '<option value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]).trim() + '</option>';

                }
                else {
                    option += '<option value="' + item[ID_Name] + '"> ' + (item[Item_Name]).trim() + '</option>';
                }
            });


            $(SelectInput_ID).html("");
            $(SelectInput_ID).append(option);
            FadePageCover(false);

        },
        error: function (jqXHR, exception) {
            swal("Sorry", "Please, try again.", "");
        }
    });


}
// Disblay int or date  bg
function Fill_SelectInputAfterLoadData_DynamicTypes(data, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, IsDate) {
    var option = "";

    if (Title != null)
        option = '<option value="0">' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);
        if (item[ID_Name] == Selected_ID) {
            if (!IsDate) {
                option += '<option value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]) + '</option>';
            }
            else {
                option += '<option value="' + GetDateFromServer(item[ID_Name]) + '" selected "> ' + GetDateFromServer((item[Item_Name])) + '</option>';
            }
        }
        else {
            if (!IsDate) {
                option += '<option value="' + item[ID_Name] + '"> ' + (item[Item_Name]) + '</option>';
            }
            else {
                option += '<option value="' + GetDateFromServer(item[ID_Name]) + '"> ' + GetDateFromServer((item[Item_Name])) + '</option>';
            }
        }
    });
    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);
}


function Fill_SelectInputAfterLoadData_DynamicTypesWithHideValue(data, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, disabledID, IsDate) {
    var option = "";

    if (Title != null)
        option = '<option value="0">' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);
        if (item[ID_Name] == Selected_ID) {
            if (!IsDate) {
                option += '<option value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]) + '</option>';
            }
            else {
                option += '<option value="' + GetDateFromServer(item[ID_Name]) + '" selected "> ' + GetDateFromServer((item[Item_Name])) + '</option>';
            }
        }

        else if (item[ID_Name] == disabledID) {
            console.log('Not Add val ' + disabledID + ' ')
        }

        else {
            if (!IsDate) {
                option += '<option value="' + item[ID_Name] + '"> ' + (item[Item_Name]) + '</option>';
            }
            else {
                option += '<option value="' + GetDateFromServer(item[ID_Name]) + '"> ' + GetDateFromServer((item[Item_Name])) + '</option>';
            }
        }
    });
    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);
}
//xxxxxxxxxxxxxxxxxxxxxxxxxxxx Insert List Of Object to Webapi Controller xxxxxxxxxxxx
// Notes
//-----------
//1-  return array of object example JS : 
//-------------------------------------------
/*function SetArrayOfItems() {
    // var cobjItem = null;
    var arrayOfItems = new Array();
    $("#tblAllocationItem tbody tr").each(function (i, tr) {
        var pRowID = $(tr).attr("id");
        debugger;
        if ($("#txtItemAmountDue" + pRowID).val().trim() != "") {
            var objItem = new Object();
            objItem.VoucherID = $('#hID').val();
            objItem.InvoiceID = pRowID;
            objItem.DueAmount = $("#txtItemAmountDue" + pRowID).val();
            objItem.CurrencyID = $(tr).find("td.CurrencyID").attr("val");
            objItem.VoucherTypeID = glbFormCalled;
            arrayOfItems.push(objItem);
        }
    });
    return arrayOfItems;
}*/

//*********************************Upload Files***************************************//
function GeneralUpload_FillControls() {
    debugger;
    if (glbGeneralUploadFolderName == "")
        swal("Sorry", "Please, save header first.");
    else {
        $("#" + glbGeneralUploadTableName + " tbody").html("");
        if (glbGeneralUploadModalName != "")
            jQuery("#" + glbGeneralUploadModalName).modal("show");
        //CallGETFunctionWithParameters(pFunctionName, pParametersWithValues, callback, callback1)
        CallGETFunctionWithParameters("/api/PurchaseItem/LoadFiles"
            , { pFolderName: glbGeneralUploadFolderName, pStrFolderPath: glbGeneralUploadRelativePath }
            , function (data) {
                GeneralUpload_BindTableRows(JSON.parse(data[0]));
            }
            , null);
    }
}
function GeneralUpload_BindTableRows(pFileNames) {
    debugger;
    ClearAllTableRows(glbGeneralUploadTableName);
    if (pFileNames != null) {
        //var editControlsText = " class='btn btn-xs btn-rounded btn-info float-right' > <i class='fa fa-pencil' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + TranslateString("Edit") + "</span>";
        var downloadControlsText = " class='btn btn-xs btn-rounded btn-primary float-right' > <i class='fa fa-cloud-download' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + "Download" + "</span>";
        var openControlsText = " class='btn btn-xs btn-rounded btn-info float-right' > <i class='fa fa-folder-open' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + "Open" + "</span>";
        var emailControlsText = " class='btn btn-xs btn-rounded btn-primary float-right' > <i class='fa fa-envelope-o' style='padding-left: 5px;'></i> <span style='padding-right: 5px;'>" + "Mail" + "</span>";
        for (i = 0; i < pFileNames.length; i++) {
            AppendRowtoTable(glbGeneralUploadTableName,
                //("<tr ID='" + item.ID + "' ondblclick='DocumentTypes_EditByDblClick(" + item.ID + ");'>"
                ("<tr ID='" + i + "'>"
                    + "<td class='classTdUploadedFilesID'> <input " + (1 == 1 ? "name='Delete'" : "disabled='disabled'") + " type='checkbox' value='" + pFileNames[i] + "'></td>"
                    + "<td class='DocsInSerial'>" + (parseInt(i) + 1) + "</td>"
                    + "<td class='FileName'>" + pFileNames[i] + "</td>"
                    //+ "<td class=''><a onclick='GeneralUpload_OpenUploadedFile(" + '"' + pFileNames[i] + '","' + $("#txtUploadFolderName").val() + '"' + ");' " + openControlsText + "</a><a onclick='SaveFile(" + '"' + pFileNames[i] + '","' + $("#txtUploadFolderName").val() + '"' + ");' " + downloadControlsText + "</a>&nbsp;&nbsp;&nbsp;</td>"
                    + "<td class=''><a onclick='GeneralUpload_OpenUploadedFile(" + '"' + pFileNames[i] + '","' + '"' + ");' " + openControlsText + "</a>&nbsp;&nbsp;&nbsp;</td>"
                    //+ ($("#hIsOperationDisabled").val() == false
                    //? ("<td class=''><a href='#DocumentTypeModal' data-toggle='modal' onclick='DocsOut_Print(" + item.ID + ");' " + printControlsText + "</a><a onclick='DocsOut_SendEmail(" + item.ID + ", function(){window.onbeforeunload = confirmExit;});' " + emailControlsText + "</a>&nbsp;&nbsp;&nbsp;</td>")
                    //: "<td></td>")
                    + "</tr>"));
        }
    }
    BindAllCheckboxonTable(glbGeneralUploadTableName, "classTdUploadedFilesID", glbTblInputSelectAllInputName);
    CheckAllCheckbox(glbTblTHSelectAllTagName);
}
// Asynchronous file upload process
function GeneralUpload_UploadFile() {
    debugger;
    //maxTotalSize = 10485760;//10MB total of uploaded files together
    maxTotalSize = 20971520;//20MB total of uploaded files together
    var formData = new FormData();
    var files = $("#" + glbGeneralUploadBtnUploadName).get(0).files;
    var totalFilesSize = 0;
    var isValidType = true;
    if (files.length > 0) {
        //check files total size is less than 20MB & filetype
        for (i = 0; i < files.length; i++) {
            totalFilesSize += files[i].size;

            var name = files[i].name;
            var extension = name.split('.')[name.split('.').length - 1];

            if (extension != "jpg" && extension != "png" && extension != "jpeg" && extension != "gif" && extension != "pdf")
                isValidType = false;

        }
        if (!isValidType)
            swal("Sorry", "Only images and pdf are permitted");
        else if (totalFilesSize > maxTotalSize)
            swal(strSorry, "Total file(s) size can't exceed 20MBs at one upload.");
        else {
            // Add the uploaded files content to the form data collection
            if (files.length > 0) {
                FadePageCover(true);
                for (i = 0; i < files.length; i++)
                    formData.append("FileNames", files[i]);
            }
            formData.append("pFolderName", glbGeneralUploadFolderName)
            formData.append("pStrFolderPath", glbGeneralUploadRelativePath)
            // Make Ajax request with the contentType = false, and processDate = false
            var ajaxRequest = $.ajax({
                type: "POST",
                xhr: function () {  // Custom XMLHttpRequest
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) { // Check if upload property exists
                        myXhr.upload.addEventListener('progress', progressHandlingFunction, false); // For handling the progress of the upload
                    }
                    return myXhr;
                },
                url: "/api/PurchaseItem/UploadFile",
                contentType: false,
                processData: false,
                data: formData,
                success: function (data) { //data[0]: The filenames returned
                    GeneralUpload_BindTableRows(JSON.parse(data[0]));
                    FadePageCover(false);
                    swal("Success", "File(s) uploaded successfully.");
                },
                error: function (jqXHR, exception) {
                    FadePageCover(false);
                    swal(strSorry, "An error occured, please try again.");
                }
            });
            ajaxRequest.done(function (xhr, textStatus) {
                // Do other operation
                debugger;
            });
        }//of else (correct file sizes)
    }//of if (files.length == 0)
}
function GeneralUpload_DeleteList() {
    debugger;
    //Confirmation message to delete
    var pFileNames = GetAllSelectedIDsAsString(glbGeneralUploadTableName, 'Delete');
    if (pFileNames != "")
        swal({
            title: "Are you sure?",
            text: "The selected files will be removed from server!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, remove!",
            closeOnConfirm: true
        },
            //callback function in case of confirm delete
            function () {
                FadePageCover(true);
                //CallGETFunctionWithParameters(pFunctionName, pParametersWithValues, callback, callback1)
                CallGETFunctionWithParameters("/api/PurchaseItem/DeleteUploadedFile"
                    //CallGETFunctionWithParameters("/api/DocsIn/Delete"
                    , { "pFolderName": glbGeneralUploadFolderName, "pFileNames": pFileNames, "pStrFolderPath": glbGeneralUploadRelativePath }
                    , function (data) { //data[0]: pFileNames
                        GeneralUpload_BindTableRows(JSON.parse(data[0]));
                        FadePageCover(false);
                    }
                    , null);
            });
}
function GeneralUpload_OpenUploadedFile(pFileName) {
    debugger;
    var ValidFolderName = glbGeneralUploadFolderName.replace(/[/\\?&%*:|"<>.]/g, '_')
    window.open(glbGeneralUploadPath + ValidFolderName + "\\" + pFileName, '_blank');
    //var myWindow = window.open("", "_blank");
    //myWindow.document.write("<p>I replaced the current window.</p>");
}
function progressHandlingFunction(e) {
    if (e.lengthComputable) {
        $('progress').attr({ value: e.loaded, max: e.total });
    }
}
//*********************************EOF Upload Files***************************************//

//2- webapi invoke parameter example 
/*[HttpGet, HttpPost]
[AllowAnonymous]
        public object[] InsertA_VoucherInvoicesPayment([FromBody]string pItems)
{
    var _result = false;
    // Deserialize List -------------------------------------------------------------------------------
    var Listobj = new JavaScriptSerializer().Deserialize<List<CVarA_VoucherInvoicesPayment>>(pItems);
    CA_VoucherInvoicesPayment cA_VoucherInvoicesPayment = new CA_VoucherInvoicesPayment();
    var checkException = cA_VoucherInvoicesPayment.SaveMethod(Listobj);
    //------------------------------
    if (checkException == null)
        _result = true;

    return new object[] {
        _result, pItems
    };
}
            }*/
//xxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxx xxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxx

function InsertUpdateListOfObject(pFunctionName, ArrayOfObject /*See Notes*/, pSaveandAddNew, pModalID, callback) {
    debugger;
    //console.log(ArrayOfObject);
    //if (1 == 1) {
    FadePageCover(true);
    $.ajax({
        type: "POST",
        url: strServerURL + pFunctionName,
        data: { "": JSON.stringify(ArrayOfObject) },
        //contentType:"application/json; charset=utf-8", 
        beforeSend: function () { },
        success: function (data) {
            debugger;
            if (data != undefined && data.length > 1) {
                if (data[0] == true) {
                    if (callback != null && callback != undefined) {
                        if (data[1] != null && data[1] != undefined) //data[1] is the ID: for opening quotation or operation after saving a new one / or strMessageReturned
                            callback(data);
                    }

                    if (!pSaveandAddNew && pModalID != null) {
                        jQuery.noConflict();
                        (function ($) {
                            $('#' + pModalID).modal('hide');
                        })(jQuery);
                    }
                }
                else //data[0] = false
                    //swal(strSorry, strUniqueFailInsertUpdateMessage, "warning");
                    swal(strSorry, data[1]);
            }
            else {
                if (data == true) {
                    if (callback != null && callback != undefined) {
                        callback();
                    }
                    if (!pSaveandAddNew && pModalID != null) {
                        jQuery.noConflict();
                        (function ($) {
                            $('#' + pModalID).modal('hide');
                        }
                        )(jQuery);
                    }
                }
                else //unique key violated
                    swal(strSorry, strUniqueFailInsertUpdateMessage);
            }
            FadePageCover(false);
        },
        error: function (jqXHR, exception) {
            FadePageCover(false);
            alert('Error when trying to call function [' + pFunctionName + ']. InsertUpdateFunction fn in mainapp.master');
        }
    });
    //}
    //else
    //    FadePageCover(false);
}
function Fill_SelectInputAfterLoadData_WithAttr(data, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, AttrItemName) {
    var option = "";
    if (Title != null)
        option += '<option ' + AttrItemName + ' = "' + 0 + '" value="' + 0 + '" selected "> ' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);


        if (item[ID_Name] == Selected_ID) {

            option += '<option ' + AttrItemName + ' = "' + item[AttrItemName] + '" value="' + item[ID_Name] + '" selected "> ' + (item[Item_Name]).trim() + '</option>';

        }
        else {
            option += '<option ' + AttrItemName + ' = "' + item[AttrItemName] + '" value="' + item[ID_Name] + '"  "> ' + (item[Item_Name]).trim() + '</option>';
        }
    });


    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);

}
function Fill_SelectInputAfterLoadData_WithMultiAttr(data, ID_Name, Item_Name, Title, SelectInput_ID, Selected_ID, AttrItemNames, pCallback) {
    var selectAttrs = "";
    var option = "";
    if (Title != null)
        option += '<option value=0>' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);
        selectAttrs = "";
        $(AttrItemNames.split(",")).each(function (attrindex, attr) {
            // element == this
            if (attr != "")
                selectAttrs += ' ' + attr + ' = "' + item[attr] + '" ';
            if (attrindex == AttrItemNames.split(",").length - 1) {
                if (item[ID_Name] == Selected_ID) {
                    option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '" selected>' + (item[Item_Name]).trim() + '</option>';
                }
                else {
                    option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '">' + (item[Item_Name]).trim() + '</option>';
                }
            }
        });
    });
    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);
    if (pCallback != null && pCallback != undefined)
        pCallback();
}
function Fill_SelectInputAfterLoadData_WithMultiAttrAndMultiFields(data, ID_Name, Items_Name, SplitByChar, Title, SelectInput_ID, Selected_ID, AttrItemNames, pCallback) {
    debugger;
    var selectAttrs = "";
    var selectItems = "";
    var option = "";
    if (Title != null)
        option += '<option value=0>' + Title + '</option>';
    $.each(JSON.parse(data), function (i, item) {
        // console.log(item[ID_Name]);
        selectAttrs = "";
        $(AttrItemNames.split(",")).each(function (attrindex, attr) {
            // element == this
            if (item[attr] != undefined)
                selectAttrs += ' ' + attr + ' = "' + item[attr] + '" ';
            if (attrindex == AttrItemNames.split(",").length - 1) {
                selectItems = "";
                $(Items_Name.split(",")).each(function (attrindex1, attr1) {
                    // element == this                    
                    if (attrindex1 == Items_Name.split(",").length - 1) {
                        selectItems += (" " + item[attr1] + " ")
                        if (item[ID_Name] == Selected_ID) {
                            option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '" selected> ' + selectItems + '</option>';
                        }
                        else {
                            option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '"> ' + selectItems + '</option>';
                        }
                    }
                    else {
                        selectItems += (" " + item[attr1] + " " + SplitByChar);
                    }
                });
            }
        });
    });


    //var Fields = Items_Name.split(",")
    //if (item[ID_Name] == Selected_ID) {

    //    option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '" selected> ' + (item[Item_Name]).trim() + '</option>';
    //}
    //else {
    //    option += '<option' + selectAttrs + ' value="' + item[ID_Name] + '"> ' + (item[Item_Name]).trim() + '</option>';
    //}
    $(SelectInput_ID).html("");
    $(SelectInput_ID).append(option);
    if (pCallback != null && pCallback != undefined)
        pCallback();
}

function FillDivWithCheckboxes_DynamicWithMultiFields(pDivName, pData, pCheckboxNameAttr, Fields, callback) {
    //Clear the div
    $("#" + pDivName).html("");
    var option = "";
    // Bind Data
    //option = '<section class="panel panel-default">';
    //option += '<header class="panel-heading">';
    //option += '</header>';
    $.each(JSON.parse(pData), function (i, item) {
        option += '<div class="swapCheckBoxesClass"> ';
        option += ' <input type="checkbox" name="' + pCheckboxNameAttr + '" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);"  value="' + item.ID + '" /> ';

        var ArrFields = Fields.split(",");
        var ShownText = "";
        $(ArrFields).each(function (j, field) {

            ShownText = (ShownText == "" ? item[field] : (ShownText + " - " + item[field]));

            if (j == ArrFields.length - 1) {

                option += ' <label> ' + ShownText;
                option += ' &nbsp;</label> </div>';
            }

        });

    });
    //option += '<footer class="panel-footer">';
    //option += "</footer>";
    //option += "</section>";
    $("#" + pDivName).append(option);
    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapCheckBoxesClass:not(.reversed)").reverseChildren();
}
//xxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxx xxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxx
/******************************EOF Mostafa fns*************************************/

function FillDivWithCheckboxes_DynamicFiledWithIDName(pDivName, pData, pCheckboxNameAttr, FieldName, IDName, callback) {
    //Clear the div
    $("#" + pDivName).html("");
    var option = "";
    // Bind Data
    //option = '<section class="panel panel-default">';
    //option += '<header class="panel-heading">';
    //option += '</header>';
    $.each(JSON.parse(pData), function (i, item) {
        option += '<div class="swapCheckBoxesClass"> ';
        option += ' <input type="checkbox" name="' + pCheckboxNameAttr + '" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);"  value="' + item[IDName] + '" /> ';
        option += ' <label> ' + item[FieldName];
        option += ' &nbsp;</label> </div>';
    });
    //option += '<footer class="panel-footer">';
    //option += "</footer>";
    //option += "</section>";
    $("#" + pDivName).append(option);
    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapCheckBoxesClass:not(.reversed)").reverseChildren();
}

function FillDivWithCheckboxes_DynamicFiled(pDivName, pData, pCheckboxNameAttr, FieldName, callback) {
    //Clear the div
    $("#" + pDivName).html("");
    var option = "";
    // Bind Data
    //option = '<section class="panel panel-default">';
    //option += '<header class="panel-heading">';
    //option += '</header>';
    $.each(JSON.parse(pData), function (i, item) {
        option += '<div class="swapCheckBoxesClass"> ';
        option += ' <input type="checkbox" name="' + pCheckboxNameAttr + '" onfocus="DisableEnterKey(id);" onkeypress="DisableEnterKey(id);"  value="' + item.ID + '" /> ';
        option += ' <label> ' + item[FieldName];
        option += ' &nbsp;</label> </div>';
    });
    //option += '<footer class="panel-footer">';
    //option += "</footer>";
    //option += "</section>";
    $("#" + pDivName).append(option);
    if ($("[id$='hf_ChangeLanguage']").val() == "ar") $(".swapCheckBoxesClass:not(.reversed)").reverseChildren();
}




/*****************************Hijri*********************/
function gmod(n, m) {
    return ((n % m) + m) % m;
}

function kuwaiticalendar(adjust) {
    var today = new Date();
    if (adjust) {
        adjustmili = 1000 * 60 * 60 * 24 * adjust;
        todaymili = today.getTime() + adjustmili;
        today = new Date(todaymili);
    }
    day = today.getDate();
    month = today.getMonth();
    year = today.getFullYear();
    m = month + 1;
    y = year;
    if (m < 3) {
        y -= 1;
        m += 12;
    }

    a = Math.floor(y / 100.);
    b = 2 - a + Math.floor(a / 4.);
    if (y < 1583) b = 0;
    if (y == 1582) {
        if (m > 10) b = -10;
        if (m == 10) {
            b = 0;
            if (day > 4) b = -10;
        }
    }

    jd = Math.floor(365.25 * (y + 4716)) + Math.floor(30.6001 * (m + 1)) + day + b - 1524;

    b = 0;
    if (jd > 2299160) {
        a = Math.floor((jd - 1867216.25) / 36524.25);
        b = 1 + a - Math.floor(a / 4.);
    }
    bb = jd + b + 1524;
    cc = Math.floor((bb - 122.1) / 365.25);
    dd = Math.floor(365.25 * cc);
    ee = Math.floor((bb - dd) / 30.6001);
    day = (bb - dd) - Math.floor(30.6001 * ee);
    month = ee - 1;
    if (ee > 13) {
        cc += 1;
        month = ee - 13;
    }
    year = cc - 4716;


    wd = gmod(jd + 1, 7) + 1;

    iyear = 10631. / 30.;
    epochastro = 1948084;
    epochcivil = 1948085;

    shift1 = 8.01 / 60.;

    z = jd - epochastro;
    cyc = Math.floor(z / 10631.);
    z = z - 10631 * cyc;
    j = Math.floor((z - shift1) / iyear);
    iy = 30 * cyc + j;
    z = z - Math.floor(j * iyear + shift1);
    im = Math.floor((z + 28.5001) / 29.5);
    if (im == 13) im = 12;
    id = z - Math.floor(29.5001 * im - 29);

    var myRes = new Array(8);

    myRes[0] = day; //calculated day (CE)
    myRes[1] = month - 1; //calculated month (CE)
    myRes[2] = year; //calculated year (CE)
    myRes[3] = jd - 1; //julian day number
    myRes[4] = wd - 1; //weekday number
    myRes[5] = id; //islamic date
    myRes[6] = im - 1; //islamic month
    myRes[7] = iy; //islamic year

    return myRes;
}
function writeIslamicDate(adjustment) {
    var wdNames = new Array("Ahad", "Ithnin", "Thulatha", "Arbaa", "Khams", "Jumuah", "Sabt");
    var iMonthNames = new Array("Muharram", "Safar", "Rabi'ul Awwal", "Rabi'ul Akhir",
        "Jumadal Ula", "Jumadal Akhira", "Rajab", "Sha'ban",
        "Ramadan", "Shawwal", "Dhul Qa'ada", "Dhul Hijja");
    var iDate = kuwaiticalendar(adjustment);
    var outputIslamicDate = wdNames[iDate[4]] + ", "
        + iDate[5] + " " + iMonthNames[iDate[6]] + " " + iDate[7] + " AH";
    return outputIslamicDate;
}


function setAllArrayObObjects(arr, field, value, callback) {
    var i, n = arr.length;
    for (i = 0; i < n; ++i) {
        arr[i][field] = value;


        if (i == n - 1) {
            if (typeof callback !== 'undefined' && callback != null) {
                callback();
            }

        }
    }
}


/******************************Time function*****************************/
//h: m: s
function msToTime(s) {
    function pad(n, z) {
        z = z || 2;
        return ('00' + n).slice(-z);
    }
    var ms = s % 1000;
    s = (s - ms) / 1000;
    var secs = s % 60;
    s = (s - secs) / 60;
    var mins = s % 60;
    var hrs = (s - mins) / 60;

    return pad(hrs) + ':' + pad(mins); //+ ':' + secs + '.' + ms;
}
//hh: mm: ss.sss
function msToTimeFullFormat(s) {

    // Pad to 2 or 3 digits, default is 2
    function pad(n, z) {
        z = z || 2;
        return ('00' + n).slice(-z);
    }

    var ms = s % 1000;
    s = (s - ms) / 1000;
    var secs = s % 60;
    s = (s - secs) / 60;
    var mins = s % 60;
    var hrs = (s - mins) / 60;

    return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);
}
function TimeToMSecond(T) {
    debugger;
    var timeEnd = T;
    var time1 = ((Number(timeEnd.split(':')[0]) * 60 + Number(timeEnd.split(':')[1])) * 60) * 1000;
    return time1
}

var ones = {
    0: "صفر",
    1: "واحد",
    2: "اثنان",
    3: "ثلاثة",
    4: "أربعة",
    5: "خمسة",
    6: "ستة",
    7: "سبعة",
    8: "ثمانية",
    9: "تسعة",
    10: "عشرة",
    11: "أحد عشر",
    12: "اثنى عشر"
}

/*
القيم الخاصة بقيم العشرات
* */
var tens = {
    1: "عشر",
    2: "عشرون",
    3: "ثلاثون",
    4: "أربعون",
    5: "خمسون",
    6: "ستون",
    7: "سبعون",
    8: "ثمانون",
    9: "تسعون"
}


/*
القيم الخاصة بقيم المئات
* */
var hundreds = {
    0: "صفر",
    1: "مائة",
    2: "مئتان",
    3: "ثلاثمائة",
    4: "أربعمائة",
    5: "خمسمائة",
    6: "ستمائة",
    7: "سبعمائة",
    8: "ثمانمائة",
    9: "تسعمائة"
}

/*
القيم الخاصة بقيم الآلاف
* */
var thousands = {
    1: "ألف",
    2: "ألفان",
    39: "آلاف",
    1199: "ألفًا"
}

/*
القيم الخاصة بقيم الملايين
* */
var millions = {
    1: "مليون",
    2: "مليونان",
    39: "ملايين",
    1199: "مليونًا"
}


/*
القيم الخاصة بقيم المليارات
* */
var billions = {
    1: "مليار",
    2: "ملياران",
    39: "مليارات",
    1199: "مليارًا"
}

/*
القيم الخاصة بقيم التريليونات
* */
var trillions = {
    1: "تريليون",
    2: "تريليونان",
    39: "تريليونات",
    1199: "تريليونًا"
}

function tafqeetArabic(Amount) {


    if ((String(Amount).split('.').length) == 2)
        var ArabicAmount = ' ( ' + tafqeet(String(Amount).split('.')[0]) + 'دينار و ' + tafqeet(String(Amount).split('.')[1]) + ' درهم  )';

    else
        var ArabicAmount = ' ( ' + tafqeet(String(Amount).split('.')[0]) + 'دينار و ' + tafqeet(String(Amount).split('.')[1]) + ' درهم  )';

    return ArabicAmount;
}

/**
 * 
 * @param {*} number 
 * هذه هي الدالة الرئيسية
 * والتي يتم من خلالها تفقيط الأرقام
 */
function tafqeet(number) {
    debugger;
    /**
     * متغير لتخزين النص المفقط بداخله
     */

    var value = "";
    number = parseInt(number);
    //التحقق من أن المتغير يحتوي أرقامًا فقط، وأقل من تسعة وتسعين تريليون
    if (number.toString().match(/^[0-9]+$/) != null && number.toString().length <= 14) {
        switch (number.toString().length) {
            /**
             * إذا كان العدد من 0 إلى 99
             */
            case 1:
            case 2:
                value = oneTen(number);
                break;

            /**
             * إذا كان العدد من 100 إلى 999
             */
            case 3:
                value = hundred(number);
                break;

            /**
             * إذا كان العدد من 1000 إلى 999999
             * أي يشمل الآلاف وعشرات الألوف ومئات الألوف
             */
            case 4:
            case 5:
            case 6:
                value = thousand(number);
                break;

            /**
             * إذا كان العدد من 1000000 إلى 999999999
             * أي يشمل الملايين وعشرات الملايين ومئات الملايين
             */
            case 7:
            case 8:
            case 9:
                value = million(number);
                break;

            /**
             * إذا كان العدد من 1000000000 إلى 999999999999
             * أي يشمل المليارات وعشرات المليارات ومئات المليارات
             */
            case 10:
            case 11:
            case 12:
                value = billion(number);
                break;

            /**
             * إذا كان العدد من 100000000000 إلى 9999999999999
             * أي يشمل التريليونات وعشرات التريليونات
             */
            case 13:
            case 14:
            case 15:
                value = trillion(number);
                break;

        }

    }

    /**
     * هذا السطر يقوم فقط بإزالة بعض الزوائد من النص الأخير
     * تظهر هذه الزوائد نتيجة بعض الفروق في عملية التفقيط
     * ولإزالتها يتم استخدام هذا السطر
     */
    return value.replace(/وصفر/g, "")
        .replace(/وundefined/g, "")
        .replace(/ +(?= )/g, '')
        .replace(/صفر و/g, "")
        .replace(/صفر/g, "")
        .replace(/مئتان أ/, "مائتا أ")
        .replace(/مئتان م/, "مائتا م");
}



/**
 * 
 * @param {*} number
 * الدالة الخاصة بالآحاد والعشرات 
 */
function oneTen(number) {

    /** 
     * القيم الافتراضية
    */
    var value = "صفر";

    //من 0 إلى 12
    if (number <= 12) {
        switch (parseInt(number)) {
            case 0:
                value = ones["0"];
                break;
            case 1:
                value = ones["1"];
                break;
            case 2:
                value = ones["2"];
                break;
            case 3:
                value = ones["3"];
                break;
            case 4:
                value = ones["4"];
                break;
            case 5:
                value = ones["5"];
                break;
            case 6:
                value = ones["6"];
                break;
            case 7:
                value = ones["7"];
                break;
            case 8:
                value = ones["8"];
                break;
            case 9:
                value = ones["9"];
                break;
            case 10:
                value = ones["10"];
                break;

            case 11:
                value = ones["11"];
                break;

            case 12:
                value = ones["12"];
                break;


        }
    }

    /**
     * إذا كان العدد أكبر من12 وأقل من 99
     * يقوم بجلب القيمة الأولى من العشرات
     * والثانية من الآحاد
     */
    else {
        var first = getNth(number, 0, 0);

        var second = getNth(number, 1, 1);

        if (tens[first] == "عشر") {
            value = ones[second] + " " + tens[first];
        }
        else {
            value = ones[second] + " و" + tens[first];
        }

    }

    return value;
}


/**
 * 
 * @param {*} number
 * الدالة الخاصة بالمئات 
 */
function hundred(number) {
    var value = "";

    /**
     * إذا كان الرقم لا يحتوي على ثلاث منازل
     * سيتم إضافة أصفار إلى يسار الرقم
     */
    while (number.toString().length != 3) {
        number = "0" + number;
    }

    var first = getNth(number, 0, 0);

    /**
     * تحديد قيمة الرقم الأول
     */
    switch (parseInt(first)) {
        case 0:
            value = hundreds["0"];
            break;
        case 1:
            value = hundreds["1"];
            break;
        case 2:
            value = hundreds["2"];
            break;
        case 3:
            value = hundreds["3"];
            break;
        case 4:
            value = hundreds["4"];
            break;
        case 5:
            value = hundreds["5"];
            break;
        case 6:
            value = hundreds["6"];
            break;
        case 7:
            value = hundreds["7"];
            break;
        case 8:
            value = hundreds["8"];
            break;
        case 9:
            value = hundreds["9"];
            break;
    }

    /**
     * إضافة منزلة العشرات إلى الرقم المفقط
     * باستخدام دالة العشرات السابقة
     */
    value = value + " و" + oneTen(parseInt(getNth(number, 1, 2)));
    return value;
}

/**
 * 
 * @param {*} number 
 * الدالة الخاصة بالآلاف
 */
function thousand(number) {
    return thousandsTrillions(thousands["1"], thousands["2"], thousands["39"], thousands["1199"], 0, parseInt(number), (getNthReverse(number, 4)));
}

/**
 * 
 * @param {*} number
 * الدالة الخاصة بالملايين 
 */
function million(number) {
    return thousandsTrillions(millions["1"], millions["2"], millions["39"], millions["1199"], 3, parseInt(number), (getNthReverse(number, 7)));
}


/**
 * 
 * @param {*} number
 * الدالة الخاصة بالمليارات 
 */
function billion(number) {
    return thousandsTrillions(billions["1"], billions["2"], billions["39"], billions["1199"], 6, parseInt(number), (getNthReverse(number, 10)));
}


/**
 * 
 * @param {*} number
 * الدالة الخاصة بالترليونات 
 */
function trillion(number) {
    return thousandsTrillions(trillions["1"], trillions["2"], trillions["39"], trillions["1199"], 9, parseInt(number), (getNthReverse(number, 13)));
}


/**
 * هذه الدالة هي الأساسية بالنسبة للأرقام
 * من الآلاف وحتى التريليونات
 * تقوم هذه الدالة بنفس العملية للمنازل السابقة مع اختلاف
 * زيادة عدد المنازل في كل مرة
 * @param {*} one 
 * @param {*} two 
 * @param {*} three 
 * @param {*} eleven 
 * @param {*} diff 
 * @param {*} number 
 * @param {*} other 
 */
function thousandsTrillions(one, two, three, eleven, diff, number, other) {
    /**
     * جلب المنازل المتبقية
     */
    other = parseInt(other);
    other = tafqeet(other);

    /**
     * إذا كان المتبقي يساوي صفر
     */
    if (other == "") {
        other = "صفر"
    }

    var value = "";

    number = parseInt(number);

    /**
     * التحقق من طول الرقم
     * لاكتشاف إلى أي منزلة ينتمي
     */
    switch (number.toString().length) {
        /**
         * ألوف، أو ملايين، أو مليارات، أو تريليونات
         */
        case 4 + diff:
            var ones = parseInt(getNth(number, 0, 0));
            switch (ones) {
                case 1:
                    value = one + " و" + (other);
                    break;
                case 2:
                    value = two + " و" + (other);
                    break;
                default:
                    value = oneTen(ones) + " " + three + " و" + (other);
                    break;
            }
            break;

        /**
         * عشرات الألوف، أو عشرات الملايين، أو عشرات المليارات، أو عشرات التريليونات
         */
        case 5 + diff:
            var tens = parseInt(getNth(number, 0, 1));
            switch (tens) {
                case 10:
                    value = oneTen(tens) + " " + three + " و" + (other);
                    break;
                default:
                    value = oneTen(tens) + " " + eleven + " و" + (other);
                    break;
            }
            break;

        /**
         *مئات الألوف، أو مئات الملايين، أو مئات المليارات
         */
        case 6 + diff:
            var hundreds = parseInt(getNth(number, 0, 2));

            var two = parseInt(getNth(number, 1, 2));
            var th = "";
            switch (two) {
                case 0:
                    th = one;
                    break;

                default:
                    th = eleven;
                    break;
            }
            switch (tens) {
                case 100 <= tens <= 199:
                    value = hundred(hundreds) + " " + th + " و" + (other);
                    break;
                case 200 <= tens <= 299:
                    value = hundred(hundreds) + " " + th + " و" + (other);
                    break;
                default:
                    value = hundred(hundreds) + " " + th + " و" + (other);
                    break;
            }
            break;
    }

    return value;

}


/**
 * دالة لجلب أجزاء من الرقم المراد تفقيطه
 */
function getNth(number, first, end) {
    var finalNumber = "";
    for (var i = first; i <= end; i++) {
        finalNumber = finalNumber + String(number).charAt(i);
    }
    return finalNumber;
}

/**
 * دالة تجلب أجزاء من الرقم بالعكس
 * @param {*} number 
 * @param {*} limit 
 */
function getNthReverse(number, limit) {
    var finalNumber = "";
    var x = 1;
    while (x != limit) {
        finalNumber = String(number).charAt(number.toString().length - x) + finalNumber;
        x++;
    }

    return finalNumber;
}

//Saving Array Bytes to pdf
function base64ToArrayBuffer(base64) {
    var binaryString = window.atob(base64);
    var binaryLen = binaryString.length;
    var bytes = new Uint8Array(binaryLen);
    for (var i = 0; i < binaryLen; i++) {
        var ascii = binaryString.charCodeAt(i);
        bytes[i] = ascii;
    }
    return bytes;
}
function saveByteArray(pFileName, byte) {
    var blob = new Blob([byte], { type: "application/pdf" });
    var link = document.createElement('a');
    link.href = window.URL.createObjectURL(blob);
    //var fileName = reportName;
    link.download = pFileName;
    link.click();
};

function SaveTextToFile(type, filename, data) {
    var file = new Blob([data], { type: type });
    if (window.navigator.msSaveOrOpenBlob) // IE10+
        window.navigator.msSaveOrOpenBlob(file, filename);
    else { // Others
        var a = document.createElement("a"),
            url = URL.createObjectURL(file);
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        setTimeout(function () {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }, 0);
    }
}
function OpenXMLInNewTab(data) {
    let blob = new Blob([data], { type: 'text/xml' });
    let url = URL.createObjectURL(blob);
    window.open(url);
    URL.revokeObjectURL(url);
}
function prettifyXml(sourceXml) {
    var xmlDoc = new DOMParser().parseFromString(sourceXml, 'application/xml');
    var xsltDoc = new DOMParser().parseFromString([
        // describes how we want to modify the XML - indent everything
        '<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform">',
        '  <xsl:strip-space elements="*"/>',
        '  <xsl:template match="para[content-style][not(text())]">', // change to just text() to strip space in text nodes
        '    <xsl:value-of select="normalize-space(.)"/>',
        '  </xsl:template>',
        '  <xsl:template match="node()|@*">',
        '    <xsl:copy><xsl:apply-templates select="node()|@*"/></xsl:copy>',
        '  </xsl:template>',
        '  <xsl:output indent="yes"/>',
        '</xsl:stylesheet>',
    ].join('\n'), 'application/xml');

    var xsltProcessor = new XSLTProcessor();
    xsltProcessor.importStylesheet(xsltDoc);
    var resultDoc = xsltProcessor.transformToDocument(xmlDoc);
    var resultXml = new XMLSerializer().serializeToString(resultDoc);
    return resultXml;
};

function topFunction() {
    document.body.scrollTop = 0; // For Safari
    document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
}