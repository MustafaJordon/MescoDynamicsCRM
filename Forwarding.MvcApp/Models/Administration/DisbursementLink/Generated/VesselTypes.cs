using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Text;
/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.Administration.DisbursementLink.Generated
{
    [Serializable]
    public class CPKDAS_VesselTypes
    {
        #region "variables"
        private Int32 mVesselType_ID;
        #endregion

        #region "Methods"
        public Int32 VesselType_ID
        {
            get { return mVesselType_ID; }
            set { mVesselType_ID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarDAS_VesselTypes : CPKDAS_VesselTypes
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal String mVesselType_Name;
        internal Int32 mTypeOrder;
        #endregion

        #region "Methods"
        public String VesselType_Name
        {
            get { return mVesselType_Name; }
            set { mIsChanges = true; mVesselType_Name = value; }
        }
        public Int32 TypeOrder
        {
            get { return mTypeOrder; }
            set { mIsChanges = true; mTypeOrder = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CDAS_VesselTypes
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="DisbursementConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarDAS_VesselTypes> lstCVarDAS_VesselTypes = new List<CVarDAS_VesselTypes>();
        public List<CPKDAS_VesselTypes> lstDeletedCPKDAS_VesselTypes = new List<CPKDAS_VesselTypes>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetListPagingCbo(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy)
        {
            return DataFillCbo(PageSize, PageNumber, WhereClause, OrderBy);
        }
        public Exception GetItem(Int32 VesselType_ID)
        {
            return DataFill(Convert.ToString(VesselType_ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarDAS_VesselTypes.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].DAS_VesselTypes_GetList";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].DAS_VesselTypes_GetItem";
                    Com.Parameters.Add(new SqlParameter("@VesselType_ID", SqlDbType.Int));
                    Com.Parameters[0].Value = Convert.ToInt32(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarDAS_VesselTypes ObjCVarDAS_VesselTypes = new CVarDAS_VesselTypes();
                        ObjCVarDAS_VesselTypes.VesselType_ID = Convert.ToInt32(dr["VesselType_ID"].ToString());
                        ObjCVarDAS_VesselTypes.mVesselType_Name = Convert.ToString(dr["VesselType_Name"].ToString());
                        ObjCVarDAS_VesselTypes.mTypeOrder = Convert.ToInt32(dr["TypeOrder"].ToString());
                        lstCVarDAS_VesselTypes.Add(ObjCVarDAS_VesselTypes);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarDAS_VesselTypes.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].DAS_GetListPaging_VesselTypes";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarDAS_VesselTypes ObjCVarDAS_VesselTypes = new CVarDAS_VesselTypes();
                        ObjCVarDAS_VesselTypes.VesselType_ID = Convert.ToInt32(dr["VesselType_ID"].ToString());
                        ObjCVarDAS_VesselTypes.mVesselType_Name = Convert.ToString(dr["VesselType_Name"].ToString());
                        ObjCVarDAS_VesselTypes.mTypeOrder = Convert.ToInt32(dr["TypeOrder"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarDAS_VesselTypes.Add(ObjCVarDAS_VesselTypes);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        private Exception DataFillCbo(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarDAS_VesselTypes.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].DAS_GetListPaging_VesselTypesCbo";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarDAS_VesselTypes ObjCVarDAS_VesselTypes = new CVarDAS_VesselTypes();
                        ObjCVarDAS_VesselTypes.VesselType_ID = Convert.ToInt32(dr["VesselType_ID"].ToString());
                        ObjCVarDAS_VesselTypes.mVesselType_Name = Convert.ToString(dr["VesselType_Name"].ToString());
                        lstCVarDAS_VesselTypes.Add(ObjCVarDAS_VesselTypes);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            tr = Con.BeginTransaction(IsolationLevel.Serializable);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DAS_DeleteList_VesselTypes";
                else
                    Com.CommandText = "[dbo].DAS_UpdateList_VesselTypes";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKDAS_VesselTypes> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DAS_VesselTypes_DeleteItem";
                Com.Parameters.Add(new SqlParameter("@VesselType_ID", SqlDbType.Int));
                foreach (CPKDAS_VesselTypes ObjCPKDAS_VesselTypes in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt32(ObjCPKDAS_VesselTypes.VesselType_ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarDAS_VesselTypes> SaveList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.Parameters.Add(new SqlParameter("@VesselType_Name", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@TypeOrder", SqlDbType.Int));
                SqlParameter paraVesselType_ID = Com.Parameters.Add(new SqlParameter("@VesselType_ID", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, "VesselType_ID", DataRowVersion.Default, null));
                foreach (CVarDAS_VesselTypes ObjCVarDAS_VesselTypes in SaveList)
                {
                    if (ObjCVarDAS_VesselTypes.mIsChanges == true)
                    {
                        if (ObjCVarDAS_VesselTypes.VesselType_ID == 0)
                        {
                            Com.CommandText = "[dbo].DAS_VesselTypes_InsertItem";
                            paraVesselType_ID.Direction = ParameterDirection.Output;
                        }
                        else if (ObjCVarDAS_VesselTypes.VesselType_ID != 0)
                        {
                            Com.CommandText = "[dbo].DAS_VesselTypes_UpdateItem";
                            paraVesselType_ID.Direction = ParameterDirection.Input;
                        }
                        BeginTrans(Com, Con);
                        if (ObjCVarDAS_VesselTypes.VesselType_ID != 0)
                        {
                            Com.Parameters["@VesselType_ID"].Value = ObjCVarDAS_VesselTypes.VesselType_ID;
                        }
                        Com.Parameters["@VesselType_Name"].Value = ObjCVarDAS_VesselTypes.VesselType_Name;
                        Com.Parameters["@TypeOrder"].Value = ObjCVarDAS_VesselTypes.TypeOrder;
                        EndTrans(Com, Con);
                        if (ObjCVarDAS_VesselTypes.VesselType_ID == 0)
                        {
                            ObjCVarDAS_VesselTypes.VesselType_ID = Convert.ToInt32(Com.Parameters["@VesselType_ID"].Value);
                        }
                        ObjCVarDAS_VesselTypes.mIsChanges = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                if (tr != null)
                    tr.Rollback();
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }
}

