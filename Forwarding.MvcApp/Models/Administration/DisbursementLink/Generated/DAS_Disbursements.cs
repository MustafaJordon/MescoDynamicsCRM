using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;
//using Forwarding.MvcApp.Utilities;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.Administration.DisbursementLink.Generated
{
    [Serializable]
    public class CPKDAS_Disbursements
    {
        #region "variables"
        private Int32 mDisbursement_ID;
        #endregion

        #region "Methods"
        public Int32 Disbursement_ID
        {
            get { return mDisbursement_ID; }
            set { mDisbursement_ID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarDAS_Disbursements : CPKDAS_Disbursements
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal String mDisbursement_Name;
        internal Int32 mDisbursement_Index;
        internal Int32 mDisbursementGroup_ID;
        internal Int32 mAccount_ID;
        internal Int32 mSubAccount_ID;
        internal Boolean mIsService;
        internal Boolean mIsBasic;
        internal Decimal mSupplier_ID;
        internal Int32 mSalesAccount_ID;
        internal Int32 mSalesSubAccount_ID;
        internal Boolean mIsMandatory;
        internal Boolean mIsAdministration;
        internal Boolean mIsPort;
        internal Boolean mIsTransit;
        internal Boolean mIsProtecting;
        internal Boolean mIsPettyCash;
        internal Boolean mIsStatic;
        internal Boolean mIsGroupingItem;
        internal Boolean mIsAutomatic;
        internal Int32 mBillToID;
        internal Int32 mCollectFromID;
        internal Int32 mInvoiceOrDebitID;
        internal Int32 mPDAGroupingItemID;
        internal Int32 mFDAGroupingItemID;
        internal String mSP_Name;
        internal Decimal mDefaultValue;
        internal Int32 mDisbursement_IndexTransit;
        internal Int32 mDisbursement_IndexProtecting;
        internal String mHowToCalc;
        internal String mItemRemarks;
        internal String mTR_SP_Name;
        internal Boolean mIsLinkedWithClient;
        internal Boolean mIsCombinedInCanalDues;
        internal Int32 mDisbursement_IndexFDA;
        internal Int32 mDisbursement_IndexTransitFDA;
        internal Int32 mDisbursement_IndexProtectingFDA;
        internal Int32 mAddedBy;
        internal DateTime mAddedAt;
        internal Int32 mUpdatedBy;
        internal DateTime mUpdatedAt;
        internal Boolean mIsDebitItem;
        internal Boolean mIsHusbandry;
        internal Boolean mIsCostItem;
        internal Boolean mIsRevenueItem;
        internal Boolean mIsRefundableItem;
        #endregion

        #region "Methods"
        public String Disbursement_Name
        {
            get { return mDisbursement_Name; }
            set { mIsChanges = true; mDisbursement_Name = value; }
        }
        public Int32 Disbursement_Index
        {
            get { return mDisbursement_Index; }
            set { mIsChanges = true; mDisbursement_Index = value; }
        }
        public Int32 DisbursementGroup_ID
        {
            get { return mDisbursementGroup_ID; }
            set { mIsChanges = true; mDisbursementGroup_ID = value; }
        }
        public Int32 Account_ID
        {
            get { return mAccount_ID; }
            set { mIsChanges = true; mAccount_ID = value; }
        }
        public Int32 SubAccount_ID
        {
            get { return mSubAccount_ID; }
            set { mIsChanges = true; mSubAccount_ID = value; }
        }
        public Boolean IsService
        {
            get { return mIsService; }
            set { mIsChanges = true; mIsService = value; }
        }
        public Boolean IsBasic
        {
            get { return mIsBasic; }
            set { mIsChanges = true; mIsBasic = value; }
        }
        public Decimal Supplier_ID
        {
            get { return mSupplier_ID; }
            set { mIsChanges = true; mSupplier_ID = value; }
        }
        public Int32 SalesAccount_ID
        {
            get { return mSalesAccount_ID; }
            set { mIsChanges = true; mSalesAccount_ID = value; }
        }
        public Int32 SalesSubAccount_ID
        {
            get { return mSalesSubAccount_ID; }
            set { mIsChanges = true; mSalesSubAccount_ID = value; }
        }
        public Boolean IsMandatory
        {
            get { return mIsMandatory; }
            set { mIsChanges = true; mIsMandatory = value; }
        }
        public Boolean IsAdministration
        {
            get { return mIsAdministration; }
            set { mIsChanges = true; mIsAdministration = value; }
        }
        public Boolean IsPort
        {
            get { return mIsPort; }
            set { mIsChanges = true; mIsPort = value; }
        }
        public Boolean IsTransit
        {
            get { return mIsTransit; }
            set { mIsChanges = true; mIsTransit = value; }
        }
        public Boolean IsProtecting
        {
            get { return mIsProtecting; }
            set { mIsChanges = true; mIsProtecting = value; }
        }
        public Boolean IsPettyCash
        {
            get { return mIsPettyCash; }
            set { mIsChanges = true; mIsPettyCash = value; }
        }
        public Boolean IsStatic
        {
            get { return mIsStatic; }
            set { mIsChanges = true; mIsStatic = value; }
        }
        public Boolean IsGroupingItem
        {
            get { return mIsGroupingItem; }
            set { mIsChanges = true; mIsGroupingItem = value; }
        }
        public Boolean IsAutomatic
        {
            get { return mIsAutomatic; }
            set { mIsChanges = true; mIsAutomatic = value; }
        }
        public Int32 BillToID
        {
            get { return mBillToID; }
            set { mIsChanges = true; mBillToID = value; }
        }
        public Int32 CollectFromID
        {
            get { return mCollectFromID; }
            set { mIsChanges = true; mCollectFromID = value; }
        }
        public Int32 InvoiceOrDebitID
        {
            get { return mInvoiceOrDebitID; }
            set { mIsChanges = true; mInvoiceOrDebitID = value; }
        }
        public Int32 PDAGroupingItemID
        {
            get { return mPDAGroupingItemID; }
            set { mIsChanges = true; mPDAGroupingItemID = value; }
        }
        public Int32 FDAGroupingItemID
        {
            get { return mFDAGroupingItemID; }
            set { mIsChanges = true; mFDAGroupingItemID = value; }
        }
        public String SP_Name
        {
            get { return mSP_Name; }
            set { mIsChanges = true; mSP_Name = value; }
        }
        public Decimal DefaultValue
        {
            get { return mDefaultValue; }
            set { mIsChanges = true; mDefaultValue = value; }
        }
        public Int32 Disbursement_IndexTransit
        {
            get { return mDisbursement_IndexTransit; }
            set { mIsChanges = true; mDisbursement_IndexTransit = value; }
        }
        public Int32 Disbursement_IndexProtecting
        {
            get { return mDisbursement_IndexProtecting; }
            set { mIsChanges = true; mDisbursement_IndexProtecting = value; }
        }
        public String HowToCalc
        {
            get { return mHowToCalc; }
            set { mIsChanges = true; mHowToCalc = value; }
        }
        public String ItemRemarks
        {
            get { return mItemRemarks; }
            set { mIsChanges = true; mItemRemarks = value; }
        }
        public String TR_SP_Name
        {
            get { return mTR_SP_Name; }
            set { mIsChanges = true; mTR_SP_Name = value; }
        }
        public Boolean IsLinkedWithClient
        {
            get { return mIsLinkedWithClient; }
            set { mIsChanges = true; mIsLinkedWithClient = value; }
        }
        public Boolean IsCombinedInCanalDues
        {
            get { return mIsCombinedInCanalDues; }
            set { mIsChanges = true; mIsCombinedInCanalDues = value; }
        }
        public Int32 Disbursement_IndexFDA
        {
            get { return mDisbursement_IndexFDA; }
            set { mIsChanges = true; mDisbursement_IndexFDA = value; }
        }
        public Int32 Disbursement_IndexTransitFDA
        {
            get { return mDisbursement_IndexTransitFDA; }
            set { mIsChanges = true; mDisbursement_IndexTransitFDA = value; }
        }
        public Int32 Disbursement_IndexProtectingFDA
        {
            get { return mDisbursement_IndexProtectingFDA; }
            set { mIsChanges = true; mDisbursement_IndexProtectingFDA = value; }
        }
        public Int32 AddedBy
        {
            get { return mAddedBy; }
            set { mIsChanges = true; mAddedBy = value; }
        }
        public DateTime AddedAt
        {
            get { return mAddedAt; }
            set { mIsChanges = true; mAddedAt = value; }
        }
        public Int32 UpdatedBy
        {
            get { return mUpdatedBy; }
            set { mIsChanges = true; mUpdatedBy = value; }
        }
        public DateTime UpdatedAt
        {
            get { return mUpdatedAt; }
            set { mIsChanges = true; mUpdatedAt = value; }
        }
        public Boolean IsDebitItem
        {
            get { return mIsDebitItem; }
            set { mIsChanges = true; mIsDebitItem = value; }
        }
        public Boolean IsHusbandry
        {
            get { return mIsHusbandry; }
            set { mIsChanges = true; mIsHusbandry = value; }
        }
        public Boolean IsCostItem
        {
            get { return mIsCostItem; }
            set { mIsChanges = true; mIsCostItem = value; }
        }
        public Boolean IsRevenueItem
        {
            get { return mIsRevenueItem; }
            set { mIsChanges = true; mIsRevenueItem = value; }
        }
        public Boolean IsRefundableItem
        {
            get { return mIsRefundableItem; }
            set { mIsChanges = true; mIsRefundableItem = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }


    public partial class CVarDAS_DisbursementsForCalc : CPKDAS_Disbursements
    {
        #region "variables"

        internal Boolean mIsChanges = false;

        internal String mSP_Name;

        internal String mTR_SP_Name;

        #endregion

        #region "Methods"



        public String SP_Name
        {
            get { return mSP_Name; }
            set { mIsChanges = true; mSP_Name = value; }
        }

        public String TR_SP_Name
        {
            get { return mTR_SP_Name; }
            set { mIsChanges = true; mTR_SP_Name = value; }
        }

        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }


    public partial class CDAS_Disbursements
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="DisbursementConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarDAS_Disbursements> lstCVarDAS_Disbursements = new List<CVarDAS_Disbursements>();
        public List<CVarDAS_DisbursementsForCalc> lstCVarDAS_DisbursementsForCalc = new List<CVarDAS_DisbursementsForCalc>();
        public List<CPKDAS_Disbursements> lstDeletedCPKDAS_Disbursements = new List<CPKDAS_Disbursements>();
        #endregion

        #region "Select Methods"

        public Exception GetListForCalc(string WhereClause)
        {
            return DataFillForCalc(WhereClause, true);
        }

        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetListPagingCbo(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy)
        {
            return DataFillCbo(PageSize, PageNumber, WhereClause, OrderBy);
        }
        public Exception GetItem(Int32 Disbursement_ID)
        {
            return DataFill(Convert.ToString(Disbursement_ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarDAS_Disbursements.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].DAS_Disbursements_GetList";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].DAS_Disbursements_GetItem";
                    Com.Parameters.Add(new SqlParameter("@Disbursement_ID", SqlDbType.Int));
                    Com.Parameters[0].Value = Convert.ToInt32(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarDAS_Disbursements ObjCVarDAS_Disbursements = new CVarDAS_Disbursements();
                        ObjCVarDAS_Disbursements.Disbursement_ID = Convert.ToInt32(dr["Disbursement_ID"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_Name = Convert.ToString(dr["Disbursement_Name"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_Index = Convert.ToInt32(dr["Disbursement_Index"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursementGroup_ID = Convert.ToInt32(dr["DisbursementGroup_ID"].ToString());
                        ObjCVarDAS_Disbursements.mAccount_ID = Convert.ToInt32(dr["Account_ID"].ToString());
                        ObjCVarDAS_Disbursements.mSubAccount_ID = Convert.ToInt32(dr["SubAccount_ID"].ToString());
                        ObjCVarDAS_Disbursements.mIsService = Convert.ToBoolean(dr["IsService"].ToString());
                        ObjCVarDAS_Disbursements.mIsBasic = Convert.ToBoolean(dr["IsBasic"].ToString());
                        ObjCVarDAS_Disbursements.mSupplier_ID = Convert.ToDecimal(dr["Supplier_ID"].ToString());
                        ObjCVarDAS_Disbursements.mSalesAccount_ID = Convert.ToInt32(dr["SalesAccount_ID"].ToString());
                        ObjCVarDAS_Disbursements.mSalesSubAccount_ID = Convert.ToInt32(dr["SalesSubAccount_ID"].ToString());
                        ObjCVarDAS_Disbursements.mIsMandatory = Convert.ToBoolean(dr["IsMandatory"].ToString());
                        ObjCVarDAS_Disbursements.mIsAdministration = Convert.ToBoolean(dr["IsAdministration"].ToString());
                        ObjCVarDAS_Disbursements.mIsPort = Convert.ToBoolean(dr["IsPort"].ToString());
                        ObjCVarDAS_Disbursements.mIsTransit = Convert.ToBoolean(dr["IsTransit"].ToString());
                        ObjCVarDAS_Disbursements.mIsProtecting = Convert.ToBoolean(dr["IsProtecting"].ToString());
                        ObjCVarDAS_Disbursements.mIsPettyCash = Convert.ToBoolean(dr["IsPettyCash"].ToString());
                        ObjCVarDAS_Disbursements.mIsStatic = Convert.ToBoolean(dr["IsStatic"].ToString());
                        ObjCVarDAS_Disbursements.mIsGroupingItem = Convert.ToBoolean(dr["IsGroupingItem"].ToString());
                        ObjCVarDAS_Disbursements.mIsAutomatic = Convert.ToBoolean(dr["IsAutomatic"].ToString());
                        ObjCVarDAS_Disbursements.mBillToID = Convert.ToInt32(dr["BillToID"].ToString());
                        ObjCVarDAS_Disbursements.mCollectFromID = Convert.ToInt32(dr["CollectFromID"].ToString());
                        ObjCVarDAS_Disbursements.mInvoiceOrDebitID = Convert.ToInt32(dr["InvoiceOrDebitID"].ToString());
                        ObjCVarDAS_Disbursements.mPDAGroupingItemID = Convert.ToInt32(dr["PDAGroupingItemID"].ToString());
                        ObjCVarDAS_Disbursements.mFDAGroupingItemID = Convert.ToInt32(dr["FDAGroupingItemID"].ToString());
                        ObjCVarDAS_Disbursements.mSP_Name = Convert.ToString(dr["SP_Name"].ToString());
                        ObjCVarDAS_Disbursements.mDefaultValue = Convert.ToDecimal(dr["DefaultValue"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_IndexTransit = Convert.ToInt32(dr["Disbursement_IndexTransit"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_IndexProtecting = Convert.ToInt32(dr["Disbursement_IndexProtecting"].ToString());
                        ObjCVarDAS_Disbursements.mHowToCalc = Convert.ToString(dr["HowToCalc"].ToString());
                        ObjCVarDAS_Disbursements.mItemRemarks = Convert.ToString(dr["ItemRemarks"].ToString());
                        ObjCVarDAS_Disbursements.mTR_SP_Name = Convert.ToString(dr["TR_SP_Name"].ToString());
                        ObjCVarDAS_Disbursements.mIsLinkedWithClient = Convert.ToBoolean(dr["IsLinkedWithClient"].ToString());
                        ObjCVarDAS_Disbursements.mIsCombinedInCanalDues = Convert.ToBoolean(dr["IsCombinedInCanalDues"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_IndexFDA = Convert.ToInt32(dr["Disbursement_IndexFDA"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_IndexTransitFDA = Convert.ToInt32(dr["Disbursement_IndexTransitFDA"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_IndexProtectingFDA = Convert.ToInt32(dr["Disbursement_IndexProtectingFDA"].ToString());
                        ObjCVarDAS_Disbursements.mAddedBy = Convert.ToInt32(dr["AddedBy"].ToString());
                        ObjCVarDAS_Disbursements.mAddedAt = Convert.ToDateTime(dr["AddedAt"].ToString());
                        ObjCVarDAS_Disbursements.mUpdatedBy = Convert.ToInt32(dr["UpdatedBy"].ToString());
                        ObjCVarDAS_Disbursements.mUpdatedAt = Convert.ToDateTime(dr["UpdatedAt"].ToString());
                        ObjCVarDAS_Disbursements.mIsDebitItem = Convert.ToBoolean(dr["IsDebitItem"].ToString());
                        ObjCVarDAS_Disbursements.mIsHusbandry = Convert.ToBoolean(dr["IsHusbandry"].ToString());
                        ObjCVarDAS_Disbursements.mIsCostItem = Convert.ToBoolean(dr["IsCostItem"].ToString());
                        ObjCVarDAS_Disbursements.mIsRevenueItem = Convert.ToBoolean(dr["IsRevenueItem"].ToString());
                        ObjCVarDAS_Disbursements.mIsRefundableItem = Convert.ToBoolean(dr["IsRefundableItem"].ToString());
                        lstCVarDAS_Disbursements.Add(ObjCVarDAS_Disbursements);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }


        private Exception DataFillForCalc(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarDAS_DisbursementsForCalc.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].DAS_Disbursements_GetList";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].DAS_Disbursements_GetItem";
                    Com.Parameters.Add(new SqlParameter("@Disbursement_ID", SqlDbType.Int));
                    Com.Parameters[0].Value = Convert.ToInt32(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarDAS_DisbursementsForCalc ObjCVarDAS_DisbursementsForCalc = new CVarDAS_DisbursementsForCalc();
                        ObjCVarDAS_DisbursementsForCalc.Disbursement_ID = Convert.ToInt32(dr["Disbursement_ID"].ToString());
                        ObjCVarDAS_DisbursementsForCalc.mSP_Name = Convert.ToString(dr["SP_Name"].ToString());
                        ObjCVarDAS_DisbursementsForCalc.mTR_SP_Name = Convert.ToString(dr["TR_SP_Name"].ToString());
                        lstCVarDAS_DisbursementsForCalc.Add(ObjCVarDAS_DisbursementsForCalc);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarDAS_Disbursements.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingDAS_Disbursements";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarDAS_Disbursements ObjCVarDAS_Disbursements = new CVarDAS_Disbursements();
                        ObjCVarDAS_Disbursements.Disbursement_ID = Convert.ToInt32(dr["Disbursement_ID"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_Name = Convert.ToString(dr["Disbursement_Name"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_Index = Convert.ToInt32(dr["Disbursement_Index"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursementGroup_ID = Convert.ToInt32(dr["DisbursementGroup_ID"].ToString());
                        ObjCVarDAS_Disbursements.mAccount_ID = Convert.ToInt32(dr["Account_ID"].ToString());
                        ObjCVarDAS_Disbursements.mSubAccount_ID = Convert.ToInt32(dr["SubAccount_ID"].ToString());
                        ObjCVarDAS_Disbursements.mIsService = Convert.ToBoolean(dr["IsService"].ToString());
                        ObjCVarDAS_Disbursements.mIsBasic = Convert.ToBoolean(dr["IsBasic"].ToString());
                        ObjCVarDAS_Disbursements.mSupplier_ID = Convert.ToDecimal(dr["Supplier_ID"].ToString());
                        ObjCVarDAS_Disbursements.mSalesAccount_ID = Convert.ToInt32(dr["SalesAccount_ID"].ToString());
                        ObjCVarDAS_Disbursements.mSalesSubAccount_ID = Convert.ToInt32(dr["SalesSubAccount_ID"].ToString());
                        ObjCVarDAS_Disbursements.mIsMandatory = Convert.ToBoolean(dr["IsMandatory"].ToString());
                        ObjCVarDAS_Disbursements.mIsAdministration = Convert.ToBoolean(dr["IsAdministration"].ToString());
                        ObjCVarDAS_Disbursements.mIsPort = Convert.ToBoolean(dr["IsPort"].ToString());
                        ObjCVarDAS_Disbursements.mIsTransit = Convert.ToBoolean(dr["IsTransit"].ToString());
                        ObjCVarDAS_Disbursements.mIsProtecting = Convert.ToBoolean(dr["IsProtecting"].ToString());
                        ObjCVarDAS_Disbursements.mIsPettyCash = Convert.ToBoolean(dr["IsPettyCash"].ToString());
                        ObjCVarDAS_Disbursements.mIsStatic = Convert.ToBoolean(dr["IsStatic"].ToString());
                        ObjCVarDAS_Disbursements.mIsGroupingItem = Convert.ToBoolean(dr["IsGroupingItem"].ToString());
                        ObjCVarDAS_Disbursements.mIsAutomatic = Convert.ToBoolean(dr["IsAutomatic"].ToString());
                        ObjCVarDAS_Disbursements.mBillToID = Convert.ToInt32(dr["BillToID"].ToString());
                        ObjCVarDAS_Disbursements.mCollectFromID = Convert.ToInt32(dr["CollectFromID"].ToString());
                        ObjCVarDAS_Disbursements.mInvoiceOrDebitID = Convert.ToInt32(dr["InvoiceOrDebitID"].ToString());
                        ObjCVarDAS_Disbursements.mPDAGroupingItemID = Convert.ToInt32(dr["PDAGroupingItemID"].ToString());
                        ObjCVarDAS_Disbursements.mFDAGroupingItemID = Convert.ToInt32(dr["FDAGroupingItemID"].ToString());
                        ObjCVarDAS_Disbursements.mSP_Name = Convert.ToString(dr["SP_Name"].ToString());
                        ObjCVarDAS_Disbursements.mDefaultValue = Convert.ToDecimal(dr["DefaultValue"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_IndexTransit = Convert.ToInt32(dr["Disbursement_IndexTransit"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_IndexProtecting = Convert.ToInt32(dr["Disbursement_IndexProtecting"].ToString());
                        ObjCVarDAS_Disbursements.mHowToCalc = Convert.ToString(dr["HowToCalc"].ToString());
                        ObjCVarDAS_Disbursements.mItemRemarks = Convert.ToString(dr["ItemRemarks"].ToString());
                        ObjCVarDAS_Disbursements.mTR_SP_Name = Convert.ToString(dr["TR_SP_Name"].ToString());
                        ObjCVarDAS_Disbursements.mIsLinkedWithClient = Convert.ToBoolean(dr["IsLinkedWithClient"].ToString());
                        ObjCVarDAS_Disbursements.mIsCombinedInCanalDues = Convert.ToBoolean(dr["IsCombinedInCanalDues"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_IndexFDA = Convert.ToInt32(dr["Disbursement_IndexFDA"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_IndexTransitFDA = Convert.ToInt32(dr["Disbursement_IndexTransitFDA"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_IndexProtectingFDA = Convert.ToInt32(dr["Disbursement_IndexProtectingFDA"].ToString());
                        ObjCVarDAS_Disbursements.mAddedBy = Convert.ToInt32(dr["AddedBy"].ToString());
                        ObjCVarDAS_Disbursements.mAddedAt = Convert.ToDateTime(dr["AddedAt"].ToString());
                        ObjCVarDAS_Disbursements.mUpdatedBy = Convert.ToInt32(dr["UpdatedBy"].ToString());
                        ObjCVarDAS_Disbursements.mUpdatedAt = Convert.ToDateTime(dr["UpdatedAt"].ToString());
                        ObjCVarDAS_Disbursements.mIsDebitItem = Convert.ToBoolean(dr["IsDebitItem"].ToString());
                        ObjCVarDAS_Disbursements.mIsHusbandry = Convert.ToBoolean(dr["IsHusbandry"].ToString());
                        ObjCVarDAS_Disbursements.mIsCostItem = Convert.ToBoolean(dr["IsCostItem"].ToString());
                        ObjCVarDAS_Disbursements.mIsRevenueItem = Convert.ToBoolean(dr["IsRevenueItem"].ToString());
                        ObjCVarDAS_Disbursements.mIsRefundableItem = Convert.ToBoolean(dr["IsRefundableItem"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarDAS_Disbursements.Add(ObjCVarDAS_Disbursements);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        private Exception DataFillCbo(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarDAS_Disbursements.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].DAS_GetListPaging_DisbursementsCbo";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarDAS_Disbursements ObjCVarDAS_Disbursements = new CVarDAS_Disbursements();
                        ObjCVarDAS_Disbursements.Disbursement_ID = Convert.ToInt32(dr["Disbursement_ID"].ToString());
                        ObjCVarDAS_Disbursements.mDisbursement_Name = Convert.ToString(dr["Disbursement_Name"].ToString());
                        lstCVarDAS_Disbursements.Add(ObjCVarDAS_Disbursements);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        private Exception GetListbyType(int DisbursementGroup_ID, int Type)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarDAS_Disbursements.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;

                Com.CommandText = "[dbo].DAS_Disbursements_GetListByType";
                Com.Parameters.Add(new SqlParameter("@DisbursementGroup_ID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Type", SqlDbType.Int));
                Com.Parameters[0].Value = Convert.ToInt32(DisbursementGroup_ID);
                Com.Parameters[1].Value = Convert.ToInt32(Type);

                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarDAS_Disbursements ObjCVarDAS_Disbursements = new CVarDAS_Disbursements();
                        ObjCVarDAS_Disbursements.Disbursement_ID = Convert.ToInt32(dr[0].ToString());
                        ObjCVarDAS_Disbursements.Disbursement_Name = Convert.ToString(dr[1].ToString());
                        ObjCVarDAS_Disbursements.Disbursement_Index = Convert.ToInt32(dr[2].ToString());
                        ObjCVarDAS_Disbursements.DisbursementGroup_ID = Convert.ToInt32(dr[3].ToString());
                        ObjCVarDAS_Disbursements.Account_ID = Convert.ToInt32(dr[4].ToString());
                        lstCVarDAS_Disbursements.Add(ObjCVarDAS_Disbursements);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        //public List<CVar_Disbursements> GetListbyType(int DisbursementGroup_ID, int Type)
        //{
        //    SqlDataReader dr = null;
        //    SqlParameter[] Param_Arr;
        //    lst_CVar_Disbursements.Clear();

        //    try
        //    {

        //        Param_Arr = new SqlParameter[2];
        //        Param_Arr[0] = new SqlParameter("@DisbursementGroup_ID", SqlDbType.Int);
        //        Param_Arr[0].Value = DisbursementGroup_ID;
        //        Param_Arr[1] = new SqlParameter("@Type", SqlDbType.Int);
        //        Param_Arr[1].Value = Type;

        //        dr = Globals.objDataAccess.QueryString("DAS_Disbursements_GetListByType", Param_Arr);

        //        while (dr.Read())
        //        {
        //            /*Start DataReader*/
        //            CVar_Disbursements Obj_CVar_Disbursements = new CVar_Disbursements();
        //            Obj_CVar_Disbursements.Disbursement_ID = Convert.ToInt32(dr[0].ToString());
        //            Obj_CVar_Disbursements.Disbursement_Name = Convert.ToString(dr[1].ToString());
        //            Obj_CVar_Disbursements.Disbursement_Index = Convert.ToInt32(dr[2].ToString());
        //            Obj_CVar_Disbursements.DisbursementGroup_ID = Convert.ToInt32(dr[3].ToString());
        //            Obj_CVar_Disbursements.Account_ID = Convert.ToDecimal(dr[4].ToString());

        //            if (dr[5] != DBNull.Value)
        //            {
        //                Obj_CVar_Disbursements.SubAccount_ID = Convert.ToDecimal(dr[5].ToString());
        //            }


        //            Obj_CVar_Disbursements.IsService = Convert.ToBoolean(dr[6].ToString());
        //            Obj_CVar_Disbursements.IsBasic = Convert.ToBoolean(dr[7].ToString());
        //            Obj_CVar_Disbursements.Supplier_ID = Convert.ToDecimal(dr[8].ToString());

        //            Obj_CVar_Disbursements.SalesAccount_ID = Convert.ToDecimal(dr[9].ToString());
        //            if (dr[10] != DBNull.Value)
        //            {
        //                Obj_CVar_Disbursements.SalesSubAccount_ID = Convert.ToDecimal(dr[10].ToString());
        //            }


        //            Obj_CVar_Disbursements.IsMandatory = Convert.ToBoolean(dr[11].ToString());
        //            Obj_CVar_Disbursements.IsAdministration = Convert.ToBoolean(dr[12].ToString());
        //            Obj_CVar_Disbursements.IsPort = Convert.ToBoolean(dr[13].ToString());
        //            Obj_CVar_Disbursements.IsTransit = Convert.ToBoolean(dr[14].ToString());
        //            Obj_CVar_Disbursements.IsProtecting = Convert.ToBoolean(dr[15].ToString());
        //            Obj_CVar_Disbursements.IsPettyCash = Convert.ToBoolean(dr[16].ToString());
        //            Obj_CVar_Disbursements.IsStatic = Convert.ToBoolean(dr[17].ToString());
        //            Obj_CVar_Disbursements.IsGroupingItem = Convert.ToBoolean(dr[18].ToString());
        //            Obj_CVar_Disbursements.IsAutomatic = Convert.ToBoolean(dr[19].ToString());

        //            Obj_CVar_Disbursements.BillToID = Convert.ToInt32(dr[20].ToString());
        //            Obj_CVar_Disbursements.CollectFromID = Convert.ToInt32(dr[21].ToString());
        //            Obj_CVar_Disbursements.InvoiceOrDebitID = Convert.ToInt32(dr[22].ToString());

        //            Obj_CVar_Disbursements.PDAGroupingItemID = Convert.ToInt32(dr[23].ToString());
        //            Obj_CVar_Disbursements.FDAGroupingItemID = Convert.ToInt32(dr[24].ToString());

        //            Obj_CVar_Disbursements.SP_Name = Convert.ToString(dr[25].ToString());
        //            Obj_CVar_Disbursements.DefaultValue = Convert.ToDecimal(dr[26].ToString());
        //            Obj_CVar_Disbursements.Disbursement_IndexFDA = Convert.ToInt32(dr[27].ToString());


        //            lst_CVar_Disbursements.Add(Obj_CVar_Disbursements);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        throw new Exception(ex.Message);
        //    }
        //    finally
        //    {
        //        if (dr != null)
        //        {
        //            dr.Close();
        //            dr.Dispose();
        //        }
        //    }
        //    return lst_CVar_Disbursements;
        //}

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            tr = Con.BeginTransaction(IsolationLevel.Serializable);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DAS_Disbursements_DeleteList";
                else
                    Com.CommandText = "[dbo].DAS_Disbursements_UpdateList";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKDAS_Disbursements> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DAS_Disbursements_DeleteItem";
                Com.Parameters.Add(new SqlParameter("@Disbursement_ID", SqlDbType.Int));
                foreach (CPKDAS_Disbursements ObjCPKDAS_Disbursements in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt32(ObjCPKDAS_Disbursements.Disbursement_ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarDAS_Disbursements> SaveList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.Parameters.Add(new SqlParameter("@Disbursement_Name", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@Disbursement_Index", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@DisbursementGroup_ID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Account_ID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@SubAccount_ID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@IsService", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsBasic", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@Supplier_ID", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@SalesAccount_ID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@SalesSubAccount_ID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@IsMandatory", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsAdministration", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsPort", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsTransit", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsProtecting", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsPettyCash", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsStatic", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsGroupingItem", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsAutomatic", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@BillToID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@CollectFromID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@InvoiceOrDebitID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PDAGroupingItemID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@FDAGroupingItemID", SqlDbType.Int));
                //Com.Parameters.Add(new SqlParameter("@SP_Name", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@DefaultValue", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@Disbursement_IndexTransit", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Disbursement_IndexProtecting", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@HowToCalc", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@ItemRemarks", SqlDbType.VarChar));
                //Com.Parameters.Add(new SqlParameter("@TR_SP_Name", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@IsLinkedWithClient", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsCombinedInCanalDues", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@Disbursement_IndexFDA", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Disbursement_IndexTransitFDA", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Disbursement_IndexProtectingFDA", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@AddedBy", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@AddedAt", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@UpdatedBy", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@UpdatedAt", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@IsDebitItem", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsHusbandry", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsCostItem", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsRevenueItem", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsRefundableItem", SqlDbType.Bit));
                SqlParameter paraDisbursement_ID = Com.Parameters.Add(new SqlParameter("@Disbursement_ID", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, "Disbursement_ID", DataRowVersion.Default, null));
                foreach (CVarDAS_Disbursements ObjCVarDAS_Disbursements in SaveList)
                {
                    if (ObjCVarDAS_Disbursements.mIsChanges == true)
                    {
                        if (ObjCVarDAS_Disbursements.Disbursement_ID == 0)
                        {
                            Com.CommandText = "[dbo].DAS_Disbursements_InsertItem";
                            paraDisbursement_ID.Direction = ParameterDirection.Output;
                        }
                        else if (ObjCVarDAS_Disbursements.Disbursement_ID != 0)
                        {
                            Com.CommandText = "[dbo].DAS_Disbursements_UpdateItem";
                            paraDisbursement_ID.Direction = ParameterDirection.Input;
                        }
                        BeginTrans(Com, Con);
                        if (ObjCVarDAS_Disbursements.Disbursement_ID != 0)
                        {
                            Com.Parameters["@Disbursement_ID"].Value = ObjCVarDAS_Disbursements.Disbursement_ID;
                        }
                        Com.Parameters["@Disbursement_Name"].Value = ObjCVarDAS_Disbursements.Disbursement_Name;
                        Com.Parameters["@Disbursement_Index"].Value = ObjCVarDAS_Disbursements.Disbursement_Index;
                        Com.Parameters["@DisbursementGroup_ID"].Value = ObjCVarDAS_Disbursements.DisbursementGroup_ID;
                        Com.Parameters["@Account_ID"].Value = ObjCVarDAS_Disbursements.Account_ID;
                        Com.Parameters["@SubAccount_ID"].Value = ObjCVarDAS_Disbursements.SubAccount_ID;
                        Com.Parameters["@IsService"].Value = ObjCVarDAS_Disbursements.IsService;
                        Com.Parameters["@IsBasic"].Value = ObjCVarDAS_Disbursements.IsBasic;
                        Com.Parameters["@Supplier_ID"].Value = ObjCVarDAS_Disbursements.Supplier_ID;
                        Com.Parameters["@SalesAccount_ID"].Value = ObjCVarDAS_Disbursements.SalesAccount_ID;
                        Com.Parameters["@SalesSubAccount_ID"].Value = ObjCVarDAS_Disbursements.SalesSubAccount_ID;
                        Com.Parameters["@IsMandatory"].Value = ObjCVarDAS_Disbursements.IsMandatory;
                        Com.Parameters["@IsAdministration"].Value = ObjCVarDAS_Disbursements.IsAdministration;
                        Com.Parameters["@IsPort"].Value = ObjCVarDAS_Disbursements.IsPort;
                        Com.Parameters["@IsTransit"].Value = ObjCVarDAS_Disbursements.IsTransit;
                        Com.Parameters["@IsProtecting"].Value = ObjCVarDAS_Disbursements.IsProtecting;
                        Com.Parameters["@IsPettyCash"].Value = ObjCVarDAS_Disbursements.IsPettyCash;
                        Com.Parameters["@IsStatic"].Value = ObjCVarDAS_Disbursements.IsStatic;
                        Com.Parameters["@IsGroupingItem"].Value = ObjCVarDAS_Disbursements.IsGroupingItem;
                        Com.Parameters["@IsAutomatic"].Value = ObjCVarDAS_Disbursements.IsAutomatic;
                        Com.Parameters["@BillToID"].Value = ObjCVarDAS_Disbursements.BillToID;
                        Com.Parameters["@CollectFromID"].Value = ObjCVarDAS_Disbursements.CollectFromID;
                        Com.Parameters["@InvoiceOrDebitID"].Value = ObjCVarDAS_Disbursements.InvoiceOrDebitID;
                        Com.Parameters["@PDAGroupingItemID"].Value = ObjCVarDAS_Disbursements.PDAGroupingItemID;
                        Com.Parameters["@FDAGroupingItemID"].Value = ObjCVarDAS_Disbursements.FDAGroupingItemID;
                        //Com.Parameters["@SP_Name"].Value = ObjCVarDAS_Disbursements.SP_Name;
                        Com.Parameters["@DefaultValue"].Value = ObjCVarDAS_Disbursements.DefaultValue;
                        Com.Parameters["@Disbursement_IndexTransit"].Value = ObjCVarDAS_Disbursements.Disbursement_IndexTransit;
                        Com.Parameters["@Disbursement_IndexProtecting"].Value = ObjCVarDAS_Disbursements.Disbursement_IndexProtecting;
                        Com.Parameters["@HowToCalc"].Value = ObjCVarDAS_Disbursements.HowToCalc;
                        Com.Parameters["@ItemRemarks"].Value = ObjCVarDAS_Disbursements.ItemRemarks;
                        //Com.Parameters["@TR_SP_Name"].Value = ObjCVarDAS_Disbursements.TR_SP_Name;
                        Com.Parameters["@IsLinkedWithClient"].Value = ObjCVarDAS_Disbursements.IsLinkedWithClient;
                        Com.Parameters["@IsCombinedInCanalDues"].Value = ObjCVarDAS_Disbursements.IsCombinedInCanalDues;
                        Com.Parameters["@Disbursement_IndexFDA"].Value = ObjCVarDAS_Disbursements.Disbursement_IndexFDA;
                        Com.Parameters["@Disbursement_IndexTransitFDA"].Value = ObjCVarDAS_Disbursements.Disbursement_IndexTransitFDA;
                        Com.Parameters["@Disbursement_IndexProtectingFDA"].Value = ObjCVarDAS_Disbursements.Disbursement_IndexProtectingFDA;
                        Com.Parameters["@AddedBy"].Value = ObjCVarDAS_Disbursements.AddedBy;
                        Com.Parameters["@AddedAt"].Value = ObjCVarDAS_Disbursements.AddedAt;
                        Com.Parameters["@UpdatedBy"].Value = ObjCVarDAS_Disbursements.UpdatedBy;
                        Com.Parameters["@UpdatedAt"].Value = ObjCVarDAS_Disbursements.UpdatedAt;
                        Com.Parameters["@IsDebitItem"].Value = ObjCVarDAS_Disbursements.IsDebitItem;
                        Com.Parameters["@IsHusbandry"].Value = ObjCVarDAS_Disbursements.IsHusbandry;
                        Com.Parameters["@IsCostItem"].Value = ObjCVarDAS_Disbursements.IsCostItem;
                        Com.Parameters["@IsRevenueItem"].Value = ObjCVarDAS_Disbursements.IsRevenueItem;
                        Com.Parameters["@IsRefundableItem"].Value = ObjCVarDAS_Disbursements.IsRefundableItem;
                        EndTrans(Com, Con);
                        if (ObjCVarDAS_Disbursements.Disbursement_ID == 0)
                        {
                            ObjCVarDAS_Disbursements.Disbursement_ID = Convert.ToInt32(Com.Parameters["@Disbursement_ID"].Value);
                        }
                        ObjCVarDAS_Disbursements.mIsChanges = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                if (tr != null)
                    tr.Rollback();
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }

}
