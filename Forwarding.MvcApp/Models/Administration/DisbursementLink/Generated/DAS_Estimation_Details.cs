using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;
//using Shipping.MvcApp.Utilities;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.Administration.DisbursementLink.Generated
{
    [Serializable]
    public class CPKDAS_Estimation_Details
    {
        #region "variables"
        private Int64 mEstimation_Details_ID;
        #endregion

        #region "Methods"
        public Int64 Estimation_Details_ID
        {
            get { return mEstimation_Details_ID; }
            set { mEstimation_Details_ID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarDAS_Estimation_Details : CPKDAS_Estimation_Details
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int64 mEstimation_ID;
        internal Int32 mCalculation_Bands_ID;
        internal Byte mCurrency_ID;
        internal Decimal mAmount;
        internal Int64 mPDA_ID;
        internal Int64 mDisbursementJob_ID;
        internal Decimal mCollectFromID;
        internal Decimal mBillToID;
        internal Boolean mIsPosted;
        internal DateTime mPostingDate;
        internal Decimal mERP_JV_ID;
        internal Decimal mCostAmuont;
        internal Int64 mDebitCreditNotes_ID;
        internal String mClinetInvoiceNumber;
        internal DateTime mClinetInvoiceDate;
        internal Boolean mIsPaid;
        internal Decimal mFDACalculatedAmount;
        internal String mHowToCalc;
        internal String mRemarks;
        #endregion

        #region "Methods"
        public Int64 Estimation_ID
        {
            get { return mEstimation_ID; }
            set { mIsChanges = true; mEstimation_ID = value; }
        }
        public Int32 Calculation_Bands_ID
        {
            get { return mCalculation_Bands_ID; }
            set { mIsChanges = true; mCalculation_Bands_ID = value; }
        }
        public Byte Currency_ID
        {
            get { return mCurrency_ID; }
            set { mIsChanges = true; mCurrency_ID = value; }
        }
        public Decimal Amount
        {
            get { return mAmount; }
            set { mIsChanges = true; mAmount = value; }
        }
        public Int64 PDA_ID
        {
            get { return mPDA_ID; }
            set { mIsChanges = true; mPDA_ID = value; }
        }
        public Int64 DisbursementJob_ID
        {
            get { return mDisbursementJob_ID; }
            set { mIsChanges = true; mDisbursementJob_ID = value; }
        }
        public Decimal CollectFromID
        {
            get { return mCollectFromID; }
            set { mIsChanges = true; mCollectFromID = value; }
        }
        public Decimal BillToID
        {
            get { return mBillToID; }
            set { mIsChanges = true; mBillToID = value; }
        }
        public Boolean IsPosted
        {
            get { return mIsPosted; }
            set { mIsChanges = true; mIsPosted = value; }
        }
        public DateTime PostingDate
        {
            get { return mPostingDate; }
            set { mIsChanges = true; mPostingDate = value; }
        }
        public Decimal ERP_JV_ID
        {
            get { return mERP_JV_ID; }
            set { mIsChanges = true; mERP_JV_ID = value; }
        }
        public Decimal CostAmuont
        {
            get { return mCostAmuont; }
            set { mIsChanges = true; mCostAmuont = value; }
        }
        public Int64 DebitCreditNotes_ID
        {
            get { return mDebitCreditNotes_ID; }
            set { mIsChanges = true; mDebitCreditNotes_ID = value; }
        }
        public String ClinetInvoiceNumber
        {
            get { return mClinetInvoiceNumber; }
            set { mIsChanges = true; mClinetInvoiceNumber = value; }
        }
        public DateTime ClinetInvoiceDate
        {
            get { return mClinetInvoiceDate; }
            set { mIsChanges = true; mClinetInvoiceDate = value; }
        }
        public Boolean IsPaid
        {
            get { return mIsPaid; }
            set { mIsChanges = true; mIsPaid = value; }
        }
        public Decimal FDACalculatedAmount
        {
            get { return mFDACalculatedAmount; }
            set { mIsChanges = true; mFDACalculatedAmount = value; }
        }
        public String HowToCalc
        {
            get { return mHowToCalc; }
            set { mIsChanges = true; mHowToCalc = value; }
        }
        public String Remarks
        {
            get { return mRemarks; }
            set { mIsChanges = true; mRemarks = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CDAS_Estimation_Details
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="DisbursementConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarDAS_Estimation_Details> lstCVarDAS_Estimation_Details = new List<CVarDAS_Estimation_Details>();
        public List<CPKDAS_Estimation_Details> lstDeletedCPKDAS_Estimation_Details = new List<CPKDAS_Estimation_Details>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetItem(Int64 Estimation_Details_ID)
        {
            return DataFill(Convert.ToString(Estimation_Details_ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarDAS_Estimation_Details.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListDAS_Estimation_Details";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].GetItemDAS_Estimation_Details";
                    Com.Parameters.Add(new SqlParameter("@Estimation_Details_ID", SqlDbType.BigInt));
                    Com.Parameters[0].Value = Convert.ToInt64(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarDAS_Estimation_Details ObjCVarDAS_Estimation_Details = new CVarDAS_Estimation_Details();
                        ObjCVarDAS_Estimation_Details.Estimation_Details_ID = Convert.ToInt64(dr["Estimation_Details_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mEstimation_ID = Convert.ToInt64(dr["Estimation_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mCalculation_Bands_ID = Convert.ToInt32(dr["Calculation_Bands_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mCurrency_ID = Convert.ToByte(dr["Currency_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mAmount = Convert.ToDecimal(dr["Amount"].ToString());
                        ObjCVarDAS_Estimation_Details.mPDA_ID = Convert.ToInt64(dr["PDA_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mDisbursementJob_ID = Convert.ToInt64(dr["DisbursementJob_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mCollectFromID = Convert.ToDecimal(dr["CollectFromID"].ToString());
                        ObjCVarDAS_Estimation_Details.mBillToID = Convert.ToDecimal(dr["BillToID"].ToString());
                        ObjCVarDAS_Estimation_Details.mIsPosted = Convert.ToBoolean(dr["IsPosted"].ToString());
                        ObjCVarDAS_Estimation_Details.mPostingDate = Convert.ToDateTime(dr["PostingDate"].ToString());
                        ObjCVarDAS_Estimation_Details.mERP_JV_ID = Convert.ToDecimal(dr["ERP_JV_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mCostAmuont = Convert.ToDecimal(dr["CostAmuont"].ToString());
                        ObjCVarDAS_Estimation_Details.mDebitCreditNotes_ID = Convert.ToInt64(dr["DebitCreditNotes_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mClinetInvoiceNumber = Convert.ToString(dr["ClinetInvoiceNumber"].ToString());
                        ObjCVarDAS_Estimation_Details.mClinetInvoiceDate = Convert.ToDateTime(dr["ClinetInvoiceDate"].ToString());
                        ObjCVarDAS_Estimation_Details.mIsPaid = Convert.ToBoolean(dr["IsPaid"].ToString());
                        ObjCVarDAS_Estimation_Details.mFDACalculatedAmount = Convert.ToDecimal(dr["FDACalculatedAmount"].ToString());
                        ObjCVarDAS_Estimation_Details.mHowToCalc = Convert.ToString(dr["HowToCalc"].ToString());
                        ObjCVarDAS_Estimation_Details.mRemarks = Convert.ToString(dr["Remarks"].ToString());
                        lstCVarDAS_Estimation_Details.Add(ObjCVarDAS_Estimation_Details);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarDAS_Estimation_Details.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingDAS_Estimation_Details";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarDAS_Estimation_Details ObjCVarDAS_Estimation_Details = new CVarDAS_Estimation_Details();
                        ObjCVarDAS_Estimation_Details.Estimation_Details_ID = Convert.ToInt64(dr["Estimation_Details_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mEstimation_ID = Convert.ToInt64(dr["Estimation_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mCalculation_Bands_ID = Convert.ToInt32(dr["Calculation_Bands_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mCurrency_ID = Convert.ToByte(dr["Currency_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mAmount = Convert.ToDecimal(dr["Amount"].ToString());
                        ObjCVarDAS_Estimation_Details.mPDA_ID = Convert.ToInt64(dr["PDA_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mDisbursementJob_ID = Convert.ToInt64(dr["DisbursementJob_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mCollectFromID = Convert.ToDecimal(dr["CollectFromID"].ToString());
                        ObjCVarDAS_Estimation_Details.mBillToID = Convert.ToDecimal(dr["BillToID"].ToString());
                        ObjCVarDAS_Estimation_Details.mIsPosted = Convert.ToBoolean(dr["IsPosted"].ToString());
                        ObjCVarDAS_Estimation_Details.mPostingDate = Convert.ToDateTime(dr["PostingDate"].ToString());
                        ObjCVarDAS_Estimation_Details.mERP_JV_ID = Convert.ToDecimal(dr["ERP_JV_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mCostAmuont = Convert.ToDecimal(dr["CostAmuont"].ToString());
                        ObjCVarDAS_Estimation_Details.mDebitCreditNotes_ID = Convert.ToInt64(dr["DebitCreditNotes_ID"].ToString());
                        ObjCVarDAS_Estimation_Details.mClinetInvoiceNumber = Convert.ToString(dr["ClinetInvoiceNumber"].ToString());
                        ObjCVarDAS_Estimation_Details.mClinetInvoiceDate = Convert.ToDateTime(dr["ClinetInvoiceDate"].ToString());
                        ObjCVarDAS_Estimation_Details.mIsPaid = Convert.ToBoolean(dr["IsPaid"].ToString());
                        ObjCVarDAS_Estimation_Details.mFDACalculatedAmount = Convert.ToDecimal(dr["FDACalculatedAmount"].ToString());
                        ObjCVarDAS_Estimation_Details.mHowToCalc = Convert.ToString(dr["HowToCalc"].ToString());
                        ObjCVarDAS_Estimation_Details.mRemarks = Convert.ToString(dr["Remarks"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarDAS_Estimation_Details.Add(ObjCVarDAS_Estimation_Details);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            tr = Con.BeginTransaction(IsolationLevel.Serializable);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DeleteListDAS_Estimation_Details";
                else
                    Com.CommandText = "[dbo].UpdateListDAS_Estimation_Details";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKDAS_Estimation_Details> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DeleteItemDAS_Estimation_Details";
                Com.Parameters.Add(new SqlParameter("@Estimation_Details_ID", SqlDbType.BigInt));
                foreach (CPKDAS_Estimation_Details ObjCPKDAS_Estimation_Details in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt64(ObjCPKDAS_Estimation_Details.Estimation_Details_ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarDAS_Estimation_Details> SaveList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["DisbursementConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.Parameters.Add(new SqlParameter("@Estimation_ID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@Calculation_Bands_ID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Currency_ID", SqlDbType.TinyInt));
                Com.Parameters.Add(new SqlParameter("@Amount", SqlDbType.Money));
                Com.Parameters.Add(new SqlParameter("@PDA_ID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@DisbursementJob_ID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@CollectFromID", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@BillToID", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@IsPosted", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@PostingDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@ERP_JV_ID", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@CostAmuont", SqlDbType.Money));
                Com.Parameters.Add(new SqlParameter("@DebitCreditNotes_ID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@ClinetInvoiceNumber", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@ClinetInvoiceDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@IsPaid", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@FDACalculatedAmount", SqlDbType.Money));
                Com.Parameters.Add(new SqlParameter("@HowToCalc", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@Remarks", SqlDbType.VarChar));
                SqlParameter paraEstimation_Details_ID = Com.Parameters.Add(new SqlParameter("@Estimation_Details_ID", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, "Estimation_Details_ID", DataRowVersion.Default, null));
                foreach (CVarDAS_Estimation_Details ObjCVarDAS_Estimation_Details in SaveList)
                {
                    if (ObjCVarDAS_Estimation_Details.mIsChanges == true)
                    {
                        if (ObjCVarDAS_Estimation_Details.Estimation_Details_ID == 0)
                        {
                            Com.CommandText = "[dbo].InsertItemDAS_Estimation_Details";
                            paraEstimation_Details_ID.Direction = ParameterDirection.Output;
                        }
                        else if (ObjCVarDAS_Estimation_Details.Estimation_Details_ID != 0)
                        {
                            Com.CommandText = "[dbo].UpdateItemDAS_Estimation_Details";
                            paraEstimation_Details_ID.Direction = ParameterDirection.Input;
                        }
                        BeginTrans(Com, Con);
                        if (ObjCVarDAS_Estimation_Details.Estimation_Details_ID != 0)
                        {
                            Com.Parameters["@Estimation_Details_ID"].Value = ObjCVarDAS_Estimation_Details.Estimation_Details_ID;
                        }
                        Com.Parameters["@Estimation_ID"].Value = ObjCVarDAS_Estimation_Details.Estimation_ID;
                        Com.Parameters["@Calculation_Bands_ID"].Value = ObjCVarDAS_Estimation_Details.Calculation_Bands_ID;
                        Com.Parameters["@Currency_ID"].Value = ObjCVarDAS_Estimation_Details.Currency_ID;
                        Com.Parameters["@Amount"].Value = ObjCVarDAS_Estimation_Details.Amount;
                        Com.Parameters["@PDA_ID"].Value = ObjCVarDAS_Estimation_Details.PDA_ID;
                        Com.Parameters["@DisbursementJob_ID"].Value = ObjCVarDAS_Estimation_Details.DisbursementJob_ID;
                        Com.Parameters["@CollectFromID"].Value = ObjCVarDAS_Estimation_Details.CollectFromID;
                        Com.Parameters["@BillToID"].Value = ObjCVarDAS_Estimation_Details.BillToID;
                        Com.Parameters["@IsPosted"].Value = ObjCVarDAS_Estimation_Details.IsPosted;
                        Com.Parameters["@PostingDate"].Value = ObjCVarDAS_Estimation_Details.PostingDate;
                        Com.Parameters["@ERP_JV_ID"].Value = ObjCVarDAS_Estimation_Details.ERP_JV_ID;
                        Com.Parameters["@CostAmuont"].Value = ObjCVarDAS_Estimation_Details.CostAmuont;
                        Com.Parameters["@DebitCreditNotes_ID"].Value = ObjCVarDAS_Estimation_Details.DebitCreditNotes_ID;
                        Com.Parameters["@ClinetInvoiceNumber"].Value = ObjCVarDAS_Estimation_Details.ClinetInvoiceNumber;
                        Com.Parameters["@ClinetInvoiceDate"].Value = ObjCVarDAS_Estimation_Details.ClinetInvoiceDate;
                        Com.Parameters["@IsPaid"].Value = ObjCVarDAS_Estimation_Details.IsPaid;
                        Com.Parameters["@FDACalculatedAmount"].Value = ObjCVarDAS_Estimation_Details.FDACalculatedAmount;
                        Com.Parameters["@HowToCalc"].Value = ObjCVarDAS_Estimation_Details.HowToCalc;
                        Com.Parameters["@Remarks"].Value = ObjCVarDAS_Estimation_Details.Remarks;
                        EndTrans(Com, Con);
                        if (ObjCVarDAS_Estimation_Details.Estimation_Details_ID == 0)
                        {
                            ObjCVarDAS_Estimation_Details.Estimation_Details_ID = Convert.ToInt64(Com.Parameters["@Estimation_Details_ID"].Value);
                        }
                        ObjCVarDAS_Estimation_Details.mIsChanges = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                if (tr != null)
                    tr.Rollback();
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }


}
