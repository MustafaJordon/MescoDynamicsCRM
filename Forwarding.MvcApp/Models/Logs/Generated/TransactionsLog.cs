using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.Logs.Generated
{
    [Serializable]
    public class CPKTransactionsLog
    {
        #region "variables"
        private Int32 mID;
        #endregion

        #region "Methods"
        public Int32 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarTransactionsLog : CPKTransactionsLog
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal String mLogTableName;
        internal Int32 mRecordID;
        internal String mCode;
        internal Int32 mParentID;
        internal String mParentCode;
        internal String mOpertionCode;
        internal String mLog;
        internal DateTime mCreationDate;
        internal String mCreatorName;
        internal Int32 mCreatorID;
        #endregion

        #region "Methods"
        public String LogTableName
        {
            get { return mLogTableName; }
            set { mIsChanges = true; mLogTableName = value; }
        }
        public Int32 RecordID
        {
            get { return mRecordID; }
            set { mIsChanges = true; mRecordID = value; }
        }
        public String Code
        {
            get { return mCode; }
            set { mIsChanges = true; mCode = value; }
        }
        public Int32 ParentID
        {
            get { return mParentID; }
            set { mIsChanges = true; mParentID = value; }
        }
        public String ParentCode
        {
            get { return mParentCode; }
            set { mIsChanges = true; mParentCode = value; }
        }
        public String OpertionCode
        {
            get { return mOpertionCode; }
            set { mIsChanges = true; mOpertionCode = value; }
        }
        public String Log
        {
            get { return mLog; }
            set { mIsChanges = true; mLog = value; }
        }
        public DateTime CreationDate
        {
            get { return mCreationDate; }
            set { mIsChanges = true; mCreationDate = value; }
        }
        public String CreatorName
        {
            get { return mCreatorName; }
            set { mIsChanges = true; mCreatorName = value; }
        }
        public Int32 CreatorID
        {
            get { return mCreatorID; }
            set { mIsChanges = true; mCreatorID = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CTransactionsLog
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarTransactionsLog> lstCVarTransactionsLog = new List<CVarTransactionsLog>();
        public List<CPKTransactionsLog> lstDeletedCPKTransactionsLog = new List<CPKTransactionsLog>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetItem(Int32 ID)
        {
            return DataFill(Convert.ToString(ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarTransactionsLog.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListTransactionsLog";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].GetItemTransactionsLog";
                    Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int));
                    Com.Parameters[0].Value = Convert.ToInt32(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarTransactionsLog ObjCVarTransactionsLog = new CVarTransactionsLog();
                        ObjCVarTransactionsLog.ID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarTransactionsLog.mLogTableName = Convert.ToString(dr["LogTableName"].ToString());
                        ObjCVarTransactionsLog.mRecordID = Convert.ToInt32(dr["RecordID"].ToString());
                        ObjCVarTransactionsLog.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarTransactionsLog.mParentID = Convert.ToInt32(dr["ParentID"].ToString());
                        ObjCVarTransactionsLog.mParentCode = Convert.ToString(dr["ParentCode"].ToString());
                        ObjCVarTransactionsLog.mOpertionCode = Convert.ToString(dr["OpertionCode"].ToString());
                        ObjCVarTransactionsLog.mLog = Convert.ToString(dr["Log"].ToString());
                        ObjCVarTransactionsLog.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarTransactionsLog.mCreatorName = Convert.ToString(dr["CreatorName"].ToString());
                        ObjCVarTransactionsLog.mCreatorID = Convert.ToInt32(dr["CreatorID"].ToString());
                        lstCVarTransactionsLog.Add(ObjCVarTransactionsLog);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarTransactionsLog.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingTransactionsLog";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarTransactionsLog ObjCVarTransactionsLog = new CVarTransactionsLog();
                        ObjCVarTransactionsLog.ID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarTransactionsLog.mLogTableName = Convert.ToString(dr["LogTableName"].ToString());
                        ObjCVarTransactionsLog.mRecordID = Convert.ToInt32(dr["RecordID"].ToString());
                        ObjCVarTransactionsLog.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarTransactionsLog.mParentID = Convert.ToInt32(dr["ParentID"].ToString());
                        ObjCVarTransactionsLog.mParentCode = Convert.ToString(dr["ParentCode"].ToString());
                        ObjCVarTransactionsLog.mOpertionCode = Convert.ToString(dr["OpertionCode"].ToString());
                        ObjCVarTransactionsLog.mLog = Convert.ToString(dr["Log"].ToString());
                        ObjCVarTransactionsLog.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarTransactionsLog.mCreatorName = Convert.ToString(dr["CreatorName"].ToString());
                        ObjCVarTransactionsLog.mCreatorID = Convert.ToInt32(dr["CreatorID"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarTransactionsLog.Add(ObjCVarTransactionsLog);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            tr = Con.BeginTransaction(IsolationLevel.Serializable);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DeleteListTransactionsLog";
                else
                    Com.CommandText = "[dbo].UpdateListTransactionsLog";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKTransactionsLog> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DeleteItemTransactionsLog";
                Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int));
                foreach (CPKTransactionsLog ObjCPKTransactionsLog in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt32(ObjCPKTransactionsLog.ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarTransactionsLog> SaveList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.Parameters.Add(new SqlParameter("@LogTableName", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@RecordID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Code", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@ParentID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ParentCode", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OpertionCode", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@Log", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@CreationDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@CreatorName", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@CreatorID", SqlDbType.Int));
                SqlParameter paraID = Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, "ID", DataRowVersion.Default, null));
                foreach (CVarTransactionsLog ObjCVarTransactionsLog in SaveList)
                {
                    if (ObjCVarTransactionsLog.mIsChanges == true)
                    {
                        if (ObjCVarTransactionsLog.ID == 0)
                        {
                            Com.CommandText = "[dbo].InsertItemTransactionsLog";
                            paraID.Direction = ParameterDirection.Output;
                        }
                        else if (ObjCVarTransactionsLog.ID != 0)
                        {
                            Com.CommandText = "[dbo].UpdateItemTransactionsLog";
                            paraID.Direction = ParameterDirection.Input;
                        }
                        BeginTrans(Com, Con);
                        if (ObjCVarTransactionsLog.ID != 0)
                        {
                            Com.Parameters["@ID"].Value = ObjCVarTransactionsLog.ID;
                        }
                        Com.Parameters["@LogTableName"].Value = ObjCVarTransactionsLog.LogTableName;
                        Com.Parameters["@RecordID"].Value = ObjCVarTransactionsLog.RecordID;
                        Com.Parameters["@Code"].Value = ObjCVarTransactionsLog.Code;
                        Com.Parameters["@ParentID"].Value = ObjCVarTransactionsLog.ParentID;
                        Com.Parameters["@ParentCode"].Value = ObjCVarTransactionsLog.ParentCode;
                        Com.Parameters["@OpertionCode"].Value = ObjCVarTransactionsLog.OpertionCode;
                        Com.Parameters["@Log"].Value = ObjCVarTransactionsLog.Log;
                        Com.Parameters["@CreationDate"].Value = ObjCVarTransactionsLog.CreationDate;
                        Com.Parameters["@CreatorName"].Value = ObjCVarTransactionsLog.CreatorName;
                        Com.Parameters["@CreatorID"].Value = ObjCVarTransactionsLog.CreatorID;
                        EndTrans(Com, Con);
                        if (ObjCVarTransactionsLog.ID == 0)
                        {
                            ObjCVarTransactionsLog.ID = Convert.ToInt32(Com.Parameters["@ID"].Value);
                        }
                        ObjCVarTransactionsLog.mIsChanges = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                if (tr != null)
                    tr.Rollback();
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }
}
