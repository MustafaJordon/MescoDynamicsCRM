using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.MasterData.Trucking.Generated
{
    [Serializable]
    public class CPKTRCK_Equipment_Items
    {
        #region "variables"
        private Int32 mID;
        #endregion

        #region "Methods"
        public Int32 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarTRCK_Equipment_Items : CPKTRCK_Equipment_Items
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int32 mTRCK_EquipmentID;
        internal Int32 mItemID;
        internal Decimal mLastTruckCounter;
        internal String mRemarks;
        internal Boolean mIsWheel;
        internal DateTime mCreationDate;
        internal Int32 mCreationUserID;
        internal Int32 mModificatorUserID;
        internal DateTime mModificationDate;
        internal Int64 mSLHeadLeft1Out;
        internal Int64 mSLHeadLeft1IN;
        internal Int64 mSLHeadLeft2Out;
        internal Int64 mSLHeadLeft2IN;
        internal Int64 mSLHeadLeft3Out;
        internal Int64 mSLHeadLeft3IN;
        internal Int64 mSLHeadRight1Out;
        internal Int64 mSLHeadRight1IN;
        internal Int64 mSLHeadRight2Out;
        internal Int64 mSLHeadRight2IN;
        internal Int64 mSLHeadRight3Out;
        internal Int64 mSLHeadRight3IN;
        internal Int64 mSLTrailLeft1Out;
        internal Int64 mSLTrailLeft1IN;
        internal Int64 mSLTrailLeft2Out;
        internal Int64 mSLTrailLeft2IN;
        internal Int64 mSLTrailLeft3Out;
        internal Int64 mSLTrailLeft3IN;
        internal Int64 mSLTrailLeft4Out;
        internal Int64 mSLTrailLeft4IN;
        internal Int64 mSLTrailLeft5Out;
        internal Int64 mSLTrailLeft5IN;
        internal Int64 mSLTrailRight1Out;
        internal Int64 mSLTrailRight1IN;
        internal Int64 mSLTrailRight2Out;
        internal Int64 mSLTrailRight2IN;
        internal Int64 mSLTrailRight3Out;
        internal Int64 mSLTrailRight3IN;
        internal Int64 mSLTrailRight4Out;
        internal Int64 mSLTrailRight4IN;
        internal Int64 mSLTrailRight5Out;
        internal Int64 mSLTrailRight5IN;
        #endregion

        #region "Methods"
        public Int32 TRCK_EquipmentID
        {
            get { return mTRCK_EquipmentID; }
            set { mIsChanges = true; mTRCK_EquipmentID = value; }
        }
        public Int32 ItemID
        {
            get { return mItemID; }
            set { mIsChanges = true; mItemID = value; }
        }
        public Decimal LastTruckCounter
        {
            get { return mLastTruckCounter; }
            set { mIsChanges = true; mLastTruckCounter = value; }
        }
        public String Remarks
        {
            get { return mRemarks; }
            set { mIsChanges = true; mRemarks = value; }
        }
        public Boolean IsWheel
        {
            get { return mIsWheel; }
            set { mIsChanges = true; mIsWheel = value; }
        }
        public DateTime CreationDate
        {
            get { return mCreationDate; }
            set { mIsChanges = true; mCreationDate = value; }
        }
        public Int32 CreationUserID
        {
            get { return mCreationUserID; }
            set { mIsChanges = true; mCreationUserID = value; }
        }
        public Int32 ModificatorUserID
        {
            get { return mModificatorUserID; }
            set { mIsChanges = true; mModificatorUserID = value; }
        }
        public DateTime ModificationDate
        {
            get { return mModificationDate; }
            set { mIsChanges = true; mModificationDate = value; }
        }
        public Int64 SLHeadLeft1Out
        {
            get { return mSLHeadLeft1Out; }
            set { mIsChanges = true; mSLHeadLeft1Out = value; }
        }
        public Int64 SLHeadLeft1IN
        {
            get { return mSLHeadLeft1IN; }
            set { mIsChanges = true; mSLHeadLeft1IN = value; }
        }
        public Int64 SLHeadLeft2Out
        {
            get { return mSLHeadLeft2Out; }
            set { mIsChanges = true; mSLHeadLeft2Out = value; }
        }
        public Int64 SLHeadLeft2IN
        {
            get { return mSLHeadLeft2IN; }
            set { mIsChanges = true; mSLHeadLeft2IN = value; }
        }
        public Int64 SLHeadLeft3Out
        {
            get { return mSLHeadLeft3Out; }
            set { mIsChanges = true; mSLHeadLeft3Out = value; }
        }
        public Int64 SLHeadLeft3IN
        {
            get { return mSLHeadLeft3IN; }
            set { mIsChanges = true; mSLHeadLeft3IN = value; }
        }
        public Int64 SLHeadRight1Out
        {
            get { return mSLHeadRight1Out; }
            set { mIsChanges = true; mSLHeadRight1Out = value; }
        }
        public Int64 SLHeadRight1IN
        {
            get { return mSLHeadRight1IN; }
            set { mIsChanges = true; mSLHeadRight1IN = value; }
        }
        public Int64 SLHeadRight2Out
        {
            get { return mSLHeadRight2Out; }
            set { mIsChanges = true; mSLHeadRight2Out = value; }
        }
        public Int64 SLHeadRight2IN
        {
            get { return mSLHeadRight2IN; }
            set { mIsChanges = true; mSLHeadRight2IN = value; }
        }
        public Int64 SLHeadRight3Out
        {
            get { return mSLHeadRight3Out; }
            set { mIsChanges = true; mSLHeadRight3Out = value; }
        }
        public Int64 SLHeadRight3IN
        {
            get { return mSLHeadRight3IN; }
            set { mIsChanges = true; mSLHeadRight3IN = value; }
        }
        public Int64 SLTrailLeft1Out
        {
            get { return mSLTrailLeft1Out; }
            set { mIsChanges = true; mSLTrailLeft1Out = value; }
        }
        public Int64 SLTrailLeft1IN
        {
            get { return mSLTrailLeft1IN; }
            set { mIsChanges = true; mSLTrailLeft1IN = value; }
        }
        public Int64 SLTrailLeft2Out
        {
            get { return mSLTrailLeft2Out; }
            set { mIsChanges = true; mSLTrailLeft2Out = value; }
        }
        public Int64 SLTrailLeft2IN
        {
            get { return mSLTrailLeft2IN; }
            set { mIsChanges = true; mSLTrailLeft2IN = value; }
        }
        public Int64 SLTrailLeft3Out
        {
            get { return mSLTrailLeft3Out; }
            set { mIsChanges = true; mSLTrailLeft3Out = value; }
        }
        public Int64 SLTrailLeft3IN
        {
            get { return mSLTrailLeft3IN; }
            set { mIsChanges = true; mSLTrailLeft3IN = value; }
        }
        public Int64 SLTrailLeft4Out
        {
            get { return mSLTrailLeft4Out; }
            set { mIsChanges = true; mSLTrailLeft4Out = value; }
        }
        public Int64 SLTrailLeft4IN
        {
            get { return mSLTrailLeft4IN; }
            set { mIsChanges = true; mSLTrailLeft4IN = value; }
        }
        public Int64 SLTrailLeft5Out
        {
            get { return mSLTrailLeft5Out; }
            set { mIsChanges = true; mSLTrailLeft5Out = value; }
        }
        public Int64 SLTrailLeft5IN
        {
            get { return mSLTrailLeft5IN; }
            set { mIsChanges = true; mSLTrailLeft5IN = value; }
        }
        public Int64 SLTrailRight1Out
        {
            get { return mSLTrailRight1Out; }
            set { mIsChanges = true; mSLTrailRight1Out = value; }
        }
        public Int64 SLTrailRight1IN
        {
            get { return mSLTrailRight1IN; }
            set { mIsChanges = true; mSLTrailRight1IN = value; }
        }
        public Int64 SLTrailRight2Out
        {
            get { return mSLTrailRight2Out; }
            set { mIsChanges = true; mSLTrailRight2Out = value; }
        }
        public Int64 SLTrailRight2IN
        {
            get { return mSLTrailRight2IN; }
            set { mIsChanges = true; mSLTrailRight2IN = value; }
        }
        public Int64 SLTrailRight3Out
        {
            get { return mSLTrailRight3Out; }
            set { mIsChanges = true; mSLTrailRight3Out = value; }
        }
        public Int64 SLTrailRight3IN
        {
            get { return mSLTrailRight3IN; }
            set { mIsChanges = true; mSLTrailRight3IN = value; }
        }
        public Int64 SLTrailRight4Out
        {
            get { return mSLTrailRight4Out; }
            set { mIsChanges = true; mSLTrailRight4Out = value; }
        }
        public Int64 SLTrailRight4IN
        {
            get { return mSLTrailRight4IN; }
            set { mIsChanges = true; mSLTrailRight4IN = value; }
        }
        public Int64 SLTrailRight5Out
        {
            get { return mSLTrailRight5Out; }
            set { mIsChanges = true; mSLTrailRight5Out = value; }
        }
        public Int64 SLTrailRight5IN
        {
            get { return mSLTrailRight5IN; }
            set { mIsChanges = true; mSLTrailRight5IN = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CTRCK_Equipment_Items
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarTRCK_Equipment_Items> lstCVarTRCK_Equipment_Items = new List<CVarTRCK_Equipment_Items>();
        public List<CPKTRCK_Equipment_Items> lstDeletedCPKTRCK_Equipment_Items = new List<CPKTRCK_Equipment_Items>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetItem(Int32 ID)
        {
            return DataFill(Convert.ToString(ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarTRCK_Equipment_Items.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListTRCK_Equipment_Items";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].GetItemTRCK_Equipment_Items";
                    Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int));
                    Com.Parameters[0].Value = Convert.ToInt32(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarTRCK_Equipment_Items ObjCVarTRCK_Equipment_Items = new CVarTRCK_Equipment_Items();
                        ObjCVarTRCK_Equipment_Items.ID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarTRCK_Equipment_Items.mTRCK_EquipmentID = Convert.ToInt32(dr["TRCK_EquipmentID"].ToString());
                        ObjCVarTRCK_Equipment_Items.mItemID = Convert.ToInt32(dr["ItemID"].ToString());
                        ObjCVarTRCK_Equipment_Items.mLastTruckCounter = Convert.ToDecimal(dr["LastTruckCounter"].ToString());
                        ObjCVarTRCK_Equipment_Items.mRemarks = Convert.ToString(dr["Remarks"].ToString());
                        ObjCVarTRCK_Equipment_Items.mIsWheel = Convert.ToBoolean(dr["IsWheel"].ToString());
                        ObjCVarTRCK_Equipment_Items.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarTRCK_Equipment_Items.mCreationUserID = Convert.ToInt32(dr["CreationUserID"].ToString());
                        ObjCVarTRCK_Equipment_Items.mModificatorUserID = Convert.ToInt32(dr["ModificatorUserID"].ToString());
                        ObjCVarTRCK_Equipment_Items.mModificationDate = Convert.ToDateTime(dr["ModificationDate"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadLeft1Out = Convert.ToInt64(dr["SLHeadLeft1Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadLeft1IN = Convert.ToInt64(dr["SLHeadLeft1IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadLeft2Out = Convert.ToInt64(dr["SLHeadLeft2Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadLeft2IN = Convert.ToInt64(dr["SLHeadLeft2IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadLeft3Out = Convert.ToInt64(dr["SLHeadLeft3Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadLeft3IN = Convert.ToInt64(dr["SLHeadLeft3IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadRight1Out = Convert.ToInt64(dr["SLHeadRight1Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadRight1IN = Convert.ToInt64(dr["SLHeadRight1IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadRight2Out = Convert.ToInt64(dr["SLHeadRight2Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadRight2IN = Convert.ToInt64(dr["SLHeadRight2IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadRight3Out = Convert.ToInt64(dr["SLHeadRight3Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadRight3IN = Convert.ToInt64(dr["SLHeadRight3IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft1Out = Convert.ToInt64(dr["SLTrailLeft1Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft1IN = Convert.ToInt64(dr["SLTrailLeft1IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft2Out = Convert.ToInt64(dr["SLTrailLeft2Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft2IN = Convert.ToInt64(dr["SLTrailLeft2IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft3Out = Convert.ToInt64(dr["SLTrailLeft3Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft3IN = Convert.ToInt64(dr["SLTrailLeft3IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft4Out = Convert.ToInt64(dr["SLTrailLeft4Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft4IN = Convert.ToInt64(dr["SLTrailLeft4IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft5Out = Convert.ToInt64(dr["SLTrailLeft5Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft5IN = Convert.ToInt64(dr["SLTrailLeft5IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight1Out = Convert.ToInt64(dr["SLTrailRight1Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight1IN = Convert.ToInt64(dr["SLTrailRight1IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight2Out = Convert.ToInt64(dr["SLTrailRight2Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight2IN = Convert.ToInt64(dr["SLTrailRight2IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight3Out = Convert.ToInt64(dr["SLTrailRight3Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight3IN = Convert.ToInt64(dr["SLTrailRight3IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight4Out = Convert.ToInt64(dr["SLTrailRight4Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight4IN = Convert.ToInt64(dr["SLTrailRight4IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight5Out = Convert.ToInt64(dr["SLTrailRight5Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight5IN = Convert.ToInt64(dr["SLTrailRight5IN"].ToString());
                        lstCVarTRCK_Equipment_Items.Add(ObjCVarTRCK_Equipment_Items);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarTRCK_Equipment_Items.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingTRCK_Equipment_Items";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarTRCK_Equipment_Items ObjCVarTRCK_Equipment_Items = new CVarTRCK_Equipment_Items();
                        ObjCVarTRCK_Equipment_Items.ID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarTRCK_Equipment_Items.mTRCK_EquipmentID = Convert.ToInt32(dr["TRCK_EquipmentID"].ToString());
                        ObjCVarTRCK_Equipment_Items.mItemID = Convert.ToInt32(dr["ItemID"].ToString());
                        ObjCVarTRCK_Equipment_Items.mLastTruckCounter = Convert.ToDecimal(dr["LastTruckCounter"].ToString());
                        ObjCVarTRCK_Equipment_Items.mRemarks = Convert.ToString(dr["Remarks"].ToString());
                        ObjCVarTRCK_Equipment_Items.mIsWheel = Convert.ToBoolean(dr["IsWheel"].ToString());
                        ObjCVarTRCK_Equipment_Items.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarTRCK_Equipment_Items.mCreationUserID = Convert.ToInt32(dr["CreationUserID"].ToString());
                        ObjCVarTRCK_Equipment_Items.mModificatorUserID = Convert.ToInt32(dr["ModificatorUserID"].ToString());
                        ObjCVarTRCK_Equipment_Items.mModificationDate = Convert.ToDateTime(dr["ModificationDate"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadLeft1Out = Convert.ToInt64(dr["SLHeadLeft1Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadLeft1IN = Convert.ToInt64(dr["SLHeadLeft1IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadLeft2Out = Convert.ToInt64(dr["SLHeadLeft2Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadLeft2IN = Convert.ToInt64(dr["SLHeadLeft2IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadLeft3Out = Convert.ToInt64(dr["SLHeadLeft3Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadLeft3IN = Convert.ToInt64(dr["SLHeadLeft3IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadRight1Out = Convert.ToInt64(dr["SLHeadRight1Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadRight1IN = Convert.ToInt64(dr["SLHeadRight1IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadRight2Out = Convert.ToInt64(dr["SLHeadRight2Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadRight2IN = Convert.ToInt64(dr["SLHeadRight2IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadRight3Out = Convert.ToInt64(dr["SLHeadRight3Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLHeadRight3IN = Convert.ToInt64(dr["SLHeadRight3IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft1Out = Convert.ToInt64(dr["SLTrailLeft1Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft1IN = Convert.ToInt64(dr["SLTrailLeft1IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft2Out = Convert.ToInt64(dr["SLTrailLeft2Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft2IN = Convert.ToInt64(dr["SLTrailLeft2IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft3Out = Convert.ToInt64(dr["SLTrailLeft3Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft3IN = Convert.ToInt64(dr["SLTrailLeft3IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft4Out = Convert.ToInt64(dr["SLTrailLeft4Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft4IN = Convert.ToInt64(dr["SLTrailLeft4IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft5Out = Convert.ToInt64(dr["SLTrailLeft5Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailLeft5IN = Convert.ToInt64(dr["SLTrailLeft5IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight1Out = Convert.ToInt64(dr["SLTrailRight1Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight1IN = Convert.ToInt64(dr["SLTrailRight1IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight2Out = Convert.ToInt64(dr["SLTrailRight2Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight2IN = Convert.ToInt64(dr["SLTrailRight2IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight3Out = Convert.ToInt64(dr["SLTrailRight3Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight3IN = Convert.ToInt64(dr["SLTrailRight3IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight4Out = Convert.ToInt64(dr["SLTrailRight4Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight4IN = Convert.ToInt64(dr["SLTrailRight4IN"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight5Out = Convert.ToInt64(dr["SLTrailRight5Out"].ToString());
                        ObjCVarTRCK_Equipment_Items.mSLTrailRight5IN = Convert.ToInt64(dr["SLTrailRight5IN"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarTRCK_Equipment_Items.Add(ObjCVarTRCK_Equipment_Items);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            tr = Con.BeginTransaction(IsolationLevel.Serializable);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DeleteListTRCK_Equipment_Items";
                else
                    Com.CommandText = "[dbo].UpdateListTRCK_Equipment_Items";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKTRCK_Equipment_Items> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DeleteItemTRCK_Equipment_Items";
                Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int));
                foreach (CPKTRCK_Equipment_Items ObjCPKTRCK_Equipment_Items in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt32(ObjCPKTRCK_Equipment_Items.ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarTRCK_Equipment_Items> SaveList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.Parameters.Add(new SqlParameter("@TRCK_EquipmentID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ItemID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@LastTruckCounter", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@Remarks", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@IsWheel", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@CreationDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@CreationUserID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ModificatorUserID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ModificationDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@SLHeadLeft1Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLHeadLeft1IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLHeadLeft2Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLHeadLeft2IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLHeadLeft3Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLHeadLeft3IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLHeadRight1Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLHeadRight1IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLHeadRight2Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLHeadRight2IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLHeadRight3Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLHeadRight3IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailLeft1Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailLeft1IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailLeft2Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailLeft2IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailLeft3Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailLeft3IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailLeft4Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailLeft4IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailLeft5Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailLeft5IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailRight1Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailRight1IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailRight2Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailRight2IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailRight3Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailRight3IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailRight4Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailRight4IN", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailRight5Out", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SLTrailRight5IN", SqlDbType.BigInt));
                SqlParameter paraID = Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, "ID", DataRowVersion.Default, null));
                foreach (CVarTRCK_Equipment_Items ObjCVarTRCK_Equipment_Items in SaveList)
                {
                    if (ObjCVarTRCK_Equipment_Items.mIsChanges == true)
                    {
                        if (ObjCVarTRCK_Equipment_Items.ID == 0)
                        {
                            Com.CommandText = "[dbo].InsertItemTRCK_Equipment_Items";
                            paraID.Direction = ParameterDirection.Output;
                        }
                        else if (ObjCVarTRCK_Equipment_Items.ID != 0)
                        {
                            Com.CommandText = "[dbo].UpdateItemTRCK_Equipment_Items";
                            paraID.Direction = ParameterDirection.Input;
                        }
                        BeginTrans(Com, Con);
                        if (ObjCVarTRCK_Equipment_Items.ID != 0)
                        {
                            Com.Parameters["@ID"].Value = ObjCVarTRCK_Equipment_Items.ID;
                        }
                        Com.Parameters["@TRCK_EquipmentID"].Value = ObjCVarTRCK_Equipment_Items.TRCK_EquipmentID;
                        Com.Parameters["@ItemID"].Value = ObjCVarTRCK_Equipment_Items.ItemID;
                        Com.Parameters["@LastTruckCounter"].Value = ObjCVarTRCK_Equipment_Items.LastTruckCounter;
                        Com.Parameters["@Remarks"].Value = ObjCVarTRCK_Equipment_Items.Remarks;
                        Com.Parameters["@IsWheel"].Value = ObjCVarTRCK_Equipment_Items.IsWheel;
                        Com.Parameters["@CreationDate"].Value = ObjCVarTRCK_Equipment_Items.CreationDate;
                        Com.Parameters["@CreationUserID"].Value = ObjCVarTRCK_Equipment_Items.CreationUserID;
                        Com.Parameters["@ModificatorUserID"].Value = ObjCVarTRCK_Equipment_Items.ModificatorUserID;
                        Com.Parameters["@ModificationDate"].Value = ObjCVarTRCK_Equipment_Items.ModificationDate;
                        Com.Parameters["@SLHeadLeft1Out"].Value = ObjCVarTRCK_Equipment_Items.SLHeadLeft1Out;
                        Com.Parameters["@SLHeadLeft1IN"].Value = ObjCVarTRCK_Equipment_Items.SLHeadLeft1IN;
                        Com.Parameters["@SLHeadLeft2Out"].Value = ObjCVarTRCK_Equipment_Items.SLHeadLeft2Out;
                        Com.Parameters["@SLHeadLeft2IN"].Value = ObjCVarTRCK_Equipment_Items.SLHeadLeft2IN;
                        Com.Parameters["@SLHeadLeft3Out"].Value = ObjCVarTRCK_Equipment_Items.SLHeadLeft3Out;
                        Com.Parameters["@SLHeadLeft3IN"].Value = ObjCVarTRCK_Equipment_Items.SLHeadLeft3IN;
                        Com.Parameters["@SLHeadRight1Out"].Value = ObjCVarTRCK_Equipment_Items.SLHeadRight1Out;
                        Com.Parameters["@SLHeadRight1IN"].Value = ObjCVarTRCK_Equipment_Items.SLHeadRight1IN;
                        Com.Parameters["@SLHeadRight2Out"].Value = ObjCVarTRCK_Equipment_Items.SLHeadRight2Out;
                        Com.Parameters["@SLHeadRight2IN"].Value = ObjCVarTRCK_Equipment_Items.SLHeadRight2IN;
                        Com.Parameters["@SLHeadRight3Out"].Value = ObjCVarTRCK_Equipment_Items.SLHeadRight3Out;
                        Com.Parameters["@SLHeadRight3IN"].Value = ObjCVarTRCK_Equipment_Items.SLHeadRight3IN;
                        Com.Parameters["@SLTrailLeft1Out"].Value = ObjCVarTRCK_Equipment_Items.SLTrailLeft1Out;
                        Com.Parameters["@SLTrailLeft1IN"].Value = ObjCVarTRCK_Equipment_Items.SLTrailLeft1IN;
                        Com.Parameters["@SLTrailLeft2Out"].Value = ObjCVarTRCK_Equipment_Items.SLTrailLeft2Out;
                        Com.Parameters["@SLTrailLeft2IN"].Value = ObjCVarTRCK_Equipment_Items.SLTrailLeft2IN;
                        Com.Parameters["@SLTrailLeft3Out"].Value = ObjCVarTRCK_Equipment_Items.SLTrailLeft3Out;
                        Com.Parameters["@SLTrailLeft3IN"].Value = ObjCVarTRCK_Equipment_Items.SLTrailLeft3IN;
                        Com.Parameters["@SLTrailLeft4Out"].Value = ObjCVarTRCK_Equipment_Items.SLTrailLeft4Out;
                        Com.Parameters["@SLTrailLeft4IN"].Value = ObjCVarTRCK_Equipment_Items.SLTrailLeft4IN;
                        Com.Parameters["@SLTrailLeft5Out"].Value = ObjCVarTRCK_Equipment_Items.SLTrailLeft5Out;
                        Com.Parameters["@SLTrailLeft5IN"].Value = ObjCVarTRCK_Equipment_Items.SLTrailLeft5IN;
                        Com.Parameters["@SLTrailRight1Out"].Value = ObjCVarTRCK_Equipment_Items.SLTrailRight1Out;
                        Com.Parameters["@SLTrailRight1IN"].Value = ObjCVarTRCK_Equipment_Items.SLTrailRight1IN;
                        Com.Parameters["@SLTrailRight2Out"].Value = ObjCVarTRCK_Equipment_Items.SLTrailRight2Out;
                        Com.Parameters["@SLTrailRight2IN"].Value = ObjCVarTRCK_Equipment_Items.SLTrailRight2IN;
                        Com.Parameters["@SLTrailRight3Out"].Value = ObjCVarTRCK_Equipment_Items.SLTrailRight3Out;
                        Com.Parameters["@SLTrailRight3IN"].Value = ObjCVarTRCK_Equipment_Items.SLTrailRight3IN;
                        Com.Parameters["@SLTrailRight4Out"].Value = ObjCVarTRCK_Equipment_Items.SLTrailRight4Out;
                        Com.Parameters["@SLTrailRight4IN"].Value = ObjCVarTRCK_Equipment_Items.SLTrailRight4IN;
                        Com.Parameters["@SLTrailRight5Out"].Value = ObjCVarTRCK_Equipment_Items.SLTrailRight5Out;
                        Com.Parameters["@SLTrailRight5IN"].Value = ObjCVarTRCK_Equipment_Items.SLTrailRight5IN;
                        EndTrans(Com, Con);
                        if (ObjCVarTRCK_Equipment_Items.ID == 0)
                        {
                            ObjCVarTRCK_Equipment_Items.ID = Convert.ToInt32(Com.Parameters["@ID"].Value);
                        }
                        ObjCVarTRCK_Equipment_Items.mIsChanges = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                if (tr != null)
                    tr.Rollback();
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }

}
