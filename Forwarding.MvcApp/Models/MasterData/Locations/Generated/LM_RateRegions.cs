using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.MasterData.Locations.Generated
{
    [Serializable]
    public class CPKLM_RateRegions
    {
        #region "variables"
        private Int32 mID;
        #endregion

        #region "Methods"
        public Int32 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarLM_RateRegions : CPKLM_RateRegions
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int32 mCityIDFrom;
        internal Int32 mRegionIDFrom;
        internal Int32 mCityIDTo;
        internal Int32 mRegionIDTo;
        internal Decimal mCost;
        internal Decimal mSelling;
        internal String mRemarks;
        internal DateTime mcreationDate;
        internal Int32 mCreatorUserID;
        internal Int32 mRateID;
        internal Int32 mPackageTypeID;
        internal Decimal mQuantity;
        #endregion

        #region "Methods"
        public Int32 CityIDFrom
        {
            get { return mCityIDFrom; }
            set { mIsChanges = true; mCityIDFrom = value; }
        }
        public Int32 RegionIDFrom
        {
            get { return mRegionIDFrom; }
            set { mIsChanges = true; mRegionIDFrom = value; }
        }
        public Int32 CityIDTo
        {
            get { return mCityIDTo; }
            set { mIsChanges = true; mCityIDTo = value; }
        }
        public Int32 RegionIDTo
        {
            get { return mRegionIDTo; }
            set { mIsChanges = true; mRegionIDTo = value; }
        }
        public Decimal Cost
        {
            get { return mCost; }
            set { mIsChanges = true; mCost = value; }
        }
        public Decimal Selling
        {
            get { return mSelling; }
            set { mIsChanges = true; mSelling = value; }
        }
        public String Remarks
        {
            get { return mRemarks; }
            set { mIsChanges = true; mRemarks = value; }
        }
        public DateTime creationDate
        {
            get { return mcreationDate; }
            set { mIsChanges = true; mcreationDate = value; }
        }
        public Int32 CreatorUserID
        {
            get { return mCreatorUserID; }
            set { mIsChanges = true; mCreatorUserID = value; }
        }
        public Int32 RateID
        {
            get { return mRateID; }
            set { mIsChanges = true; mRateID = value; }
        }
        public Int32 PackageTypeID
        {
            get { return mPackageTypeID; }
            set { mIsChanges = true; mPackageTypeID = value; }
        }
        public Decimal Quantity
        {
            get { return mQuantity; }
            set { mIsChanges = true; mQuantity = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CLM_RateRegions
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarLM_RateRegions> lstCVarLM_RateRegions = new List<CVarLM_RateRegions>();
        public List<CPKLM_RateRegions> lstDeletedCPKLM_RateRegions = new List<CPKLM_RateRegions>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetItem(Int32 ID)
        {
            return DataFill(Convert.ToString(ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarLM_RateRegions.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.VarChar));
                    Com.CommandText = "[dbo].GetListLM_RateRegions";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].GetItemLM_RateRegions";
                    Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int));
                    Com.Parameters[0].Value = Convert.ToInt32(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarLM_RateRegions ObjCVarLM_RateRegions = new CVarLM_RateRegions();
                        ObjCVarLM_RateRegions.ID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarLM_RateRegions.mCityIDFrom = Convert.ToInt32(dr["CityIDFrom"].ToString());
                        ObjCVarLM_RateRegions.mRegionIDFrom = Convert.ToInt32(dr["RegionIDFrom"].ToString());
                        ObjCVarLM_RateRegions.mCityIDTo = Convert.ToInt32(dr["CityIDTo"].ToString());
                        ObjCVarLM_RateRegions.mRegionIDTo = Convert.ToInt32(dr["RegionIDTo"].ToString());
                        ObjCVarLM_RateRegions.mCost = Convert.ToDecimal(dr["Cost"].ToString());
                        ObjCVarLM_RateRegions.mSelling = Convert.ToDecimal(dr["Selling"].ToString());
                        ObjCVarLM_RateRegions.mRemarks = Convert.ToString(dr["Remarks"].ToString());
                        ObjCVarLM_RateRegions.mcreationDate = Convert.ToDateTime(dr["creationDate"].ToString());
                        ObjCVarLM_RateRegions.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
                        ObjCVarLM_RateRegions.mRateID = Convert.ToInt32(dr["RateID"].ToString());
                        ObjCVarLM_RateRegions.mPackageTypeID = Convert.ToInt32(dr["PackageTypeID"].ToString());
                        ObjCVarLM_RateRegions.mQuantity = Convert.ToDecimal(dr["Quantity"].ToString());
                        lstCVarLM_RateRegions.Add(ObjCVarLM_RateRegions);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarLM_RateRegions.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingLM_RateRegions";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarLM_RateRegions ObjCVarLM_RateRegions = new CVarLM_RateRegions();
                        ObjCVarLM_RateRegions.ID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarLM_RateRegions.mCityIDFrom = Convert.ToInt32(dr["CityIDFrom"].ToString());
                        ObjCVarLM_RateRegions.mRegionIDFrom = Convert.ToInt32(dr["RegionIDFrom"].ToString());
                        ObjCVarLM_RateRegions.mCityIDTo = Convert.ToInt32(dr["CityIDTo"].ToString());
                        ObjCVarLM_RateRegions.mRegionIDTo = Convert.ToInt32(dr["RegionIDTo"].ToString());
                        ObjCVarLM_RateRegions.mCost = Convert.ToDecimal(dr["Cost"].ToString());
                        ObjCVarLM_RateRegions.mSelling = Convert.ToDecimal(dr["Selling"].ToString());
                        ObjCVarLM_RateRegions.mRemarks = Convert.ToString(dr["Remarks"].ToString());
                        ObjCVarLM_RateRegions.mcreationDate = Convert.ToDateTime(dr["creationDate"].ToString());
                        ObjCVarLM_RateRegions.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
                        ObjCVarLM_RateRegions.mRateID = Convert.ToInt32(dr["RateID"].ToString());
                        ObjCVarLM_RateRegions.mPackageTypeID = Convert.ToInt32(dr["PackageTypeID"].ToString());
                        ObjCVarLM_RateRegions.mQuantity = Convert.ToDecimal(dr["Quantity"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarLM_RateRegions.Add(ObjCVarLM_RateRegions);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            tr = Con.BeginTransaction(IsolationLevel.Serializable);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DeleteListLM_RateRegions";
                else
                    Com.CommandText = "[dbo].UpdateListLM_RateRegions";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.VarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKLM_RateRegions> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DeleteItemLM_RateRegions";
                Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int));
                foreach (CPKLM_RateRegions ObjCPKLM_RateRegions in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt32(ObjCPKLM_RateRegions.ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarLM_RateRegions> SaveList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.Parameters.Add(new SqlParameter("@CityIDFrom", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@RegionIDFrom", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@CityIDTo", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@RegionIDTo", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Cost", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@Selling", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@Remarks", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@creationDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@CreatorUserID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@RateID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PackageTypeID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Quantity", SqlDbType.Decimal));
                SqlParameter paraID = Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, "ID", DataRowVersion.Default, null));
                foreach (CVarLM_RateRegions ObjCVarLM_RateRegions in SaveList)
                {
                    if (ObjCVarLM_RateRegions.mIsChanges == true)
                    {
                        if (ObjCVarLM_RateRegions.ID == 0)
                        {
                            Com.CommandText = "[dbo].InsertItemLM_RateRegions";
                            paraID.Direction = ParameterDirection.Output;
                        }
                        else if (ObjCVarLM_RateRegions.ID != 0)
                        {
                            Com.CommandText = "[dbo].UpdateItemLM_RateRegions";
                            paraID.Direction = ParameterDirection.Input;
                        }
                        BeginTrans(Com, Con);
                        if (ObjCVarLM_RateRegions.ID != 0)
                        {
                            Com.Parameters["@ID"].Value = ObjCVarLM_RateRegions.ID;
                        }
                        Com.Parameters["@CityIDFrom"].Value = ObjCVarLM_RateRegions.CityIDFrom;
                        Com.Parameters["@RegionIDFrom"].Value = ObjCVarLM_RateRegions.RegionIDFrom;
                        Com.Parameters["@CityIDTo"].Value = ObjCVarLM_RateRegions.CityIDTo;
                        Com.Parameters["@RegionIDTo"].Value = ObjCVarLM_RateRegions.RegionIDTo;
                        Com.Parameters["@Cost"].Value = ObjCVarLM_RateRegions.Cost;
                        Com.Parameters["@Selling"].Value = ObjCVarLM_RateRegions.Selling;
                        Com.Parameters["@Remarks"].Value = ObjCVarLM_RateRegions.Remarks;
                        Com.Parameters["@creationDate"].Value = ObjCVarLM_RateRegions.creationDate;
                        Com.Parameters["@CreatorUserID"].Value = ObjCVarLM_RateRegions.CreatorUserID;
                        Com.Parameters["@RateID"].Value = ObjCVarLM_RateRegions.RateID;
                        Com.Parameters["@PackageTypeID"].Value = ObjCVarLM_RateRegions.PackageTypeID;
                        Com.Parameters["@Quantity"].Value = ObjCVarLM_RateRegions.Quantity;
                        EndTrans(Com, Con);
                        if (ObjCVarLM_RateRegions.ID == 0)
                        {
                            ObjCVarLM_RateRegions.ID = Convert.ToInt32(Com.Parameters["@ID"].Value);
                        }
                        ObjCVarLM_RateRegions.mIsChanges = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                if (tr != null)
                    tr.Rollback();
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }
}
