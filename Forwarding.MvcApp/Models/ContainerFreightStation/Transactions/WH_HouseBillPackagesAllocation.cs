using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.ContainerFreightStation.Transactions
{
	[Serializable]
	public class CPKWH_HouseBillPackagesAllocation
	{
		#region "variables"
		private Int64 mID;
		#endregion

		#region "Methods"
		public Int64 ID
		{
			get { return mID; }
			set { mID = value; }
		}
		#endregion
	}
	[Serializable]
	public partial class CVarWH_HouseBillPackagesAllocation : CPKWH_HouseBillPackagesAllocation
	{
		#region "variables"
		internal Boolean mIsChanges = false;
		internal Int64 mHouseBillID;
		internal Int64 mOperationContainersAndPackageID;
		internal Int32 mWarehouseID;
		internal Int32 mAreaID;
		internal Int32 mRowID;
		internal Int32 mRowLocationID;
		internal Boolean mHasDamage;
		internal String mDamageDescription;
		internal String mRemarks;
		internal Int32 mAddedBy;
		internal DateTime mAddedAt;
		internal Int32 mUpdatedBy;
		internal DateTime mUpdatedAt;
		#endregion

		#region "Methods"
		public Int64 HouseBillID
		{
			get { return mHouseBillID; }
			set { mIsChanges = true ;mHouseBillID = value; }
		}
		public Int64 OperationContainersAndPackageID
		{
			get { return mOperationContainersAndPackageID; }
			set { mIsChanges = true ;mOperationContainersAndPackageID = value; }
		}
		public Int32 WarehouseID
		{
			get { return mWarehouseID; }
			set { mIsChanges = true ;mWarehouseID = value; }
		}
		public Int32 AreaID
		{
			get { return mAreaID; }
			set { mIsChanges = true ;mAreaID = value; }
		}
		public Int32 RowID
		{
			get { return mRowID; }
			set { mIsChanges = true ;mRowID = value; }
		}
		public Int32 RowLocationID
		{
			get { return mRowLocationID; }
			set { mIsChanges = true ;mRowLocationID = value; }
		}
		public Boolean HasDamage
		{
			get { return mHasDamage; }
			set { mIsChanges = true ;mHasDamage = value; }
		}
		public String DamageDescription
		{
			get { return mDamageDescription; }
			set { mIsChanges = true ;mDamageDescription = value; }
		}
		public String Remarks
		{
			get { return mRemarks; }
			set { mIsChanges = true ;mRemarks = value; }
		}
		public Int32 AddedBy
		{
			get { return mAddedBy; }
			set { mIsChanges = true ;mAddedBy = value; }
		}
		public DateTime AddedAt
		{
			get { return mAddedAt; }
			set { mIsChanges = true ;mAddedAt = value; }
		}
		public Int32 UpdatedBy
		{
			get { return mUpdatedBy; }
			set { mIsChanges = true ;mUpdatedBy = value; }
		}
		public DateTime UpdatedAt
		{
			get { return mUpdatedAt; }
			set { mIsChanges = true ;mUpdatedAt = value; }
		}
		#endregion

		#region Functions
		public Boolean GetIsChange()
		{
			return mIsChanges;
		}
		public void SetIsChange(Boolean IsChange)
		{
			mIsChanges = IsChange;
		}
		#endregion
	}

	public partial class CWH_HouseBillPackagesAllocation
	{
		#region "variables"
		/*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
		private SqlTransaction tr;
		public List<CVarWH_HouseBillPackagesAllocation> lstCVarWH_HouseBillPackagesAllocation= new List<CVarWH_HouseBillPackagesAllocation>();
		public List<CPKWH_HouseBillPackagesAllocation> lstDeletedCPKWH_HouseBillPackagesAllocation = new List<CPKWH_HouseBillPackagesAllocation>();
		#endregion

		#region "Select Methods"
		public Exception GetList(string WhereClause)
		{
			return DataFill(WhereClause,true);
		}
		public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
		{
			return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
		}
		public Exception GetItem(Int64 ID)
		{
			return DataFill(Convert.ToString(ID), false);
		}
		private Exception DataFill(string Param , Boolean IsList)
		{
			Exception Exp = null;
			SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
			SqlCommand Com;
			SqlDataReader dr;
			lstCVarWH_HouseBillPackagesAllocation.Clear();

			try
			{
				Con.Open();
				tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
				Com = new SqlCommand();
				Com.CommandType = CommandType.StoredProcedure;
				if (IsList == true)
				{
					Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
					Com.CommandText = "[dbo].GetListWH_HouseBillPackagesAllocation";
					Com.Parameters[0].Value = Param;
				}
				else
				{
					Com.CommandText = "[dbo].GetItemWH_HouseBillPackagesAllocation";
					Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
					 Com.Parameters[0].Value = Convert.ToInt64(Param);
				}
				Com.Transaction = tr;
				Com.Connection = Con;
				dr = Com.ExecuteReader();
				try
				{
					while (dr.Read())
					{
						/*Start DataReader*/
						CVarWH_HouseBillPackagesAllocation ObjCVarWH_HouseBillPackagesAllocation = new CVarWH_HouseBillPackagesAllocation();
						ObjCVarWH_HouseBillPackagesAllocation.ID = Convert.ToInt64(dr["ID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mHouseBillID = Convert.ToInt64(dr["HouseBillID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mOperationContainersAndPackageID = Convert.ToInt64(dr["OperationContainersAndPackageID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mWarehouseID = Convert.ToInt32(dr["WarehouseID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mAreaID = Convert.ToInt32(dr["AreaID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mRowID = Convert.ToInt32(dr["RowID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mRowLocationID = Convert.ToInt32(dr["RowLocationID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mHasDamage = Convert.ToBoolean(dr["HasDamage"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mDamageDescription = Convert.ToString(dr["DamageDescription"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mRemarks = Convert.ToString(dr["Remarks"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mAddedBy = Convert.ToInt32(dr["AddedBy"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mAddedAt = Convert.ToDateTime(dr["AddedAt"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mUpdatedBy = Convert.ToInt32(dr["UpdatedBy"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mUpdatedAt = Convert.ToDateTime(dr["UpdatedAt"].ToString());
						lstCVarWH_HouseBillPackagesAllocation.Add(ObjCVarWH_HouseBillPackagesAllocation);
					}
				}
				catch (Exception ex)
				{
					Exp = ex;
				}
				finally
				{
					if (dr != null)
					{
						dr.Close();
						dr.Dispose();
					}
				}
				tr.Commit();
			}
			catch ( Exception ex)
			{
				Exp = ex;
			}
			finally
			{
				Con.Close();
				Con.Dispose();
			}
			return Exp;
		}

		private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
		{
			Exception Exp = null;
			TotRecs = 0;
			SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
			SqlCommand Com;
			SqlDataReader dr;
			lstCVarWH_HouseBillPackagesAllocation.Clear();

			try
			{
				Con.Open();
				tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
				Com = new SqlCommand();
				Com.CommandType = CommandType.StoredProcedure;
				Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
				Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
				Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
				Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
				Com.CommandText = "[dbo].GetListPagingWH_HouseBillPackagesAllocation";
				Com.Parameters[0].Value = PageSize;
				Com.Parameters[1].Value = PageNumber;
				Com.Parameters[2].Value = WhereClause;
				Com.Parameters[3].Value = OrderBy;
				Com.Transaction = tr;
				Com.Connection = Con;
				dr = Com.ExecuteReader();
				try
				{
					while (dr.Read())
					{
						/*Start DataReader*/
						CVarWH_HouseBillPackagesAllocation ObjCVarWH_HouseBillPackagesAllocation = new CVarWH_HouseBillPackagesAllocation();
						ObjCVarWH_HouseBillPackagesAllocation.ID = Convert.ToInt64(dr["ID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mHouseBillID = Convert.ToInt64(dr["HouseBillID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mOperationContainersAndPackageID = Convert.ToInt64(dr["OperationContainersAndPackageID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mWarehouseID = Convert.ToInt32(dr["WarehouseID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mAreaID = Convert.ToInt32(dr["AreaID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mRowID = Convert.ToInt32(dr["RowID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mRowLocationID = Convert.ToInt32(dr["RowLocationID"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mHasDamage = Convert.ToBoolean(dr["HasDamage"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mDamageDescription = Convert.ToString(dr["DamageDescription"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mRemarks = Convert.ToString(dr["Remarks"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mAddedBy = Convert.ToInt32(dr["AddedBy"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mAddedAt = Convert.ToDateTime(dr["AddedAt"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mUpdatedBy = Convert.ToInt32(dr["UpdatedBy"].ToString());
						ObjCVarWH_HouseBillPackagesAllocation.mUpdatedAt = Convert.ToDateTime(dr["UpdatedAt"].ToString());
						TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
						lstCVarWH_HouseBillPackagesAllocation.Add(ObjCVarWH_HouseBillPackagesAllocation);
					}
				}
				catch (Exception ex)
				{
					Exp = ex;
				}
				finally
				{
					if (dr != null)
					{
						dr.Close();
						dr.Dispose();
					}
				}
				tr.Commit();
			}
			catch ( Exception ex)
			{
				Exp = ex;
			}
			finally
			{
				Con.Close();
				Con.Dispose();
			}
			return Exp;
		}

		#endregion
			#region "Common Methods"
			private void BeginTrans(SqlCommand Com,SqlConnection Con)
				{

					tr = Con.BeginTransaction(IsolationLevel.Serializable);
					Com.CommandType = CommandType.StoredProcedure;
				}

			private void EndTrans(SqlCommand Com,SqlConnection Con)
				{

					Com.Transaction = tr;
					Com.Connection = Con;
					Com.ExecuteNonQuery();
					tr.Commit();
				}

			#endregion
			#region "Set List Method"
			private Exception SetList(string WhereClause,Boolean IsDelete)
				{

					Exception Exp = null;
					SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
					SqlCommand Com;
					try
						{
							Con.Open();
							Com = new SqlCommand();
							if(IsDelete == true)
							Com.CommandText = "[dbo].DeleteListWH_HouseBillPackagesAllocation";
							else
							Com.CommandText = "[dbo].UpdateListWH_HouseBillPackagesAllocation";
								Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
									BeginTrans(Com,Con);
								Com.Parameters[0].Value = WhereClause;
									EndTrans(Com,Con);
						}
					catch ( Exception ex)
						{
							Exp = ex;
						}
					finally
						{
							Con.Close();
							Con.Dispose();
						}
					return Exp;
				}

			#endregion
			#region "Delete Methods"
			public Exception DeleteItem(List<CPKWH_HouseBillPackagesAllocation> DeleteList)
				{

					Exception Exp = null;
					SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
					SqlCommand Com;
					try
						{
							Con.Open();
							Com = new SqlCommand();
							Com.CommandText = "[dbo].DeleteItemWH_HouseBillPackagesAllocation";
							Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
							foreach (CPKWH_HouseBillPackagesAllocation ObjCPKWH_HouseBillPackagesAllocation in DeleteList)
								{
									BeginTrans(Com,Con);
									 Com.Parameters[0].Value = Convert.ToInt64(ObjCPKWH_HouseBillPackagesAllocation.ID);
									EndTrans(Com,Con);
								}
						}
					catch ( Exception ex)
						{
							Exp =ex;
						}
					finally
						{
							Con.Close();
							Con.Dispose();
							DeleteList.Clear();
						}
					return Exp;
				}

			public Exception DeleteList(string WhereClause)
				{

					return SetList(WhereClause,true);
				}

			#endregion
			#region "Save Methods"
			public Exception SaveMethod(List<CVarWH_HouseBillPackagesAllocation> SaveList)
				{
					Exception Exp = null;
					SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
					SqlCommand Com;
					try
						{
							Con.Open();
							Com = new SqlCommand();
							Com.Parameters.Add(new SqlParameter("@HouseBillID", SqlDbType.BigInt));
							Com.Parameters.Add(new SqlParameter("@OperationContainersAndPackageID", SqlDbType.BigInt));
							Com.Parameters.Add(new SqlParameter("@WarehouseID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@AreaID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@RowID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@RowLocationID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@HasDamage", SqlDbType.Bit));
							Com.Parameters.Add(new SqlParameter("@DamageDescription", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@Remarks", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@AddedBy", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@AddedAt", SqlDbType.DateTime));
							Com.Parameters.Add(new SqlParameter("@UpdatedBy", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@UpdatedAt", SqlDbType.DateTime));
								SqlParameter paraID = Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt , 0,ParameterDirection.Input,false,0,0,"ID",DataRowVersion.Default,null));
							foreach (CVarWH_HouseBillPackagesAllocation ObjCVarWH_HouseBillPackagesAllocation in SaveList)
								{
							if(ObjCVarWH_HouseBillPackagesAllocation.mIsChanges == true)
								{
									if(ObjCVarWH_HouseBillPackagesAllocation.ID == 0)
									{
										Com.CommandText = "[dbo].InsertItemWH_HouseBillPackagesAllocation";
								paraID.Direction = ParameterDirection.Output;
									}
								else if(ObjCVarWH_HouseBillPackagesAllocation.ID!=0)
									{
										Com.CommandText = "[dbo].UpdateItemWH_HouseBillPackagesAllocation";
								paraID.Direction = ParameterDirection.Input;
									}
										BeginTrans(Com,Con);
								if(ObjCVarWH_HouseBillPackagesAllocation.ID!=0)
									{
								Com.Parameters["@ID"].Value =ObjCVarWH_HouseBillPackagesAllocation.ID;
									}
								Com.Parameters["@HouseBillID"].Value =ObjCVarWH_HouseBillPackagesAllocation.HouseBillID;
								Com.Parameters["@OperationContainersAndPackageID"].Value =ObjCVarWH_HouseBillPackagesAllocation.OperationContainersAndPackageID;
								Com.Parameters["@WarehouseID"].Value =ObjCVarWH_HouseBillPackagesAllocation.WarehouseID;
								Com.Parameters["@AreaID"].Value =ObjCVarWH_HouseBillPackagesAllocation.AreaID;
								Com.Parameters["@RowID"].Value =ObjCVarWH_HouseBillPackagesAllocation.RowID;
								Com.Parameters["@RowLocationID"].Value =ObjCVarWH_HouseBillPackagesAllocation.RowLocationID;
								Com.Parameters["@HasDamage"].Value =ObjCVarWH_HouseBillPackagesAllocation.HasDamage;
								Com.Parameters["@DamageDescription"].Value =ObjCVarWH_HouseBillPackagesAllocation.DamageDescription;
								Com.Parameters["@Remarks"].Value =ObjCVarWH_HouseBillPackagesAllocation.Remarks;
								Com.Parameters["@AddedBy"].Value =ObjCVarWH_HouseBillPackagesAllocation.AddedBy;

								Com.Parameters["@AddedAt"].Value =ObjCVarWH_HouseBillPackagesAllocation.AddedAt;
								Com.Parameters["@UpdatedBy"].Value =ObjCVarWH_HouseBillPackagesAllocation.UpdatedBy;
								Com.Parameters["@UpdatedAt"].Value =ObjCVarWH_HouseBillPackagesAllocation.UpdatedAt;
										EndTrans(Com,Con);
								if(ObjCVarWH_HouseBillPackagesAllocation.ID==0)
										{
								ObjCVarWH_HouseBillPackagesAllocation.ID = Convert.ToInt64(Com.Parameters["@ID"].Value);
										}
									ObjCVarWH_HouseBillPackagesAllocation.mIsChanges = false;
									}
								}
						}
					catch ( Exception ex)
						{
							Exp = ex;
							if (tr != null)
								tr.Rollback();
						}
					finally
						{
							Con.Close();
							Con.Dispose();
						}
					return Exp;
				}
			#endregion
			#region "Update Methods"
			public Exception UpdateList(string UpdateClause)
				{

					return SetList(UpdateClause,false);
				}

			#endregion
		}
}

