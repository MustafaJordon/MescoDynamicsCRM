using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.Accounting.Transactions.Generated
{
    [Serializable]
    public partial class CVarvwA_Allocationpayable
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int64 mID;
        internal String mCode;
        internal DateTime mDate;
        internal Decimal mCostPrice;
        internal Decimal mAmountWithoutVAT;
        internal Decimal mInvoiceTotal;
        internal String mCurrencyCode;
        internal Decimal mExchangeRate;
        internal String mOperationCode;
        internal Int64 mMasterOperationID;
        internal Int32 mPartnerTypeID;
        internal String mPartnerName;
        internal Int32 mPartnerID;
        internal String mClientName;
        internal String mPyableDebit;
        internal Int32 mPyableDebitType;
        internal Decimal mPaidAmount;
        internal Decimal mRemainingAmount;
        internal Decimal mQty;
        internal Int32 mCurrencyID;
        #endregion

        #region "Methods"
        public Int64 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        public String Code
        {
            get { return mCode; }
            set { mCode = value; }
        }
        public DateTime Date
        {
            get { return mDate; }
            set { mDate = value; }
        }
        public Decimal CostPrice
        {
            get { return mCostPrice; }
            set { mCostPrice = value; }
        }
        public Decimal AmountWithoutVAT
        {
            get { return mAmountWithoutVAT; }
            set { mAmountWithoutVAT = value; }
        }
        public Decimal InvoiceTotal
        {
            get { return mInvoiceTotal; }
            set { mInvoiceTotal = value; }
        }
        public String CurrencyCode
        {
            get { return mCurrencyCode; }
            set { mCurrencyCode = value; }
        }
        public Decimal ExchangeRate
        {
            get { return mExchangeRate; }
            set { mExchangeRate = value; }
        }
        public String OperationCode
        {
            get { return mOperationCode; }
            set { mOperationCode = value; }
        }
        public Int64 MasterOperationID
        {
            get { return mMasterOperationID; }
            set { mMasterOperationID = value; }
        }
        public Int32 PartnerTypeID
        {
            get { return mPartnerTypeID; }
            set { mPartnerTypeID = value; }
        }
        public String PartnerName
        {
            get { return mPartnerName; }
            set { mPartnerName = value; }
        }
        public Int32 PartnerID
        {
            get { return mPartnerID; }
            set { mPartnerID = value; }
        }
        public String ClientName
        {
            get { return mClientName; }
            set { mClientName = value; }
        }
        public String PyableDebit
        {
            get { return mPyableDebit; }
            set { mPyableDebit = value; }
        }
        public Int32 PyableDebitType
        {
            get { return mPyableDebitType; }
            set { mPyableDebitType = value; }
        }
        public Decimal PaidAmount
        {
            get { return mPaidAmount; }
            set { mPaidAmount = value; }
        }
        public Decimal RemainingAmount
        {
            get { return mRemainingAmount; }
            set { mRemainingAmount = value; }
        }
        public Decimal Qty
        {
            get { return mQty; }
            set { mQty = value; }
        }
        public Int32 CurrencyID
        {
            get { return mCurrencyID; }
            set { mCurrencyID = value; }
        }
        #endregion
    }

    public partial class CvwA_Allocationpayable
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarvwA_Allocationpayable> lstCVarvwA_Allocationpayable = new List<CVarvwA_Allocationpayable>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwA_Allocationpayable.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListvwA_Allocationpayable";
                    Com.Parameters[0].Value = Param;
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwA_Allocationpayable ObjCVarvwA_Allocationpayable = new CVarvwA_Allocationpayable();
                        ObjCVarvwA_Allocationpayable.mID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarvwA_Allocationpayable.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarvwA_Allocationpayable.mDate = Convert.ToDateTime(dr["Date"].ToString());
                        ObjCVarvwA_Allocationpayable.mCostPrice = Convert.ToDecimal(dr["CostPrice"].ToString());
                        ObjCVarvwA_Allocationpayable.mAmountWithoutVAT = Convert.ToDecimal(dr["AmountWithoutVAT"].ToString());
                        ObjCVarvwA_Allocationpayable.mInvoiceTotal = Convert.ToDecimal(dr["InvoiceTotal"].ToString());
                        ObjCVarvwA_Allocationpayable.mCurrencyCode = Convert.ToString(dr["CurrencyCode"].ToString());
                        ObjCVarvwA_Allocationpayable.mExchangeRate = Convert.ToDecimal(dr["ExchangeRate"].ToString());
                        ObjCVarvwA_Allocationpayable.mOperationCode = Convert.ToString(dr["OperationCode"].ToString());
                        ObjCVarvwA_Allocationpayable.mMasterOperationID = Convert.ToInt64(dr["MasterOperationID"].ToString());
                        ObjCVarvwA_Allocationpayable.mPartnerTypeID = Convert.ToInt32(dr["PartnerTypeID"].ToString());
                        ObjCVarvwA_Allocationpayable.mPartnerName = Convert.ToString(dr["PartnerName"].ToString());
                        ObjCVarvwA_Allocationpayable.mPartnerID = Convert.ToInt32(dr["PartnerID"].ToString());
                        ObjCVarvwA_Allocationpayable.mClientName = Convert.ToString(dr["ClientName"].ToString());
                        ObjCVarvwA_Allocationpayable.mPyableDebit = Convert.ToString(dr["PyableDebit"].ToString());
                        ObjCVarvwA_Allocationpayable.mPyableDebitType = Convert.ToInt32(dr["PyableDebitType"].ToString());
                        ObjCVarvwA_Allocationpayable.mPaidAmount = Convert.ToDecimal(dr["PaidAmount"].ToString());
                        ObjCVarvwA_Allocationpayable.mRemainingAmount = Convert.ToDecimal(dr["RemainingAmount"].ToString());
                        ObjCVarvwA_Allocationpayable.mQty = Convert.ToDecimal(dr["Qty"].ToString());
                        ObjCVarvwA_Allocationpayable.mCurrencyID = Convert.ToInt32(dr["CurrencyID"].ToString());
                        lstCVarvwA_Allocationpayable.Add(ObjCVarvwA_Allocationpayable);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwA_Allocationpayable.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingvwA_Allocationpayable";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwA_Allocationpayable ObjCVarvwA_Allocationpayable = new CVarvwA_Allocationpayable();
                        ObjCVarvwA_Allocationpayable.mID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarvwA_Allocationpayable.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarvwA_Allocationpayable.mDate = Convert.ToDateTime(dr["Date"].ToString());
                        ObjCVarvwA_Allocationpayable.mCostPrice = Convert.ToDecimal(dr["CostPrice"].ToString());
                        ObjCVarvwA_Allocationpayable.mAmountWithoutVAT = Convert.ToDecimal(dr["AmountWithoutVAT"].ToString());
                        ObjCVarvwA_Allocationpayable.mInvoiceTotal = Convert.ToDecimal(dr["InvoiceTotal"].ToString());
                        ObjCVarvwA_Allocationpayable.mCurrencyCode = Convert.ToString(dr["CurrencyCode"].ToString());
                        ObjCVarvwA_Allocationpayable.mExchangeRate = Convert.ToDecimal(dr["ExchangeRate"].ToString());
                        ObjCVarvwA_Allocationpayable.mOperationCode = Convert.ToString(dr["OperationCode"].ToString());
                        ObjCVarvwA_Allocationpayable.mMasterOperationID = Convert.ToInt64(dr["MasterOperationID"].ToString());
                        ObjCVarvwA_Allocationpayable.mPartnerTypeID = Convert.ToInt32(dr["PartnerTypeID"].ToString());
                        ObjCVarvwA_Allocationpayable.mPartnerName = Convert.ToString(dr["PartnerName"].ToString());
                        ObjCVarvwA_Allocationpayable.mPartnerID = Convert.ToInt32(dr["PartnerID"].ToString());
                        ObjCVarvwA_Allocationpayable.mClientName = Convert.ToString(dr["ClientName"].ToString());
                        ObjCVarvwA_Allocationpayable.mPyableDebit = Convert.ToString(dr["PyableDebit"].ToString());
                        ObjCVarvwA_Allocationpayable.mPyableDebitType = Convert.ToInt32(dr["PyableDebitType"].ToString());
                        ObjCVarvwA_Allocationpayable.mPaidAmount = Convert.ToDecimal(dr["PaidAmount"].ToString());
                        ObjCVarvwA_Allocationpayable.mRemainingAmount = Convert.ToDecimal(dr["RemainingAmount"].ToString());
                        ObjCVarvwA_Allocationpayable.mQty = Convert.ToDecimal(dr["Qty"].ToString());
                        ObjCVarvwA_Allocationpayable.mCurrencyID = Convert.ToInt32(dr["CurrencyID"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarvwA_Allocationpayable.Add(ObjCVarvwA_Allocationpayable);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
    }
}
