using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.Accounting.Transactions.Generated
{
    [Serializable]
    public partial class CVarvwA_PayableAllocation_Unapproving
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int32 mID;
        internal Int32 mJV_ID;
        internal Int32 mOperationID;
        internal String mOperationCode;
        internal Int32 mPartnerTypeID;
        internal String mPartnerTypeName;
        internal Int32 mPartnerID;
        internal String mPartnerName;
        internal String mCurrencyID;
        internal String mCurrencyCode;
        internal Decimal mAmountDue;
        internal DateTime mCreationDate;
        internal Decimal mExchangeRate;
        internal String mPartnerBalanceIDs;
        #endregion

        #region "Methods"
        public Int32 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        public Int32 JV_ID
        {
            get { return mJV_ID; }
            set { mJV_ID = value; }
        }
        public Int32 OperationID
        {
            get { return mOperationID; }
            set { mOperationID = value; }
        }
        public String OperationCode
        {
            get { return mOperationCode; }
            set { mOperationCode = value; }
        }
        public Int32 PartnerTypeID
        {
            get { return mPartnerTypeID; }
            set { mPartnerTypeID = value; }
        }
        public String PartnerTypeName
        {
            get { return mPartnerTypeName; }
            set { mPartnerTypeName = value; }
        }
        public Int32 PartnerID
        {
            get { return mPartnerID; }
            set { mPartnerID = value; }
        }
        public String PartnerName
        {
            get { return mPartnerName; }
            set { mPartnerName = value; }
        }
        public String CurrencyID
        {
            get { return mCurrencyID; }
            set { mCurrencyID = value; }
        }
        public String CurrencyCode
        {
            get { return mCurrencyCode; }
            set { mCurrencyCode = value; }
        }
        public Decimal AmountDue
        {
            get { return mAmountDue; }
            set { mAmountDue = value; }
        }
        public DateTime CreationDate
        {
            get { return mCreationDate; }
            set { mCreationDate = value; }
        }
        public Decimal ExchangeRate
        {
            get { return mExchangeRate; }
            set { mExchangeRate = value; }
        }
        public String PartnerBalanceIDs
        {
            get { return mPartnerBalanceIDs; }
            set { mPartnerBalanceIDs = value; }
        }
        #endregion
    }

    public partial class CvwA_PayableAllocation_Unapproving
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarvwA_PayableAllocation_Unapproving> lstCVarvwA_PayableAllocation_Unapproving = new List<CVarvwA_PayableAllocation_Unapproving>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwA_PayableAllocation_Unapproving.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.VarChar));
                    Com.CommandText = "[dbo].GetListvwA_PayableAllocation_Unapproving";
                    Com.Parameters[0].Value = Param;
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwA_PayableAllocation_Unapproving ObjCVarvwA_PayableAllocation_Unapproving = new CVarvwA_PayableAllocation_Unapproving();
                        ObjCVarvwA_PayableAllocation_Unapproving.mID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mJV_ID = Convert.ToInt32(dr["JV_ID"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mOperationID = Convert.ToInt32(dr["OperationID"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mOperationCode = Convert.ToString(dr["OperationCode"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mPartnerTypeID = Convert.ToInt32(dr["PartnerTypeID"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mPartnerTypeName = Convert.ToString(dr["PartnerTypeName"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mPartnerID = Convert.ToInt32(dr["PartnerID"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mPartnerName = Convert.ToString(dr["PartnerName"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mCurrencyID = Convert.ToString(dr["CurrencyID"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mCurrencyCode = Convert.ToString(dr["CurrencyCode"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mAmountDue = Convert.ToDecimal(dr["AmountDue"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mExchangeRate = Convert.ToDecimal(dr["ExchangeRate"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mPartnerBalanceIDs = Convert.ToString(dr["PartnerBalanceIDs"].ToString());
                        lstCVarvwA_PayableAllocation_Unapproving.Add(ObjCVarvwA_PayableAllocation_Unapproving);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwA_PayableAllocation_Unapproving.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.CommandTimeout = 300;

                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingvwA_PayableAllocation_Unapproving";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwA_PayableAllocation_Unapproving ObjCVarvwA_PayableAllocation_Unapproving = new CVarvwA_PayableAllocation_Unapproving();
                        ObjCVarvwA_PayableAllocation_Unapproving.mID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mJV_ID = Convert.ToInt32(dr["JV_ID"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mOperationID = Convert.ToInt32(dr["OperationID"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mOperationCode = Convert.ToString(dr["OperationCode"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mPartnerTypeID = Convert.ToInt32(dr["PartnerTypeID"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mPartnerTypeName = Convert.ToString(dr["PartnerTypeName"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mPartnerID = Convert.ToInt32(dr["PartnerID"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mPartnerName = Convert.ToString(dr["PartnerName"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mCurrencyID = Convert.ToString(dr["CurrencyID"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mCurrencyCode = Convert.ToString(dr["CurrencyCode"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mAmountDue = Convert.ToDecimal(dr["AmountDue"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mExchangeRate = Convert.ToDecimal(dr["ExchangeRate"].ToString());
                        ObjCVarvwA_PayableAllocation_Unapproving.mPartnerBalanceIDs = Convert.ToString(dr["PartnerBalanceIDs"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarvwA_PayableAllocation_Unapproving.Add(ObjCVarvwA_PayableAllocation_Unapproving);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
    }
}
