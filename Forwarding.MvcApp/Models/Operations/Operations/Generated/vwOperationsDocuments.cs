using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.Operations.Operations.Generated
{
    [Serializable]
    public class CPKvwOperationsDocuments
    {
        #region "variables"
        private Int64 mID;
        #endregion

        #region "Methods"
        public Int64 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarvwOperationsDocuments : CPKvwOperationsDocuments
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal String mImagePath;
        internal String mCode;
        internal DateTime mReceivedDate;
        internal String mReceivedDateStr;
        internal DateTime mExpirationDate;
        internal String mNotes;
        internal Int64 mOperationID;
        internal Int32 mDocumentInfoID;
        internal Int32 mReceivingDegreeID;
        internal String mReceivingDegreeCode;
        internal String mReceivingDegreeName;
        internal String mReceivingDegreeLocalName;
        internal Int32 mCreatorUserID;
        internal String mCreatorUserName;
        internal String mRecipient;
        internal Boolean mIsDeliveredFiles;
        internal Boolean mIsTruckingFiles;
        internal String mName;
        internal String mDocumentInfoCode;
        internal Int32 mImportance;
        internal String mImportanceName;
        internal Boolean mIsImport;
        internal Boolean mIsExport;
        internal Boolean mIsDomestic;
        internal String mDirection;
        internal Boolean mIsOcean;
        internal Boolean mIsAir;
        internal Boolean mIsInland;
        internal String mTransportMode;
        internal Boolean mIsContainers;
        internal Boolean mIsLCL;
        internal Boolean mIsVehicle;
        internal Boolean mIsBulk;
        internal Boolean mIsFCL;
        internal String mContainerType;
        internal String mDocumentInfoNotes;
        internal String mDegree;
        internal Int32 mOperationCodeSerial;
        internal String mOperationCode;
        #endregion

        #region "Methods"
        public String ImagePath
        {
            get { return mImagePath; }
            set { mImagePath = value; }
        }
        public String Code
        {
            get { return mCode; }
            set { mCode = value; }
        }
        public DateTime ReceivedDate
        {
            get { return mReceivedDate; }
            set { mReceivedDate = value; }
        }
        public String ReceivedDateStr
        {
            get { return mReceivedDateStr; }
            set { mReceivedDateStr = value; }
        }
        public DateTime ExpirationDate
        {
            get { return mExpirationDate; }
            set { mExpirationDate = value; }
        }
        public String Notes
        {
            get { return mNotes; }
            set { mNotes = value; }
        }
        public Int64 OperationID
        {
            get { return mOperationID; }
            set { mOperationID = value; }
        }
        public Int32 DocumentInfoID
        {
            get { return mDocumentInfoID; }
            set { mDocumentInfoID = value; }
        }
        public Int32 ReceivingDegreeID
        {
            get { return mReceivingDegreeID; }
            set { mReceivingDegreeID = value; }
        }
        public String ReceivingDegreeCode
        {
            get { return mReceivingDegreeCode; }
            set { mReceivingDegreeCode = value; }
        }
        public String ReceivingDegreeName
        {
            get { return mReceivingDegreeName; }
            set { mReceivingDegreeName = value; }
        }
        public String ReceivingDegreeLocalName
        {
            get { return mReceivingDegreeLocalName; }
            set { mReceivingDegreeLocalName = value; }
        }
        public Int32 CreatorUserID
        {
            get { return mCreatorUserID; }
            set { mCreatorUserID = value; }
        }
        public String CreatorUserName
        {
            get { return mCreatorUserName; }
            set { mCreatorUserName = value; }
        }
        public String Recipient
        {
            get { return mRecipient; }
            set { mRecipient = value; }
        }
        public Boolean IsDeliveredFiles
        {
            get { return mIsDeliveredFiles; }
            set { mIsDeliveredFiles = value; }
        }
        public Boolean IsTruckingFiles
        {
            get { return mIsTruckingFiles; }
            set { mIsTruckingFiles = value; }
        }
        public String Name
        {
            get { return mName; }
            set { mName = value; }
        }
        public String DocumentInfoCode
        {
            get { return mDocumentInfoCode; }
            set { mDocumentInfoCode = value; }
        }
        public Int32 Importance
        {
            get { return mImportance; }
            set { mImportance = value; }
        }
        public String ImportanceName
        {
            get { return mImportanceName; }
            set { mImportanceName = value; }
        }
        public Boolean IsImport
        {
            get { return mIsImport; }
            set { mIsImport = value; }
        }
        public Boolean IsExport
        {
            get { return mIsExport; }
            set { mIsExport = value; }
        }
        public Boolean IsDomestic
        {
            get { return mIsDomestic; }
            set { mIsDomestic = value; }
        }
        public String Direction
        {
            get { return mDirection; }
            set { mDirection = value; }
        }
        public Boolean IsOcean
        {
            get { return mIsOcean; }
            set { mIsOcean = value; }
        }
        public Boolean IsAir
        {
            get { return mIsAir; }
            set { mIsAir = value; }
        }
        public Boolean IsInland
        {
            get { return mIsInland; }
            set { mIsInland = value; }
        }
        public String TransportMode
        {
            get { return mTransportMode; }
            set { mTransportMode = value; }
        }
        public Boolean IsContainers
        {
            get { return mIsContainers; }
            set { mIsContainers = value; }
        }
        public Boolean IsLCL
        {
            get { return mIsLCL; }
            set { mIsLCL = value; }
        }
        public Boolean IsVehicle
        {
            get { return mIsVehicle; }
            set { mIsVehicle = value; }
        }
        public Boolean IsBulk
        {
            get { return mIsBulk; }
            set { mIsBulk = value; }
        }
        public Boolean IsFCL
        {
            get { return mIsFCL; }
            set { mIsFCL = value; }
        }
        public String ContainerType
        {
            get { return mContainerType; }
            set { mContainerType = value; }
        }
        public String DocumentInfoNotes
        {
            get { return mDocumentInfoNotes; }
            set { mDocumentInfoNotes = value; }
        }
        public String Degree
        {
            get { return mDegree; }
            set { mDegree = value; }
        }
        public Int32 OperationCodeSerial
        {
            get { return mOperationCodeSerial; }
            set { mOperationCodeSerial = value; }
        }
        public String OperationCode
        {
            get { return mOperationCode; }
            set { mOperationCode = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CvwOperationsDocuments
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarvwOperationsDocuments> lstCVarvwOperationsDocuments = new List<CVarvwOperationsDocuments>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwOperationsDocuments.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListvwOperationsDocuments";
                    Com.Parameters[0].Value = Param;
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwOperationsDocuments ObjCVarvwOperationsDocuments = new CVarvwOperationsDocuments();
                        ObjCVarvwOperationsDocuments.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarvwOperationsDocuments.mImagePath = Convert.ToString(dr["ImagePath"].ToString());
                        ObjCVarvwOperationsDocuments.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarvwOperationsDocuments.mReceivedDate = Convert.ToDateTime(dr["ReceivedDate"].ToString());
                        ObjCVarvwOperationsDocuments.mReceivedDateStr = Convert.ToString(dr["ReceivedDateStr"].ToString());
                        ObjCVarvwOperationsDocuments.mExpirationDate = Convert.ToDateTime(dr["ExpirationDate"].ToString());
                        ObjCVarvwOperationsDocuments.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarvwOperationsDocuments.mOperationID = Convert.ToInt64(dr["OperationID"].ToString());
                        ObjCVarvwOperationsDocuments.mDocumentInfoID = Convert.ToInt32(dr["DocumentInfoID"].ToString());
                        ObjCVarvwOperationsDocuments.mReceivingDegreeID = Convert.ToInt32(dr["ReceivingDegreeID"].ToString());
                        ObjCVarvwOperationsDocuments.mReceivingDegreeCode = Convert.ToString(dr["ReceivingDegreeCode"].ToString());
                        ObjCVarvwOperationsDocuments.mReceivingDegreeName = Convert.ToString(dr["ReceivingDegreeName"].ToString());
                        ObjCVarvwOperationsDocuments.mReceivingDegreeLocalName = Convert.ToString(dr["ReceivingDegreeLocalName"].ToString());
                        ObjCVarvwOperationsDocuments.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
                        ObjCVarvwOperationsDocuments.mCreatorUserName = Convert.ToString(dr["CreatorUserName"].ToString());
                        ObjCVarvwOperationsDocuments.mRecipient = Convert.ToString(dr["Recipient"].ToString());
                        ObjCVarvwOperationsDocuments.mIsDeliveredFiles = Convert.ToBoolean(dr["IsDeliveredFiles"].ToString());
                        ObjCVarvwOperationsDocuments.mIsTruckingFiles = Convert.ToBoolean(dr["IsTruckingFiles"].ToString());
                        ObjCVarvwOperationsDocuments.mName = Convert.ToString(dr["Name"].ToString());
                        ObjCVarvwOperationsDocuments.mDocumentInfoCode = Convert.ToString(dr["DocumentInfoCode"].ToString());
                        ObjCVarvwOperationsDocuments.mImportance = Convert.ToInt32(dr["Importance"].ToString());
                        ObjCVarvwOperationsDocuments.mImportanceName = Convert.ToString(dr["ImportanceName"].ToString());
                        ObjCVarvwOperationsDocuments.mIsImport = Convert.ToBoolean(dr["IsImport"].ToString());
                        ObjCVarvwOperationsDocuments.mIsExport = Convert.ToBoolean(dr["IsExport"].ToString());
                        ObjCVarvwOperationsDocuments.mIsDomestic = Convert.ToBoolean(dr["IsDomestic"].ToString());
                        ObjCVarvwOperationsDocuments.mDirection = Convert.ToString(dr["Direction"].ToString());
                        ObjCVarvwOperationsDocuments.mIsOcean = Convert.ToBoolean(dr["IsOcean"].ToString());
                        ObjCVarvwOperationsDocuments.mIsAir = Convert.ToBoolean(dr["IsAir"].ToString());
                        ObjCVarvwOperationsDocuments.mIsInland = Convert.ToBoolean(dr["IsInland"].ToString());
                        ObjCVarvwOperationsDocuments.mTransportMode = Convert.ToString(dr["TransportMode"].ToString());
                        ObjCVarvwOperationsDocuments.mIsContainers = Convert.ToBoolean(dr["IsContainers"].ToString());
                        ObjCVarvwOperationsDocuments.mIsLCL = Convert.ToBoolean(dr["IsLCL"].ToString());
                        ObjCVarvwOperationsDocuments.mIsVehicle = Convert.ToBoolean(dr["IsVehicle"].ToString());
                        ObjCVarvwOperationsDocuments.mIsBulk = Convert.ToBoolean(dr["IsBulk"].ToString());
                        ObjCVarvwOperationsDocuments.mIsFCL = Convert.ToBoolean(dr["IsFCL"].ToString());
                        ObjCVarvwOperationsDocuments.mContainerType = Convert.ToString(dr["ContainerType"].ToString());
                        ObjCVarvwOperationsDocuments.mDocumentInfoNotes = Convert.ToString(dr["DocumentInfoNotes"].ToString());
                        ObjCVarvwOperationsDocuments.mDegree = Convert.ToString(dr["Degree"].ToString());
                        ObjCVarvwOperationsDocuments.mOperationCodeSerial = Convert.ToInt32(dr["OperationCodeSerial"].ToString());
                        ObjCVarvwOperationsDocuments.mOperationCode = Convert.ToString(dr["OperationCode"].ToString());
                        lstCVarvwOperationsDocuments.Add(ObjCVarvwOperationsDocuments);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwOperationsDocuments.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingvwOperationsDocuments";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwOperationsDocuments ObjCVarvwOperationsDocuments = new CVarvwOperationsDocuments();
                        ObjCVarvwOperationsDocuments.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarvwOperationsDocuments.mImagePath = Convert.ToString(dr["ImagePath"].ToString());
                        ObjCVarvwOperationsDocuments.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarvwOperationsDocuments.mReceivedDate = Convert.ToDateTime(dr["ReceivedDate"].ToString());
                        ObjCVarvwOperationsDocuments.mReceivedDateStr = Convert.ToString(dr["ReceivedDateStr"].ToString());
                        ObjCVarvwOperationsDocuments.mExpirationDate = Convert.ToDateTime(dr["ExpirationDate"].ToString());
                        ObjCVarvwOperationsDocuments.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarvwOperationsDocuments.mOperationID = Convert.ToInt64(dr["OperationID"].ToString());
                        ObjCVarvwOperationsDocuments.mDocumentInfoID = Convert.ToInt32(dr["DocumentInfoID"].ToString());
                        ObjCVarvwOperationsDocuments.mReceivingDegreeID = Convert.ToInt32(dr["ReceivingDegreeID"].ToString());
                        ObjCVarvwOperationsDocuments.mReceivingDegreeCode = Convert.ToString(dr["ReceivingDegreeCode"].ToString());
                        ObjCVarvwOperationsDocuments.mReceivingDegreeName = Convert.ToString(dr["ReceivingDegreeName"].ToString());
                        ObjCVarvwOperationsDocuments.mReceivingDegreeLocalName = Convert.ToString(dr["ReceivingDegreeLocalName"].ToString());
                        ObjCVarvwOperationsDocuments.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
                        ObjCVarvwOperationsDocuments.mCreatorUserName = Convert.ToString(dr["CreatorUserName"].ToString());
                        ObjCVarvwOperationsDocuments.mRecipient = Convert.ToString(dr["Recipient"].ToString());
                        ObjCVarvwOperationsDocuments.mIsDeliveredFiles = Convert.ToBoolean(dr["IsDeliveredFiles"].ToString());
                        ObjCVarvwOperationsDocuments.mIsTruckingFiles = Convert.ToBoolean(dr["IsTruckingFiles"].ToString());
                        ObjCVarvwOperationsDocuments.mName = Convert.ToString(dr["Name"].ToString());
                        ObjCVarvwOperationsDocuments.mDocumentInfoCode = Convert.ToString(dr["DocumentInfoCode"].ToString());
                        ObjCVarvwOperationsDocuments.mImportance = Convert.ToInt32(dr["Importance"].ToString());
                        ObjCVarvwOperationsDocuments.mImportanceName = Convert.ToString(dr["ImportanceName"].ToString());
                        ObjCVarvwOperationsDocuments.mIsImport = Convert.ToBoolean(dr["IsImport"].ToString());
                        ObjCVarvwOperationsDocuments.mIsExport = Convert.ToBoolean(dr["IsExport"].ToString());
                        ObjCVarvwOperationsDocuments.mIsDomestic = Convert.ToBoolean(dr["IsDomestic"].ToString());
                        ObjCVarvwOperationsDocuments.mDirection = Convert.ToString(dr["Direction"].ToString());
                        ObjCVarvwOperationsDocuments.mIsOcean = Convert.ToBoolean(dr["IsOcean"].ToString());
                        ObjCVarvwOperationsDocuments.mIsAir = Convert.ToBoolean(dr["IsAir"].ToString());
                        ObjCVarvwOperationsDocuments.mIsInland = Convert.ToBoolean(dr["IsInland"].ToString());
                        ObjCVarvwOperationsDocuments.mTransportMode = Convert.ToString(dr["TransportMode"].ToString());
                        ObjCVarvwOperationsDocuments.mIsContainers = Convert.ToBoolean(dr["IsContainers"].ToString());
                        ObjCVarvwOperationsDocuments.mIsLCL = Convert.ToBoolean(dr["IsLCL"].ToString());
                        ObjCVarvwOperationsDocuments.mIsVehicle = Convert.ToBoolean(dr["IsVehicle"].ToString());
                        ObjCVarvwOperationsDocuments.mIsBulk = Convert.ToBoolean(dr["IsBulk"].ToString());
                        ObjCVarvwOperationsDocuments.mIsFCL = Convert.ToBoolean(dr["IsFCL"].ToString());
                        ObjCVarvwOperationsDocuments.mContainerType = Convert.ToString(dr["ContainerType"].ToString());
                        ObjCVarvwOperationsDocuments.mDocumentInfoNotes = Convert.ToString(dr["DocumentInfoNotes"].ToString());
                        ObjCVarvwOperationsDocuments.mDegree = Convert.ToString(dr["Degree"].ToString());
                        ObjCVarvwOperationsDocuments.mOperationCodeSerial = Convert.ToInt32(dr["OperationCodeSerial"].ToString());
                        ObjCVarvwOperationsDocuments.mOperationCode = Convert.ToString(dr["OperationCode"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarvwOperationsDocuments.Add(ObjCVarvwOperationsDocuments);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
    }
}
