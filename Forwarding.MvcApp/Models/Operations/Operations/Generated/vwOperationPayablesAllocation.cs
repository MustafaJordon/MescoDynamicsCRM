using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.Operations.Operations.Generated
{
    [Serializable]
    public partial class CVarvwOperationPayablesAllocation
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal String mCode;
        internal Int32 mCodeSerial;
        internal DateTime mOpenDate;
        internal Int32 mPartnerID;
        internal String mPartnerName;
        internal Int32 mPartnerTypeID;
        internal String mPartnerTypeName;
        internal String mVoucherCodes;
        internal Decimal mTotalVoucherAmount;
        internal Decimal mTotalAllocation;
        internal Decimal mTotalPayables;
        #endregion

        #region "Methods"
        public String Code
        {
            get { return mCode; }
            set { mCode = value; }
        }
        public Int32 CodeSerial
        {
            get { return mCodeSerial; }
            set { mCodeSerial = value; }
        }
        public DateTime OpenDate
        {
            get { return mOpenDate; }
            set { mOpenDate = value; }
        }
        public Int32 PartnerID
        {
            get { return mPartnerID; }
            set { mPartnerID = value; }
        }
        public String PartnerName
        {
            get { return mPartnerName; }
            set { mPartnerName = value; }
        }
        public Int32 PartnerTypeID
        {
            get { return mPartnerTypeID; }
            set { mPartnerTypeID = value; }
        }
        public String PartnerTypeName
        {
            get { return mPartnerTypeName; }
            set { mPartnerTypeName = value; }
        }
        public String VoucherCodes
        {
            get { return mVoucherCodes; }
            set { mVoucherCodes = value; }
        }
        public Decimal TotalVoucherAmount
        {
            get { return mTotalVoucherAmount; }
            set { mTotalVoucherAmount = value; }
        }
        public Decimal TotalAllocation
        {
            get { return mTotalAllocation; }
            set { mTotalAllocation = value; }
        }
        public Decimal TotalPayables
        {
            get { return mTotalPayables; }
            set { mTotalPayables = value; }
        }
        #endregion
    }

    public partial class CvwOperationPayablesAllocation
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarvwOperationPayablesAllocation> lstCVarvwOperationPayablesAllocation = new List<CVarvwOperationPayablesAllocation>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwOperationPayablesAllocation.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListvwOperationPayablesAllocation";
                    Com.Parameters[0].Value = Param;
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwOperationPayablesAllocation ObjCVarvwOperationPayablesAllocation = new CVarvwOperationPayablesAllocation();
                        ObjCVarvwOperationPayablesAllocation.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mCodeSerial = Convert.ToInt32(dr["CodeSerial"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mOpenDate = Convert.ToDateTime(dr["OpenDate"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mPartnerID = Convert.ToInt32(dr["PartnerID"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mPartnerName = Convert.ToString(dr["PartnerName"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mPartnerTypeID = Convert.ToInt32(dr["PartnerTypeID"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mPartnerTypeName = Convert.ToString(dr["PartnerTypeName"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mVoucherCodes = Convert.ToString(dr["VoucherCodes"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mTotalVoucherAmount = Convert.ToDecimal(dr["TotalVoucherAmount"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mTotalAllocation = Convert.ToDecimal(dr["TotalAllocation"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mTotalPayables = Convert.ToDecimal(dr["TotalPayables"].ToString());
                        lstCVarvwOperationPayablesAllocation.Add(ObjCVarvwOperationPayablesAllocation);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwOperationPayablesAllocation.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingvwOperationPayablesAllocation";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwOperationPayablesAllocation ObjCVarvwOperationPayablesAllocation = new CVarvwOperationPayablesAllocation();
                        ObjCVarvwOperationPayablesAllocation.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mCodeSerial = Convert.ToInt32(dr["CodeSerial"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mOpenDate = Convert.ToDateTime(dr["OpenDate"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mPartnerID = Convert.ToInt32(dr["PartnerID"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mPartnerName = Convert.ToString(dr["PartnerName"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mPartnerTypeID = Convert.ToInt32(dr["PartnerTypeID"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mPartnerTypeName = Convert.ToString(dr["PartnerTypeName"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mVoucherCodes = Convert.ToString(dr["VoucherCodes"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mTotalVoucherAmount = Convert.ToDecimal(dr["TotalVoucherAmount"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mTotalAllocation = Convert.ToDecimal(dr["TotalAllocation"].ToString());
                        ObjCVarvwOperationPayablesAllocation.mTotalPayables = Convert.ToDecimal(dr["TotalPayables"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarvwOperationPayablesAllocation.Add(ObjCVarvwOperationPayablesAllocation);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
    }
}
