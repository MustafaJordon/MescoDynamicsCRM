using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.Operations.Operations.Generated
{
    [Serializable]
    public class CPKTruckingOrderContainers
    {
        #region "variables"
        private Int64 mID;
        #endregion

        #region "Methods"
        public Int64 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarTruckingOrderContainers : CPKTruckingOrderContainers
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int64 mTruckingOrderID;
        internal Int32 mSN;
        internal DateTime mIssueDate;
        internal String mSL;
        internal String mBookingNo;
        internal String mPORT;
        internal String mWH;
        internal String mSize;
        internal String mContainerNO;
        internal String mDriverName;
        internal String mPhone;
        internal String mTruckNo;
        internal String mLocation;
        internal String mSealNo;
        internal DateTime mReleaseDate;
        internal DateTime mArrivalDate;
        internal DateTime mReturnDate;
        internal String mPort2;
        internal String mStatusName;
        internal String mTrucker;
        internal String mTypeName;
        internal String mNotes;
        internal Decimal mTareWeight;
        internal Decimal mNetWeight;
        internal Decimal mGrossWeight;
        internal String mOperationNO;
        internal String mFactory;
        internal String mCustomLOC;
        internal String mTruckWeight;
        internal String mFactoryGateOut;
        internal String mPOD;
        internal String mInvoice;
        internal DateTime mFGODate;
        internal Int32 mReleaseTime;
        internal Int32 mArrivalTime;
        internal Int32 mFGOTime;
        internal Int32 mReturnTime;
        #endregion

        #region "Methods"
        public Int64 TruckingOrderID
        {
            get { return mTruckingOrderID; }
            set { mIsChanges = true; mTruckingOrderID = value; }
        }
        public Int32 SN
        {
            get { return mSN; }
            set { mIsChanges = true; mSN = value; }
        }
        public DateTime IssueDate
        {
            get { return mIssueDate; }
            set { mIsChanges = true; mIssueDate = value; }
        }
        public String SL
        {
            get { return mSL; }
            set { mIsChanges = true; mSL = value; }
        }
        public String BookingNo
        {
            get { return mBookingNo; }
            set { mIsChanges = true; mBookingNo = value; }
        }
        public String PORT
        {
            get { return mPORT; }
            set { mIsChanges = true; mPORT = value; }
        }
        public String WH
        {
            get { return mWH; }
            set { mIsChanges = true; mWH = value; }
        }
        public String Size
        {
            get { return mSize; }
            set { mIsChanges = true; mSize = value; }
        }
        public String ContainerNO
        {
            get { return mContainerNO; }
            set { mIsChanges = true; mContainerNO = value; }
        }
        public String DriverName
        {
            get { return mDriverName; }
            set { mIsChanges = true; mDriverName = value; }
        }
        public String Phone
        {
            get { return mPhone; }
            set { mIsChanges = true; mPhone = value; }
        }
        public String TruckNo
        {
            get { return mTruckNo; }
            set { mIsChanges = true; mTruckNo = value; }
        }
        public String Location
        {
            get { return mLocation; }
            set { mIsChanges = true; mLocation = value; }
        }
        public String SealNo
        {
            get { return mSealNo; }
            set { mIsChanges = true; mSealNo = value; }
        }
        public DateTime ReleaseDate
        {
            get { return mReleaseDate; }
            set { mIsChanges = true; mReleaseDate = value; }
        }
        public DateTime ArrivalDate
        {
            get { return mArrivalDate; }
            set { mIsChanges = true; mArrivalDate = value; }
        }
        public DateTime ReturnDate
        {
            get { return mReturnDate; }
            set { mIsChanges = true; mReturnDate = value; }
        }
        public String Port2
        {
            get { return mPort2; }
            set { mIsChanges = true; mPort2 = value; }
        }
        public String StatusName
        {
            get { return mStatusName; }
            set { mIsChanges = true; mStatusName = value; }
        }
        public String Trucker
        {
            get { return mTrucker; }
            set { mIsChanges = true; mTrucker = value; }
        }
        public String TypeName
        {
            get { return mTypeName; }
            set { mIsChanges = true; mTypeName = value; }
        }
        public String Notes
        {
            get { return mNotes; }
            set { mIsChanges = true; mNotes = value; }
        }
        public Decimal TareWeight
        {
            get { return mTareWeight; }
            set { mIsChanges = true; mTareWeight = value; }
        }
        public Decimal NetWeight
        {
            get { return mNetWeight; }
            set { mIsChanges = true; mNetWeight = value; }
        }
        public Decimal GrossWeight
        {
            get { return mGrossWeight; }
            set { mIsChanges = true; mGrossWeight = value; }
        }
        public String OperationNO
        {
            get { return mOperationNO; }
            set { mIsChanges = true; mOperationNO = value; }
        }
        public String Factory
        {
            get { return mFactory; }
            set { mIsChanges = true; mFactory = value; }
        }
        public String CustomLOC
        {
            get { return mCustomLOC; }
            set { mIsChanges = true; mCustomLOC = value; }
        }
        public String TruckWeight
        {
            get { return mTruckWeight; }
            set { mIsChanges = true; mTruckWeight = value; }
        }
        public String FactoryGateOut
        {
            get { return mFactoryGateOut; }
            set { mIsChanges = true; mFactoryGateOut = value; }
        }
        public String POD
        {
            get { return mPOD; }
            set { mIsChanges = true; mPOD = value; }
        }
        public String Invoice
        {
            get { return mInvoice; }
            set { mIsChanges = true; mInvoice = value; }
        }
        public DateTime FGODate
        {
            get { return mFGODate; }
            set { mIsChanges = true; mFGODate = value; }
        }
        public Int32 ReleaseTime
        {
            get { return mReleaseTime; }
            set { mIsChanges = true; mReleaseTime = value; }
        }
        public Int32 ArrivalTime
        {
            get { return mArrivalTime; }
            set { mIsChanges = true; mArrivalTime = value; }
        }
        public Int32 FGOTime
        {
            get { return mFGOTime; }
            set { mIsChanges = true; mFGOTime = value; }
        }
        public Int32 ReturnTime
        {
            get { return mReturnTime; }
            set { mIsChanges = true; mReturnTime = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CTruckingOrderContainers
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarTruckingOrderContainers> lstCVarTruckingOrderContainers = new List<CVarTruckingOrderContainers>();
        public List<CPKTruckingOrderContainers> lstDeletedCPKTruckingOrderContainers = new List<CPKTruckingOrderContainers>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetItem(Int64 ID)
        {
            return DataFill(Convert.ToString(ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarTruckingOrderContainers.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListTruckingOrderContainers";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].GetItemTruckingOrderContainers";
                    Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                    Com.Parameters[0].Value = Convert.ToInt64(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarTruckingOrderContainers ObjCVarTruckingOrderContainers = new CVarTruckingOrderContainers();
                        ObjCVarTruckingOrderContainers.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarTruckingOrderContainers.mTruckingOrderID = Convert.ToInt64(dr["TruckingOrderID"].ToString());
                        ObjCVarTruckingOrderContainers.mSN = Convert.ToInt32(dr["SN"].ToString());
                        ObjCVarTruckingOrderContainers.mIssueDate = Convert.ToDateTime(dr["IssueDate"].ToString());
                        ObjCVarTruckingOrderContainers.mSL = Convert.ToString(dr["SL"].ToString());
                        ObjCVarTruckingOrderContainers.mBookingNo = Convert.ToString(dr["BookingNo"].ToString());
                        ObjCVarTruckingOrderContainers.mPORT = Convert.ToString(dr["PORT"].ToString());
                        ObjCVarTruckingOrderContainers.mWH = Convert.ToString(dr["WH"].ToString());
                        ObjCVarTruckingOrderContainers.mSize = Convert.ToString(dr["Size"].ToString());
                        ObjCVarTruckingOrderContainers.mContainerNO = Convert.ToString(dr["ContainerNO"].ToString());
                        ObjCVarTruckingOrderContainers.mDriverName = Convert.ToString(dr["DriverName"].ToString());
                        ObjCVarTruckingOrderContainers.mPhone = Convert.ToString(dr["Phone"].ToString());
                        ObjCVarTruckingOrderContainers.mTruckNo = Convert.ToString(dr["TruckNo"].ToString());
                        ObjCVarTruckingOrderContainers.mLocation = Convert.ToString(dr["Location"].ToString());
                        ObjCVarTruckingOrderContainers.mSealNo = Convert.ToString(dr["SealNo"].ToString());
                        ObjCVarTruckingOrderContainers.mReleaseDate = Convert.ToDateTime(dr["ReleaseDate"].ToString());
                        ObjCVarTruckingOrderContainers.mArrivalDate = Convert.ToDateTime(dr["ArrivalDate"].ToString());
                        ObjCVarTruckingOrderContainers.mReturnDate = Convert.ToDateTime(dr["ReturnDate"].ToString());
                        ObjCVarTruckingOrderContainers.mPort2 = Convert.ToString(dr["Port2"].ToString());
                        ObjCVarTruckingOrderContainers.mStatusName = Convert.ToString(dr["StatusName"].ToString());
                        ObjCVarTruckingOrderContainers.mTrucker = Convert.ToString(dr["Trucker"].ToString());
                        ObjCVarTruckingOrderContainers.mTypeName = Convert.ToString(dr["TypeName"].ToString());
                        ObjCVarTruckingOrderContainers.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarTruckingOrderContainers.mTareWeight = Convert.ToDecimal(dr["TareWeight"].ToString());
                        ObjCVarTruckingOrderContainers.mNetWeight = Convert.ToDecimal(dr["NetWeight"].ToString());
                        ObjCVarTruckingOrderContainers.mGrossWeight = Convert.ToDecimal(dr["GrossWeight"].ToString());
                        ObjCVarTruckingOrderContainers.mOperationNO = Convert.ToString(dr["OperationNO"].ToString());
                        ObjCVarTruckingOrderContainers.mFactory = Convert.ToString(dr["Factory"].ToString());
                        ObjCVarTruckingOrderContainers.mCustomLOC = Convert.ToString(dr["CustomLOC"].ToString());
                        ObjCVarTruckingOrderContainers.mTruckWeight = Convert.ToString(dr["TruckWeight"].ToString());
                        ObjCVarTruckingOrderContainers.mFactoryGateOut = Convert.ToString(dr["FactoryGateOut"].ToString());
                        ObjCVarTruckingOrderContainers.mPOD = Convert.ToString(dr["POD"].ToString());
                        ObjCVarTruckingOrderContainers.mInvoice = Convert.ToString(dr["Invoice"].ToString());
                        ObjCVarTruckingOrderContainers.mFGODate = Convert.ToDateTime(dr["FGODate"].ToString());
                        ObjCVarTruckingOrderContainers.mReleaseTime = Convert.ToInt32(dr["ReleaseTime"].ToString());
                        ObjCVarTruckingOrderContainers.mArrivalTime = Convert.ToInt32(dr["ArrivalTime"].ToString());
                        ObjCVarTruckingOrderContainers.mFGOTime = Convert.ToInt32(dr["FGOTime"].ToString());
                        ObjCVarTruckingOrderContainers.mReturnTime = Convert.ToInt32(dr["ReturnTime"].ToString());
                        lstCVarTruckingOrderContainers.Add(ObjCVarTruckingOrderContainers);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarTruckingOrderContainers.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingTruckingOrderContainers";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarTruckingOrderContainers ObjCVarTruckingOrderContainers = new CVarTruckingOrderContainers();
                        ObjCVarTruckingOrderContainers.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarTruckingOrderContainers.mTruckingOrderID = Convert.ToInt64(dr["TruckingOrderID"].ToString());
                        ObjCVarTruckingOrderContainers.mSN = Convert.ToInt32(dr["SN"].ToString());
                        ObjCVarTruckingOrderContainers.mIssueDate = Convert.ToDateTime(dr["IssueDate"].ToString());
                        ObjCVarTruckingOrderContainers.mSL = Convert.ToString(dr["SL"].ToString());
                        ObjCVarTruckingOrderContainers.mBookingNo = Convert.ToString(dr["BookingNo"].ToString());
                        ObjCVarTruckingOrderContainers.mPORT = Convert.ToString(dr["PORT"].ToString());
                        ObjCVarTruckingOrderContainers.mWH = Convert.ToString(dr["WH"].ToString());
                        ObjCVarTruckingOrderContainers.mSize = Convert.ToString(dr["Size"].ToString());
                        ObjCVarTruckingOrderContainers.mContainerNO = Convert.ToString(dr["ContainerNO"].ToString());
                        ObjCVarTruckingOrderContainers.mDriverName = Convert.ToString(dr["DriverName"].ToString());
                        ObjCVarTruckingOrderContainers.mPhone = Convert.ToString(dr["Phone"].ToString());
                        ObjCVarTruckingOrderContainers.mTruckNo = Convert.ToString(dr["TruckNo"].ToString());
                        ObjCVarTruckingOrderContainers.mLocation = Convert.ToString(dr["Location"].ToString());
                        ObjCVarTruckingOrderContainers.mSealNo = Convert.ToString(dr["SealNo"].ToString());
                        ObjCVarTruckingOrderContainers.mReleaseDate = Convert.ToDateTime(dr["ReleaseDate"].ToString());
                        ObjCVarTruckingOrderContainers.mArrivalDate = Convert.ToDateTime(dr["ArrivalDate"].ToString());
                        ObjCVarTruckingOrderContainers.mReturnDate = Convert.ToDateTime(dr["ReturnDate"].ToString());
                        ObjCVarTruckingOrderContainers.mPort2 = Convert.ToString(dr["Port2"].ToString());
                        ObjCVarTruckingOrderContainers.mStatusName = Convert.ToString(dr["StatusName"].ToString());
                        ObjCVarTruckingOrderContainers.mTrucker = Convert.ToString(dr["Trucker"].ToString());
                        ObjCVarTruckingOrderContainers.mTypeName = Convert.ToString(dr["TypeName"].ToString());
                        ObjCVarTruckingOrderContainers.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarTruckingOrderContainers.mTareWeight = Convert.ToDecimal(dr["TareWeight"].ToString());
                        ObjCVarTruckingOrderContainers.mNetWeight = Convert.ToDecimal(dr["NetWeight"].ToString());
                        ObjCVarTruckingOrderContainers.mGrossWeight = Convert.ToDecimal(dr["GrossWeight"].ToString());
                        ObjCVarTruckingOrderContainers.mOperationNO = Convert.ToString(dr["OperationNO"].ToString());
                        ObjCVarTruckingOrderContainers.mFactory = Convert.ToString(dr["Factory"].ToString());
                        ObjCVarTruckingOrderContainers.mCustomLOC = Convert.ToString(dr["CustomLOC"].ToString());
                        ObjCVarTruckingOrderContainers.mTruckWeight = Convert.ToString(dr["TruckWeight"].ToString());
                        ObjCVarTruckingOrderContainers.mFactoryGateOut = Convert.ToString(dr["FactoryGateOut"].ToString());
                        ObjCVarTruckingOrderContainers.mPOD = Convert.ToString(dr["POD"].ToString());
                        ObjCVarTruckingOrderContainers.mInvoice = Convert.ToString(dr["Invoice"].ToString());
                        ObjCVarTruckingOrderContainers.mFGODate = Convert.ToDateTime(dr["FGODate"].ToString());
                        ObjCVarTruckingOrderContainers.mReleaseTime = Convert.ToInt32(dr["ReleaseTime"].ToString());
                        ObjCVarTruckingOrderContainers.mArrivalTime = Convert.ToInt32(dr["ArrivalTime"].ToString());
                        ObjCVarTruckingOrderContainers.mFGOTime = Convert.ToInt32(dr["FGOTime"].ToString());
                        ObjCVarTruckingOrderContainers.mReturnTime = Convert.ToInt32(dr["ReturnTime"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarTruckingOrderContainers.Add(ObjCVarTruckingOrderContainers);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            tr = Con.BeginTransaction(IsolationLevel.Serializable);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DeleteListTruckingOrderContainers";
                else
                    Com.CommandText = "[dbo].UpdateListTruckingOrderContainers";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKTruckingOrderContainers> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DeleteItemTruckingOrderContainers";
                Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                foreach (CPKTruckingOrderContainers ObjCPKTruckingOrderContainers in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt64(ObjCPKTruckingOrderContainers.ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarTruckingOrderContainers> SaveList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.Parameters.Add(new SqlParameter("@TruckingOrderID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SN", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@IssueDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@SL", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@BookingNo", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@PORT", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@WH", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@Size", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@ContainerNO", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@DriverName", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@Phone", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@TruckNo", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@Location", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@SealNo", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@ReleaseDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@ArrivalDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@ReturnDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@Port2", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@StatusName", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@Trucker", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@TypeName", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@TareWeight", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@NetWeight", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@GrossWeight", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@OperationNO", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@Factory", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@CustomLOC", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@TruckWeight", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@FactoryGateOut", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@POD", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@Invoice", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@FGODate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@ReleaseTime", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ArrivalTime", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@FGOTime", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ReturnTime", SqlDbType.Int));
                SqlParameter paraID = Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, "ID", DataRowVersion.Default, null));
                foreach (CVarTruckingOrderContainers ObjCVarTruckingOrderContainers in SaveList)
                {
                    if (ObjCVarTruckingOrderContainers.mIsChanges == true)
                    {
                        if (ObjCVarTruckingOrderContainers.ID == 0)
                        {
                            Com.CommandText = "[dbo].InsertItemTruckingOrderContainers";
                            paraID.Direction = ParameterDirection.Output;
                        }
                        else if (ObjCVarTruckingOrderContainers.ID != 0)
                        {
                            Com.CommandText = "[dbo].UpdateItemTruckingOrderContainers";
                            paraID.Direction = ParameterDirection.Input;
                        }
                        BeginTrans(Com, Con);
                        if (ObjCVarTruckingOrderContainers.ID != 0)
                        {
                            Com.Parameters["@ID"].Value = ObjCVarTruckingOrderContainers.ID;
                        }
                        Com.Parameters["@TruckingOrderID"].Value = ObjCVarTruckingOrderContainers.TruckingOrderID;
                        Com.Parameters["@SN"].Value = ObjCVarTruckingOrderContainers.SN;
                        Com.Parameters["@IssueDate"].Value = ObjCVarTruckingOrderContainers.IssueDate;
                        Com.Parameters["@SL"].Value = ObjCVarTruckingOrderContainers.SL;
                        Com.Parameters["@BookingNo"].Value = ObjCVarTruckingOrderContainers.BookingNo;
                        Com.Parameters["@PORT"].Value = ObjCVarTruckingOrderContainers.PORT;
                        Com.Parameters["@WH"].Value = ObjCVarTruckingOrderContainers.WH;
                        Com.Parameters["@Size"].Value = ObjCVarTruckingOrderContainers.Size;
                        Com.Parameters["@ContainerNO"].Value = ObjCVarTruckingOrderContainers.ContainerNO;
                        Com.Parameters["@DriverName"].Value = ObjCVarTruckingOrderContainers.DriverName;
                        Com.Parameters["@Phone"].Value = ObjCVarTruckingOrderContainers.Phone;
                        Com.Parameters["@TruckNo"].Value = ObjCVarTruckingOrderContainers.TruckNo;
                        Com.Parameters["@Location"].Value = ObjCVarTruckingOrderContainers.Location;
                        Com.Parameters["@SealNo"].Value = ObjCVarTruckingOrderContainers.SealNo;
                        Com.Parameters["@ReleaseDate"].Value = ObjCVarTruckingOrderContainers.ReleaseDate;
                        Com.Parameters["@ArrivalDate"].Value = ObjCVarTruckingOrderContainers.ArrivalDate;
                        Com.Parameters["@ReturnDate"].Value = ObjCVarTruckingOrderContainers.ReturnDate;
                        Com.Parameters["@Port2"].Value = ObjCVarTruckingOrderContainers.Port2;
                        Com.Parameters["@StatusName"].Value = ObjCVarTruckingOrderContainers.StatusName;
                        Com.Parameters["@Trucker"].Value = ObjCVarTruckingOrderContainers.Trucker;
                        Com.Parameters["@TypeName"].Value = ObjCVarTruckingOrderContainers.TypeName;
                        Com.Parameters["@Notes"].Value = ObjCVarTruckingOrderContainers.Notes;
                        Com.Parameters["@TareWeight"].Value = ObjCVarTruckingOrderContainers.TareWeight;
                        Com.Parameters["@NetWeight"].Value = ObjCVarTruckingOrderContainers.NetWeight;
                        Com.Parameters["@GrossWeight"].Value = ObjCVarTruckingOrderContainers.GrossWeight;
                        Com.Parameters["@OperationNO"].Value = ObjCVarTruckingOrderContainers.OperationNO;
                        Com.Parameters["@Factory"].Value = ObjCVarTruckingOrderContainers.Factory;
                        Com.Parameters["@CustomLOC"].Value = ObjCVarTruckingOrderContainers.CustomLOC;
                        Com.Parameters["@TruckWeight"].Value = ObjCVarTruckingOrderContainers.TruckWeight;
                        Com.Parameters["@FactoryGateOut"].Value = ObjCVarTruckingOrderContainers.FactoryGateOut;
                        Com.Parameters["@POD"].Value = ObjCVarTruckingOrderContainers.POD;
                        Com.Parameters["@Invoice"].Value = ObjCVarTruckingOrderContainers.Invoice;
                        Com.Parameters["@FGODate"].Value = ObjCVarTruckingOrderContainers.FGODate;
                        Com.Parameters["@ReleaseTime"].Value = ObjCVarTruckingOrderContainers.ReleaseTime;
                        Com.Parameters["@ArrivalTime"].Value = ObjCVarTruckingOrderContainers.ArrivalTime;
                        Com.Parameters["@FGOTime"].Value = ObjCVarTruckingOrderContainers.FGOTime;
                        Com.Parameters["@ReturnTime"].Value = ObjCVarTruckingOrderContainers.ReturnTime;
                        EndTrans(Com, Con);
                        if (ObjCVarTruckingOrderContainers.ID == 0)
                        {
                            ObjCVarTruckingOrderContainers.ID = Convert.ToInt64(Com.Parameters["@ID"].Value);
                        }
                        ObjCVarTruckingOrderContainers.mIsChanges = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                if (tr != null)
                    tr.Rollback();
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }
}
