using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.Operations.Operations.Generated
{
    [Serializable]
    public partial class CVarvwTruckingOrderCargo
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int64 mID;
        internal Int64 mOperationID;
        internal Int64 mRoutingID;
        internal Int32 mCreatorUserID;
        internal DateTime mCreationDate;
        internal Int32 mModificatorUserID;
        internal DateTime mModificationDate;
        internal String mCode;
        internal String mMotorNumber;
        internal String mChassisNumber;
        internal String mSerialNumber;
        internal String mLotNumber;
        internal String mPackageTypeName;
        internal Int32 mQuantity;
        internal Decimal mLength;
        internal Decimal mWidth;
        internal Decimal mHeight;
        internal Decimal mVolume;
        internal Decimal mVolumetricWeight;
        internal Decimal mNetWeight;
        internal Decimal mGrossWeight;
        internal Decimal mChargeableWeight;
        internal String mContainerTypeName;
        internal Decimal mVGM;
        internal String mCarrierSeal;
        internal Decimal mTareWeight;
        internal String mContainerNumber;
        internal String mOCNCode;
        internal String mModel;
        internal String mEngineNumber;
        internal String mPurchaseItemCode;
        internal String mKeyNumber;
        internal String mEC;
        internal String mPaintType;
        internal String mIC;
        internal String mCommercialInvoiceNumber;
        internal String mInsurancePolicyNumber;
        internal String mProductionOrder;
        internal String mPINumber;
        internal String mBillNumber;
        internal Decimal mCargoGrossWeight;
        internal Decimal mTotalCargoGrossWeight;
        #endregion

        #region "Methods"
        public Int64 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        public Int64 OperationID
        {
            get { return mOperationID; }
            set { mOperationID = value; }
        }
        public Int64 RoutingID
        {
            get { return mRoutingID; }
            set { mRoutingID = value; }
        }
        public Int32 CreatorUserID
        {
            get { return mCreatorUserID; }
            set { mCreatorUserID = value; }
        }
        public DateTime CreationDate
        {
            get { return mCreationDate; }
            set { mCreationDate = value; }
        }
        public Int32 ModificatorUserID
        {
            get { return mModificatorUserID; }
            set { mModificatorUserID = value; }
        }
        public DateTime ModificationDate
        {
            get { return mModificationDate; }
            set { mModificationDate = value; }
        }
        public String Code
        {
            get { return mCode; }
            set { mCode = value; }
        }
        public String MotorNumber
        {
            get { return mMotorNumber; }
            set { mMotorNumber = value; }
        }
        public String ChassisNumber
        {
            get { return mChassisNumber; }
            set { mChassisNumber = value; }
        }
        public String SerialNumber
        {
            get { return mSerialNumber; }
            set { mSerialNumber = value; }
        }
        public String LotNumber
        {
            get { return mLotNumber; }
            set { mLotNumber = value; }
        }
        public String PackageTypeName
        {
            get { return mPackageTypeName; }
            set { mPackageTypeName = value; }
        }
        public Int32 Quantity
        {
            get { return mQuantity; }
            set { mQuantity = value; }
        }
        public Decimal Length
        {
            get { return mLength; }
            set { mLength = value; }
        }
        public Decimal Width
        {
            get { return mWidth; }
            set { mWidth = value; }
        }
        public Decimal Height
        {
            get { return mHeight; }
            set { mHeight = value; }
        }
        public Decimal Volume
        {
            get { return mVolume; }
            set { mVolume = value; }
        }
        public Decimal VolumetricWeight
        {
            get { return mVolumetricWeight; }
            set { mVolumetricWeight = value; }
        }
        public Decimal NetWeight
        {
            get { return mNetWeight; }
            set { mNetWeight = value; }
        }
        public Decimal GrossWeight
        {
            get { return mGrossWeight; }
            set { mGrossWeight = value; }
        }
        public Decimal ChargeableWeight
        {
            get { return mChargeableWeight; }
            set { mChargeableWeight = value; }
        }
        public String ContainerTypeName
        {
            get { return mContainerTypeName; }
            set { mContainerTypeName = value; }
        }
        public Decimal VGM
        {
            get { return mVGM; }
            set { mVGM = value; }
        }
        public String CarrierSeal
        {
            get { return mCarrierSeal; }
            set { mCarrierSeal = value; }
        }
        public Decimal TareWeight
        {
            get { return mTareWeight; }
            set { mTareWeight = value; }
        }
        public String ContainerNumber
        {
            get { return mContainerNumber; }
            set { mContainerNumber = value; }
        }
        public String OCNCode
        {
            get { return mOCNCode; }
            set { mOCNCode = value; }
        }
        public String Model
        {
            get { return mModel; }
            set { mModel = value; }
        }
        public String EngineNumber
        {
            get { return mEngineNumber; }
            set { mEngineNumber = value; }
        }
        public String PurchaseItemCode
        {
            get { return mPurchaseItemCode; }
            set { mPurchaseItemCode = value; }
        }
        public String KeyNumber
        {
            get { return mKeyNumber; }
            set { mKeyNumber = value; }
        }
        public String EC
        {
            get { return mEC; }
            set { mEC = value; }
        }
        public String PaintType
        {
            get { return mPaintType; }
            set { mPaintType = value; }
        }
        public String IC
        {
            get { return mIC; }
            set { mIC = value; }
        }
        public String CommercialInvoiceNumber
        {
            get { return mCommercialInvoiceNumber; }
            set { mCommercialInvoiceNumber = value; }
        }
        public String InsurancePolicyNumber
        {
            get { return mInsurancePolicyNumber; }
            set { mInsurancePolicyNumber = value; }
        }
        public String ProductionOrder
        {
            get { return mProductionOrder; }
            set { mProductionOrder = value; }
        }
        public String PINumber
        {
            get { return mPINumber; }
            set { mPINumber = value; }
        }
        public String BillNumber
        {
            get { return mBillNumber; }
            set { mBillNumber = value; }
        }
        public Decimal CargoGrossWeight
        {
            get { return mCargoGrossWeight; }
            set { mCargoGrossWeight = value; }
        }
        public Decimal TotalCargoGrossWeight
        {
            get { return mTotalCargoGrossWeight; }
            set { mTotalCargoGrossWeight = value; }
        }
        #endregion
    }

    public partial class CvwTruckingOrderCargo
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarvwTruckingOrderCargo> lstCVarvwTruckingOrderCargo = new List<CVarvwTruckingOrderCargo>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwTruckingOrderCargo.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListvwTruckingOrderCargo";
                    Com.Parameters[0].Value = Param;
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwTruckingOrderCargo ObjCVarvwTruckingOrderCargo = new CVarvwTruckingOrderCargo();
                        ObjCVarvwTruckingOrderCargo.mID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarvwTruckingOrderCargo.mOperationID = Convert.ToInt64(dr["OperationID"].ToString());
                        ObjCVarvwTruckingOrderCargo.mRoutingID = Convert.ToInt64(dr["RoutingID"].ToString());
                        ObjCVarvwTruckingOrderCargo.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
                        ObjCVarvwTruckingOrderCargo.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarvwTruckingOrderCargo.mModificatorUserID = Convert.ToInt32(dr["ModificatorUserID"].ToString());
                        ObjCVarvwTruckingOrderCargo.mModificationDate = Convert.ToDateTime(dr["ModificationDate"].ToString());
                        ObjCVarvwTruckingOrderCargo.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarvwTruckingOrderCargo.mMotorNumber = Convert.ToString(dr["MotorNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mChassisNumber = Convert.ToString(dr["ChassisNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mSerialNumber = Convert.ToString(dr["SerialNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mLotNumber = Convert.ToString(dr["LotNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mPackageTypeName = Convert.ToString(dr["PackageTypeName"].ToString());
                        ObjCVarvwTruckingOrderCargo.mQuantity = Convert.ToInt32(dr["Quantity"].ToString());
                        ObjCVarvwTruckingOrderCargo.mLength = Convert.ToDecimal(dr["Length"].ToString());
                        ObjCVarvwTruckingOrderCargo.mWidth = Convert.ToDecimal(dr["Width"].ToString());
                        ObjCVarvwTruckingOrderCargo.mHeight = Convert.ToDecimal(dr["Height"].ToString());
                        ObjCVarvwTruckingOrderCargo.mVolume = Convert.ToDecimal(dr["Volume"].ToString());
                        ObjCVarvwTruckingOrderCargo.mVolumetricWeight = Convert.ToDecimal(dr["VolumetricWeight"].ToString());
                        ObjCVarvwTruckingOrderCargo.mNetWeight = Convert.ToDecimal(dr["NetWeight"].ToString());
                        ObjCVarvwTruckingOrderCargo.mGrossWeight = Convert.ToDecimal(dr["GrossWeight"].ToString());
                        ObjCVarvwTruckingOrderCargo.mChargeableWeight = Convert.ToDecimal(dr["ChargeableWeight"].ToString());
                        ObjCVarvwTruckingOrderCargo.mContainerTypeName = Convert.ToString(dr["ContainerTypeName"].ToString());
                        ObjCVarvwTruckingOrderCargo.mVGM = Convert.ToDecimal(dr["VGM"].ToString());
                        ObjCVarvwTruckingOrderCargo.mCarrierSeal = Convert.ToString(dr["CarrierSeal"].ToString());
                        ObjCVarvwTruckingOrderCargo.mTareWeight = Convert.ToDecimal(dr["TareWeight"].ToString());
                        ObjCVarvwTruckingOrderCargo.mContainerNumber = Convert.ToString(dr["ContainerNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mOCNCode = Convert.ToString(dr["OCNCode"].ToString());
                        ObjCVarvwTruckingOrderCargo.mModel = Convert.ToString(dr["Model"].ToString());
                        ObjCVarvwTruckingOrderCargo.mEngineNumber = Convert.ToString(dr["EngineNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mPurchaseItemCode = Convert.ToString(dr["PurchaseItemCode"].ToString());
                        ObjCVarvwTruckingOrderCargo.mKeyNumber = Convert.ToString(dr["KeyNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mEC = Convert.ToString(dr["EC"].ToString());
                        ObjCVarvwTruckingOrderCargo.mPaintType = Convert.ToString(dr["PaintType"].ToString());
                        ObjCVarvwTruckingOrderCargo.mIC = Convert.ToString(dr["IC"].ToString());
                        ObjCVarvwTruckingOrderCargo.mCommercialInvoiceNumber = Convert.ToString(dr["CommercialInvoiceNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mInsurancePolicyNumber = Convert.ToString(dr["InsurancePolicyNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mProductionOrder = Convert.ToString(dr["ProductionOrder"].ToString());
                        ObjCVarvwTruckingOrderCargo.mPINumber = Convert.ToString(dr["PINumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mBillNumber = Convert.ToString(dr["BillNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mCargoGrossWeight = Convert.ToDecimal(dr["CargoGrossWeight"].ToString());
                        ObjCVarvwTruckingOrderCargo.mTotalCargoGrossWeight = Convert.ToDecimal(dr["TotalCargoGrossWeight"].ToString());
                        lstCVarvwTruckingOrderCargo.Add(ObjCVarvwTruckingOrderCargo);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwTruckingOrderCargo.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingvwTruckingOrderCargo";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwTruckingOrderCargo ObjCVarvwTruckingOrderCargo = new CVarvwTruckingOrderCargo();
                        ObjCVarvwTruckingOrderCargo.mID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarvwTruckingOrderCargo.mOperationID = Convert.ToInt64(dr["OperationID"].ToString());
                        ObjCVarvwTruckingOrderCargo.mRoutingID = Convert.ToInt64(dr["RoutingID"].ToString());
                        ObjCVarvwTruckingOrderCargo.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
                        ObjCVarvwTruckingOrderCargo.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarvwTruckingOrderCargo.mModificatorUserID = Convert.ToInt32(dr["ModificatorUserID"].ToString());
                        ObjCVarvwTruckingOrderCargo.mModificationDate = Convert.ToDateTime(dr["ModificationDate"].ToString());
                        ObjCVarvwTruckingOrderCargo.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarvwTruckingOrderCargo.mMotorNumber = Convert.ToString(dr["MotorNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mChassisNumber = Convert.ToString(dr["ChassisNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mSerialNumber = Convert.ToString(dr["SerialNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mLotNumber = Convert.ToString(dr["LotNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mPackageTypeName = Convert.ToString(dr["PackageTypeName"].ToString());
                        ObjCVarvwTruckingOrderCargo.mQuantity = Convert.ToInt32(dr["Quantity"].ToString());
                        ObjCVarvwTruckingOrderCargo.mLength = Convert.ToDecimal(dr["Length"].ToString());
                        ObjCVarvwTruckingOrderCargo.mWidth = Convert.ToDecimal(dr["Width"].ToString());
                        ObjCVarvwTruckingOrderCargo.mHeight = Convert.ToDecimal(dr["Height"].ToString());
                        ObjCVarvwTruckingOrderCargo.mVolume = Convert.ToDecimal(dr["Volume"].ToString());
                        ObjCVarvwTruckingOrderCargo.mVolumetricWeight = Convert.ToDecimal(dr["VolumetricWeight"].ToString());
                        ObjCVarvwTruckingOrderCargo.mNetWeight = Convert.ToDecimal(dr["NetWeight"].ToString());
                        ObjCVarvwTruckingOrderCargo.mGrossWeight = Convert.ToDecimal(dr["GrossWeight"].ToString());
                        ObjCVarvwTruckingOrderCargo.mChargeableWeight = Convert.ToDecimal(dr["ChargeableWeight"].ToString());
                        ObjCVarvwTruckingOrderCargo.mContainerTypeName = Convert.ToString(dr["ContainerTypeName"].ToString());
                        ObjCVarvwTruckingOrderCargo.mVGM = Convert.ToDecimal(dr["VGM"].ToString());
                        ObjCVarvwTruckingOrderCargo.mCarrierSeal = Convert.ToString(dr["CarrierSeal"].ToString());
                        ObjCVarvwTruckingOrderCargo.mTareWeight = Convert.ToDecimal(dr["TareWeight"].ToString());
                        ObjCVarvwTruckingOrderCargo.mContainerNumber = Convert.ToString(dr["ContainerNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mOCNCode = Convert.ToString(dr["OCNCode"].ToString());
                        ObjCVarvwTruckingOrderCargo.mModel = Convert.ToString(dr["Model"].ToString());
                        ObjCVarvwTruckingOrderCargo.mEngineNumber = Convert.ToString(dr["EngineNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mPurchaseItemCode = Convert.ToString(dr["PurchaseItemCode"].ToString());
                        ObjCVarvwTruckingOrderCargo.mKeyNumber = Convert.ToString(dr["KeyNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mEC = Convert.ToString(dr["EC"].ToString());
                        ObjCVarvwTruckingOrderCargo.mPaintType = Convert.ToString(dr["PaintType"].ToString());
                        ObjCVarvwTruckingOrderCargo.mIC = Convert.ToString(dr["IC"].ToString());
                        ObjCVarvwTruckingOrderCargo.mCommercialInvoiceNumber = Convert.ToString(dr["CommercialInvoiceNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mInsurancePolicyNumber = Convert.ToString(dr["InsurancePolicyNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mProductionOrder = Convert.ToString(dr["ProductionOrder"].ToString());
                        ObjCVarvwTruckingOrderCargo.mPINumber = Convert.ToString(dr["PINumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mBillNumber = Convert.ToString(dr["BillNumber"].ToString());
                        ObjCVarvwTruckingOrderCargo.mCargoGrossWeight = Convert.ToDecimal(dr["CargoGrossWeight"].ToString());
                        ObjCVarvwTruckingOrderCargo.mTotalCargoGrossWeight = Convert.ToDecimal(dr["TotalCargoGrossWeight"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarvwTruckingOrderCargo.Add(ObjCVarvwTruckingOrderCargo);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
    }
}
