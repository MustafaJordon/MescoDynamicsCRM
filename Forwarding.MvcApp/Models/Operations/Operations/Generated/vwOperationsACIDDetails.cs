using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.Operations.Operations.Generated
{
    [Serializable]
    public partial class CVarvwOperationsACIDDetails
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int32 mID;
        internal Int64 mOperationID;
        internal String mReImportApproval;
        internal String mReImportApprovalNumber;
        internal String mSurveyRequest;
        internal String mBankNomination;
        internal String mTransactionMethod;
        internal String mBankNominationOpenedBy;
        internal String mCustomsCertificateNo;
        internal DateTime mExpirationDate;
        internal DateTime mSurveyDate;
        internal DateTime mUploadCargoDate;
        internal String mOperationHouseNumber;
        internal Int32 mOperationBLType;
        internal Int32 mOperationCodeSerial;
        internal String mOperationCode;
        internal String mOperationACIDNumber;
        internal String mOperationACIDDetails;
        internal Int32 mOperationCreatorUserID;
        internal String mOperationOpenedBy;
        internal Int32 mOperationOperationManID;
        internal String mOperationOperationManName;
        internal String mOperationMasterBL;
        internal String mOperationHouseBLs;
        internal String mOperationNotes;
        internal Int32 mConsigneeID;
        internal Int32 mConsigneeID2;
        internal String mOperationConsigneeName;
        internal String mOperationConsignee2Name;
        internal String mOperationQuantity;
        #endregion

        #region "Methods"
        public Int32 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        public Int64 OperationID
        {
            get { return mOperationID; }
            set { mOperationID = value; }
        }
        public String ReImportApproval
        {
            get { return mReImportApproval; }
            set { mReImportApproval = value; }
        }
        public String ReImportApprovalNumber
        {
            get { return mReImportApprovalNumber; }
            set { mReImportApprovalNumber = value; }
        }
        public String SurveyRequest
        {
            get { return mSurveyRequest; }
            set { mSurveyRequest = value; }
        }
        public String BankNomination
        {
            get { return mBankNomination; }
            set { mBankNomination = value; }
        }
        public String TransactionMethod
        {
            get { return mTransactionMethod; }
            set { mTransactionMethod = value; }
        }
        public String BankNominationOpenedBy
        {
            get { return mBankNominationOpenedBy; }
            set { mBankNominationOpenedBy = value; }
        }
        public String CustomsCertificateNo
        {
            get { return mCustomsCertificateNo; }
            set { mCustomsCertificateNo = value; }
        }
        public DateTime ExpirationDate
        {
            get { return mExpirationDate; }
            set { mExpirationDate = value; }
        }
        public DateTime SurveyDate
        {
            get { return mSurveyDate; }
            set { mSurveyDate = value; }
        }
        public DateTime UploadCargoDate
        {
            get { return mUploadCargoDate; }
            set { mUploadCargoDate = value; }
        }
        public String OperationHouseNumber
        {
            get { return mOperationHouseNumber; }
            set { mOperationHouseNumber = value; }
        }
        public Int32 OperationBLType
        {
            get { return mOperationBLType; }
            set { mOperationBLType = value; }
        }
        public Int32 OperationCodeSerial
        {
            get { return mOperationCodeSerial; }
            set { mOperationCodeSerial = value; }
        }
        public String OperationCode
        {
            get { return mOperationCode; }
            set { mOperationCode = value; }
        }
        public String OperationACIDNumber
        {
            get { return mOperationACIDNumber; }
            set { mOperationACIDNumber = value; }
        }
        public String OperationACIDDetails
        {
            get { return mOperationACIDDetails; }
            set { mOperationACIDDetails = value; }
        }
        public Int32 OperationCreatorUserID
        {
            get { return mOperationCreatorUserID; }
            set { mOperationCreatorUserID = value; }
        }
        public String OperationOpenedBy
        {
            get { return mOperationOpenedBy; }
            set { mOperationOpenedBy = value; }
        }
        public Int32 OperationOperationManID
        {
            get { return mOperationOperationManID; }
            set { mOperationOperationManID = value; }
        }
        public String OperationOperationManName
        {
            get { return mOperationOperationManName; }
            set { mOperationOperationManName = value; }
        }
        public String OperationMasterBL
        {
            get { return mOperationMasterBL; }
            set { mOperationMasterBL = value; }
        }
        public String OperationHouseBLs
        {
            get { return mOperationHouseBLs; }
            set { mOperationHouseBLs = value; }
        }
        public String OperationNotes
        {
            get { return mOperationNotes; }
            set { mOperationNotes = value; }
        }
        public Int32 ConsigneeID
        {
            get { return mConsigneeID; }
            set { mConsigneeID = value; }
        }
        public Int32 ConsigneeID2
        {
            get { return mConsigneeID2; }
            set { mConsigneeID2 = value; }
        }
        public String OperationConsigneeName
        {
            get { return mOperationConsigneeName; }
            set { mOperationConsigneeName = value; }
        }
        public String OperationConsignee2Name
        {
            get { return mOperationConsignee2Name; }
            set { mOperationConsignee2Name = value; }
        }
        public String OperationQuantity
        {
            get { return mOperationQuantity; }
            set { mOperationQuantity = value; }
        }
        #endregion
    }

    public partial class CvwOperationsACIDDetails
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarvwOperationsACIDDetails> lstCVarvwOperationsACIDDetails = new List<CVarvwOperationsACIDDetails>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwOperationsACIDDetails.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListvwOperationsACIDDetails";
                    Com.Parameters[0].Value = Param;
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwOperationsACIDDetails ObjCVarvwOperationsACIDDetails = new CVarvwOperationsACIDDetails();
                        ObjCVarvwOperationsACIDDetails.mID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationID = Convert.ToInt64(dr["OperationID"].ToString());
                        ObjCVarvwOperationsACIDDetails.mReImportApproval = Convert.ToString(dr["ReImportApproval"].ToString());
                        ObjCVarvwOperationsACIDDetails.mReImportApprovalNumber = Convert.ToString(dr["ReImportApprovalNumber"].ToString());
                        ObjCVarvwOperationsACIDDetails.mSurveyRequest = Convert.ToString(dr["SurveyRequest"].ToString());
                        ObjCVarvwOperationsACIDDetails.mBankNomination = Convert.ToString(dr["BankNomination"].ToString());
                        ObjCVarvwOperationsACIDDetails.mTransactionMethod = Convert.ToString(dr["TransactionMethod"].ToString());
                        ObjCVarvwOperationsACIDDetails.mBankNominationOpenedBy = Convert.ToString(dr["BankNominationOpenedBy"].ToString());
                        ObjCVarvwOperationsACIDDetails.mCustomsCertificateNo = Convert.ToString(dr["CustomsCertificateNo"].ToString());
                        ObjCVarvwOperationsACIDDetails.mExpirationDate = Convert.ToDateTime(dr["ExpirationDate"].ToString());
                        ObjCVarvwOperationsACIDDetails.mSurveyDate = Convert.ToDateTime(dr["SurveyDate"].ToString());
                        ObjCVarvwOperationsACIDDetails.mUploadCargoDate = Convert.ToDateTime(dr["UploadCargoDate"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationHouseNumber = Convert.ToString(dr["OperationHouseNumber"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationBLType = Convert.ToInt32(dr["OperationBLType"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationCodeSerial = Convert.ToInt32(dr["OperationCodeSerial"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationCode = Convert.ToString(dr["OperationCode"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationACIDNumber = Convert.ToString(dr["OperationACIDNumber"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationACIDDetails = Convert.ToString(dr["OperationACIDDetails"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationCreatorUserID = Convert.ToInt32(dr["OperationCreatorUserID"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationOpenedBy = Convert.ToString(dr["OperationOpenedBy"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationOperationManID = Convert.ToInt32(dr["OperationOperationManID"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationOperationManName = Convert.ToString(dr["OperationOperationManName"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationMasterBL = Convert.ToString(dr["OperationMasterBL"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationHouseBLs = Convert.ToString(dr["OperationHouseBLs"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationNotes = Convert.ToString(dr["OperationNotes"].ToString());
                        ObjCVarvwOperationsACIDDetails.mConsigneeID = Convert.ToInt32(dr["ConsigneeID"].ToString());
                        ObjCVarvwOperationsACIDDetails.mConsigneeID2 = Convert.ToInt32(dr["ConsigneeID2"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationConsigneeName = Convert.ToString(dr["OperationConsigneeName"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationConsignee2Name = Convert.ToString(dr["OperationConsignee2Name"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationQuantity = Convert.ToString(dr["OperationQuantity"].ToString());
                        lstCVarvwOperationsACIDDetails.Add(ObjCVarvwOperationsACIDDetails);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwOperationsACIDDetails.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingvwOperationsACIDDetails";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwOperationsACIDDetails ObjCVarvwOperationsACIDDetails = new CVarvwOperationsACIDDetails();
                        ObjCVarvwOperationsACIDDetails.mID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationID = Convert.ToInt64(dr["OperationID"].ToString());
                        ObjCVarvwOperationsACIDDetails.mReImportApproval = Convert.ToString(dr["ReImportApproval"].ToString());
                        ObjCVarvwOperationsACIDDetails.mReImportApprovalNumber = Convert.ToString(dr["ReImportApprovalNumber"].ToString());
                        ObjCVarvwOperationsACIDDetails.mSurveyRequest = Convert.ToString(dr["SurveyRequest"].ToString());
                        ObjCVarvwOperationsACIDDetails.mBankNomination = Convert.ToString(dr["BankNomination"].ToString());
                        ObjCVarvwOperationsACIDDetails.mTransactionMethod = Convert.ToString(dr["TransactionMethod"].ToString());
                        ObjCVarvwOperationsACIDDetails.mBankNominationOpenedBy = Convert.ToString(dr["BankNominationOpenedBy"].ToString());
                        ObjCVarvwOperationsACIDDetails.mCustomsCertificateNo = Convert.ToString(dr["CustomsCertificateNo"].ToString());
                        ObjCVarvwOperationsACIDDetails.mExpirationDate = Convert.ToDateTime(dr["ExpirationDate"].ToString());
                        ObjCVarvwOperationsACIDDetails.mSurveyDate = Convert.ToDateTime(dr["SurveyDate"].ToString());
                        ObjCVarvwOperationsACIDDetails.mUploadCargoDate = Convert.ToDateTime(dr["UploadCargoDate"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationHouseNumber = Convert.ToString(dr["OperationHouseNumber"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationBLType = Convert.ToInt32(dr["OperationBLType"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationCodeSerial = Convert.ToInt32(dr["OperationCodeSerial"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationCode = Convert.ToString(dr["OperationCode"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationACIDNumber = Convert.ToString(dr["OperationACIDNumber"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationACIDDetails = Convert.ToString(dr["OperationACIDDetails"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationCreatorUserID = Convert.ToInt32(dr["OperationCreatorUserID"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationOpenedBy = Convert.ToString(dr["OperationOpenedBy"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationOperationManID = Convert.ToInt32(dr["OperationOperationManID"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationOperationManName = Convert.ToString(dr["OperationOperationManName"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationMasterBL = Convert.ToString(dr["OperationMasterBL"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationHouseBLs = Convert.ToString(dr["OperationHouseBLs"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationNotes = Convert.ToString(dr["OperationNotes"].ToString());
                        ObjCVarvwOperationsACIDDetails.mConsigneeID = Convert.ToInt32(dr["ConsigneeID"].ToString());
                        ObjCVarvwOperationsACIDDetails.mConsigneeID2 = Convert.ToInt32(dr["ConsigneeID2"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationConsigneeName = Convert.ToString(dr["OperationConsigneeName"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationConsignee2Name = Convert.ToString(dr["OperationConsignee2Name"].ToString());
                        ObjCVarvwOperationsACIDDetails.mOperationQuantity = Convert.ToString(dr["OperationQuantity"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarvwOperationsACIDDetails.Add(ObjCVarvwOperationsACIDDetails);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
    }
}
