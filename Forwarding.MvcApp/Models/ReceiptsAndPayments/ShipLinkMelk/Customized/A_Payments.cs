using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;
using Forwarding.MvcApp.Models.Customized;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.ReceiptsAndPayments.ShipLinkMelk.Customized
{
    public static class GlobalConnection
    {
       
        //public static SqlTransaction transaction;

        public static bool BulkTransHasErrors;

        public static string BulkTransName;
        public static SqlTransaction myBulkTrans;
        public static SqlConnection myBulkTransConnection; 

        public static SqlConnection myConnection; 
        public static SqlTransaction myTrans;
        public static SqlCommand myCommand;


        public static bool CreateConnection()
        {

            string Connectionstring = ConfigurationManager.ConnectionStrings["ConnectionString"].ToString();
            myConnection = new SqlConnection(Connectionstring);
            myBulkTransConnection = new SqlConnection(Connectionstring);

            try
            {

                myConnection.Open();
                myConnection.Close();
                return true;
            }
            catch (SqlException x)
            {
                return false;
            }
        }
        public static void CloseConnection()
        {
            if (myConnection.State == ConnectionState.Open)
                myConnection.Close();
        }

        public static void OpenConnection()
        {
            if (myConnection.State == ConnectionState.Closed)
                myConnection.Open();
        }
        public static void StartBulkTrans()
        {
            Random rnd = new Random();
            BulkTransName = "BulkTrans" + rnd.Next();
            if (myBulkTransConnection.State == ConnectionState.Closed)
                myBulkTransConnection.Open();
            myBulkTrans = myBulkTransConnection.BeginTransaction(IsolationLevel.ReadUncommitted, BulkTransName);

            BulkTransHasErrors = false;
        }
        public static void EndBulkTrans()
        {
            if (BulkTransHasErrors)
            {
                myBulkTrans.Rollback(BulkTransName);
            }
            else
            {
                myBulkTrans.Commit();
            }
            if (myBulkTransConnection.State == ConnectionState.Open)
                myBulkTransConnection.Close();

        }
        public static void RollbackBulkTrans()
        {
            try
            {
                myBulkTrans.Rollback(BulkTransName);

                if (myBulkTransConnection.State == ConnectionState.Open)
                    myBulkTransConnection.Close();
            }
            catch
            {
                if (myBulkTransConnection.State == ConnectionState.Open)
                    myBulkTransConnection.Close();
            }
        }
    }
    [Serializable]
    public class CPKA_Payments
    {
        #region "variables"
        private Int64 mID;
        #endregion

        #region "Methods"
        public Int64 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarA_Payments : CPKA_Payments
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int32 mPaymentID;
        internal String mCode;
        internal DateTime mPaymentDate;
        internal Int64 mClientID;
        internal String mNotes;
        internal Int32 mUserID; 
        internal Boolean mIsDeleted;
        internal String mTotalCost; 
        internal Int32 mPaymentCurrencyID;
        internal Decimal mPaymentAmount; 
        internal Decimal mPaymentExchangeRate;
        internal Int32 mBankChargesCurrency;
        internal Decimal mBankChargesAmount;
        internal Int32 mRefundCurrency;
        internal Decimal mRefundAmount;
        internal Boolean misExtra;
        #endregion

        #region "Methods"
        public Int32 PaymentID
        {
            get { return mPaymentID; }
            set { mIsChanges = true; mPaymentID = value; }
        }
        public String Code
        {
            get { return mCode; }
            set { mIsChanges = true; mCode = value; }
        }
        public DateTime PaymentDate
        {
            get { return mPaymentDate; }
            set { mIsChanges = true; mPaymentDate = value; }
        }
        public Int64 ClientID
        {
            get { return mClientID; }
            set { mIsChanges = true; mClientID = value; }
        }
        public String Notes
        {
            get { return mNotes; }
            set { mIsChanges = true; mNotes = value; }
        }
        
        public Int32 UserID
        {
            get { return mUserID; }
            set { mIsChanges = true; mUserID = value; }
        }
        
        public Boolean IsDeleted
        {
            get { return mIsDeleted; }
            set { mIsChanges = true; mIsDeleted = value; }
        }
        public String TotalCost
        {
            get { return mTotalCost; }
            set { mIsChanges = true; mTotalCost = value; }
        }
        public Int32 PaymentCurrencyID
        {
            get { return mPaymentCurrencyID; }
            set { mIsChanges = true; mPaymentCurrencyID = value; }
        }
        
        public Decimal PaymentAmount     
        {
            get { return mPaymentAmount; }
            set { mIsChanges = true; mPaymentAmount = value; }
        }
        public Decimal PaymentExchangeRate
        {
            get { return mPaymentExchangeRate; }
            set { mIsChanges = true; mPaymentExchangeRate = value; }
        }
        public Int32 BankChargesCurrency
        {
            get { return mBankChargesCurrency; }
            set { mIsChanges = true; mBankChargesCurrency = value; }
        }

        public Decimal BankChargesAmount
        {
            get { return mBankChargesAmount; }
            set { mIsChanges = true; mBankChargesAmount = value; }
        }
        public Int32 RefundCurrency
        {
            get { return mRefundCurrency; }
            set { mIsChanges = true; mRefundCurrency = value; }
        }

        public Decimal RefundAmount
        {
            get { return mRefundAmount; }
            set { mIsChanges = true; mRefundAmount = value; }
        }
        public bool isExtra
        {
            get { return misExtra; }
            set { mIsChanges = true; misExtra = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CA_Payments
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarA_Payments> lstCVarA_Payments = new List<CVarA_Payments>();
        public List<CPKA_Payments> lstDeletedCPKA_Payments = new List<CPKA_Payments>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetItem(Int64 ID)
        {
            return DataFill(Convert.ToString(ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarA_Payments.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListA_Payments";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].GetItemA_Payments";
                    Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                    Com.Parameters[0].Value = Convert.ToInt64(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarA_Payments ObjCVarA_Payments = new CVarA_Payments();
                        ObjCVarA_Payments.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarA_Payments.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarA_Payments.mPaymentDate = Convert.ToDateTime(dr["PaymentDate"].ToString());
                        ObjCVarA_Payments.mClientID = Convert.ToInt64(dr["ClientID"].ToString());
                        ObjCVarA_Payments.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarA_Payments.mUserID = Convert.ToInt32(dr["UserID"].ToString());
                        ObjCVarA_Payments.mIsDeleted = Convert.ToBoolean(dr["IsDeleted"].ToString());
                        lstCVarA_Payments.Add(ObjCVarA_Payments);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarA_Payments.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingA_Payments";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarA_Payments ObjCVarA_Payments = new CVarA_Payments();
                        ObjCVarA_Payments.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarA_Payments.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarA_Payments.mPaymentDate = Convert.ToDateTime(dr["PaymentDate"].ToString());
                        ObjCVarA_Payments.mClientID = Convert.ToInt64(dr["ClientID"].ToString());
                        ObjCVarA_Payments.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarA_Payments.mUserID = Convert.ToInt32(dr["UserID"].ToString());
                        ObjCVarA_Payments.mIsDeleted = Convert.ToBoolean(dr["IsDeleted"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarA_Payments.Add(ObjCVarA_Payments);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            //tr = Con.BeginTransaction(IsolationLevel.ReadUncommitted);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DeleteListA_Payments";
                else
                    Com.CommandText = "[dbo].UpdateListA_Payments";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKA_Payments> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DeleteItemA_Payments";
                Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                foreach (CPKA_Payments ObjCPKA_Payments in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt64(ObjCPKA_Payments.ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarA_Payments> SaveList)
        {
            //GlobalConnection.OpenConnection();
            Exception Exp = null;
            //GlobalConnection.GlobalCon = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            //SqlCommand Com;// = GlobalConnection.GlobalCom;
            try
            {
               // GlobalConnection.myTrans = GlobalConnection.myConnection.BeginTransaction(IsolationLevel.ReadUncommitted);
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;

                //GlobalConnection.GlobalCon.Open();
                //Com = new SqlCommand();
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@Code", SqlDbType.NVarChar));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@PaymentDate", SqlDbType.DateTime));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@ClientID", SqlDbType.BigInt));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@UserID", SqlDbType.Int));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@IsDeleted", SqlDbType.Bit));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@TotalCost", SqlDbType.NVarChar));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@PaymentCurrencyID", SqlDbType.Int));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@PaymentAmount", SqlDbType.Decimal));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@PaymentExchangeRate", SqlDbType.Decimal));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@BankChargesAmount", SqlDbType.Decimal));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@BankChargesCurrencyID", SqlDbType.Int));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@RefundAmount", SqlDbType.Decimal));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@RefundCurrencyID", SqlDbType.Int));
                GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@isExtra", SqlDbType.Bit));


                SqlParameter paraID = GlobalConnection.myCommand.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, "ID", DataRowVersion.Default, null));
                foreach (CVarA_Payments ObjCVarA_Payments in SaveList)
                {
                    if (ObjCVarA_Payments.mIsChanges == true)
                    {
                        if (ObjCVarA_Payments.ID == 0)
                        {
                            GlobalConnection.myCommand.CommandText = "[dbo].InsertItemA_Payments";
                            paraID.Direction = ParameterDirection.Output;
                        }
                        else if (ObjCVarA_Payments.ID != 0)
                        {
                            GlobalConnection.myCommand.CommandText = "[dbo].UpdateItemA_Payments";
                            paraID.Direction = ParameterDirection.Input;
                        }
                        /////////////
                        //BeginTrans(Com, GlobalConnection.GlobalCon);
                        //////////////
                        if (ObjCVarA_Payments.ID != 0)
                        {
                            GlobalConnection.myCommand.Parameters["@ID"].Value = ObjCVarA_Payments.ID;
                        }
                        GlobalConnection.myCommand.Parameters["@Code"].Value = ObjCVarA_Payments.Code;
                        GlobalConnection.myCommand.Parameters["@PaymentDate"].Value = ObjCVarA_Payments.PaymentDate;
                        GlobalConnection.myCommand.Parameters["@ClientID"].Value = ObjCVarA_Payments.ClientID;
                        GlobalConnection.myCommand.Parameters["@Notes"].Value = ObjCVarA_Payments.Notes;
                        GlobalConnection.myCommand.Parameters["@UserID"].Value = ObjCVarA_Payments.UserID;
                        GlobalConnection.myCommand.Parameters["@IsDeleted"].Value = ObjCVarA_Payments.IsDeleted;
                        GlobalConnection.myCommand.Parameters["@TotalCost"].Value = ObjCVarA_Payments.TotalCost;
                        GlobalConnection.myCommand.Parameters["@PaymentCurrencyID"].Value = ObjCVarA_Payments.PaymentCurrencyID;
                        GlobalConnection.myCommand.Parameters["@PaymentAmount"].Value = ObjCVarA_Payments.PaymentAmount;
                        GlobalConnection.myCommand.Parameters["@PaymentExchangeRate"].Value = ObjCVarA_Payments.PaymentExchangeRate;
                        GlobalConnection.myCommand.Parameters["@BankChargesAmount"].Value = ObjCVarA_Payments.BankChargesAmount;
                        GlobalConnection.myCommand.Parameters["@BankChargesCurrencyID"].Value = ObjCVarA_Payments.BankChargesCurrency;
                        GlobalConnection.myCommand.Parameters["@RefundAmount"].Value = ObjCVarA_Payments.RefundAmount;
                        GlobalConnection.myCommand.Parameters["@RefundCurrencyID"].Value = ObjCVarA_Payments.RefundCurrency;
                        GlobalConnection.myCommand.Parameters["@isExtra"].Value = ObjCVarA_Payments.isExtra;


                        //EndTrans(Com, GlobalConnection.GlobalCon);
                        GlobalConnection.myCommand.ExecuteNonQuery();
                 
                        //GlobalConnection.myTrans.Commit();
                        if (ObjCVarA_Payments.ID == 0)
                        {
                            ObjCVarA_Payments.ID = Convert.ToInt64(GlobalConnection.myCommand.Parameters["@ID"].Value);
                        }
                        ObjCVarA_Payments.mIsChanges = false;
                    }
                   
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                //if (tr != null)
                //    tr.Rollback();
                //GlobalConnection.transaction.Rollback();
                GlobalConnection.myTrans.Rollback();
            }
            finally
            {
                //GlobalConnection.myConnection.Close();
                //GlobalConnection.myConnection.Dispose();
            }
            return Exp;
        }


     


        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }

    [Serializable]
    public class CPKA_VoucherPayments
    {
        #region "variables"
        private Int64 mID;
        #endregion

        #region "Methods"
        public Int64 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarA_VoucherPayments : CPKA_VoucherPayments
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int32 mSafeID;
        internal String mSafeName;
        internal Int32 mBankID;
        internal String mBankName;
        internal Int32 mCurrencyID;
        internal String mCurrencyName;
        internal Decimal mExchangeRate;
        internal Decimal mNewExchangeRate;

        internal Decimal mAmount;
        internal String mNotes;
        internal String mChequeNo;
        internal DateTime mChequeDate;
        internal Int32 mVoucherType;
        internal Int32 mVoucherID;
        internal Int32 mPaymentID;
        internal Boolean mIsCheque;
        internal Int32 mTaxID;
        internal Decimal mTaxValue;
        internal Int32 mTaxSign;
        internal Int32 mTaxID2;
        internal Decimal mTaxValue2;
        internal Int32 mTaxSign2;
        internal Int32 mDiscountTaxID;
        internal Decimal mDiscountTaxValue;
        internal Int32 mDiscountTaxID2;
        internal Decimal mExtraAmount;
        internal Decimal mDiscountTaxValue2;
        internal String mVoucherCode;
        
        #endregion

        #region "Methods"
        public Int32 SafeID
        {
            get { return mSafeID; }
            set { mIsChanges = true; mSafeID = value; }
        }
        public String SafeName
        {
            get { return mSafeName; }
            set { mIsChanges = true; mSafeName = value; }
        }
        public Int32 BankID
        {
            get { return mBankID; }
            set { mIsChanges = true; mBankID = value; }
        }
        public String BankName
        {
            get { return mBankName; }
            set { mIsChanges = true; mBankName = value; }
        }
        public Int32 CurrencyID
        {
            get { return mCurrencyID; }
            set { mIsChanges = true; mCurrencyID = value; }
        }
        public String CurrencyName
        {
            get { return mCurrencyName; }
            set { mIsChanges = true; mCurrencyName = value; }
        }
        public Decimal ExchangeRate
        {
            get { return mExchangeRate; }
            set { mIsChanges = true; mExchangeRate = value; }
        }
        public Decimal NewExchangeRate
        {
            get { return mNewExchangeRate; }
            set { mIsChanges = true; mNewExchangeRate = value; }
        }

        public Decimal Amount
        {
            get { return mAmount; }
            set { mIsChanges = true; mAmount = value; }
        }

        public Decimal ExtraAmount
        {
            get { return mExtraAmount; }
            set { mIsChanges = true; mExtraAmount = value; }
        }
        public String Notes
        {
            get { return mNotes; }
            set { mIsChanges = true; mNotes = value; }
        }
        public String ChequeNo
        {
            get { return mChequeNo; }
            set { mIsChanges = true; mChequeNo = value; }
        }
        public DateTime ChequeDate
        {
            get { return mChequeDate; }
            set { mIsChanges = true; mChequeDate = value; }
        }

        public Int32 VoucherType
        {
            get { return mVoucherType; }
            set { mIsChanges = true; mVoucherType = value; }
        }
        public Int32 VoucherID
        {
            get { return mVoucherID; }
            set { mIsChanges = true; mVoucherID = value; }
        }
        public Int32 PaymentID
        {
            get { return mPaymentID; }
            set { mIsChanges = true; mPaymentID = value; }
        }
        public Boolean IsCheque
        {
            get { return mIsCheque; }
            set { mIsChanges = true; mIsCheque = value; }
        }
        public Int32 TaxID
        {
            get { return mTaxID; }
            set { mIsChanges = true; mTaxID = value; }
        }
        public Decimal TaxValue
        {
            get { return mTaxValue; }
            set { mIsChanges = true; mTaxValue = value; }
        }
        public Int32 TaxSign
        {
            get { return mTaxSign; }
            set { mIsChanges = true; mTaxSign = value; }
        }
        public Int32 TaxID2
        {
            get { return mTaxID2; }
            set { mIsChanges = true; mTaxID2 = value; }
        }
        public Decimal TaxValue2
        {
            get { return mTaxValue2; }
            set { mIsChanges = true; mTaxValue2 = value; }
        }
        public Int32 TaxSign2
        {
            get { return mTaxSign2; }
            set { mIsChanges = true; mTaxSign2 = value; }
        }
        public Int32 DiscountTaxID
        {
            get { return mDiscountTaxID; }
            set { mIsChanges = true; mDiscountTaxID = value; }
        }
        public Decimal DiscountTaxValue
        {
            get { return mDiscountTaxValue; }
            set { mIsChanges = true; mDiscountTaxValue = value; }
        }
        public Int32 DiscountTaxID2
        {
            get { return mDiscountTaxID2; }
            set { mIsChanges = true; mDiscountTaxID2 = value; }
        }

        
        

        public Decimal DiscountTaxValue2
        {
            get { return mDiscountTaxValue2; }
            set { mIsChanges = true; mDiscountTaxValue2 = value; }
        }
        public String VoucherCode
        {
            get { return mVoucherCode; }
            set { mIsChanges = true; mVoucherCode = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CA_VoucherPayments
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarA_VoucherPayments> lstCVarA_VoucherPayments = new List<CVarA_VoucherPayments>();
        public List<CPKA_VoucherPayments> lstDeletedCPKA_VoucherPayments = new List<CPKA_VoucherPayments>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetItem(Int64 ID)
        {
            return DataFill(Convert.ToString(ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            CCustomizedDBCall objCCustomizedDBCall = new CCustomizedDBCall();
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarA_VoucherPayments.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListA_VoucherPayments";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].GetItemA_VoucherPayments";
                    Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                    Com.Parameters[0].Value = Convert.ToInt64(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarA_VoucherPayments ObjCVarA_VoucherPayments = new CVarA_VoucherPayments();
                        ObjCVarA_VoucherPayments.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarA_VoucherPayments.mSafeID = Convert.ToInt32(dr["SafeID"].ToString());
                        ObjCVarA_VoucherPayments.mBankID = Convert.ToInt32(dr["BankID"].ToString());
                        ObjCVarA_VoucherPayments.mCurrencyID = Convert.ToInt32(dr["CurrencyID"].ToString());
                        ObjCVarA_VoucherPayments.mExchangeRate = Convert.ToDecimal(dr["ExchangeRate"].ToString());
                        ObjCVarA_VoucherPayments.mAmount = Convert.ToDecimal(dr["Amount"].ToString());
                        ObjCVarA_VoucherPayments.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarA_VoucherPayments.mChequeNo = Convert.ToString(dr["ChequeNo"].ToString());
                        ObjCVarA_VoucherPayments.mChequeDate = Convert.ToDateTime(dr["ChequeDate"].ToString());
                        ObjCVarA_VoucherPayments.mVoucherType = Convert.ToInt32(dr["VoucherType"].ToString());
                        ObjCVarA_VoucherPayments.mIsCheque = Convert.ToBoolean(dr["IsCheque"].ToString());
                        ObjCVarA_VoucherPayments.mTaxID = Convert.ToInt32(dr["TaxID"].ToString());
                        ObjCVarA_VoucherPayments.mTaxValue = Convert.ToDecimal(dr["TaxValue"].ToString());
                        ObjCVarA_VoucherPayments.mTaxSign = Convert.ToInt32(dr["TaxSign"].ToString());
                        ObjCVarA_VoucherPayments.mTaxID2 = Convert.ToInt32(dr["TaxID2"].ToString());
                        ObjCVarA_VoucherPayments.mTaxValue2 = Convert.ToDecimal(dr["TaxValue2"].ToString());
                        ObjCVarA_VoucherPayments.mTaxSign2 = Convert.ToInt32(dr["TaxSign2"].ToString());
                        
                        ObjCVarA_VoucherPayments.mVoucherID = Convert.ToInt32(dr["VoucherID"].ToString());
                        ObjCVarA_VoucherPayments.mPaymentID = Convert.ToInt32(dr["PaymentID"].ToString());

                        ObjCVarA_VoucherPayments.mCurrencyName = objCCustomizedDBCall.CallStringFunction("select Name from Currency where ID = " + ObjCVarA_VoucherPayments.mCurrencyID);
                        ObjCVarA_VoucherPayments.mSafeName = objCCustomizedDBCall.CallStringFunction("select Name from Safes where ID = " + ObjCVarA_VoucherPayments.mSafeID);
                        ObjCVarA_VoucherPayments.mBankName = objCCustomizedDBCall.CallStringFunction("select Name from Bank where ID = " + ObjCVarA_VoucherPayments.mBankID);
                        ObjCVarA_VoucherPayments.mVoucherCode = objCCustomizedDBCall.CallStringFunction("select Code from A_Voucher where ID = " + ObjCVarA_VoucherPayments.mVoucherID);
                        

                        lstCVarA_VoucherPayments.Add(ObjCVarA_VoucherPayments);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarA_VoucherPayments.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingA_VoucherPayments";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarA_VoucherPayments ObjCVarA_VoucherPayments = new CVarA_VoucherPayments();
                        ObjCVarA_VoucherPayments.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarA_VoucherPayments.mSafeID = Convert.ToInt32(dr["SafeID"].ToString());
                        ObjCVarA_VoucherPayments.mBankID = Convert.ToInt32(dr["BankID"].ToString());
                        ObjCVarA_VoucherPayments.mCurrencyID = Convert.ToInt32(dr["CurrencyID"].ToString());
                        ObjCVarA_VoucherPayments.mExchangeRate = Convert.ToDecimal(dr["ExchangeRate"].ToString());
                        ObjCVarA_VoucherPayments.mAmount = Convert.ToDecimal(dr["Amount"].ToString());
                        ObjCVarA_VoucherPayments.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarA_VoucherPayments.mChequeNo = Convert.ToString(dr["ChequeNo"].ToString());
                        ObjCVarA_VoucherPayments.mChequeDate = Convert.ToDateTime(dr["ChequeDate"].ToString());
                        ObjCVarA_VoucherPayments.mVoucherType = Convert.ToInt32(dr["VoucherType"].ToString());
                        ObjCVarA_VoucherPayments.mIsCheque = Convert.ToBoolean(dr["IsCheque"].ToString());
                        ObjCVarA_VoucherPayments.mTaxID = Convert.ToInt32(dr["TaxID"].ToString());
                        ObjCVarA_VoucherPayments.mTaxValue = Convert.ToDecimal(dr["TaxValue"].ToString());
                        ObjCVarA_VoucherPayments.mTaxSign = Convert.ToInt32(dr["TaxSign"].ToString());
                        ObjCVarA_VoucherPayments.mTaxID2 = Convert.ToInt32(dr["TaxID2"].ToString());
                        ObjCVarA_VoucherPayments.mTaxValue2 = Convert.ToDecimal(dr["TaxValue2"].ToString());
                        ObjCVarA_VoucherPayments.mTaxSign2 = Convert.ToInt32(dr["TaxSign2"].ToString());
                        ObjCVarA_VoucherPayments.mDiscountTaxID = Convert.ToInt32(dr["DiscountTaxID"].ToString());
                        ObjCVarA_VoucherPayments.mDiscountTaxValue = Convert.ToDecimal(dr["DiscountTaxValue"].ToString());
                        ObjCVarA_VoucherPayments.mDiscountTaxID2 = Convert.ToInt32(dr["DiscountTaxID2"].ToString());
                        ObjCVarA_VoucherPayments.mDiscountTaxValue2 = Convert.ToDecimal(dr["DiscountTaxValue2"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarA_VoucherPayments.Add(ObjCVarA_VoucherPayments);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            tr = Con.BeginTransaction(IsolationLevel.Serializable);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DeleteListA_VoucherPayments";
                else
                    Com.CommandText = "[dbo].UpdateListA_VoucherPayments";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKA_VoucherPayments> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DeleteItemA_VoucherPayments";
                Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                foreach (CPKA_VoucherPayments ObjCPKA_VoucherPayments in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt64(ObjCPKA_VoucherPayments.ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarA_VoucherPayments> SaveList)
        {
            Exception Exp = null;
            //SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;// = GlobalConnection.GlobalCom;
            try
            {
                //Con.Open();
                //Com = new SqlCommand();
                //GlobalConnection.GlobalCon.Open();
                GlobalConnection.myCommand = new SqlCommand();
                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 120;
                Com = GlobalConnection.myCommand;


                Com.Parameters.Add(new SqlParameter("@SafeID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@BankID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@CurrencyID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ExchangeRate", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@Amount", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@ChequeNo", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@ChequeDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@VoucherType", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@VoucherID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PaymentID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@IsCheque", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@TaxID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TaxValue", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@TaxSign", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TaxID2", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TaxValue2", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@TaxSign2", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@DiscountTaxID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@DiscountTaxValue", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@DiscountTaxID2", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@DiscountTaxValue2", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@ExtraAmount", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@NewExchangeRate", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@VoucherCode", SqlDbType.NVarChar));

                SqlParameter paraID = Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, "ID", DataRowVersion.Default, null));
                foreach (CVarA_VoucherPayments ObjCVarA_VoucherPayments in SaveList)
                {
                    if (ObjCVarA_VoucherPayments.mIsChanges == true)
                    {
                        if (ObjCVarA_VoucherPayments.ID == 0)
                        {
                            Com.CommandText = "[dbo].InsertItemA_VoucherPayments";
                            paraID.Direction = ParameterDirection.Output;
                        }
                        else if (ObjCVarA_VoucherPayments.ID != 0)
                        {
                            Com.CommandText = "[dbo].UpdateItemA_VoucherPayments";
                            paraID.Direction = ParameterDirection.Input;
                        }
                        //BeginTrans(Com, Con);
                        if (ObjCVarA_VoucherPayments.ID != 0)
                        {
                            Com.Parameters["@ID"].Value = ObjCVarA_VoucherPayments.ID;
                        }
                        Com.Parameters["@SafeID"].Value = ObjCVarA_VoucherPayments.SafeID;
                        Com.Parameters["@BankID"].Value = ObjCVarA_VoucherPayments.BankID;
                        Com.Parameters["@CurrencyID"].Value = ObjCVarA_VoucherPayments.CurrencyID;
                        Com.Parameters["@ExchangeRate"].Value = ObjCVarA_VoucherPayments.ExchangeRate;
                        Com.Parameters["@Amount"].Value = ObjCVarA_VoucherPayments.Amount;
                        Com.Parameters["@Notes"].Value = ObjCVarA_VoucherPayments.Notes;
                        Com.Parameters["@ChequeNo"].Value = ObjCVarA_VoucherPayments.ChequeNo;
                        Com.Parameters["@ChequeDate"].Value = ObjCVarA_VoucherPayments.ChequeDate;
                        Com.Parameters["@VoucherType"].Value = ObjCVarA_VoucherPayments.VoucherType;
                        Com.Parameters["@VoucherID"].Value = ObjCVarA_VoucherPayments.VoucherID;
                        Com.Parameters["@PaymentID"].Value = ObjCVarA_VoucherPayments.PaymentID;
                        Com.Parameters["@IsCheque"].Value = ObjCVarA_VoucherPayments.IsCheque;
                        Com.Parameters["@TaxID"].Value = ObjCVarA_VoucherPayments.TaxID;
                        Com.Parameters["@TaxValue"].Value = ObjCVarA_VoucherPayments.TaxValue;
                        Com.Parameters["@TaxSign"].Value = ObjCVarA_VoucherPayments.TaxSign;
                        Com.Parameters["@TaxID2"].Value = ObjCVarA_VoucherPayments.TaxID2;
                        Com.Parameters["@TaxValue2"].Value = ObjCVarA_VoucherPayments.TaxValue2;
                        Com.Parameters["@TaxSign2"].Value = ObjCVarA_VoucherPayments.TaxSign2;
                        Com.Parameters["@DiscountTaxID"].Value = ObjCVarA_VoucherPayments.DiscountTaxID;
                        Com.Parameters["@DiscountTaxValue"].Value = ObjCVarA_VoucherPayments.DiscountTaxValue;
                        Com.Parameters["@DiscountTaxID2"].Value = ObjCVarA_VoucherPayments.DiscountTaxID2;
                        Com.Parameters["@DiscountTaxValue2"].Value = ObjCVarA_VoucherPayments.DiscountTaxValue2;
                        Com.Parameters["@ExtraAmount"].Value = ObjCVarA_VoucherPayments.ExtraAmount;
                        Com.Parameters["@NewExchangeRate"].Value = ObjCVarA_VoucherPayments.NewExchangeRate;
                        Com.Parameters["@VoucherCode"].Value = ObjCVarA_VoucherPayments.mVoucherCode;


                        //EndTrans(Com, Con);

                        Com.ExecuteNonQuery();
                        //GlobalConnection.myTrans.Commit();
                        if (ObjCVarA_VoucherPayments.ID == 0)
                        {
                            ObjCVarA_VoucherPayments.ID = Convert.ToInt64(Com.Parameters["@ID"].Value);
                        }
                        ObjCVarA_VoucherPayments.mIsChanges = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                //if (tr != null)
                //    tr.Rollback();
                GlobalConnection.myTrans.Rollback();
            }
            finally
            {
                //GlobalConnection.myConnection.Close();
                //GlobalConnection.myConnection.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }

    [Serializable]
    public class CPKA_PaymentInvoices
    {
        #region "variables"
        private Int64 mID;
        #endregion

        #region "Methods"
        public Int64 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarA_PaymentInvoices : CPKA_PaymentInvoices
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int64 mInvoiceID;
        internal Int64 mPaymentID;
        internal Decimal mPaidAmount;

        #endregion

        #region "Methods"
        public Int64 InvoiceID
        {
            get { return mInvoiceID; }
            set { mIsChanges = true; mInvoiceID = value; }
        }
        public Int64 PaymentID
        {
            get { return mPaymentID; }
            set { mIsChanges = true; mPaymentID = value; }
        }
        public Decimal PaidAmount
        {
            get { return mPaidAmount; }
            set { mIsChanges = true; mPaidAmount = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CA_PaymentInvoices
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarA_PaymentInvoices> lstCVarA_PaymentInvoices = new List<CVarA_PaymentInvoices>();
        public List<CPKA_PaymentInvoices> lstDeletedCPKA_PaymentInvoices = new List<CPKA_PaymentInvoices>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetItem(Int64 ID)
        {
            return DataFill(Convert.ToString(ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarA_PaymentInvoices.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListA_PaymentInvoices";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].GetItemA_PaymentInvoices";
                    Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                    Com.Parameters[0].Value = Convert.ToInt64(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarA_PaymentInvoices ObjCVarA_PaymentInvoices = new CVarA_PaymentInvoices();
                        ObjCVarA_PaymentInvoices.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarA_PaymentInvoices.mInvoiceID = Convert.ToInt64(dr["InvoiceID"].ToString());
                        ObjCVarA_PaymentInvoices.mPaymentID = Convert.ToInt64(dr["PaymentID"].ToString());
                        lstCVarA_PaymentInvoices.Add(ObjCVarA_PaymentInvoices);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            tr = Con.BeginTransaction(IsolationLevel.Serializable);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DeleteListA_PaymentInvoices";
                else
                    Com.CommandText = "[dbo].UpdateListA_PaymentInvoices";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.VarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKA_PaymentInvoices> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DeleteItemA_PaymentInvoices";
                Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                foreach (CPKA_PaymentInvoices ObjCPKA_PaymentInvoices in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt64(ObjCPKA_PaymentInvoices.ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarA_PaymentInvoices> SaveList)
        {
            Exception Exp = null;
            //SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;// = GlobalConnection.GlobalCom;
            try
            {
                //Con.Open();
                //Com = new SqlCommand();
                //GlobalConnection.GlobalCon.Open();
                GlobalConnection.myCommand = new SqlCommand();
                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;

                Com.Parameters.Add(new SqlParameter("@InvoiceID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@PaymentID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@PaidAmount", SqlDbType.Decimal));
                SqlParameter paraID = Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, "ID", DataRowVersion.Default, null));
                foreach (CVarA_PaymentInvoices ObjCVarA_PaymentInvoices in SaveList)
                {
                    if (ObjCVarA_PaymentInvoices.mIsChanges == true)
                    {

                        Com.CommandText = "[dbo].InsertItemA_PaymentInvoices";
                        paraID.Direction = ParameterDirection.Output;

                        //BeginTrans(Com, Con);

                        Com.Parameters["@InvoiceID"].Value = ObjCVarA_PaymentInvoices.InvoiceID;
                        Com.Parameters["@PaymentID"].Value = ObjCVarA_PaymentInvoices.PaymentID;
                        Com.Parameters["@PaidAmount"].Value = ObjCVarA_PaymentInvoices.PaidAmount;
                        //EndTrans(Com, Con);
                        //
                        Com.ExecuteNonQuery();
                        //GlobalConnection.myTrans.Commit();
                        if (ObjCVarA_PaymentInvoices.ID == 0)
                        {
                            ObjCVarA_PaymentInvoices.ID = Convert.ToInt64(Com.Parameters["@ID"].Value);
                        }
                        ObjCVarA_PaymentInvoices.mIsChanges = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                //if (tr != null)
                //    tr.Rollback();
                GlobalConnection.myTrans.Rollback();
            }
            finally
            {
            //    GlobalConnection.myConnection.Close();
            //    GlobalConnection.myConnection.Dispose();
            }
            return Exp;
        }
        #endregion
    }

    [Serializable]
    public class CPKA_VoucherHeader
    {
        #region "variables"
        private Int64 mID;
        #endregion

        #region "Methods"
        public Int64 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarA_VoucherHeader : CPKA_VoucherHeader
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal String mCode;
        internal DateTime mVoucherDate;
        internal Int32 mSafeID;
        internal Int32 mCurrencyID;
        internal Decimal mExchangeRate;
        internal String mChargedPerson;
        internal String mNotes;
        internal Int32 mTaxID;
        internal Decimal mTaxValue;
        internal Int32 mTaxSign;
        internal Int32 mTaxID2;
        internal Decimal mTaxValue2;
        internal Int32 mTaxSign2;
        internal Decimal mTotal;
        internal Decimal mTotalAfterTax;
        internal Boolean mApproved;
        internal Boolean mPosted;
        internal Boolean mIsAGInvoice;
        internal Int32 mAGInvType_ID;
        internal Int32 mInv_No;
        internal Int64 mInvoiceID;
        internal Int64 mJVID1;
        internal Int64 mJVID2;
        internal Int64 mJVID3;
        internal Int64 mJVID4;
        internal Int32 mSalesManID;
        internal Int32 mforwOperationID;
        internal Boolean mIsCustomClearance;
        internal Int32 mTransType_ID;
        internal Int32 mVoucherType;
        internal Boolean mIsCash;
        internal Boolean mIsCheque;
        internal DateTime mPrintDate;
        internal String mChequeNo;
        internal decimal mExtraAmount;
        internal DateTime mChequeDate;
        internal Int32 mBankID;
        internal String mOtherSideBankName;
        internal DateTime mCollectionDate;
        internal Decimal mCollectionExpense;
        internal Int32 mDiscountTaxID;
        internal Decimal mDiscountTaxValue;
        internal Int32 mDiscountTaxID2;
        internal Decimal mDiscountTaxValue2;
        internal Boolean mIsCustody;
        internal Boolean mIsLiner;
        internal Int32 mTaxType;
        internal Int64 mBill_ID;
        internal Int32 mDisbursementJob_ID;
        internal Int32 mSL_SalesManID;

        internal Decimal mPercentage1;
        internal Decimal mPercentage2;
        internal String mIBAN;
        internal String mReferenceNo;
        internal DateTime mDepositeDate;
        internal DateTime mTransferDate;
        internal Decimal mPaidAmount;
        internal Decimal mRemainAmount;
        internal Boolean misTransfer;



        #endregion

        #region "Methods"
        public Int32 SL_SalesManID
        {
            get { return mSL_SalesManID; }
            set { mIsChanges = true; mSL_SalesManID = value; }
        }
        public Int32 DisbursementJob_ID
        {
            get { return mDisbursementJob_ID; }
            set { mIsChanges = true; mDisbursementJob_ID = value; }
        }
        public Decimal Percentage1
        {
            get { return mPercentage1; }
            set { mIsChanges = true; mPercentage1 = value; }
        }
        public Decimal Percentage2
        {
            get { return mPercentage2; }
            set { mIsChanges = true; mPercentage2 = value; }
        }
        public Int32 TaxType
        {
            get { return mTaxType; }
            set { mIsChanges = true; mTaxType = value; }
        }
        public Int64 Bill_ID
        {
            get { return mBill_ID; }
            set { mIsChanges = true; mBill_ID = value; }
        }
        public String Code
        {
            get { return mCode; }
            set { mIsChanges = true; mCode = value; }
        }
        public DateTime VoucherDate
        {
            get { return mVoucherDate; }
            set { mIsChanges = true; mVoucherDate = value; }
        }
        public Int32 SafeID
        {
            get { return mSafeID; }
            set { mIsChanges = true; mSafeID = value; }
        }
        public Int32 CurrencyID
        {
            get { return mCurrencyID; }
            set { mIsChanges = true; mCurrencyID = value; }
        }
        public Decimal ExchangeRate
        {
            get { return mExchangeRate; }
            set { mIsChanges = true; mExchangeRate = value; }
        }
        public String ChargedPerson
        {
            get { return mChargedPerson; }
            set { mIsChanges = true; mChargedPerson = value; }
        }
        public String Notes
        {
            get { return mNotes; }
            set { mIsChanges = true; mNotes = value; }
        }
        public Int32 TaxID
        {
            get { return mTaxID; }
            set { mIsChanges = true; mTaxID = value; }
        }
        public Decimal TaxValue
        {
            get { return mTaxValue; }
            set { mIsChanges = true; mTaxValue = value; }
        }
        public Int32 TaxSign
        {
            get { return mTaxSign; }
            set { mIsChanges = true; mTaxSign = value; }
        }
        public Int32 TaxID2
        {
            get { return mTaxID2; }
            set { mIsChanges = true; mTaxID2 = value; }
        }
        public Decimal TaxValue2
        {
            get { return mTaxValue2; }
            set { mIsChanges = true; mTaxValue2 = value; }
        }
        public Int32 TaxSign2
        {
            get { return mTaxSign2; }
            set { mIsChanges = true; mTaxSign2 = value; }
        }
        public Decimal Total
        {
            get { return mTotal; }
            set { mIsChanges = true; mTotal = value; }
        }
        public Decimal TotalAfterTax
        {
            get { return mTotalAfterTax; }
            set { mIsChanges = true; mTotalAfterTax = value; }
        }
        public Boolean Approved
        {
            get { return mApproved; }
            set { mIsChanges = true; mApproved = value; }
        }
        public Boolean Posted
        {
            get { return mPosted; }
            set { mIsChanges = true; mPosted = value; }
        }
        public Boolean IsAGInvoice
        {
            get { return mIsAGInvoice; }
            set { mIsChanges = true; mIsAGInvoice = value; }
        }
        public Int32 AGInvType_ID
        {
            get { return mAGInvType_ID; }
            set { mIsChanges = true; mAGInvType_ID = value; }
        }
        public Int32 Inv_No
        {
            get { return mInv_No; }
            set { mIsChanges = true; mInv_No = value; }
        }
        public Int64 InvoiceID
        {
            get { return mInvoiceID; }
            set { mIsChanges = true; mInvoiceID = value; }
        }
        public Int64 JVID1
        {
            get { return mJVID1; }
            set { mIsChanges = true; mJVID1 = value; }
        }
        public Int64 JVID2
        {
            get { return mJVID2; }
            set { mIsChanges = true; mJVID2 = value; }
        }
        public Int64 JVID3
        {
            get { return mJVID3; }
            set { mIsChanges = true; mJVID3 = value; }
        }
        public Int64 JVID4
        {
            get { return mJVID4; }
            set { mIsChanges = true; mJVID4 = value; }
        }
        public Int32 SalesManID
        {
            get { return mSalesManID; }
            set { mIsChanges = true; mSalesManID = value; }
        }
        public Int32 forwOperationID
        {
            get { return mforwOperationID; }
            set { mIsChanges = true; mforwOperationID = value; }
        }
        public Boolean IsCustomClearance
        {
            get { return mIsCustomClearance; }
            set { mIsChanges = true; mIsCustomClearance = value; }
        }
        public Int32 TransType_ID
        {
            get { return mTransType_ID; }
            set { mIsChanges = true; mTransType_ID = value; }
        }
        public Int32 VoucherType
        {
            get { return mVoucherType; }
            set { mIsChanges = true; mVoucherType = value; }
        }
        public Boolean IsCash
        {
            get { return mIsCash; }
            set { mIsChanges = true; mIsCash = value; }
        }
        public Boolean IsCheque
        {
            get { return mIsCheque; }
            set { mIsChanges = true; mIsCheque = value; }
        }
        public DateTime PrintDate
        {
            get { return mPrintDate; }
            set { mIsChanges = true; mPrintDate = value; }
        }
        public String ChequeNo
        {
            get { return mChequeNo; }
            set { mIsChanges = true; mChequeNo = value; }
        }

        public decimal ExtraAmount
        {
            get { return mExtraAmount; }
            set { mIsChanges = true; mExtraAmount = value; }
        }
        public DateTime ChequeDate
        {
            get { return mChequeDate; }
            set { mIsChanges = true; mChequeDate = value; }
        }
        public Int32 BankID
        {
            get { return mBankID; }
            set { mIsChanges = true; mBankID = value; }
        }
        public String OtherSideBankName
        {
            get { return mOtherSideBankName; }
            set { mIsChanges = true; mOtherSideBankName = value; }
        }
        public DateTime CollectionDate
        {
            get { return mCollectionDate; }
            set { mIsChanges = true; mCollectionDate = value; }
        }
        public Decimal CollectionExpense
        {
            get { return mCollectionExpense; }
            set { mIsChanges = true; mCollectionExpense = value; }
        }
        public Int32 DiscountTaxID
        {
            get { return mDiscountTaxID; }
            set { mIsChanges = true; mDiscountTaxID = value; }
        }
        public Decimal DiscountTaxValue
        {
            get { return mDiscountTaxValue; }
            set { mIsChanges = true; mDiscountTaxValue = value; }
        }
        public Int32 DiscountTaxID2
        {
            get { return mDiscountTaxID2; }
            set { mIsChanges = true; mDiscountTaxID2 = value; }
        }
        public Decimal DiscountTaxValue2
        {
            get { return mDiscountTaxValue2; }
            set { mIsChanges = true; mDiscountTaxValue2 = value; }
        }
        public Boolean IsCustody
        {
            get { return mIsCustody; }
            set { mIsChanges = true; mIsCustody = value; }
        }
        public Boolean IsLiner
        {
            get { return mIsLiner; }
            set { mIsChanges = true; mIsLiner = value; }
        }
        public String IBAN
        {
            get { return mIBAN; }
            set { mIsChanges = true; mIBAN = value; }
        }
        public String ReferenceNo
        {
            get { return mReferenceNo; }
            set { mIsChanges = true; mReferenceNo = value; }
        }
        public DateTime DepositeDate
        {
            get { return mDepositeDate; }
            set { mIsChanges = true; mDepositeDate = value; }
        }
        public DateTime TransferDate
        {
            get { return mTransferDate; }
            set { mIsChanges = true; mTransferDate = value; }
        }
        public Decimal PaidAmount
        {
            get { return mPaidAmount; }
            set { mIsChanges = true; mPaidAmount = value; }
        }
        public Decimal RemainAmount
        {
            get { return mRemainAmount; }
            set { mIsChanges = true; mRemainAmount = value; }
        }
        public Boolean isTransfer
        {
            get { return misTransfer; }
            set { mIsChanges = true; misTransfer = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CA_VoucherHeader
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarA_VoucherHeader> lstCVarA_Voucher = new List<CVarA_VoucherHeader>();
        public List<CPKA_VoucherHeader> lstDeletedCPKA_Voucher = new List<CPKA_VoucherHeader>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetItem(Int64 ID)
        {
            return DataFill(Convert.ToString(ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarA_Voucher.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListA_Voucher";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].GetItemA_Voucher";
                    Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                    Com.Parameters[0].Value = Convert.ToInt64(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarA_VoucherHeader ObjCVarA_Voucher = new CVarA_VoucherHeader();
                        ObjCVarA_Voucher.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarA_Voucher.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarA_Voucher.mVoucherDate = Convert.ToDateTime(dr["VoucherDate"].ToString());
                        ObjCVarA_Voucher.mSafeID = Convert.ToInt32(dr["SafeID"].ToString());
                        ObjCVarA_Voucher.mCurrencyID = Convert.ToInt32(dr["CurrencyID"].ToString());
                        ObjCVarA_Voucher.mExchangeRate = Convert.ToDecimal(dr["ExchangeRate"].ToString());
                        ObjCVarA_Voucher.mChargedPerson = Convert.ToString(dr["ChargedPerson"].ToString());
                        ObjCVarA_Voucher.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarA_Voucher.mTaxID = Convert.ToInt32(dr["TaxID"].ToString());
                        ObjCVarA_Voucher.mTaxValue = Convert.ToDecimal(dr["TaxValue"].ToString());
                        ObjCVarA_Voucher.mTaxSign = Convert.ToInt32(dr["TaxSign"].ToString());
                        ObjCVarA_Voucher.mTaxID2 = Convert.ToInt32(dr["TaxID2"].ToString());
                        ObjCVarA_Voucher.mTaxValue2 = Convert.ToDecimal(dr["TaxValue2"].ToString());
                        ObjCVarA_Voucher.mTaxSign2 = Convert.ToInt32(dr["TaxSign2"].ToString());
                        ObjCVarA_Voucher.mTotal = Convert.ToDecimal(dr["Total"].ToString());
                        ObjCVarA_Voucher.mTotalAfterTax = Convert.ToDecimal(dr["TotalAfterTax"].ToString());
                        ObjCVarA_Voucher.mApproved = Convert.ToBoolean(dr["Approved"].ToString());
                        ObjCVarA_Voucher.mPosted = Convert.ToBoolean(dr["Posted"].ToString());
                        ObjCVarA_Voucher.mIsAGInvoice = Convert.ToBoolean(dr["IsAGInvoice"].ToString());
                        ObjCVarA_Voucher.mAGInvType_ID = Convert.ToInt32(dr["AGInvType_ID"].ToString());
                        ObjCVarA_Voucher.mInv_No = Convert.ToInt32(dr["Inv_No"].ToString());
                        ObjCVarA_Voucher.mInvoiceID = Convert.ToInt64(dr["InvoiceID"].ToString());
                        ObjCVarA_Voucher.mJVID1 = Convert.ToInt64(dr["JVID1"].ToString());
                        ObjCVarA_Voucher.mJVID2 = Convert.ToInt64(dr["JVID2"].ToString());
                        ObjCVarA_Voucher.mJVID3 = Convert.ToInt64(dr["JVID3"].ToString());
                        ObjCVarA_Voucher.mJVID4 = Convert.ToInt64(dr["JVID4"].ToString());
                        ObjCVarA_Voucher.mSalesManID = Convert.ToInt32(dr["SalesManID"].ToString());
                        ObjCVarA_Voucher.mforwOperationID = Convert.ToInt32(dr["forwOperationID"].ToString());
                        ObjCVarA_Voucher.mIsCustomClearance = Convert.ToBoolean(dr["IsCustomClearance"].ToString());
                        ObjCVarA_Voucher.mTransType_ID = Convert.ToInt32(dr["TransType_ID"].ToString());
                        ObjCVarA_Voucher.mVoucherType = Convert.ToInt32(dr["VoucherType"].ToString());
                        ObjCVarA_Voucher.mIsCash = Convert.ToBoolean(dr["IsCash"].ToString());
                        ObjCVarA_Voucher.mIsCheque = Convert.ToBoolean(dr["IsCheque"].ToString());
                        ObjCVarA_Voucher.mPrintDate = Convert.ToDateTime(dr["PrintDate"].ToString());
                        ObjCVarA_Voucher.mChequeNo = Convert.ToString(dr["ChequeNo"].ToString());
                        ObjCVarA_Voucher.mChequeDate = Convert.ToDateTime(dr["ChequeDate"].ToString());
                        ObjCVarA_Voucher.mBankID = Convert.ToInt32(dr["BankID"].ToString());
                        ObjCVarA_Voucher.mOtherSideBankName = Convert.ToString(dr["OtherSideBankName"].ToString());
                        ObjCVarA_Voucher.mCollectionDate = Convert.ToDateTime(dr["CollectionDate"].ToString());
                        ObjCVarA_Voucher.mCollectionExpense = Convert.ToDecimal(dr["CollectionExpense"].ToString());
                        ObjCVarA_Voucher.mDiscountTaxID = Convert.ToInt32(dr["DiscountTaxID"].ToString());
                        ObjCVarA_Voucher.mDiscountTaxValue = Convert.ToDecimal(dr["DiscountTaxValue"].ToString());
                        ObjCVarA_Voucher.mDiscountTaxID2 = Convert.ToInt32(dr["DiscountTaxID2"].ToString());
                        ObjCVarA_Voucher.mDiscountTaxValue2 = Convert.ToDecimal(dr["DiscountTaxValue2"].ToString());
                        lstCVarA_Voucher.Add(ObjCVarA_Voucher);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarA_Voucher.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingA_Voucher";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarA_VoucherHeader ObjCVarA_Voucher = new CVarA_VoucherHeader();
                        ObjCVarA_Voucher.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarA_Voucher.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarA_Voucher.mVoucherDate = Convert.ToDateTime(dr["VoucherDate"].ToString());
                        ObjCVarA_Voucher.mSafeID = Convert.ToInt32(dr["SafeID"].ToString());
                        ObjCVarA_Voucher.mCurrencyID = Convert.ToInt32(dr["CurrencyID"].ToString());
                        ObjCVarA_Voucher.mExchangeRate = Convert.ToDecimal(dr["ExchangeRate"].ToString());
                        ObjCVarA_Voucher.mChargedPerson = Convert.ToString(dr["ChargedPerson"].ToString());
                        ObjCVarA_Voucher.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarA_Voucher.mTaxID = Convert.ToInt32(dr["TaxID"].ToString());
                        ObjCVarA_Voucher.mTaxValue = Convert.ToDecimal(dr["TaxValue"].ToString());
                        ObjCVarA_Voucher.mTaxSign = Convert.ToInt32(dr["TaxSign"].ToString());
                        ObjCVarA_Voucher.mTaxID2 = Convert.ToInt32(dr["TaxID2"].ToString());
                        ObjCVarA_Voucher.mTaxValue2 = Convert.ToDecimal(dr["TaxValue2"].ToString());
                        ObjCVarA_Voucher.mTaxSign2 = Convert.ToInt32(dr["TaxSign2"].ToString());
                        ObjCVarA_Voucher.mTotal = Convert.ToDecimal(dr["Total"].ToString());
                        ObjCVarA_Voucher.mTotalAfterTax = Convert.ToDecimal(dr["TotalAfterTax"].ToString());
                        ObjCVarA_Voucher.mApproved = Convert.ToBoolean(dr["Approved"].ToString());
                        ObjCVarA_Voucher.mPosted = Convert.ToBoolean(dr["Posted"].ToString());
                        ObjCVarA_Voucher.mIsAGInvoice = Convert.ToBoolean(dr["IsAGInvoice"].ToString());
                        ObjCVarA_Voucher.mAGInvType_ID = Convert.ToInt32(dr["AGInvType_ID"].ToString());
                        ObjCVarA_Voucher.mInv_No = Convert.ToInt32(dr["Inv_No"].ToString());
                        ObjCVarA_Voucher.mInvoiceID = Convert.ToInt64(dr["InvoiceID"].ToString());
                        ObjCVarA_Voucher.mJVID1 = Convert.ToInt64(dr["JVID1"].ToString());
                        ObjCVarA_Voucher.mJVID2 = Convert.ToInt64(dr["JVID2"].ToString());
                        ObjCVarA_Voucher.mJVID3 = Convert.ToInt64(dr["JVID3"].ToString());
                        ObjCVarA_Voucher.mJVID4 = Convert.ToInt64(dr["JVID4"].ToString());
                        ObjCVarA_Voucher.mSalesManID = Convert.ToInt32(dr["SalesManID"].ToString());
                        ObjCVarA_Voucher.mforwOperationID = Convert.ToInt32(dr["forwOperationID"].ToString());
                        ObjCVarA_Voucher.mIsCustomClearance = Convert.ToBoolean(dr["IsCustomClearance"].ToString());
                        ObjCVarA_Voucher.mTransType_ID = Convert.ToInt32(dr["TransType_ID"].ToString());
                        ObjCVarA_Voucher.mVoucherType = Convert.ToInt32(dr["VoucherType"].ToString());
                        ObjCVarA_Voucher.mIsCash = Convert.ToBoolean(dr["IsCash"].ToString());
                        ObjCVarA_Voucher.mIsCheque = Convert.ToBoolean(dr["IsCheque"].ToString());
                        ObjCVarA_Voucher.mPrintDate = Convert.ToDateTime(dr["PrintDate"].ToString());
                        ObjCVarA_Voucher.mChequeNo = Convert.ToString(dr["ChequeNo"].ToString());
                        ObjCVarA_Voucher.mChequeDate = Convert.ToDateTime(dr["ChequeDate"].ToString());
                        ObjCVarA_Voucher.mBankID = Convert.ToInt32(dr["BankID"].ToString());
                        ObjCVarA_Voucher.mOtherSideBankName = Convert.ToString(dr["OtherSideBankName"].ToString());
                        ObjCVarA_Voucher.mCollectionDate = Convert.ToDateTime(dr["CollectionDate"].ToString());
                        ObjCVarA_Voucher.mCollectionExpense = Convert.ToDecimal(dr["CollectionExpense"].ToString());
                        ObjCVarA_Voucher.mDiscountTaxID = Convert.ToInt32(dr["DiscountTaxID"].ToString());
                        ObjCVarA_Voucher.mDiscountTaxValue = Convert.ToDecimal(dr["DiscountTaxValue"].ToString());
                        ObjCVarA_Voucher.mDiscountTaxID2 = Convert.ToInt32(dr["DiscountTaxID2"].ToString());
                        ObjCVarA_Voucher.mDiscountTaxValue2 = Convert.ToDecimal(dr["DiscountTaxValue2"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarA_Voucher.Add(ObjCVarA_Voucher);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            //tr = Con.BeginTransaction(IsolationLevel.ReadUncommitted);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DeleteListA_Voucher";
                else
                    Com.CommandText = "[dbo].UpdateListA_Voucher";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKA_VoucherHeader> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DeleteItemA_Voucher";
                Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                foreach (CPKA_VoucherHeader ObjCPKA_Voucher in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt64(ObjCPKA_Voucher.ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarA_VoucherHeader> SaveList)
        {
            Exception Exp = null;
            //SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;// = GlobalConnection.GlobalCom;
            //GlobalConnection.OpenConnection();
            try
            {
                //Con.Open();
                //Com = new SqlCommand();
                //GlobalConnection.GlobalCon.Open();
                //GlobalConnection.myTrans = GlobalConnection.myConnection.BeginTransaction(IsolationLevel.ReadUncommitted);

                GlobalConnection.myCommand = new SqlCommand();
                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;

                Com.Parameters.Add(new SqlParameter("@Code", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@VoucherDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@SafeID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@CurrencyID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ExchangeRate", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@ChargedPerson", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@TaxID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TaxValue", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@TaxSign", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TaxID2", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TaxValue2", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@TaxSign2", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Total", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@TotalAfterTax", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@Approved", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@Posted", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsAGInvoice", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@AGInvType_ID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Inv_No", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@InvoiceID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@JVID1", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@JVID2", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@JVID3", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@JVID4", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@SalesManID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@forwOperationID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@IsCustomClearance", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@TransType_ID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@VoucherType", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@IsCash", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsCheque", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@PrintDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@ChequeNo", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@ChequeDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@BankID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@OtherSideBankName", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@CollectionDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@CollectionExpense", SqlDbType.Decimal));
              
                Com.Parameters.Add(new SqlParameter("@DisbursementJob_ID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@SL_SalesManID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@IsLiner", SqlDbType.Bit));

               
                Com.Parameters.Add(new SqlParameter("@Bill_ID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@IBAN", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@ReferenceNo", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@DepositeDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@TransferDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@PaidAmount", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@RemainAmount", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@isTransfer", SqlDbType.Bit));

                SqlParameter paraID = Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, "ID", DataRowVersion.Default, null));
                foreach (CVarA_VoucherHeader ObjCVarA_Voucher in SaveList)
                {
                    if (ObjCVarA_Voucher.mIsChanges == true)
                    {
                        if (ObjCVarA_Voucher.ID == 0)
                        {
                            Com.CommandText = "[dbo].InsertItemA_Voucher";
                            paraID.Direction = ParameterDirection.Output;
                        }
                        else if (ObjCVarA_Voucher.ID != 0)
                        {
                            Com.CommandText = "[dbo].UpdateItemA_Voucher";
                            paraID.Direction = ParameterDirection.Input;
                        }
                        //BeginTrans(Com, GlobalConnection.GlobalCon);
                        if (ObjCVarA_Voucher.ID != 0)
                        {
                            Com.Parameters["@ID"].Value = ObjCVarA_Voucher.ID;
                        }
                        Com.Parameters["@Code"].Value = ObjCVarA_Voucher.Code;
                        Com.Parameters["@VoucherDate"].Value = ObjCVarA_Voucher.VoucherDate;
                        Com.Parameters["@SafeID"].Value = ObjCVarA_Voucher.SafeID;
                        Com.Parameters["@CurrencyID"].Value = ObjCVarA_Voucher.CurrencyID;
                        Com.Parameters["@ExchangeRate"].Value = ObjCVarA_Voucher.ExchangeRate;
                        Com.Parameters["@ChargedPerson"].Value = ObjCVarA_Voucher.ChargedPerson;
                        Com.Parameters["@Notes"].Value = ObjCVarA_Voucher.Notes;
                        Com.Parameters["@TaxID"].Value = ObjCVarA_Voucher.TaxID;
                        Com.Parameters["@TaxValue"].Value = ObjCVarA_Voucher.TaxValue;
                        Com.Parameters["@TaxSign"].Value = ObjCVarA_Voucher.TaxSign;
                        Com.Parameters["@TaxID2"].Value = ObjCVarA_Voucher.TaxID2;
                        Com.Parameters["@TaxValue2"].Value = ObjCVarA_Voucher.TaxValue2;
                        Com.Parameters["@TaxSign2"].Value = ObjCVarA_Voucher.TaxSign2;
                        Com.Parameters["@Total"].Value = ObjCVarA_Voucher.Total;
                        Com.Parameters["@TotalAfterTax"].Value = ObjCVarA_Voucher.TotalAfterTax;
                        Com.Parameters["@Approved"].Value = ObjCVarA_Voucher.Approved;
                        Com.Parameters["@Posted"].Value = ObjCVarA_Voucher.Posted;
                        Com.Parameters["@IsAGInvoice"].Value = ObjCVarA_Voucher.IsAGInvoice;
                        Com.Parameters["@AGInvType_ID"].Value = ObjCVarA_Voucher.AGInvType_ID;
                        Com.Parameters["@Inv_No"].Value = ObjCVarA_Voucher.Inv_No;
                        Com.Parameters["@InvoiceID"].Value = ObjCVarA_Voucher.InvoiceID;
                        Com.Parameters["@JVID1"].Value = ObjCVarA_Voucher.JVID1;
                        Com.Parameters["@JVID2"].Value = ObjCVarA_Voucher.JVID2;
                        Com.Parameters["@JVID3"].Value = ObjCVarA_Voucher.JVID3;
                        Com.Parameters["@JVID4"].Value = ObjCVarA_Voucher.JVID4;
                        Com.Parameters["@SalesManID"].Value = ObjCVarA_Voucher.SalesManID;
                        Com.Parameters["@forwOperationID"].Value = ObjCVarA_Voucher.forwOperationID;
                        Com.Parameters["@IsCustomClearance"].Value = ObjCVarA_Voucher.IsCustomClearance;
                        Com.Parameters["@TransType_ID"].Value = ObjCVarA_Voucher.TransType_ID;
                        Com.Parameters["@VoucherType"].Value = ObjCVarA_Voucher.VoucherType;
                        Com.Parameters["@IsCash"].Value = ObjCVarA_Voucher.IsCash;
                        Com.Parameters["@IsCheque"].Value = ObjCVarA_Voucher.IsCheque;
                        Com.Parameters["@PrintDate"].Value = ObjCVarA_Voucher.PrintDate;
                        Com.Parameters["@ChequeNo"].Value = ObjCVarA_Voucher.ChequeNo;
                        Com.Parameters["@ChequeDate"].Value = ObjCVarA_Voucher.ChequeDate;
                        Com.Parameters["@BankID"].Value = ObjCVarA_Voucher.BankID;
                        Com.Parameters["@OtherSideBankName"].Value = ObjCVarA_Voucher.OtherSideBankName;
                        Com.Parameters["@CollectionDate"].Value = ObjCVarA_Voucher.CollectionDate;
                        Com.Parameters["@CollectionExpense"].Value = ObjCVarA_Voucher.CollectionExpense;
                        
                        Com.Parameters["@DisbursementJob_ID"].Value = ObjCVarA_Voucher.DisbursementJob_ID;
                        Com.Parameters["@SL_SalesManID"].Value = ObjCVarA_Voucher.SL_SalesManID;

                        Com.Parameters["@IsLiner"].Value = ObjCVarA_Voucher.IsLiner;

                        

                        Com.Parameters["@Bill_ID"].Value = ObjCVarA_Voucher.Bill_ID;
                        Com.Parameters["@IBAN"].Value = ObjCVarA_Voucher.IBAN;
                        Com.Parameters["@ReferenceNo"].Value = ObjCVarA_Voucher.ReferenceNo;
                        Com.Parameters["@DepositeDate"].Value = ObjCVarA_Voucher.DepositeDate;
                        Com.Parameters["@TransferDate"].Value = ObjCVarA_Voucher.TransferDate;
                        Com.Parameters["@PaidAmount"].Value = ObjCVarA_Voucher.PaidAmount;
                        Com.Parameters["@RemainAmount"].Value = ObjCVarA_Voucher.RemainAmount;
                        Com.Parameters["@isTransfer"].Value = ObjCVarA_Voucher.isTransfer;

                        //EndTrans(GlobalConnection.GlobalCom, GlobalConnection.GlobalCon);
                        Com.ExecuteNonQuery();
                        //GlobalConnection.myTrans.Commit();
                        if (ObjCVarA_Voucher.ID == 0)
                        {
                            ObjCVarA_Voucher.ID = Convert.ToInt64(Com.Parameters["@ID"].Value);
                        }
                        ObjCVarA_Voucher.mIsChanges = false;
                    }
                    
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                //if (tr != null)
                //    tr.Rollback();
             
                GlobalConnection.myTrans.Rollback();
            }
            finally
            {
                //GlobalConnection.myConnection.Close();
                //GlobalConnection.myConnection.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }

    [Serializable]
    public class CPKA_VoucherHeaderDetails
    {
        #region "variables"
        private Int64 mID;
        #endregion

        #region "Methods"
        public Int64 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarA_VoucherHeaderDetails : CPKA_VoucherHeaderDetails
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int64 mVoucherID;
        internal Decimal mValue;
        internal String mDescription;
        internal Int32 mAccountID;
        internal Int32 mSubAccountID;
        internal Int32 mCostCenterID;
        internal Boolean mIsDocumented;
        internal Int64 mInvoiceID;
        internal Int32 mVoucherType;
        internal String mInvoiceNo;
        internal Int32 mJob_ID;
        internal Int64 mOperationID;
        internal Int64 mHouseID;
        internal Int32 mBranchID;
        internal Int32 mTruckingOrderID;
        #endregion

        #region "Methods"
        public Int64 VoucherID
        {
            get { return mVoucherID; }
            set { mIsChanges = true; mVoucherID = value; }
        }
        public Decimal Value
        {
            get { return mValue; }
            set { mIsChanges = true; mValue = value; }
        }
        public String Description
        {
            get { return mDescription; }
            set { mIsChanges = true; mDescription = value; }
        }
        public Int32 AccountID
        {
            get { return mAccountID; }
            set { mIsChanges = true; mAccountID = value; }
        }
        public Int32 SubAccountID
        {
            get { return mSubAccountID; }
            set { mIsChanges = true; mSubAccountID = value; }
        }
        public Int32 CostCenterID
        {
            get { return mCostCenterID; }
            set { mIsChanges = true; mCostCenterID = value; }
        }
        public Boolean IsDocumented
        {
            get { return mIsDocumented; }
            set { mIsChanges = true; mIsDocumented = value; }
        }
        public Int64 InvoiceID
        {
            get { return mInvoiceID; }
            set { mIsChanges = true; mInvoiceID = value; }
        }
        public Int32 VoucherType
        {
            get { return mVoucherType; }
            set { mIsChanges = true; mVoucherType = value; }
        }
        public Int32 Job_ID
        {
            get { return mJob_ID; }
            set { mIsChanges = true; mJob_ID = value; }
        }
        public Int64 OperationID
        {
            get { return mOperationID; }
            set { mIsChanges = true; mOperationID = value; }
        }
        public Int64 HouseID
        {
            get { return mHouseID; }
            set { mIsChanges = true; mHouseID = value; }
        }
        public Int32 BranchID
        {
            get { return mBranchID; }
            set { mIsChanges = true; mBranchID = value; }
        }
        public String InvoiceNo
        {
            get { return mInvoiceNo; }
            set { mIsChanges = true; mInvoiceNo = value; }
        }
        public Int32 TruckingOrderID
        {
            get { return mTruckingOrderID; }
            set { mIsChanges = true; mTruckingOrderID = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CA_VoucherHeaderDetails
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarA_VoucherHeaderDetails> lstCVarA_VoucherDetails = new List<CVarA_VoucherHeaderDetails>();
        public List<CPKA_VoucherHeaderDetails> lstDeletedCPKA_VoucherDetails = new List<CPKA_VoucherHeaderDetails>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetItem(Int64 ID)
        {
            return DataFill(Convert.ToString(ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarA_VoucherDetails.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListA_VoucherDetails";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].GetItemA_VoucherDetails";
                    Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                    Com.Parameters[0].Value = Convert.ToInt64(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarA_VoucherHeaderDetails ObjCVarA_VoucherDetails = new CVarA_VoucherHeaderDetails();
                        ObjCVarA_VoucherDetails.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarA_VoucherDetails.mVoucherID = Convert.ToInt64(dr["VoucherID"].ToString());
                        ObjCVarA_VoucherDetails.mValue = Convert.ToDecimal(dr["Value"].ToString());
                        ObjCVarA_VoucherDetails.mDescription = Convert.ToString(dr["Description"].ToString());
                        ObjCVarA_VoucherDetails.mAccountID = Convert.ToInt32(dr["AccountID"].ToString());
                        ObjCVarA_VoucherDetails.mSubAccountID = Convert.ToInt32(dr["SubAccountID"].ToString());
                        ObjCVarA_VoucherDetails.mCostCenterID = Convert.ToInt32(dr["CostCenterID"].ToString());
                        ObjCVarA_VoucherDetails.mIsDocumented = Convert.ToBoolean(dr["IsDocumented"].ToString());
                        ObjCVarA_VoucherDetails.mInvoiceID = Convert.ToInt64(dr["InvoiceID"].ToString());
                        ObjCVarA_VoucherDetails.mVoucherType = Convert.ToInt32(dr["VoucherType"].ToString());
                        lstCVarA_VoucherDetails.Add(ObjCVarA_VoucherDetails);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarA_VoucherDetails.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingA_VoucherDetails";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarA_VoucherHeaderDetails ObjCVarA_VoucherDetails = new CVarA_VoucherHeaderDetails();
                        ObjCVarA_VoucherDetails.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarA_VoucherDetails.mVoucherID = Convert.ToInt64(dr["VoucherID"].ToString());
                        ObjCVarA_VoucherDetails.mValue = Convert.ToDecimal(dr["Value"].ToString());
                        ObjCVarA_VoucherDetails.mDescription = Convert.ToString(dr["Description"].ToString());
                        ObjCVarA_VoucherDetails.mAccountID = Convert.ToInt32(dr["AccountID"].ToString());
                        ObjCVarA_VoucherDetails.mSubAccountID = Convert.ToInt32(dr["SubAccountID"].ToString());
                        ObjCVarA_VoucherDetails.mCostCenterID = Convert.ToInt32(dr["CostCenterID"].ToString());
                        ObjCVarA_VoucherDetails.mIsDocumented = Convert.ToBoolean(dr["IsDocumented"].ToString());
                        ObjCVarA_VoucherDetails.mInvoiceID = Convert.ToInt64(dr["InvoiceID"].ToString());
                        ObjCVarA_VoucherDetails.mVoucherType = Convert.ToInt32(dr["VoucherType"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarA_VoucherDetails.Add(ObjCVarA_VoucherDetails);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            //tr = Con.BeginTransaction(IsolationLevel.ReadUncommitted);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DeleteListA_VoucherDetails";
                else
                    Com.CommandText = "[dbo].UpdateListA_VoucherDetails";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKA_VoucherHeaderDetails> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DeleteItemA_VoucherDetails";
                Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                foreach (CPKA_VoucherHeaderDetails ObjCPKA_VoucherDetails in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt64(ObjCPKA_VoucherDetails.ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarA_VoucherHeaderDetails> SaveList)
        {
            Exception Exp = null;
            //SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;// = GlobalConnection.GlobalCom;
            try
            {
                GlobalConnection.myCommand = new SqlCommand();
                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;
                //Con.Open();
                //Com = new SqlCommand();
                //GlobalConnection.GlobalCon.Open();

                Com.Parameters.Add(new SqlParameter("@VoucherID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@Value", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@Description", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@AccountID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@SubAccountID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@CostCenterID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@IsDocumented", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@InvoiceID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@VoucherType", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Job_ID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@OperationID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@HouseID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@BranchID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TruckingOrderID", SqlDbType.Int));
                SqlParameter paraID = Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, "ID", DataRowVersion.Default, null));
                foreach (CVarA_VoucherHeaderDetails ObjCVarA_VoucherDetails in SaveList)
                {
                    if (ObjCVarA_VoucherDetails.mIsChanges == true)
                    {
                        if (ObjCVarA_VoucherDetails.ID == 0)
                        {
                            Com.CommandText = "[dbo].InsertItemA_VoucherDetails";
                            paraID.Direction = ParameterDirection.Output;
                        }
                        else if (ObjCVarA_VoucherDetails.ID != 0)
                        {
                            Com.CommandText = "[dbo].UpdateItemA_VoucherDetails";
                            paraID.Direction = ParameterDirection.Input;
                        }
                        //BeginTrans(Com, GlobalConnection.GlobalCon);
                        if (ObjCVarA_VoucherDetails.ID != 0)
                        {
                            Com.Parameters["@ID"].Value = ObjCVarA_VoucherDetails.ID;
                        }
                        Com.Parameters["@VoucherID"].Value = ObjCVarA_VoucherDetails.VoucherID;
                        Com.Parameters["@Value"].Value = ObjCVarA_VoucherDetails.Value;
                        Com.Parameters["@Description"].Value = ObjCVarA_VoucherDetails.Description;
                        Com.Parameters["@AccountID"].Value = ObjCVarA_VoucherDetails.AccountID;
                        Com.Parameters["@SubAccountID"].Value = ObjCVarA_VoucherDetails.SubAccountID;
                        Com.Parameters["@CostCenterID"].Value = ObjCVarA_VoucherDetails.CostCenterID;
                        Com.Parameters["@IsDocumented"].Value = ObjCVarA_VoucherDetails.IsDocumented;
                        Com.Parameters["@InvoiceID"].Value = ObjCVarA_VoucherDetails.InvoiceID;
                        Com.Parameters["@VoucherType"].Value = ObjCVarA_VoucherDetails.VoucherType;
                        Com.Parameters["@Job_ID"].Value = ObjCVarA_VoucherDetails.Job_ID;
                        Com.Parameters["@OperationID"].Value = ObjCVarA_VoucherDetails.OperationID;
                        Com.Parameters["@HouseID"].Value = ObjCVarA_VoucherDetails.HouseID;
                        Com.Parameters["@BranchID"].Value = ObjCVarA_VoucherDetails.BranchID;
                        Com.Parameters["@TruckingOrderID"].Value = ObjCVarA_VoucherDetails.TruckingOrderID;

                        //EndTrans(Com, GlobalConnection.GlobalCon);

                        Com.ExecuteNonQuery();
                        //GlobalConnection.myTrans.Commit();
                        if (ObjCVarA_VoucherDetails.ID == 0)
                        {
                            ObjCVarA_VoucherDetails.ID = Convert.ToInt64(Com.Parameters["@ID"].Value);
                        }
                        ObjCVarA_VoucherDetails.mIsChanges = false;
                    }

                   

                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                //if (tr != null)
                //    tr.Rollback();

                GlobalConnection.myTrans.Rollback();
            }
            finally
            {
                //GlobalConnection.myConnection.Close();
                //GlobalConnection.myConnection.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }

    public class CPaymentsCustomizedDBCall
    {
        #region DB Customized SPs
        public Exception SP_Trans_Log(string pStoredProcedureName, Int32 pUser_ID, string pTable_Name, Int64 pRow_ID, string pTrans_Type)
        {

            Exception Exp = null;
            //SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            //SqlDataReader dr;
            //SqlTransaction tr;

           

            try
            {

                GlobalConnection.myCommand = new SqlCommand();
                
                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;

                //Con.Open();
                //tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                //Com = new SqlCommand();
                //Com.CommandType = CommandType.StoredProcedure;

                Com.Parameters.Add(new SqlParameter("@User_ID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Table_Name", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@Row_ID ", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@Trans_Type ", SqlDbType.NVarChar));
                //Com.CommandText = "[dbo].ERP_ForwWeb_PaymentDetails";
                Com.CommandText = "[dbo]." + pStoredProcedureName;
                Com.Parameters[0].Value = pUser_ID;
                Com.Parameters[1].Value = pTable_Name;
                Com.Parameters[2].Value = pRow_ID;
                Com.Parameters[3].Value = pTrans_Type;

                //Com.Transaction = tr;
                //Com.Connection = Con;
                Com.ExecuteNonQuery();
                try
                {

                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                }
            
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
            }
            return Exp;
        }

        #endregion DB Customized SPs

        #region DB functions
        public Exception CallStringFunction(string pStrQuery)
        {
            //var NewCode = "";
            Exception Exp = null;
            //SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
          
            //SqlTransaction tr;

            try
            {
               
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand = new SqlCommand(pStrQuery, GlobalConnection.myConnection, GlobalConnection.myTrans);

                //GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;

                GlobalConnection.myCommand.ExecuteNonQuery();
                try
                {

                 
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                }
               
                //tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
               
            }
            finally
            {
            }
            return Exp;
        }

        #endregion DB functions
        public string SP_A_JV_Get_Code(string pStoredProcedureName, DateTime pDate, Int32 pUserID, Int32 pJournal_ID)
        {
        
            SqlDataReader dr;
            SqlTransaction tr;
            string pNewCode = "";
            Exception Exp = null;
            //SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;// = GlobalConnection.GlobalCom;
            try
            {
                GlobalConnection.myCommand = new SqlCommand();
                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;
                //Con.Open();
                //Com = new SqlCommand();
                //GlobalConnection.GlobalCon.Open();

                Com.Parameters.Add(new SqlParameter("@Date ", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@UserID ", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Journal_ID ", SqlDbType.Int));

                //Com.CommandText = "[dbo].ERP_ForwWeb_PaymentDetails";
                Com.CommandText = "[dbo]." + pStoredProcedureName;
                Com.Parameters[0].Value = pDate;
                Com.Parameters[1].Value = pUserID;
                Com.Parameters[2].Value = pJournal_ID;

                //Com.Transaction = tr;
                //Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        pNewCode = dr[0].ToString();
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                //tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                //Con.Close();
                //Con.Dispose();
            }
            return pNewCode;
        }
        public string CallStringFunctionReturn(string pStrQuery)
        {
            var NewCode = "";
            Exception Exp = null;
            SqlDataReader dr;
    
            try
            {
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand = new SqlCommand(pStrQuery, GlobalConnection.myConnection, GlobalConnection.myTrans);

                //GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;

                dr = GlobalConnection.myCommand.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        NewCode = dr[0].ToString();
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
               
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
              
            }
            return NewCode;
        }

        public string CallStringFunctionByMultiReturn(string pStrQuery)
        {
            var NewCode = "";
            Exception Exp = null;
            SqlDataReader dr;
            SqlTransaction tr;
            try
            {
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand = new SqlCommand(pStrQuery, GlobalConnection.myConnection, GlobalConnection.myTrans);

                //GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;

                dr = GlobalConnection.myCommand.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        NewCode += dr[0].ToString() + ",";
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    NewCode = NewCode.Substring(0, (NewCode.Length - 1));

                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
            }
            return NewCode;
        }

        public string A_CashVoucher_GetCode_BySafeCode(string pStoredProcedureName, Int32 pSafeID, DateTime pDate, Int32 pVoucherType)
        {
            Exception Exp = null;

            SqlCommand Com;
            SqlDataReader dr;
           
            string pNewCode = "";
            try
            {
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;

                Com.Parameters.Add(new SqlParameter("@SafeID ", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Date ", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@VoucherType ", SqlDbType.Int));

                //Com.CommandText = "[dbo].ERP_ForwWeb_PaymentDetails";
                Com.CommandText = "[dbo]." + pStoredProcedureName;
                Com.Parameters[0].Value = pSafeID;
                Com.Parameters[1].Value = pDate;
                Com.Parameters[2].Value = pVoucherType;
                
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        pNewCode = dr[0].ToString();
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
            
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
            }
            return pNewCode;
        }
        public string A_ChequeVoucher_GetCodeByBank(string pStoredProcedureName, DateTime pDate, Int32 pBankID, Int32 pVoucherType)
        {
            Exception Exp = null;
 
            SqlCommand Com;
            SqlDataReader dr;
       
            string pNewCode = "";
            try
            {
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;

                Com.Parameters.Add(new SqlParameter("@Date ", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@BankID ", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@VoucherType ", SqlDbType.Int));

                //Com.CommandText = "[dbo].ERP_ForwWeb_PaymentDetails";
                Com.CommandText = "[dbo]." + pStoredProcedureName;
                Com.Parameters[0].Value = pDate;
                Com.Parameters[1].Value = pBankID;
                Com.Parameters[2].Value = pVoucherType;

            
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        pNewCode = dr[0].ToString();
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
       
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
               
            }
            return pNewCode;
        }

        public string A_ChequeVoucher_GetNextChequeNo(string pStoredProcedureName, Int32 pBankID, Int32 pVoucherType)
        {
            Exception Exp = null;

            SqlCommand Com;
            SqlDataReader dr;
    
            string pNewCode = "";
            try
            {
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;

                Com.Parameters.Add(new SqlParameter("@BankID ", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@VoucherType ", SqlDbType.Int));

                //Com.CommandText = "[dbo].ERP_ForwWeb_PaymentDetails";
                Com.CommandText = "[dbo]." + pStoredProcedureName;
                Com.Parameters[0].Value = pBankID;
                Com.Parameters[1].Value = pVoucherType;

             
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        pNewCode = dr[0].ToString();
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
           
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
        
            }
            return pNewCode;
        }

        public Exception A_CashVouchers_UnPosted_ByID(string pStoredProcedureName, string pVoucherIDs, Int32 pUserID)
        {

            Exception Exp = null;
           
            SqlCommand Com;
            SqlDataReader dr;
          
            try
            {
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;

                Com.Parameters.Add(new SqlParameter("@VoucherIDs", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@UserID ", SqlDbType.Int));

                //Com.CommandText = "[dbo].ERP_ForwWeb_PaymentDetails";
                Com.CommandText = "[dbo]." + pStoredProcedureName;
                Com.Parameters[0].Value = pVoucherIDs;
                Com.Parameters[1].Value = pUserID;



                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
 
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
               
            }
            return Exp;
        }
        public Exception A_ChequeVouchers_UnPosted_ByID(string pStoredProcedureName, string pVoucherIDs, Int32 pUserID)
        {

            Exception Exp = null;

            SqlCommand Com;
            SqlDataReader dr;
        
            try
            {
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;

                Com.Parameters.Add(new SqlParameter("@VoucherIDs", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@UserID ", SqlDbType.Int));

                //Com.CommandText = "[dbo].ERP_ForwWeb_PaymentDetails";
                Com.CommandText = "[dbo]." + pStoredProcedureName;
                Com.Parameters[0].Value = pVoucherIDs;
                Com.Parameters[1].Value = pUserID;


                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
   
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
               
            }
            return Exp;
        }

        public Exception A_CashInVouchers_Posting(string pStoredProcedureName, string pCashInVoucherIDs, DateTime pGivenDate, Int32 pUser_ID)
        {

            Exception Exp = null;
          
            SqlCommand Com;
            SqlDataReader dr;
       
            try
            {
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
               //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;

                Com.Parameters.Add(new SqlParameter("@CashInVoucherIDs", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@GivenDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@UserID ", SqlDbType.Int));
                //Com.CommandText = "[dbo].ERP_ForwWeb_PaymentDetails";
                Com.CommandText = "[dbo]." + pStoredProcedureName;
                Com.Parameters[0].Value = pCashInVoucherIDs;
                Com.Parameters[1].Value = pGivenDate;
                Com.Parameters[2].Value = pUser_ID;


                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
        
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
         
            }
            return Exp;
        }
        public Exception A_ChequeInVouchers_PostingLiner(string pStoredProcedureName, string pChequeInVoucherIDs, DateTime pGivenDate, Int32 pUser_ID)
        {

            Exception Exp = null;

            SqlCommand Com;
            SqlDataReader dr;

            try
            {
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;

                Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@PostingDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@UserID ", SqlDbType.Int));
                //Com.CommandText = "[dbo].ERP_ForwWeb_PaymentDetails";
                Com.CommandText = "[dbo]." + pStoredProcedureName;
                Com.Parameters[0].Value = pChequeInVoucherIDs;
                Com.Parameters[1].Value = pGivenDate;
                Com.Parameters[2].Value = pUser_ID;

                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }

            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {

            }
            return Exp;
        }

        public Exception A_ChequeInVouchers_Posting(string pStoredProcedureName, string pChequeInVoucherIDs, DateTime pGivenDate, Int32 pUser_ID)
        {

            Exception Exp = null;

            SqlCommand Com;
            SqlDataReader dr;

            try
            {
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
               // GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;

                Com.Parameters.Add(new SqlParameter("@ChequeInVoucherIDs", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@GivenDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@UserID ", SqlDbType.Int));
                //Com.CommandText = "[dbo].ERP_ForwWeb_PaymentDetails";
                Com.CommandText = "[dbo]." + pStoredProcedureName;
                Com.Parameters[0].Value = pChequeInVoucherIDs;
                Com.Parameters[1].Value = pGivenDate;
                Com.Parameters[2].Value = pUser_ID;

                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }

            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {

            }
            return Exp;
        }
        public string A_CashVoucher_GetCode_BySafeCode_NEW(string pStoredProcedureName, Int32 pSafeID, DateTime pDate, Int32 pVoucherType)
        {
            Exception Exp = null;

            SqlCommand Com;
            SqlDataReader dr;
            string pNewCode = "";
            try
            {
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;

                Com.Parameters.Add(new SqlParameter("@SafeID ", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Date ", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@VoucherType ", SqlDbType.Int));


                //Com.CommandText = "[dbo].ERP_ForwWeb_PaymentDetails";
                Com.CommandText = "[dbo]." + pStoredProcedureName;
                Com.Parameters[0].Value = pSafeID;
                Com.Parameters[1].Value = pDate;
                Com.Parameters[2].Value = pVoucherType;



                Com.ExecuteNonQuery();
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        pNewCode = dr[0].ToString();
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                // tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {

            }
            return pNewCode;
        }
        public string A_ChequeVoucher_GetCodeByBank_NEW(string pStoredProcedureName, DateTime pDate, Int32 pBankID, Int32 pSafeID, Int32 pVoucherType)
        {
            Exception Exp = null;

            SqlCommand Com;
            SqlDataReader dr;
            string pNewCode = "";
            try
            {
                GlobalConnection.myCommand = new SqlCommand();

                GlobalConnection.myCommand.Connection = GlobalConnection.myConnection;
                GlobalConnection.myCommand.Transaction = GlobalConnection.myTrans;

                GlobalConnection.myCommand.CommandType = CommandType.StoredProcedure;
                //GlobalConnection.myCommand.CommandTimeout = 0;
                Com = GlobalConnection.myCommand;
                Com.Parameters.Add(new SqlParameter("@Date ", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@BankID ", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@VoucherType ", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@SafeID ", SqlDbType.Int));

                //Com.CommandText = "[dbo].ERP_ForwWeb_PaymentDetails";
                Com.CommandText = "[dbo]." + pStoredProcedureName;
                Com.Parameters[0].Value = pDate;
                Com.Parameters[1].Value = pBankID;
                Com.Parameters[2].Value = pVoucherType;
                Com.Parameters[3].Value = pSafeID;



                Com.ExecuteNonQuery();
                //Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        pNewCode = dr[0].ToString();
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                //tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {

            }
            return pNewCode;
        }


    }

}
