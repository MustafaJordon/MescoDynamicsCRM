using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;
using Forwarding.MvcApp.Models.Customized;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.ReceiptsAndPayments.ShipLinkEGL.Generated
{
    [Serializable]
    public partial class CVarvw_InvoiceHeader_ERP_Liner
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int64 mID;
        internal Int32 mInvoiceType;
        internal String mInvoiceTypeCode;
        internal String mInvoiceTypeName;
        internal Int64 mBillID;
        internal String mBillNumber;
        internal Int64 mVoyageID;
        internal String mVoyageNumber;
        internal Int32 mVesselID;
        internal String mVesselName;
        internal String mVesselCode;
        internal String mClientName;
        internal DateTime mIssueDate;
        internal String mInvoiceSerial;
        internal Boolean mIsAudited;
        internal Boolean mIsPaid;
        internal Boolean mIsDeleted;
        internal DateTime mFromDate;
        internal DateTime mToDate;
        internal String mRemarks;
        internal Int32 mPortID;
        internal String mPortCode;
        internal String mPortName;
        internal Decimal mTotal;
        internal Decimal mRemainAmount;
        internal Decimal mPaidAmount;
        internal Decimal mQty;
        internal String mCurrency;
        internal Int32 mCurrencyID;
        internal Boolean mIsFreightInvoice;
        internal Boolean mIsStorageInvoice;
        internal Boolean mIsDemurrageInvoice;
        internal String mInvoiceSerialStr;
        internal Boolean mIsHold;
        internal Int32 mLineID;
        internal String mImportExport;
        internal Int64 mClientID;
        #endregion

        #region "Methods"
        public Int64 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        public Int32 InvoiceType
        {
            get { return mInvoiceType; }
            set { mInvoiceType = value; }
        }
        public String InvoiceTypeCode
        {
            get { return mInvoiceTypeCode; }
            set { mInvoiceTypeCode = value; }
        }
        public String InvoiceTypeName
        {
            get { return mInvoiceTypeName; }
            set { mInvoiceTypeName = value; }
        }
        public Int64 BillID
        {
            get { return mBillID; }
            set { mBillID = value; }
        }
        public String BillNumber
        {
            get { return mBillNumber; }
            set { mBillNumber = value; }
        }
        public Int64 VoyageID
        {
            get { return mVoyageID; }
            set { mVoyageID = value; }
        }
        public String VoyageNumber
        {
            get { return mVoyageNumber; }
            set { mVoyageNumber = value; }
        }
        public Int32 VesselID
        {
            get { return mVesselID; }
            set { mVesselID = value; }
        }
        public String VesselName
        {
            get { return mVesselName; }
            set { mVesselName = value; }
        }
        public String VesselCode
        {
            get { return mVesselCode; }
            set { mVesselCode = value; }
        }
        public String ClientName
        {
            get { return mClientName; }
            set { mClientName = value; }
        }
        public DateTime IssueDate
        {
            get { return mIssueDate; }
            set { mIssueDate = value; }
        }
        public String InvoiceSerial
        {
            get { return mInvoiceSerial; }
            set { mInvoiceSerial = value; }
        }
        public Boolean IsAudited
        {
            get { return mIsAudited; }
            set { mIsAudited = value; }
        }
        public Boolean IsPaid
        {
            get { return mIsPaid; }
            set { mIsPaid = value; }
        }
        public Boolean IsDeleted
        {
            get { return mIsDeleted; }
            set { mIsDeleted = value; }
        }
        public DateTime FromDate
        {
            get { return mFromDate; }
            set { mFromDate = value; }
        }
        public DateTime ToDate
        {
            get { return mToDate; }
            set { mToDate = value; }
        }
        public String Remarks
        {
            get { return mRemarks; }
            set { mRemarks = value; }
        }
        public Int32 PortID
        {
            get { return mPortID; }
            set { mPortID = value; }
        }
        public String PortCode
        {
            get { return mPortCode; }
            set { mPortCode = value; }
        }
        public String PortName
        {
            get { return mPortName; }
            set { mPortName = value; }
        }
        public Decimal Total
        {
            get { return mTotal; }
            set { mTotal = value; }
        }
        public Decimal RemainAmount
        {
            get { return mRemainAmount; }
            set { mRemainAmount = value; }
        }
        public Decimal PaidAmount
        {
            get { return mPaidAmount; }
            set { mPaidAmount = value; }
        }
        public Decimal Qty
        {
            get { return mQty; }
            set { mQty = value; }
        }
        public String Currency
        {
            get { return mCurrency; }
            set { mCurrency = value; }
        }
        public Int32 CurrencyID
        {
            get { return mCurrencyID; }
            set { mCurrencyID = value; }
        }
        public Boolean IsFreightInvoice
        {
            get { return mIsFreightInvoice; }
            set { mIsFreightInvoice = value; }
        }
        public Boolean IsStorageInvoice
        {
            get { return mIsStorageInvoice; }
            set { mIsStorageInvoice = value; }
        }
        public Boolean IsDemurrageInvoice
        {
            get { return mIsDemurrageInvoice; }
            set { mIsDemurrageInvoice = value; }
        }
        public String InvoiceSerialStr
        {
            get { return mInvoiceSerialStr; }
            set { mInvoiceSerialStr = value; }
        }
        public Boolean IsHold
        {
            get { return mIsHold; }
            set { mIsHold = value; }
        }
        public Int32 LineID
        {
            get { return mLineID; }
            set { mLineID = value; }
        }
        public String ImportExport
        {
            get { return mImportExport; }
            set { mImportExport = value; }
        }
        public Int64 ClientID
        {
            get { return mClientID; }
            set { mClientID = value; }
        }
        #endregion
    }

    public partial class Cvw_InvoiceHeader_ERP_Liner
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarvw_InvoiceHeader_ERP_Liner> lstCVarvw_InvoiceHeader_ERP_Liner = new List<CVarvw_InvoiceHeader_ERP_Liner>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvw_InvoiceHeader_ERP_Liner.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListvw_InvoiceHeader_ERP_Liner";
                    Com.Parameters[0].Value = Param;
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvw_InvoiceHeader_ERP_Liner ObjCVarvw_InvoiceHeader_ERP_Liner = new CVarvw_InvoiceHeader_ERP_Liner();
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mInvoiceType = Convert.ToInt32(dr["InvoiceType"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mInvoiceTypeCode = Convert.ToString(dr["InvoiceTypeCode"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mInvoiceTypeName = Convert.ToString(dr["InvoiceTypeName"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mBillID = Convert.ToInt64(dr["BillID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mBillNumber = Convert.ToString(dr["BillNumber"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mVoyageID = Convert.ToInt64(dr["VoyageID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mVoyageNumber = Convert.ToString(dr["VoyageNumber"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mVesselID = Convert.ToInt32(dr["VesselID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mVesselName = Convert.ToString(dr["VesselName"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mVesselCode = Convert.ToString(dr["VesselCode"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mClientName = Convert.ToString(dr["ClientName"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIssueDate = Convert.ToDateTime(dr["IssueDate"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mInvoiceSerial = Convert.ToString(dr["InvoiceSerial"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsAudited = Convert.ToBoolean(dr["IsAudited"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsPaid = Convert.ToBoolean(dr["IsPaid"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsDeleted = Convert.ToBoolean(dr["IsDeleted"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mFromDate = Convert.ToDateTime(dr["FromDate"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mToDate = Convert.ToDateTime(dr["ToDate"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mRemarks = Convert.ToString(dr["Remarks"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mPortID = Convert.ToInt32(dr["PortID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mPortCode = Convert.ToString(dr["PortCode"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mPortName = Convert.ToString(dr["PortName"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mTotal = Convert.ToDecimal(dr["Total"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mRemainAmount = Convert.ToDecimal(dr["RemainAmount"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mPaidAmount = Convert.ToDecimal(dr["PaidAmount"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mQty = Convert.ToDecimal(dr["Qty"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mCurrency = Convert.ToString(dr["Currency"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mCurrencyID = Convert.ToInt32(dr["CurrencyID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsFreightInvoice = Convert.ToBoolean(dr["IsFreightInvoice"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsStorageInvoice = Convert.ToBoolean(dr["IsStorageInvoice"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsDemurrageInvoice = Convert.ToBoolean(dr["IsDemurrageInvoice"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mInvoiceSerialStr = Convert.ToString(dr["InvoiceSerialStr"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsHold = Convert.ToBoolean(dr["IsHold"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mLineID = Convert.ToInt32(dr["LineID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mImportExport = Convert.ToString(dr["ImportExport"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mClientID = Convert.ToInt64(dr["ClientID"].ToString());
                        lstCVarvw_InvoiceHeader_ERP_Liner.Add(ObjCVarvw_InvoiceHeader_ERP_Liner);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvw_InvoiceHeader_ERP_Liner.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingvw_InvoiceHeader_ERP_Liner";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvw_InvoiceHeader_ERP_Liner ObjCVarvw_InvoiceHeader_ERP_Liner = new CVarvw_InvoiceHeader_ERP_Liner();
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mInvoiceType = Convert.ToInt32(dr["InvoiceType"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mInvoiceTypeCode = Convert.ToString(dr["InvoiceTypeCode"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mInvoiceTypeName = Convert.ToString(dr["InvoiceTypeName"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mBillID = Convert.ToInt64(dr["BillID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mBillNumber = Convert.ToString(dr["BillNumber"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mVoyageID = Convert.ToInt64(dr["VoyageID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mVoyageNumber = Convert.ToString(dr["VoyageNumber"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mVesselID = Convert.ToInt32(dr["VesselID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mVesselName = Convert.ToString(dr["VesselName"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mVesselCode = Convert.ToString(dr["VesselCode"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mClientName = Convert.ToString(dr["ClientName"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIssueDate = Convert.ToDateTime(dr["IssueDate"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mInvoiceSerial = Convert.ToString(dr["InvoiceSerial"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsAudited = Convert.ToBoolean(dr["IsAudited"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsPaid = Convert.ToBoolean(dr["IsPaid"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsDeleted = Convert.ToBoolean(dr["IsDeleted"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mFromDate = Convert.ToDateTime(dr["FromDate"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mToDate = Convert.ToDateTime(dr["ToDate"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mRemarks = Convert.ToString(dr["Remarks"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mPortID = Convert.ToInt32(dr["PortID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mPortCode = Convert.ToString(dr["PortCode"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mPortName = Convert.ToString(dr["PortName"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mTotal = Convert.ToDecimal(dr["Total"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mRemainAmount = Convert.ToDecimal(dr["RemainAmount"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mPaidAmount = Convert.ToDecimal(dr["PaidAmount"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mQty = Convert.ToDecimal(dr["Qty"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mCurrency = Convert.ToString(dr["Currency"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mCurrencyID = Convert.ToInt32(dr["CurrencyID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsFreightInvoice = Convert.ToBoolean(dr["IsFreightInvoice"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsStorageInvoice = Convert.ToBoolean(dr["IsStorageInvoice"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsDemurrageInvoice = Convert.ToBoolean(dr["IsDemurrageInvoice"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mInvoiceSerialStr = Convert.ToString(dr["InvoiceSerialStr"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mIsHold = Convert.ToBoolean(dr["IsHold"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mLineID = Convert.ToInt32(dr["LineID"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mImportExport = Convert.ToString(dr["ImportExport"].ToString());
                        ObjCVarvw_InvoiceHeader_ERP_Liner.mClientID = Convert.ToInt64(dr["ClientID"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarvw_InvoiceHeader_ERP_Liner.Add(ObjCVarvw_InvoiceHeader_ERP_Liner);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
    }

}