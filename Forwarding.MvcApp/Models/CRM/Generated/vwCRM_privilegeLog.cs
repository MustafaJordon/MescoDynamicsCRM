using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.CRM.CRM_Clients.Generated
{
    [Serializable]
    public partial class CVarvwCRM_privilegeLog
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int32 mID;
        internal Int32 mClientID;
        internal String mClientName;
        internal String mActionType;
        internal DateTime mCreationDate;
        internal Int32 mCreatorUserID;
        internal String mCreatorUsername;
        internal DateTime mModificationDate;
        internal Int32 mModificationUserID;
        internal Int32 mPipeLineStageID;
        internal String mPipeLineStageName;
        #endregion
       
        #region "Methods"
        public Int32 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        public Int32 ClientID
        {
            get { return mClientID; }
            set { mClientID = value; }
        }
        public String ClientName
        {
            get { return mClientName; }
            set { mClientName = value; }
        }
        public String ActionType
        {
            get { return mActionType; }
            set { mActionType = value; }
        }
        public DateTime CreationDate
        {
            get { return mCreationDate; }
            set { mCreationDate = value; }
        }
        public Int32 CreatorUserID
        {
            get { return mCreatorUserID; }
            set { mCreatorUserID = value; }
        }
        public String CreatorUsername
        {
            get { return mCreatorUsername; }
            set { mCreatorUsername = value; }
        }
        public DateTime ModificationDate
        {
            get { return mModificationDate; }
            set { mModificationDate = value; }
        }
        public Int32 ModificationUserID
        {
            get { return mModificationUserID; }
            set { mModificationUserID = value; }
        }
        public Int32 PipeLineStageID
        {
            get { return mPipeLineStageID; }
            set { mPipeLineStageID = value; }
        }
        public String PipeLineStageName
        {
            get { return mPipeLineStageName; }
            set { mPipeLineStageName = value; }
        }
        #endregion
    }

    public partial class CvwCRM_privilegeLog
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarvwCRM_privilegeLog> lstCVarvwCRM_privilegeLog = new List<CVarvwCRM_privilegeLog>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwCRM_privilegeLog.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.VarChar));
                    Com.CommandText = "[dbo].GetListvwCRM_privilegeLog";
                    Com.Parameters[0].Value = Param;
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwCRM_privilegeLog ObjCVarvwCRM_privilegeLog = new CVarvwCRM_privilegeLog();
                        ObjCVarvwCRM_privilegeLog.mID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarvwCRM_privilegeLog.mClientID = Convert.ToInt32(dr["ClientID"].ToString());
                        ObjCVarvwCRM_privilegeLog.mClientName = Convert.ToString(dr["ClientName"].ToString());
                        ObjCVarvwCRM_privilegeLog.mActionType = Convert.ToString(dr["ActionType"].ToString());
                        ObjCVarvwCRM_privilegeLog.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarvwCRM_privilegeLog.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
                        ObjCVarvwCRM_privilegeLog.mCreatorUsername = Convert.ToString(dr["CreatorUsername"].ToString());
                        ObjCVarvwCRM_privilegeLog.mModificationDate = Convert.ToDateTime(dr["ModificationDate"].ToString());
                        ObjCVarvwCRM_privilegeLog.mModificationUserID = Convert.ToInt32(dr["ModificationUserID"].ToString());
                        ObjCVarvwCRM_privilegeLog.mPipeLineStageID = Convert.ToInt32(dr["PipeLineStageID"].ToString());
                        ObjCVarvwCRM_privilegeLog.mPipeLineStageName = Convert.ToString(dr["PipeLineStageName"].ToString());
                        lstCVarvwCRM_privilegeLog.Add(ObjCVarvwCRM_privilegeLog);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarvwCRM_privilegeLog.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingvwCRM_privilegeLog";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarvwCRM_privilegeLog ObjCVarvwCRM_privilegeLog = new CVarvwCRM_privilegeLog();
                        ObjCVarvwCRM_privilegeLog.mID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarvwCRM_privilegeLog.mClientID = Convert.ToInt32(dr["ClientID"].ToString());
                        ObjCVarvwCRM_privilegeLog.mClientName = Convert.ToString(dr["ClientName"].ToString());
                        ObjCVarvwCRM_privilegeLog.mActionType = Convert.ToString(dr["ActionType"].ToString());
                        ObjCVarvwCRM_privilegeLog.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarvwCRM_privilegeLog.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
                        ObjCVarvwCRM_privilegeLog.mCreatorUsername = Convert.ToString(dr["CreatorUsername"].ToString());
                        ObjCVarvwCRM_privilegeLog.mModificationDate = Convert.ToDateTime(dr["ModificationDate"].ToString());
                        ObjCVarvwCRM_privilegeLog.mModificationUserID = Convert.ToInt32(dr["ModificationUserID"].ToString());
                        ObjCVarvwCRM_privilegeLog.mPipeLineStageID = Convert.ToInt32(dr["PipeLineStageID"].ToString());
                        ObjCVarvwCRM_privilegeLog.mPipeLineStageName = Convert.ToString(dr["PipeLineStageName"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarvwCRM_privilegeLog.Add(ObjCVarvwCRM_privilegeLog);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
    }
}
