using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.ContainerYard.Transactions
{
    [Serializable]
    public class CPKWH_CYInvoices
    {
        #region "variables"
        private Int32 mID;
        #endregion

        #region "Methods"
        public Int32 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarWH_CYInvoices : CPKWH_CYInvoices
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int32 mInvoiceNumber;
        internal Int32 mInvoiceTypeID;
        internal Int32 mCustomerID;
        internal Int32 mCurrencyID;
        internal Decimal mExchangeRate;
        internal DateTime mInvoiceDate;
        internal Decimal mAmountWithoutVAT;
        internal Int32 mTaxTypeID;
        internal Decimal mTaxPercentage;
        internal Decimal mTaxAmount;
        internal Decimal mAmount;
        internal Decimal mPaidAmount;
        internal Decimal mRemainingAmount;
        internal Int32 mInvoiceStatusID;
        internal Boolean mIsApproved;
        internal Boolean mIsDeleted;
        internal Int32 mApprovingUserID;
        internal Int32 mCreatorUserID;
        internal DateTime mCreationDate;
        internal Int32 mModificatorUserID;
        internal DateTime mModificationDate;
        internal String mGRT;
        internal String mDWT;
        internal String mNRT;
        internal String mLOA;
        internal Int32 mWH_CntrStockID;
        internal String mContainerNumber;
        internal Int64 mWH_InventoryID;
        #endregion

        #region "Methods"
        public Int32 InvoiceNumber
        {
            get { return mInvoiceNumber; }
            set { mIsChanges = true; mInvoiceNumber = value; }
        }
        public Int32 InvoiceTypeID
        {
            get { return mInvoiceTypeID; }
            set { mIsChanges = true; mInvoiceTypeID = value; }
        }
        public Int32 CustomerID
        {
            get { return mCustomerID; }
            set { mIsChanges = true; mCustomerID = value; }
        }
        public Int32 CurrencyID
        {
            get { return mCurrencyID; }
            set { mIsChanges = true; mCurrencyID = value; }
        }
        public Decimal ExchangeRate
        {
            get { return mExchangeRate; }
            set { mIsChanges = true; mExchangeRate = value; }
        }
        public DateTime InvoiceDate
        {
            get { return mInvoiceDate; }
            set { mIsChanges = true; mInvoiceDate = value; }
        }
        public Decimal AmountWithoutVAT
        {
            get { return mAmountWithoutVAT; }
            set { mIsChanges = true; mAmountWithoutVAT = value; }
        }
        public Int32 TaxTypeID
        {
            get { return mTaxTypeID; }
            set { mIsChanges = true; mTaxTypeID = value; }
        }
        public Decimal TaxPercentage
        {
            get { return mTaxPercentage; }
            set { mIsChanges = true; mTaxPercentage = value; }
        }
        public Decimal TaxAmount
        {
            get { return mTaxAmount; }
            set { mIsChanges = true; mTaxAmount = value; }
        }
        public Decimal Amount
        {
            get { return mAmount; }
            set { mIsChanges = true; mAmount = value; }
        }
        public Decimal PaidAmount
        {
            get { return mPaidAmount; }
            set { mIsChanges = true; mPaidAmount = value; }
        }
        public Decimal RemainingAmount
        {
            get { return mRemainingAmount; }
            set { mIsChanges = true; mRemainingAmount = value; }
        }
        public Int32 InvoiceStatusID
        {
            get { return mInvoiceStatusID; }
            set { mIsChanges = true; mInvoiceStatusID = value; }
        }
        public Boolean IsApproved
        {
            get { return mIsApproved; }
            set { mIsChanges = true; mIsApproved = value; }
        }
        public Boolean IsDeleted
        {
            get { return mIsDeleted; }
            set { mIsChanges = true; mIsDeleted = value; }
        }
        public Int32 ApprovingUserID
        {
            get { return mApprovingUserID; }
            set { mIsChanges = true; mApprovingUserID = value; }
        }
        public Int32 CreatorUserID
        {
            get { return mCreatorUserID; }
            set { mIsChanges = true; mCreatorUserID = value; }
        }
        public DateTime CreationDate
        {
            get { return mCreationDate; }
            set { mIsChanges = true; mCreationDate = value; }
        }
        public Int32 ModificatorUserID
        {
            get { return mModificatorUserID; }
            set { mIsChanges = true; mModificatorUserID = value; }
        }
        public DateTime ModificationDate
        {
            get { return mModificationDate; }
            set { mIsChanges = true; mModificationDate = value; }
        }
        public String GRT
        {
            get { return mGRT; }
            set { mIsChanges = true; mGRT = value; }
        }
        public String DWT
        {
            get { return mDWT; }
            set { mIsChanges = true; mDWT = value; }
        }
        public String NRT
        {
            get { return mNRT; }
            set { mIsChanges = true; mNRT = value; }
        }
        public String LOA
        {
            get { return mLOA; }
            set { mIsChanges = true; mLOA = value; }
        }
        public Int32 WH_CntrStockID
        {
            get { return mWH_CntrStockID; }
            set { mIsChanges = true; mWH_CntrStockID = value; }
        }
        public String ContainerNumber
        {
            get { return mContainerNumber; }
            set { mIsChanges = true; mContainerNumber = value; }
        }
        public Int64 WH_InventoryID
        {
            get { return mWH_InventoryID; }
            set { mIsChanges = true; mWH_InventoryID = value; }
        }

        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CWH_CYInvoices
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarWH_CYInvoices> lstCVarWH_CYInvoices = new List<CVarWH_CYInvoices>();
        public List<CPKWH_CYInvoices> lstDeletedCPKWH_CYInvoices = new List<CPKWH_CYInvoices>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetItem(Int32 ID)
        {
            return DataFill(Convert.ToString(ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarWH_CYInvoices.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListWH_CYInvoices";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].GetItemWH_CYInvoices";
                    Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int));
                    Com.Parameters[0].Value = Convert.ToInt32(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarWH_CYInvoices ObjCVarWH_CYInvoices = new CVarWH_CYInvoices();
                        ObjCVarWH_CYInvoices.ID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarWH_CYInvoices.mInvoiceNumber = Convert.ToInt32(dr["InvoiceNumber"].ToString());
                        ObjCVarWH_CYInvoices.mInvoiceTypeID = Convert.ToInt32(dr["InvoiceTypeID"].ToString());
                        ObjCVarWH_CYInvoices.mCustomerID = Convert.ToInt32(dr["CustomerID"].ToString());
                        ObjCVarWH_CYInvoices.mCurrencyID = Convert.ToInt32(dr["CurrencyID"].ToString());
                        ObjCVarWH_CYInvoices.mExchangeRate = Convert.ToDecimal(dr["ExchangeRate"].ToString());
                        ObjCVarWH_CYInvoices.mInvoiceDate = Convert.ToDateTime(dr["InvoiceDate"].ToString());
                        ObjCVarWH_CYInvoices.mAmountWithoutVAT = Convert.ToDecimal(dr["AmountWithoutVAT"].ToString());
                        ObjCVarWH_CYInvoices.mTaxTypeID = Convert.ToInt32(dr["TaxTypeID"].ToString());
                        ObjCVarWH_CYInvoices.mTaxPercentage = Convert.ToDecimal(dr["TaxPercentage"].ToString());
                        ObjCVarWH_CYInvoices.mTaxAmount = Convert.ToDecimal(dr["TaxAmount"].ToString());
                        ObjCVarWH_CYInvoices.mAmount = Convert.ToDecimal(dr["Amount"].ToString());
                        ObjCVarWH_CYInvoices.mPaidAmount = Convert.ToDecimal(dr["PaidAmount"].ToString());
                        ObjCVarWH_CYInvoices.mRemainingAmount = Convert.ToDecimal(dr["RemainingAmount"].ToString());
                        ObjCVarWH_CYInvoices.mInvoiceStatusID = Convert.ToInt32(dr["InvoiceStatusID"].ToString());
                        ObjCVarWH_CYInvoices.mIsApproved = Convert.ToBoolean(dr["IsApproved"].ToString());
                        ObjCVarWH_CYInvoices.mIsDeleted = Convert.ToBoolean(dr["IsDeleted"].ToString());
                        ObjCVarWH_CYInvoices.mApprovingUserID = Convert.ToInt32(dr["ApprovingUserID"].ToString());
                        ObjCVarWH_CYInvoices.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
                        ObjCVarWH_CYInvoices.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarWH_CYInvoices.mModificatorUserID = Convert.ToInt32(dr["ModificatorUserID"].ToString());
                        ObjCVarWH_CYInvoices.mModificationDate = Convert.ToDateTime(dr["ModificationDate"].ToString());
                        ObjCVarWH_CYInvoices.mGRT = Convert.ToString(dr["GRT"].ToString());
                        ObjCVarWH_CYInvoices.mDWT = Convert.ToString(dr["DWT"].ToString());
                        ObjCVarWH_CYInvoices.mNRT = Convert.ToString(dr["NRT"].ToString());
                        ObjCVarWH_CYInvoices.mLOA = Convert.ToString(dr["LOA"].ToString());
                        ObjCVarWH_CYInvoices.mWH_CntrStockID = Convert.ToInt32(dr["WH_CntrStockID"].ToString());
                        ObjCVarWH_CYInvoices.mWH_InventoryID = Convert.ToInt64(dr["WH_InventoryID"].ToString());
                        lstCVarWH_CYInvoices.Add(ObjCVarWH_CYInvoices);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarWH_CYInvoices.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingWH_CYInvoices";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarWH_CYInvoices ObjCVarWH_CYInvoices = new CVarWH_CYInvoices();
                        ObjCVarWH_CYInvoices.ID = Convert.ToInt32(dr["ID"].ToString());
                        ObjCVarWH_CYInvoices.mInvoiceNumber = Convert.ToInt32(dr["InvoiceNumber"].ToString());
                        ObjCVarWH_CYInvoices.mInvoiceTypeID = Convert.ToInt32(dr["InvoiceTypeID"].ToString());
                        ObjCVarWH_CYInvoices.mCustomerID = Convert.ToInt32(dr["CustomerID"].ToString());
                        ObjCVarWH_CYInvoices.mCurrencyID = Convert.ToInt32(dr["CurrencyID"].ToString());
                        ObjCVarWH_CYInvoices.mExchangeRate = Convert.ToDecimal(dr["ExchangeRate"].ToString());
                        ObjCVarWH_CYInvoices.mInvoiceDate = Convert.ToDateTime(dr["InvoiceDate"].ToString());
                        ObjCVarWH_CYInvoices.mAmountWithoutVAT = Convert.ToDecimal(dr["AmountWithoutVAT"].ToString());
                        ObjCVarWH_CYInvoices.mTaxTypeID = Convert.ToInt32(dr["TaxTypeID"].ToString());
                        ObjCVarWH_CYInvoices.mTaxPercentage = Convert.ToDecimal(dr["TaxPercentage"].ToString());
                        ObjCVarWH_CYInvoices.mTaxAmount = Convert.ToDecimal(dr["TaxAmount"].ToString());
                        ObjCVarWH_CYInvoices.mAmount = Convert.ToDecimal(dr["Amount"].ToString());
                        ObjCVarWH_CYInvoices.mPaidAmount = Convert.ToDecimal(dr["PaidAmount"].ToString());
                        ObjCVarWH_CYInvoices.mRemainingAmount = Convert.ToDecimal(dr["RemainingAmount"].ToString());
                        ObjCVarWH_CYInvoices.mInvoiceStatusID = Convert.ToInt32(dr["InvoiceStatusID"].ToString());
                        ObjCVarWH_CYInvoices.mIsApproved = Convert.ToBoolean(dr["IsApproved"].ToString());
                        ObjCVarWH_CYInvoices.mIsDeleted = Convert.ToBoolean(dr["IsDeleted"].ToString());
                        ObjCVarWH_CYInvoices.mApprovingUserID = Convert.ToInt32(dr["ApprovingUserID"].ToString());
                        ObjCVarWH_CYInvoices.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
                        ObjCVarWH_CYInvoices.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarWH_CYInvoices.mModificatorUserID = Convert.ToInt32(dr["ModificatorUserID"].ToString());
                        ObjCVarWH_CYInvoices.mModificationDate = Convert.ToDateTime(dr["ModificationDate"].ToString());
                        ObjCVarWH_CYInvoices.mGRT = Convert.ToString(dr["GRT"].ToString());
                        ObjCVarWH_CYInvoices.mDWT = Convert.ToString(dr["DWT"].ToString());
                        ObjCVarWH_CYInvoices.mNRT = Convert.ToString(dr["NRT"].ToString());
                        ObjCVarWH_CYInvoices.mLOA = Convert.ToString(dr["LOA"].ToString());
                        ObjCVarWH_CYInvoices.mWH_CntrStockID = Convert.ToInt32(dr["WH_CntrStockID"].ToString());
                        ObjCVarWH_CYInvoices.mWH_InventoryID = Convert.ToInt64(dr["WH_InventoryID"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarWH_CYInvoices.Add(ObjCVarWH_CYInvoices);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            tr = Con.BeginTransaction(IsolationLevel.Serializable);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DeleteListWH_CYInvoices";
                else
                    Com.CommandText = "[dbo].UpdateListWH_CYInvoices";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKWH_CYInvoices> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DeleteItemWH_CYInvoices";
                Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int));
                foreach (CPKWH_CYInvoices ObjCPKWH_CYInvoices in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt32(ObjCPKWH_CYInvoices.ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarWH_CYInvoices> SaveList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.Parameters.Add(new SqlParameter("@InvoiceNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@InvoiceTypeID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@CustomerID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@CurrencyID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ExchangeRate", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@InvoiceDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@AmountWithoutVAT", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@TaxTypeID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TaxPercentage", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@TaxAmount", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@Amount", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@PaidAmount", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@RemainingAmount", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@InvoiceStatusID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@IsApproved", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@IsDeleted", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@ApprovingUserID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@CreatorUserID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@CreationDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@ModificatorUserID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ModificationDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@GRT", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@DWT", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@NRT", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@LOA", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@WH_CntrStockID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WH_InventoryID", SqlDbType.BigInt));
                SqlParameter paraID = Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, "ID", DataRowVersion.Default, null));
                foreach (CVarWH_CYInvoices ObjCVarWH_CYInvoices in SaveList)
                {
                    if (ObjCVarWH_CYInvoices.mIsChanges == true)
                    {
                        if (ObjCVarWH_CYInvoices.ID == 0)
                        {
                            //Com.CommandText = "[dbo].InsertItemWH_CYInvoices";
                            //Com.Parameters.Add(new SqlParameter("@ContainerNumber", SqlDbType.NVarChar));

                            Com.CommandText = "[dbo].InsertItemWH_CYInvoices_C";
                            paraID.Direction = ParameterDirection.Output;
                            //Com.Parameters["@ContainerNumber"].Value = ObjCVarWH_CYInvoices.ContainerNumber;
                        }
                        else if (ObjCVarWH_CYInvoices.ID != 0)
                        {
                            Com.CommandText = "[dbo].UpdateItemWH_CYInvoices";
                            paraID.Direction = ParameterDirection.Input;
                        }
                        BeginTrans(Com, Con);
                        if (ObjCVarWH_CYInvoices.ID != 0)
                        {
                            Com.Parameters["@ID"].Value = ObjCVarWH_CYInvoices.ID;
                        }
                        Com.Parameters["@InvoiceNumber"].Value = ObjCVarWH_CYInvoices.InvoiceNumber;
                        Com.Parameters["@InvoiceTypeID"].Value = ObjCVarWH_CYInvoices.InvoiceTypeID;
                        Com.Parameters["@CustomerID"].Value = ObjCVarWH_CYInvoices.CustomerID;
                        Com.Parameters["@CurrencyID"].Value = ObjCVarWH_CYInvoices.CurrencyID;
                        Com.Parameters["@ExchangeRate"].Value = ObjCVarWH_CYInvoices.ExchangeRate;
                        Com.Parameters["@InvoiceDate"].Value = ObjCVarWH_CYInvoices.InvoiceDate;
                        Com.Parameters["@AmountWithoutVAT"].Value = ObjCVarWH_CYInvoices.AmountWithoutVAT;
                        Com.Parameters["@TaxTypeID"].Value = ObjCVarWH_CYInvoices.TaxTypeID;
                        Com.Parameters["@TaxPercentage"].Value = ObjCVarWH_CYInvoices.TaxPercentage;
                        Com.Parameters["@TaxAmount"].Value = ObjCVarWH_CYInvoices.TaxAmount;
                        Com.Parameters["@Amount"].Value = ObjCVarWH_CYInvoices.Amount;
                        Com.Parameters["@PaidAmount"].Value = ObjCVarWH_CYInvoices.PaidAmount;
                        Com.Parameters["@RemainingAmount"].Value = ObjCVarWH_CYInvoices.RemainingAmount;
                        Com.Parameters["@InvoiceStatusID"].Value = ObjCVarWH_CYInvoices.InvoiceStatusID;
                        Com.Parameters["@IsApproved"].Value = ObjCVarWH_CYInvoices.IsApproved;
                        Com.Parameters["@IsDeleted"].Value = ObjCVarWH_CYInvoices.IsDeleted;
                        Com.Parameters["@ApprovingUserID"].Value = ObjCVarWH_CYInvoices.ApprovingUserID;
                        Com.Parameters["@CreatorUserID"].Value = ObjCVarWH_CYInvoices.CreatorUserID;
                        Com.Parameters["@CreationDate"].Value = ObjCVarWH_CYInvoices.CreationDate;
                        Com.Parameters["@ModificatorUserID"].Value = ObjCVarWH_CYInvoices.ModificatorUserID;
                        Com.Parameters["@ModificationDate"].Value = ObjCVarWH_CYInvoices.ModificationDate;
                        Com.Parameters["@GRT"].Value = ObjCVarWH_CYInvoices.GRT;
                        Com.Parameters["@DWT"].Value = ObjCVarWH_CYInvoices.DWT;
                        Com.Parameters["@NRT"].Value = ObjCVarWH_CYInvoices.NRT;
                        Com.Parameters["@LOA"].Value = ObjCVarWH_CYInvoices.LOA;
                        Com.Parameters["@WH_CntrStockID"].Value = ObjCVarWH_CYInvoices.WH_CntrStockID;
                        Com.Parameters["@WH_InventoryID"].Value = ObjCVarWH_CYInvoices.WH_InventoryID;
                        EndTrans(Com, Con);
                        if (ObjCVarWH_CYInvoices.ID == 0)
                        {
                            ObjCVarWH_CYInvoices.ID = Convert.ToInt32(Com.Parameters["@ID"].Value);
                        }
                        ObjCVarWH_CYInvoices.mIsChanges = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                if (tr != null)
                    tr.Rollback();
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }
}
