using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Controllers.SL.API_SL_Transactions
{
    [Serializable]
    public class CPKVoucherPayments
    {
        #region "variables"
        private Int64 mID;
        #endregion

        #region "Methods"
        public Int64 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarVoucherPayments : CPKVoucherPayments
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int32 mSafeID;
        internal Int32 mBankID;
        internal String mvoucherCode;
        internal Int32 mCurrencyID;
        internal Decimal mExchangeRate;
        internal Decimal mAmount;
        internal String mNotes;
        internal String mChequeNo;
        internal DateTime mChequeDate;
        internal Int32 mVoucherType;
        internal Boolean mIsCheque;
        internal Int32 mTaxID;
        internal Decimal mTaxValue;
        internal Int32 mTaxSign;
        internal Int32 mTaxID2;
        internal Decimal mTaxValue2;
        internal Int32 mTaxSign2;
        internal Int32 mDiscountTaxID;
        internal Decimal mDiscountTaxValue;
        internal Int32 mDiscountTaxID2;
        internal Decimal mDiscountTaxValue2;
        internal Int64 mVoucherID;
        internal Int64 mPaymentID;
        #endregion

        #region "Methods"
        public Int32 SafeID
        {
            get { return mSafeID; }
            set { mIsChanges = true; mSafeID = value; }
        }
        public Int32 BankID
        {
            get { return mBankID; }
            set { mIsChanges = true; mBankID = value; }
        }
        public String voucherCode
        {
            get { return mvoucherCode; }
            set { mIsChanges = true; mvoucherCode = value; }
        }
        public Int32 CurrencyID
        {
            get { return mCurrencyID; }
            set { mIsChanges = true; mCurrencyID = value; }
        }
        public Decimal ExchangeRate
        {
            get { return mExchangeRate; }
            set { mIsChanges = true; mExchangeRate = value; }
        }
        public Decimal Amount
        {
            get { return mAmount; }
            set { mIsChanges = true; mAmount = value; }
        }
        public String Notes
        {
            get { return mNotes; }
            set { mIsChanges = true; mNotes = value; }
        }
        public String ChequeNo
        {
            get { return mChequeNo; }
            set { mIsChanges = true; mChequeNo = value; }
        }
        public DateTime ChequeDate
        {
            get { return mChequeDate; }
            set { mIsChanges = true; mChequeDate = value; }
        }
        public Int32 VoucherType
        {
            get { return mVoucherType; }
            set { mIsChanges = true; mVoucherType = value; }
        }
        public Boolean IsCheque
        {
            get { return mIsCheque; }
            set { mIsChanges = true; mIsCheque = value; }
        }
        public Int32 TaxID
        {
            get { return mTaxID; }
            set { mIsChanges = true; mTaxID = value; }
        }
        public Decimal TaxValue
        {
            get { return mTaxValue; }
            set { mIsChanges = true; mTaxValue = value; }
        }
        public Int32 TaxSign
        {
            get { return mTaxSign; }
            set { mIsChanges = true; mTaxSign = value; }
        }
        public Int32 TaxID2
        {
            get { return mTaxID2; }
            set { mIsChanges = true; mTaxID2 = value; }
        }
        public Decimal TaxValue2
        {
            get { return mTaxValue2; }
            set { mIsChanges = true; mTaxValue2 = value; }
        }
        public Int32 TaxSign2
        {
            get { return mTaxSign2; }
            set { mIsChanges = true; mTaxSign2 = value; }
        }
        public Int32 DiscountTaxID
        {
            get { return mDiscountTaxID; }
            set { mIsChanges = true; mDiscountTaxID = value; }
        }
        public Decimal DiscountTaxValue
        {
            get { return mDiscountTaxValue; }
            set { mIsChanges = true; mDiscountTaxValue = value; }
        }
        public Int32 DiscountTaxID2
        {
            get { return mDiscountTaxID2; }
            set { mIsChanges = true; mDiscountTaxID2 = value; }
        }
        public Decimal DiscountTaxValue2
        {
            get { return mDiscountTaxValue2; }
            set { mIsChanges = true; mDiscountTaxValue2 = value; }
        }
        public Int64 VoucherID
        {
            get { return mVoucherID; }
            set { mIsChanges = true; mVoucherID = value; }
        }
        public Int64 PaymentID
        {
            get { return mPaymentID; }
            set { mIsChanges = true; mPaymentID = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CVoucherPayments
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarVoucherPayments> lstCVarVoucherPayments = new List<CVarVoucherPayments>();
        public List<CPKVoucherPayments> lstDeletedCPKVoucherPayments = new List<CPKVoucherPayments>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetItem(Int64 ID)
        {
            return DataFill(Convert.ToString(ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarVoucherPayments.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.VarChar));
                    Com.CommandText = "[dbo].GetListVoucherPayments";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].GetItemVoucherPayments";
                    Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                    Com.Parameters[0].Value = Convert.ToInt64(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarVoucherPayments ObjCVarVoucherPayments = new CVarVoucherPayments();
                        ObjCVarVoucherPayments.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarVoucherPayments.mSafeID = Convert.ToInt32(dr["SafeID"].ToString());
                        ObjCVarVoucherPayments.mBankID = Convert.ToInt32(dr["BankID"].ToString());
                        ObjCVarVoucherPayments.mvoucherCode = Convert.ToString(dr["voucherCode"].ToString());
                        ObjCVarVoucherPayments.mCurrencyID = Convert.ToInt32(dr["CurrencyID"].ToString());
                        ObjCVarVoucherPayments.mExchangeRate = Convert.ToDecimal(dr["ExchangeRate"].ToString());
                        ObjCVarVoucherPayments.mAmount = Convert.ToDecimal(dr["Amount"].ToString());
                        ObjCVarVoucherPayments.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarVoucherPayments.mChequeNo = Convert.ToString(dr["ChequeNo"].ToString());
                        ObjCVarVoucherPayments.mChequeDate = Convert.ToDateTime(dr["ChequeDate"].ToString());
                        ObjCVarVoucherPayments.mVoucherType = Convert.ToInt32(dr["VoucherType"].ToString());
                        ObjCVarVoucherPayments.mIsCheque = Convert.ToBoolean(dr["IsCheque"].ToString());
                        ObjCVarVoucherPayments.mTaxID = Convert.ToInt32(dr["TaxID"].ToString());
                        ObjCVarVoucherPayments.mTaxValue = Convert.ToDecimal(dr["TaxValue"].ToString());
                        ObjCVarVoucherPayments.mTaxSign = Convert.ToInt32(dr["TaxSign"].ToString());
                        ObjCVarVoucherPayments.mTaxID2 = Convert.ToInt32(dr["TaxID2"].ToString());
                        ObjCVarVoucherPayments.mTaxValue2 = Convert.ToDecimal(dr["TaxValue2"].ToString());
                        ObjCVarVoucherPayments.mTaxSign2 = Convert.ToInt32(dr["TaxSign2"].ToString());
                        ObjCVarVoucherPayments.mDiscountTaxID = Convert.ToInt32(dr["DiscountTaxID"].ToString());
                        ObjCVarVoucherPayments.mDiscountTaxValue = Convert.ToDecimal(dr["DiscountTaxValue"].ToString());
                        ObjCVarVoucherPayments.mDiscountTaxID2 = Convert.ToInt32(dr["DiscountTaxID2"].ToString());
                        ObjCVarVoucherPayments.mDiscountTaxValue2 = Convert.ToDecimal(dr["DiscountTaxValue2"].ToString());
                        ObjCVarVoucherPayments.mVoucherID = Convert.ToInt64(dr["VoucherID"].ToString());
                        ObjCVarVoucherPayments.mPaymentID = Convert.ToInt64(dr["PaymentID"].ToString());
                        lstCVarVoucherPayments.Add(ObjCVarVoucherPayments);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarVoucherPayments.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.VarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingVoucherPayments";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarVoucherPayments ObjCVarVoucherPayments = new CVarVoucherPayments();
                        ObjCVarVoucherPayments.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarVoucherPayments.mSafeID = Convert.ToInt32(dr["SafeID"].ToString());
                        ObjCVarVoucherPayments.mBankID = Convert.ToInt32(dr["BankID"].ToString());
                        ObjCVarVoucherPayments.mvoucherCode = Convert.ToString(dr["voucherCode"].ToString());
                        ObjCVarVoucherPayments.mCurrencyID = Convert.ToInt32(dr["CurrencyID"].ToString());
                        ObjCVarVoucherPayments.mExchangeRate = Convert.ToDecimal(dr["ExchangeRate"].ToString());
                        ObjCVarVoucherPayments.mAmount = Convert.ToDecimal(dr["Amount"].ToString());
                        ObjCVarVoucherPayments.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarVoucherPayments.mChequeNo = Convert.ToString(dr["ChequeNo"].ToString());
                        ObjCVarVoucherPayments.mChequeDate = Convert.ToDateTime(dr["ChequeDate"].ToString());
                        ObjCVarVoucherPayments.mVoucherType = Convert.ToInt32(dr["VoucherType"].ToString());
                        ObjCVarVoucherPayments.mIsCheque = Convert.ToBoolean(dr["IsCheque"].ToString());
                        ObjCVarVoucherPayments.mTaxID = Convert.ToInt32(dr["TaxID"].ToString());
                        ObjCVarVoucherPayments.mTaxValue = Convert.ToDecimal(dr["TaxValue"].ToString());
                        ObjCVarVoucherPayments.mTaxSign = Convert.ToInt32(dr["TaxSign"].ToString());
                        ObjCVarVoucherPayments.mTaxID2 = Convert.ToInt32(dr["TaxID2"].ToString());
                        ObjCVarVoucherPayments.mTaxValue2 = Convert.ToDecimal(dr["TaxValue2"].ToString());
                        ObjCVarVoucherPayments.mTaxSign2 = Convert.ToInt32(dr["TaxSign2"].ToString());
                        ObjCVarVoucherPayments.mDiscountTaxID = Convert.ToInt32(dr["DiscountTaxID"].ToString());
                        ObjCVarVoucherPayments.mDiscountTaxValue = Convert.ToDecimal(dr["DiscountTaxValue"].ToString());
                        ObjCVarVoucherPayments.mDiscountTaxID2 = Convert.ToInt32(dr["DiscountTaxID2"].ToString());
                        ObjCVarVoucherPayments.mDiscountTaxValue2 = Convert.ToDecimal(dr["DiscountTaxValue2"].ToString());
                        ObjCVarVoucherPayments.mVoucherID = Convert.ToInt64(dr["VoucherID"].ToString());
                        ObjCVarVoucherPayments.mPaymentID = Convert.ToInt64(dr["PaymentID"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarVoucherPayments.Add(ObjCVarVoucherPayments);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            tr = Con.BeginTransaction(IsolationLevel.Serializable);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DeleteListVoucherPayments";
                else
                    Com.CommandText = "[dbo].UpdateListVoucherPayments";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.VarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKVoucherPayments> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DeleteItemVoucherPayments";
                Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                foreach (CPKVoucherPayments ObjCPKVoucherPayments in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt64(ObjCPKVoucherPayments.ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarVoucherPayments> SaveList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.Parameters.Add(new SqlParameter("@SafeID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@BankID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@voucherCode", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@CurrencyID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ExchangeRate", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@Amount", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@ChequeNo", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@ChequeDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@VoucherType", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@IsCheque", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@TaxID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TaxValue", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@TaxSign", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TaxID2", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TaxValue2", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@TaxSign2", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@DiscountTaxID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@DiscountTaxValue", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@DiscountTaxID2", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@DiscountTaxValue2", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@VoucherID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@PaymentID", SqlDbType.BigInt));
                SqlParameter paraID = Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, "ID", DataRowVersion.Default, null));
                foreach (CVarVoucherPayments ObjCVarVoucherPayments in SaveList)
                {
                    if (ObjCVarVoucherPayments.mIsChanges == true)
                    {
                        if (ObjCVarVoucherPayments.ID == 0)
                        {
                            Com.CommandText = "[dbo].InsertItemVoucherPayments";
                            paraID.Direction = ParameterDirection.Output;
                        }
                        else if (ObjCVarVoucherPayments.ID != 0)
                        {
                            Com.CommandText = "[dbo].UpdateItemVoucherPayments";
                            paraID.Direction = ParameterDirection.Input;
                        }
                        BeginTrans(Com, Con);
                        if (ObjCVarVoucherPayments.ID != 0)
                        {
                            Com.Parameters["@ID"].Value = ObjCVarVoucherPayments.ID;
                        }
                        Com.Parameters["@SafeID"].Value = ObjCVarVoucherPayments.SafeID;
                        Com.Parameters["@BankID"].Value = ObjCVarVoucherPayments.BankID;
                        Com.Parameters["@voucherCode"].Value = ObjCVarVoucherPayments.voucherCode;
                        Com.Parameters["@CurrencyID"].Value = ObjCVarVoucherPayments.CurrencyID;
                        Com.Parameters["@ExchangeRate"].Value = ObjCVarVoucherPayments.ExchangeRate;
                        Com.Parameters["@Amount"].Value = ObjCVarVoucherPayments.Amount;
                        Com.Parameters["@Notes"].Value = ObjCVarVoucherPayments.Notes;
                        Com.Parameters["@ChequeNo"].Value = ObjCVarVoucherPayments.ChequeNo;
                        Com.Parameters["@ChequeDate"].Value = ObjCVarVoucherPayments.ChequeDate;
                        Com.Parameters["@VoucherType"].Value = ObjCVarVoucherPayments.VoucherType;
                        Com.Parameters["@IsCheque"].Value = ObjCVarVoucherPayments.IsCheque;
                        Com.Parameters["@TaxID"].Value = ObjCVarVoucherPayments.TaxID;
                        Com.Parameters["@TaxValue"].Value = ObjCVarVoucherPayments.TaxValue;
                        Com.Parameters["@TaxSign"].Value = ObjCVarVoucherPayments.TaxSign;
                        Com.Parameters["@TaxID2"].Value = ObjCVarVoucherPayments.TaxID2;
                        Com.Parameters["@TaxValue2"].Value = ObjCVarVoucherPayments.TaxValue2;
                        Com.Parameters["@TaxSign2"].Value = ObjCVarVoucherPayments.TaxSign2;
                        Com.Parameters["@DiscountTaxID"].Value = ObjCVarVoucherPayments.DiscountTaxID;
                        Com.Parameters["@DiscountTaxValue"].Value = ObjCVarVoucherPayments.DiscountTaxValue;
                        Com.Parameters["@DiscountTaxID2"].Value = ObjCVarVoucherPayments.DiscountTaxID2;
                        Com.Parameters["@DiscountTaxValue2"].Value = ObjCVarVoucherPayments.DiscountTaxValue2;
                        Com.Parameters["@VoucherID"].Value = ObjCVarVoucherPayments.VoucherID;
                        Com.Parameters["@PaymentID"].Value = ObjCVarVoucherPayments.PaymentID;
                        EndTrans(Com, Con);
                        if (ObjCVarVoucherPayments.ID == 0)
                        {
                            ObjCVarVoucherPayments.ID = Convert.ToInt64(Com.Parameters["@ID"].Value);
                        }
                        ObjCVarVoucherPayments.mIsChanges = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                if (tr != null)
                    tr.Rollback();
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }
}
