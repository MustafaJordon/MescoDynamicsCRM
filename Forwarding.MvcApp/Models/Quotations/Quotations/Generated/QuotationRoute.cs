using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.Quotations.Quotations.Generated.Old
{
    [Serializable]
    public class CPKQuotationRoute
    {
        #region "variables"
        private Int64 mID;
        #endregion

        #region "Methods"
        public Int64 ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion
    }
    [Serializable]
    public partial class CVarQuotationRoute : CPKQuotationRoute
    {
        #region "variables"
        internal Boolean mIsChanges = false;
        internal Int32 mCodeSerial;
        internal String mCode;
        internal Int64 mQuotationID;
        internal Int32 mRoutingTypeID;
        internal Int32 mDirectionType;
        internal String mDirectionIconName;
        internal String mDirectionIconStyle;
        internal Int32 mTransportType;
        internal String mTransportIconName;
        internal String mTransportIconStyle;
        internal Int32 mShipmentType;
        internal Int32 mPOLCountryID;
        internal Int32 mPOL;
        internal Int32 mPODCountryID;
        internal Int32 mPOD;
        internal String mPickupAddress;
        internal String mDeliveryAddress;
        internal Int32 mMoveTypeID;
        internal DateTime mETAPOLDate;
        internal DateTime mExpirationDate;
        internal Int32 mShippingLineID;
        internal Int32 mAirlineID;
        internal Int32 mTruckerID;
        internal Int32 mTransientTime;
        internal Int32 mValidity;
        internal Int32 mFreeTime;
        internal Int32 mQuotationStageID;
        internal String mNotes;
        internal Int32 mCreatorUserID;
        internal DateTime mCreationDate;
        internal Int32 mModificatorUserID;
        internal DateTime mModificationDate;
        internal Int32 mCommodityID;
        internal Int32 mIncotermID;
        internal Decimal mNumberOfPackages;
        internal Decimal mVolume;
        internal Decimal mVolumetricWeight;
        internal Decimal mGrossWeight;
        internal Decimal mChargeableWeight;
        internal String mDenialReason;
        internal Boolean mIsRevised;
        internal Int32 mPOrC;
        internal Int32 mEquipmentModelID;
        internal Int32 mRevisorUserID;
        internal Boolean mIsChargesConfirmed;
        internal Int32 mChargesConfirmingUserID;
        internal Decimal mCost;
        internal Decimal mSale;
        internal Int32 mFreeTimePOD;
        internal Int32 mDivisionID;
        internal Int32 mEquipmentTypeID;
        internal Int32 mNumberOfChairs;
        internal String mFreightRateFormat;
        internal Boolean mIs48HourAlarmSent;
        internal Int32 mPickupPlaceID;
        internal Int32 mClientPlantID;
        internal Int32 mPOLID_Transport;
        internal Int32 mClearancePortID;
        internal Int32 mApprovalUserId;
        #endregion

        #region "Methods"
        public Int32 CodeSerial
        {
            get { return mCodeSerial; }
            set { mIsChanges = true; mCodeSerial = value; }
        }
        public String Code
        {
            get { return mCode; }
            set { mIsChanges = true; mCode = value; }
        }
        public Int64 QuotationID
        {
            get { return mQuotationID; }
            set { mIsChanges = true; mQuotationID = value; }
        }
        public Int32 RoutingTypeID
        {
            get { return mRoutingTypeID; }
            set { mIsChanges = true; mRoutingTypeID = value; }
        }
        public Int32 DirectionType
        {
            get { return mDirectionType; }
            set { mIsChanges = true; mDirectionType = value; }
        }
        public String DirectionIconName
        {
            get { return mDirectionIconName; }
            set { mIsChanges = true; mDirectionIconName = value; }
        }
        public String DirectionIconStyle
        {
            get { return mDirectionIconStyle; }
            set { mIsChanges = true; mDirectionIconStyle = value; }
        }
        public Int32 TransportType
        {
            get { return mTransportType; }
            set { mIsChanges = true; mTransportType = value; }
        }
        public String TransportIconName
        {
            get { return mTransportIconName; }
            set { mIsChanges = true; mTransportIconName = value; }
        }
        public String TransportIconStyle
        {
            get { return mTransportIconStyle; }
            set { mIsChanges = true; mTransportIconStyle = value; }
        }
        public Int32 ShipmentType
        {
            get { return mShipmentType; }
            set { mIsChanges = true; mShipmentType = value; }
        }
        public Int32 POLCountryID
        {
            get { return mPOLCountryID; }
            set { mIsChanges = true; mPOLCountryID = value; }
        }
        public Int32 POL
        {
            get { return mPOL; }
            set { mIsChanges = true; mPOL = value; }
        }
        public Int32 PODCountryID
        {
            get { return mPODCountryID; }
            set { mIsChanges = true; mPODCountryID = value; }
        }
        public Int32 POD
        {
            get { return mPOD; }
            set { mIsChanges = true; mPOD = value; }
        }
        public String PickupAddress
        {
            get { return mPickupAddress; }
            set { mIsChanges = true; mPickupAddress = value; }
        }
        public String DeliveryAddress
        {
            get { return mDeliveryAddress; }
            set { mIsChanges = true; mDeliveryAddress = value; }
        }
        public Int32 MoveTypeID
        {
            get { return mMoveTypeID; }
            set { mIsChanges = true; mMoveTypeID = value; }
        }
        public DateTime ETAPOLDate
        {
            get { return mETAPOLDate; }
            set { mIsChanges = true; mETAPOLDate = value; }
        }
        public DateTime ExpirationDate
        {
            get { return mExpirationDate; }
            set { mIsChanges = true; mExpirationDate = value; }
        }
        public Int32 ShippingLineID
        {
            get { return mShippingLineID; }
            set { mIsChanges = true; mShippingLineID = value; }
        }
        public Int32 AirlineID
        {
            get { return mAirlineID; }
            set { mIsChanges = true; mAirlineID = value; }
        }
        public Int32 TruckerID
        {
            get { return mTruckerID; }
            set { mIsChanges = true; mTruckerID = value; }
        }
        public Int32 TransientTime
        {
            get { return mTransientTime; }
            set { mIsChanges = true; mTransientTime = value; }
        }
        public Int32 Validity
        {
            get { return mValidity; }
            set { mIsChanges = true; mValidity = value; }
        }
        public Int32 FreeTime
        {
            get { return mFreeTime; }
            set { mIsChanges = true; mFreeTime = value; }
        }
        public Int32 QuotationStageID
        {
            get { return mQuotationStageID; }
            set { mIsChanges = true; mQuotationStageID = value; }
        }
        public String Notes
        {
            get { return mNotes; }
            set { mIsChanges = true; mNotes = value; }
        }
        public Int32 CreatorUserID
        {
            get { return mCreatorUserID; }
            set { mIsChanges = true; mCreatorUserID = value; }
        }
        public DateTime CreationDate
        {
            get { return mCreationDate; }
            set { mIsChanges = true; mCreationDate = value; }
        }
        public Int32 ModificatorUserID
        {
            get { return mModificatorUserID; }
            set { mIsChanges = true; mModificatorUserID = value; }
        }
        public DateTime ModificationDate
        {
            get { return mModificationDate; }
            set { mIsChanges = true; mModificationDate = value; }
        }
        public Int32 CommodityID
        {
            get { return mCommodityID; }
            set { mIsChanges = true; mCommodityID = value; }
        }
        public Int32 IncotermID
        {
            get { return mIncotermID; }
            set { mIsChanges = true; mIncotermID = value; }
        }
        public Decimal NumberOfPackages
        {
            get { return mNumberOfPackages; }
            set { mIsChanges = true; mNumberOfPackages = value; }
        }
        public Decimal Volume
        {
            get { return mVolume; }
            set { mIsChanges = true; mVolume = value; }
        }
        public Decimal VolumetricWeight
        {
            get { return mVolumetricWeight; }
            set { mIsChanges = true; mVolumetricWeight = value; }
        }
        public Decimal GrossWeight
        {
            get { return mGrossWeight; }
            set { mIsChanges = true; mGrossWeight = value; }
        }
        public Decimal ChargeableWeight
        {
            get { return mChargeableWeight; }
            set { mIsChanges = true; mChargeableWeight = value; }
        }
        public String DenialReason
        {
            get { return mDenialReason; }
            set { mIsChanges = true; mDenialReason = value; }
        }
        public Boolean IsRevised
        {
            get { return mIsRevised; }
            set { mIsChanges = true; mIsRevised = value; }
        }
        public Int32 POrC
        {
            get { return mPOrC; }
            set { mIsChanges = true; mPOrC = value; }
        }
        public Int32 EquipmentModelID
        {
            get { return mEquipmentModelID; }
            set { mIsChanges = true; mEquipmentModelID = value; }
        }
        public Int32 RevisorUserID
        {
            get { return mRevisorUserID; }
            set { mIsChanges = true; mRevisorUserID = value; }
        }
        public Boolean IsChargesConfirmed
        {
            get { return mIsChargesConfirmed; }
            set { mIsChanges = true; mIsChargesConfirmed = value; }
        }
        public Int32 ChargesConfirmingUserID
        {
            get { return mChargesConfirmingUserID; }
            set { mIsChanges = true; mChargesConfirmingUserID = value; }
        }
        public Decimal Cost
        {
            get { return mCost; }
            set { mIsChanges = true; mCost = value; }
        }
        public Decimal Sale
        {
            get { return mSale; }
            set { mIsChanges = true; mSale = value; }
        }
        public Int32 FreeTimePOD
        {
            get { return mFreeTimePOD; }
            set { mIsChanges = true; mFreeTimePOD = value; }
        }
        public Int32 DivisionID
        {
            get { return mDivisionID; }
            set { mIsChanges = true; mDivisionID = value; }
        }
        public Int32 EquipmentTypeID
        {
            get { return mEquipmentTypeID; }
            set { mIsChanges = true; mEquipmentTypeID = value; }
        }
        public Int32 NumberOfChairs
        {
            get { return mNumberOfChairs; }
            set { mIsChanges = true; mNumberOfChairs = value; }
        }
        public String FreightRateFormat
        {
            get { return mFreightRateFormat; }
            set { mIsChanges = true; mFreightRateFormat = value; }
        }
        public Boolean Is48HourAlarmSent
        {
            get { return mIs48HourAlarmSent; }
            set { mIsChanges = true; mIs48HourAlarmSent = value; }
        }
        public Int32 PickupPlaceID
        {
            get { return mPickupPlaceID; }
            set { mIsChanges = true; mPickupPlaceID = value; }
        }
        public Int32 ClientPlantID
        {
            get { return mClientPlantID; }
            set { mIsChanges = true; mClientPlantID = value; }
        }
        public Int32 POLID_Transport
        {
            get { return mPOLID_Transport; }
            set { mIsChanges = true; mPOLID_Transport = value; }
        }
        public Int32 ClearancePortID
        {
            get { return mClearancePortID; }
            set { mIsChanges = true; mClearancePortID = value; }
        }
        public Int32 ApprovalUserId
        {
            get { return mApprovalUserId; }
            set { mIsChanges = true; mApprovalUserId = value; }
        }
        #endregion

        #region Functions
        public Boolean GetIsChange()
        {
            return mIsChanges;
        }
        public void SetIsChange(Boolean IsChange)
        {
            mIsChanges = IsChange;
        }
        #endregion
    }

    public partial class CQuotationRoute
    {
        #region "variables"
        /*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
        private SqlTransaction tr;
        public List<CVarQuotationRoute> lstCVarQuotationRoute = new List<CVarQuotationRoute>();
        public List<CPKQuotationRoute> lstDeletedCPKQuotationRoute = new List<CPKQuotationRoute>();
        #endregion

        #region "Select Methods"
        public Exception GetList(string WhereClause)
        {
            return DataFill(WhereClause, true);
        }
        public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
        {
            return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
        }
        public Exception GetItem(Int64 ID)
        {
            return DataFill(Convert.ToString(ID), false);
        }
        private Exception DataFill(string Param, Boolean IsList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarQuotationRoute.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                if (IsList == true)
                {
                    Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                    Com.CommandText = "[dbo].GetListQuotationRoute";
                    Com.Parameters[0].Value = Param;
                }
                else
                {
                    Com.CommandText = "[dbo].GetItemQuotationRoute";
                    Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                    Com.Parameters[0].Value = Convert.ToInt64(Param);
                }
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarQuotationRoute ObjCVarQuotationRoute = new CVarQuotationRoute();
                        ObjCVarQuotationRoute.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarQuotationRoute.mCodeSerial = Convert.ToInt32(dr["CodeSerial"].ToString());
                        ObjCVarQuotationRoute.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarQuotationRoute.mQuotationID = Convert.ToInt64(dr["QuotationID"].ToString());
                        ObjCVarQuotationRoute.mRoutingTypeID = Convert.ToInt32(dr["RoutingTypeID"].ToString());
                        ObjCVarQuotationRoute.mDirectionType = Convert.ToInt32(dr["DirectionType"].ToString());
                        ObjCVarQuotationRoute.mDirectionIconName = Convert.ToString(dr["DirectionIconName"].ToString());
                        ObjCVarQuotationRoute.mDirectionIconStyle = Convert.ToString(dr["DirectionIconStyle"].ToString());
                        ObjCVarQuotationRoute.mTransportType = Convert.ToInt32(dr["TransportType"].ToString());
                        ObjCVarQuotationRoute.mTransportIconName = Convert.ToString(dr["TransportIconName"].ToString());
                        ObjCVarQuotationRoute.mTransportIconStyle = Convert.ToString(dr["TransportIconStyle"].ToString());
                        ObjCVarQuotationRoute.mShipmentType = Convert.ToInt32(dr["ShipmentType"].ToString());
                        ObjCVarQuotationRoute.mPOLCountryID = Convert.ToInt32(dr["POLCountryID"].ToString());
                        ObjCVarQuotationRoute.mPOL = Convert.ToInt32(dr["POL"].ToString());
                        ObjCVarQuotationRoute.mPODCountryID = Convert.ToInt32(dr["PODCountryID"].ToString());
                        ObjCVarQuotationRoute.mPOD = Convert.ToInt32(dr["POD"].ToString());
                        ObjCVarQuotationRoute.mPickupAddress = Convert.ToString(dr["PickupAddress"].ToString());
                        ObjCVarQuotationRoute.mDeliveryAddress = Convert.ToString(dr["DeliveryAddress"].ToString());
                        ObjCVarQuotationRoute.mMoveTypeID = Convert.ToInt32(dr["MoveTypeID"].ToString());
                        ObjCVarQuotationRoute.mETAPOLDate = Convert.ToDateTime(dr["ETAPOLDate"].ToString());
                        ObjCVarQuotationRoute.mExpirationDate = Convert.ToDateTime(dr["ExpirationDate"].ToString());
                        ObjCVarQuotationRoute.mShippingLineID = Convert.ToInt32(dr["ShippingLineID"].ToString());
                        ObjCVarQuotationRoute.mAirlineID = Convert.ToInt32(dr["AirlineID"].ToString());
                        ObjCVarQuotationRoute.mTruckerID = Convert.ToInt32(dr["TruckerID"].ToString());
                        ObjCVarQuotationRoute.mTransientTime = Convert.ToInt32(dr["TransientTime"].ToString());
                        ObjCVarQuotationRoute.mValidity = Convert.ToInt32(dr["Validity"].ToString());
                        ObjCVarQuotationRoute.mFreeTime = Convert.ToInt32(dr["FreeTime"].ToString());
                        ObjCVarQuotationRoute.mQuotationStageID = Convert.ToInt32(dr["QuotationStageID"].ToString());
                        ObjCVarQuotationRoute.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarQuotationRoute.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
                        ObjCVarQuotationRoute.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarQuotationRoute.mModificatorUserID = Convert.ToInt32(dr["ModificatorUserID"].ToString());
                        ObjCVarQuotationRoute.mModificationDate = Convert.ToDateTime(dr["ModificationDate"].ToString());
                        ObjCVarQuotationRoute.mCommodityID = Convert.ToInt32(dr["CommodityID"].ToString());
                        ObjCVarQuotationRoute.mIncotermID = Convert.ToInt32(dr["IncotermID"].ToString());
                        ObjCVarQuotationRoute.mNumberOfPackages = Convert.ToDecimal(dr["NumberOfPackages"].ToString());
                        ObjCVarQuotationRoute.mVolume = Convert.ToDecimal(dr["Volume"].ToString());
                        ObjCVarQuotationRoute.mVolumetricWeight = Convert.ToDecimal(dr["VolumetricWeight"].ToString());
                        ObjCVarQuotationRoute.mGrossWeight = Convert.ToDecimal(dr["GrossWeight"].ToString());
                        ObjCVarQuotationRoute.mChargeableWeight = Convert.ToDecimal(dr["ChargeableWeight"].ToString());
                        ObjCVarQuotationRoute.mDenialReason = Convert.ToString(dr["DenialReason"].ToString());
                        ObjCVarQuotationRoute.mIsRevised = Convert.ToBoolean(dr["IsRevised"].ToString());
                        ObjCVarQuotationRoute.mPOrC = Convert.ToInt32(dr["POrC"].ToString());
                        ObjCVarQuotationRoute.mEquipmentModelID = Convert.ToInt32(dr["EquipmentModelID"].ToString());
                        ObjCVarQuotationRoute.mRevisorUserID = Convert.ToInt32(dr["RevisorUserID"].ToString());
                        ObjCVarQuotationRoute.mIsChargesConfirmed = Convert.ToBoolean(dr["IsChargesConfirmed"].ToString());
                        ObjCVarQuotationRoute.mChargesConfirmingUserID = Convert.ToInt32(dr["ChargesConfirmingUserID"].ToString());
                        ObjCVarQuotationRoute.mCost = Convert.ToDecimal(dr["Cost"].ToString());
                        ObjCVarQuotationRoute.mSale = Convert.ToDecimal(dr["Sale"].ToString());
                        ObjCVarQuotationRoute.mFreeTimePOD = Convert.ToInt32(dr["FreeTimePOD"].ToString());
                        ObjCVarQuotationRoute.mDivisionID = Convert.ToInt32(dr["DivisionID"].ToString());
                        ObjCVarQuotationRoute.mEquipmentTypeID = Convert.ToInt32(dr["EquipmentTypeID"].ToString());
                        ObjCVarQuotationRoute.mNumberOfChairs = Convert.ToInt32(dr["NumberOfChairs"].ToString());
                        ObjCVarQuotationRoute.mFreightRateFormat = Convert.ToString(dr["FreightRateFormat"].ToString());
                        ObjCVarQuotationRoute.mIs48HourAlarmSent = Convert.ToBoolean(dr["Is48HourAlarmSent"].ToString());
                        ObjCVarQuotationRoute.mPickupPlaceID = Convert.ToInt32(dr["PickupPlaceID"].ToString());
                        ObjCVarQuotationRoute.mClientPlantID = Convert.ToInt32(dr["ClientPlantID"].ToString());
                        ObjCVarQuotationRoute.mPOLID_Transport = Convert.ToInt32(dr["POLID_Transport"].ToString());
                        ObjCVarQuotationRoute.mClearancePortID = Convert.ToInt32(dr["ClearancePortID"].ToString());
                        ObjCVarQuotationRoute.mApprovalUserId = Convert.ToInt32(dr["ApprovalUserId"].ToString());
                        lstCVarQuotationRoute.Add(ObjCVarQuotationRoute);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
        {
            Exception Exp = null;
            TotRecs = 0;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            SqlDataReader dr;
            lstCVarQuotationRoute.Clear();

            try
            {
                Con.Open();
                tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
                Com = new SqlCommand();
                Com.CommandType = CommandType.StoredProcedure;
                Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
                Com.CommandText = "[dbo].GetListPagingQuotationRoute";
                Com.Parameters[0].Value = PageSize;
                Com.Parameters[1].Value = PageNumber;
                Com.Parameters[2].Value = WhereClause;
                Com.Parameters[3].Value = OrderBy;
                Com.Transaction = tr;
                Com.Connection = Con;
                dr = Com.ExecuteReader();
                try
                {
                    while (dr.Read())
                    {
                        /*Start DataReader*/
                        CVarQuotationRoute ObjCVarQuotationRoute = new CVarQuotationRoute();
                        ObjCVarQuotationRoute.ID = Convert.ToInt64(dr["ID"].ToString());
                        ObjCVarQuotationRoute.mCodeSerial = Convert.ToInt32(dr["CodeSerial"].ToString());
                        ObjCVarQuotationRoute.mCode = Convert.ToString(dr["Code"].ToString());
                        ObjCVarQuotationRoute.mQuotationID = Convert.ToInt64(dr["QuotationID"].ToString());
                        ObjCVarQuotationRoute.mRoutingTypeID = Convert.ToInt32(dr["RoutingTypeID"].ToString());
                        ObjCVarQuotationRoute.mDirectionType = Convert.ToInt32(dr["DirectionType"].ToString());
                        ObjCVarQuotationRoute.mDirectionIconName = Convert.ToString(dr["DirectionIconName"].ToString());
                        ObjCVarQuotationRoute.mDirectionIconStyle = Convert.ToString(dr["DirectionIconStyle"].ToString());
                        ObjCVarQuotationRoute.mTransportType = Convert.ToInt32(dr["TransportType"].ToString());
                        ObjCVarQuotationRoute.mTransportIconName = Convert.ToString(dr["TransportIconName"].ToString());
                        ObjCVarQuotationRoute.mTransportIconStyle = Convert.ToString(dr["TransportIconStyle"].ToString());
                        ObjCVarQuotationRoute.mShipmentType = Convert.ToInt32(dr["ShipmentType"].ToString());
                        ObjCVarQuotationRoute.mPOLCountryID = Convert.ToInt32(dr["POLCountryID"].ToString());
                        ObjCVarQuotationRoute.mPOL = Convert.ToInt32(dr["POL"].ToString());
                        ObjCVarQuotationRoute.mPODCountryID = Convert.ToInt32(dr["PODCountryID"].ToString());
                        ObjCVarQuotationRoute.mPOD = Convert.ToInt32(dr["POD"].ToString());
                        ObjCVarQuotationRoute.mPickupAddress = Convert.ToString(dr["PickupAddress"].ToString());
                        ObjCVarQuotationRoute.mDeliveryAddress = Convert.ToString(dr["DeliveryAddress"].ToString());
                        ObjCVarQuotationRoute.mMoveTypeID = Convert.ToInt32(dr["MoveTypeID"].ToString());
                        ObjCVarQuotationRoute.mETAPOLDate = Convert.ToDateTime(dr["ETAPOLDate"].ToString());
                        ObjCVarQuotationRoute.mExpirationDate = Convert.ToDateTime(dr["ExpirationDate"].ToString());
                        ObjCVarQuotationRoute.mShippingLineID = Convert.ToInt32(dr["ShippingLineID"].ToString());
                        ObjCVarQuotationRoute.mAirlineID = Convert.ToInt32(dr["AirlineID"].ToString());
                        ObjCVarQuotationRoute.mTruckerID = Convert.ToInt32(dr["TruckerID"].ToString());
                        ObjCVarQuotationRoute.mTransientTime = Convert.ToInt32(dr["TransientTime"].ToString());
                        ObjCVarQuotationRoute.mValidity = Convert.ToInt32(dr["Validity"].ToString());
                        ObjCVarQuotationRoute.mFreeTime = Convert.ToInt32(dr["FreeTime"].ToString());
                        ObjCVarQuotationRoute.mQuotationStageID = Convert.ToInt32(dr["QuotationStageID"].ToString());
                        ObjCVarQuotationRoute.mNotes = Convert.ToString(dr["Notes"].ToString());
                        ObjCVarQuotationRoute.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
                        ObjCVarQuotationRoute.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
                        ObjCVarQuotationRoute.mModificatorUserID = Convert.ToInt32(dr["ModificatorUserID"].ToString());
                        ObjCVarQuotationRoute.mModificationDate = Convert.ToDateTime(dr["ModificationDate"].ToString());
                        ObjCVarQuotationRoute.mCommodityID = Convert.ToInt32(dr["CommodityID"].ToString());
                        ObjCVarQuotationRoute.mIncotermID = Convert.ToInt32(dr["IncotermID"].ToString());
                        ObjCVarQuotationRoute.mNumberOfPackages = Convert.ToDecimal(dr["NumberOfPackages"].ToString());
                        ObjCVarQuotationRoute.mVolume = Convert.ToDecimal(dr["Volume"].ToString());
                        ObjCVarQuotationRoute.mVolumetricWeight = Convert.ToDecimal(dr["VolumetricWeight"].ToString());
                        ObjCVarQuotationRoute.mGrossWeight = Convert.ToDecimal(dr["GrossWeight"].ToString());
                        ObjCVarQuotationRoute.mChargeableWeight = Convert.ToDecimal(dr["ChargeableWeight"].ToString());
                        ObjCVarQuotationRoute.mDenialReason = Convert.ToString(dr["DenialReason"].ToString());
                        ObjCVarQuotationRoute.mIsRevised = Convert.ToBoolean(dr["IsRevised"].ToString());
                        ObjCVarQuotationRoute.mPOrC = Convert.ToInt32(dr["POrC"].ToString());
                        ObjCVarQuotationRoute.mEquipmentModelID = Convert.ToInt32(dr["EquipmentModelID"].ToString());
                        ObjCVarQuotationRoute.mRevisorUserID = Convert.ToInt32(dr["RevisorUserID"].ToString());
                        ObjCVarQuotationRoute.mIsChargesConfirmed = Convert.ToBoolean(dr["IsChargesConfirmed"].ToString());
                        ObjCVarQuotationRoute.mChargesConfirmingUserID = Convert.ToInt32(dr["ChargesConfirmingUserID"].ToString());
                        ObjCVarQuotationRoute.mCost = Convert.ToDecimal(dr["Cost"].ToString());
                        ObjCVarQuotationRoute.mSale = Convert.ToDecimal(dr["Sale"].ToString());
                        ObjCVarQuotationRoute.mFreeTimePOD = Convert.ToInt32(dr["FreeTimePOD"].ToString());
                        ObjCVarQuotationRoute.mDivisionID = Convert.ToInt32(dr["DivisionID"].ToString());
                        ObjCVarQuotationRoute.mEquipmentTypeID = Convert.ToInt32(dr["EquipmentTypeID"].ToString());
                        ObjCVarQuotationRoute.mNumberOfChairs = Convert.ToInt32(dr["NumberOfChairs"].ToString());
                        ObjCVarQuotationRoute.mFreightRateFormat = Convert.ToString(dr["FreightRateFormat"].ToString());
                        ObjCVarQuotationRoute.mIs48HourAlarmSent = Convert.ToBoolean(dr["Is48HourAlarmSent"].ToString());
                        ObjCVarQuotationRoute.mPickupPlaceID = Convert.ToInt32(dr["PickupPlaceID"].ToString());
                        ObjCVarQuotationRoute.mClientPlantID = Convert.ToInt32(dr["ClientPlantID"].ToString());
                        ObjCVarQuotationRoute.mPOLID_Transport = Convert.ToInt32(dr["POLID_Transport"].ToString());
                        ObjCVarQuotationRoute.mClearancePortID = Convert.ToInt32(dr["ClearancePortID"].ToString());
                        ObjCVarQuotationRoute.mApprovalUserId = Convert.ToInt32(dr["ApprovalUserId"].ToString());
                        TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
                        lstCVarQuotationRoute.Add(ObjCVarQuotationRoute);
                    }
                }
                catch (Exception ex)
                {
                    Exp = ex;
                }
                finally
                {
                    if (dr != null)
                    {
                        dr.Close();
                        dr.Dispose();
                    }
                }
                tr.Commit();
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Common Methods"
        private void BeginTrans(SqlCommand Com, SqlConnection Con)
        {

            tr = Con.BeginTransaction(IsolationLevel.Serializable);
            Com.CommandType = CommandType.StoredProcedure;
        }

        private void EndTrans(SqlCommand Com, SqlConnection Con)
        {

            Com.Transaction = tr;
            Com.Connection = Con;
            Com.ExecuteNonQuery();
            tr.Commit();
        }

        #endregion
        #region "Set List Method"
        private Exception SetList(string WhereClause, Boolean IsDelete)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                if (IsDelete == true)
                    Com.CommandText = "[dbo].DeleteListQuotationRoute";
                else
                    Com.CommandText = "[dbo].UpdateListQuotationRoute";
                Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
                BeginTrans(Com, Con);
                Com.Parameters[0].Value = WhereClause;
                EndTrans(Com, Con);
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }

        #endregion
        #region "Delete Methods"
        public Exception DeleteItem(List<CPKQuotationRoute> DeleteList)
        {

            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.CommandText = "[dbo].DeleteItemQuotationRoute";
                Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
                foreach (CPKQuotationRoute ObjCPKQuotationRoute in DeleteList)
                {
                    BeginTrans(Com, Con);
                    Com.Parameters[0].Value = Convert.ToInt64(ObjCPKQuotationRoute.ID);
                    EndTrans(Com, Con);
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
            }
            finally
            {
                Con.Close();
                Con.Dispose();
                DeleteList.Clear();
            }
            return Exp;
        }

        public Exception DeleteList(string WhereClause)
        {

            return SetList(WhereClause, true);
        }

        #endregion
        #region "Save Methods"
        public Exception SaveMethod(List<CVarQuotationRoute> SaveList)
        {
            Exception Exp = null;
            SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand Com;
            try
            {
                Con.Open();
                Com = new SqlCommand();
                Com.Parameters.Add(new SqlParameter("@CodeSerial", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Code", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@QuotationID", SqlDbType.BigInt));
                Com.Parameters.Add(new SqlParameter("@RoutingTypeID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@DirectionType", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@DirectionIconName", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@DirectionIconStyle", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@TransportType", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TransportIconName", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@TransportIconStyle", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@ShipmentType", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@POLCountryID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@POL", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PODCountryID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@POD", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@PickupAddress", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@DeliveryAddress", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@MoveTypeID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ETAPOLDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@ExpirationDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@ShippingLineID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@AirlineID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TruckerID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@TransientTime", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Validity", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@FreeTime", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@QuotationStageID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@CreatorUserID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@CreationDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@ModificatorUserID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ModificationDate", SqlDbType.DateTime));
                Com.Parameters.Add(new SqlParameter("@CommodityID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@IncotermID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@NumberOfPackages", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@Volume", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@VolumetricWeight", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@GrossWeight", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@ChargeableWeight", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@DenialReason", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@IsRevised", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@POrC", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@EquipmentModelID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@RevisorUserID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@IsChargesConfirmed", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@ChargesConfirmingUserID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@Cost", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@Sale", SqlDbType.Decimal));
                Com.Parameters.Add(new SqlParameter("@FreeTimePOD", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@DivisionID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@EquipmentTypeID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@NumberOfChairs", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@FreightRateFormat", SqlDbType.NVarChar));
                Com.Parameters.Add(new SqlParameter("@Is48HourAlarmSent", SqlDbType.Bit));
                Com.Parameters.Add(new SqlParameter("@PickupPlaceID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ClientPlantID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@POLID_Transport", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ClearancePortID", SqlDbType.Int));
                Com.Parameters.Add(new SqlParameter("@ApprovalUserId", SqlDbType.Int));
                SqlParameter paraID = Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, "ID", DataRowVersion.Default, null));
                foreach (CVarQuotationRoute ObjCVarQuotationRoute in SaveList)
                {
                    if (ObjCVarQuotationRoute.mIsChanges == true)
                    {
                        if (ObjCVarQuotationRoute.ID == 0)
                        {
                            Com.CommandText = "[dbo].InsertItemQuotationRoute";
                            paraID.Direction = ParameterDirection.Output;
                        }
                        else if (ObjCVarQuotationRoute.ID != 0)
                        {
                            Com.CommandText = "[dbo].UpdateItemQuotationRoute";
                            paraID.Direction = ParameterDirection.Input;
                        }
                        BeginTrans(Com, Con);
                        if (ObjCVarQuotationRoute.ID != 0)
                        {
                            Com.Parameters["@ID"].Value = ObjCVarQuotationRoute.ID;
                        }
                        Com.Parameters["@CodeSerial"].Value = ObjCVarQuotationRoute.CodeSerial;
                        Com.Parameters["@Code"].Value = ObjCVarQuotationRoute.Code;
                        Com.Parameters["@QuotationID"].Value = ObjCVarQuotationRoute.QuotationID;
                        Com.Parameters["@RoutingTypeID"].Value = ObjCVarQuotationRoute.RoutingTypeID;
                        Com.Parameters["@DirectionType"].Value = ObjCVarQuotationRoute.DirectionType;
                        Com.Parameters["@DirectionIconName"].Value = ObjCVarQuotationRoute.DirectionIconName;
                        Com.Parameters["@DirectionIconStyle"].Value = ObjCVarQuotationRoute.DirectionIconStyle;
                        Com.Parameters["@TransportType"].Value = ObjCVarQuotationRoute.TransportType;
                        Com.Parameters["@TransportIconName"].Value = ObjCVarQuotationRoute.TransportIconName;
                        Com.Parameters["@TransportIconStyle"].Value = ObjCVarQuotationRoute.TransportIconStyle;
                        Com.Parameters["@ShipmentType"].Value = ObjCVarQuotationRoute.ShipmentType;
                        Com.Parameters["@POLCountryID"].Value = ObjCVarQuotationRoute.POLCountryID;
                        Com.Parameters["@POL"].Value = ObjCVarQuotationRoute.POL;
                        Com.Parameters["@PODCountryID"].Value = ObjCVarQuotationRoute.PODCountryID;
                        Com.Parameters["@POD"].Value = ObjCVarQuotationRoute.POD;
                        Com.Parameters["@PickupAddress"].Value = ObjCVarQuotationRoute.PickupAddress;
                        Com.Parameters["@DeliveryAddress"].Value = ObjCVarQuotationRoute.DeliveryAddress;
                        Com.Parameters["@MoveTypeID"].Value = ObjCVarQuotationRoute.MoveTypeID;
                        Com.Parameters["@ETAPOLDate"].Value = ObjCVarQuotationRoute.ETAPOLDate;
                        Com.Parameters["@ExpirationDate"].Value = ObjCVarQuotationRoute.ExpirationDate;
                        Com.Parameters["@ShippingLineID"].Value = ObjCVarQuotationRoute.ShippingLineID;
                        Com.Parameters["@AirlineID"].Value = ObjCVarQuotationRoute.AirlineID;
                        Com.Parameters["@TruckerID"].Value = ObjCVarQuotationRoute.TruckerID;
                        Com.Parameters["@TransientTime"].Value = ObjCVarQuotationRoute.TransientTime;
                        Com.Parameters["@Validity"].Value = ObjCVarQuotationRoute.Validity;
                        Com.Parameters["@FreeTime"].Value = ObjCVarQuotationRoute.FreeTime;
                        Com.Parameters["@QuotationStageID"].Value = ObjCVarQuotationRoute.QuotationStageID;
                        Com.Parameters["@Notes"].Value = ObjCVarQuotationRoute.Notes;
                        Com.Parameters["@CreatorUserID"].Value = ObjCVarQuotationRoute.CreatorUserID;
                        Com.Parameters["@CreationDate"].Value = ObjCVarQuotationRoute.CreationDate;
                        Com.Parameters["@ModificatorUserID"].Value = ObjCVarQuotationRoute.ModificatorUserID;
                        Com.Parameters["@ModificationDate"].Value = ObjCVarQuotationRoute.ModificationDate;
                        Com.Parameters["@CommodityID"].Value = ObjCVarQuotationRoute.CommodityID;
                        Com.Parameters["@IncotermID"].Value = ObjCVarQuotationRoute.IncotermID;
                        Com.Parameters["@NumberOfPackages"].Value = ObjCVarQuotationRoute.NumberOfPackages;
                        Com.Parameters["@Volume"].Value = ObjCVarQuotationRoute.Volume;
                        Com.Parameters["@VolumetricWeight"].Value = ObjCVarQuotationRoute.VolumetricWeight;
                        Com.Parameters["@GrossWeight"].Value = ObjCVarQuotationRoute.GrossWeight;
                        Com.Parameters["@ChargeableWeight"].Value = ObjCVarQuotationRoute.ChargeableWeight;
                        Com.Parameters["@DenialReason"].Value = ObjCVarQuotationRoute.DenialReason;
                        Com.Parameters["@IsRevised"].Value = ObjCVarQuotationRoute.IsRevised;
                        Com.Parameters["@POrC"].Value = ObjCVarQuotationRoute.POrC;
                        Com.Parameters["@EquipmentModelID"].Value = ObjCVarQuotationRoute.EquipmentModelID;
                        Com.Parameters["@RevisorUserID"].Value = ObjCVarQuotationRoute.RevisorUserID;
                        Com.Parameters["@IsChargesConfirmed"].Value = ObjCVarQuotationRoute.IsChargesConfirmed;
                        Com.Parameters["@ChargesConfirmingUserID"].Value = ObjCVarQuotationRoute.ChargesConfirmingUserID;
                        Com.Parameters["@Cost"].Value = ObjCVarQuotationRoute.Cost;
                        Com.Parameters["@Sale"].Value = ObjCVarQuotationRoute.Sale;
                        Com.Parameters["@FreeTimePOD"].Value = ObjCVarQuotationRoute.FreeTimePOD;
                        Com.Parameters["@DivisionID"].Value = ObjCVarQuotationRoute.DivisionID;
                        Com.Parameters["@EquipmentTypeID"].Value = ObjCVarQuotationRoute.EquipmentTypeID;
                        Com.Parameters["@NumberOfChairs"].Value = ObjCVarQuotationRoute.NumberOfChairs;
                        Com.Parameters["@FreightRateFormat"].Value = ObjCVarQuotationRoute.FreightRateFormat;
                        Com.Parameters["@Is48HourAlarmSent"].Value = ObjCVarQuotationRoute.Is48HourAlarmSent;
                        Com.Parameters["@PickupPlaceID"].Value = ObjCVarQuotationRoute.PickupPlaceID;
                        Com.Parameters["@ClientPlantID"].Value = ObjCVarQuotationRoute.ClientPlantID;
                        Com.Parameters["@POLID_Transport"].Value = ObjCVarQuotationRoute.POLID_Transport;
                        Com.Parameters["@ClearancePortID"].Value = ObjCVarQuotationRoute.ClearancePortID;
                        Com.Parameters["@ApprovalUserId"].Value = ObjCVarQuotationRoute.ApprovalUserId;
                        EndTrans(Com, Con);
                        if (ObjCVarQuotationRoute.ID == 0)
                        {
                            ObjCVarQuotationRoute.ID = Convert.ToInt64(Com.Parameters["@ID"].Value);
                        }
                        ObjCVarQuotationRoute.mIsChanges = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Exp = ex;
                if (tr != null)
                    tr.Rollback();
            }
            finally
            {
                Con.Close();
                Con.Dispose();
            }
            return Exp;
        }
        #endregion
        #region "Update Methods"
        public Exception UpdateList(string UpdateClause)
        {

            return SetList(UpdateClause, false);
        }

        #endregion
    }

}
