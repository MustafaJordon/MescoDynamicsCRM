using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;

/*This class is autogenerated by Khedrawy Code gen v.3.1*/
namespace Forwarding.MvcApp.Models.Quotations.Quotations.Generated.Old
{
	[Serializable]
	public class CPKQuotations
	{
		#region "variables"
		private Int64 mID;
		#endregion

		#region "Methods"
		public Int64 ID
		{
			get { return mID; }
			set { mID = value; }
		}
		#endregion
	}
	[Serializable]
	public partial class CVarQuotations : CPKQuotations
	{
		#region "variables"
		internal Boolean mIsChanges = false;
		internal Int32 mCodeSerial;
		internal String mCode;
		internal Int32 mBranchID;
		internal Int32 mSalesmanID;
		internal Int32 mDirectionType;
		internal String mDirectionIconName;
		internal String mDirectionIconStyle;
		internal Int32 mTransportType;
		internal String mTransportIconName;
		internal String mTransportIconStyle;
		internal Int32 mShipmentType;
		internal Int32 mShipperID;
		internal Int64 mShipperAddressID;
		internal Int64 mShipperContactID;
		internal Int32 mConsigneeID;
		internal Int64 mConsigneeAddressID;
		internal Int64 mConsigneeContactID;
		internal Int32 mAgentID;
		internal Int64 mAgentAddressID;
		internal Int64 mAgentContactID;
		internal Int32 mIncotermID;
		internal Int32 mCommodityID;
		internal Int32 mTransientTime;
		internal Int32 mValidity;
		internal Int32 mFreeTime;
		internal DateTime mOpenDate;
		internal DateTime mCloseDate;
		internal DateTime mExpirationDate;
		internal Boolean mIncludePickup;
		internal Int32 mPickupCityID;
		internal Int32 mPickupAddressID;
		internal Int32 mPOLCountryID;
		internal Int32 mPOL;
		internal Int32 mPODCountryID;
		internal Int32 mPOD;
		internal Int32 mShippingLineID;
		internal Int32 mAirlineID;
		internal Int32 mTruckerID;
		internal Boolean mIncludeDelivery;
		internal String mDeliveryZipCode;
		internal Int32 mDeliveryCityID;
		internal Int32 mDeliveryCountryID;
		internal Decimal mGrossWeight;
		internal Decimal mVolume;
		internal Decimal mChargeableWeight;
		internal Int32 mNumberOfPackages;
		internal Boolean mIsDangerousGoods;
		internal String mDescriptionOfGoods;
		internal Int32 mTemplateID;
		internal String mSubject;
		internal String mTermsAndConditions;
		internal String mNotes;
		internal Int32 mQuotationStageID;
		internal Int32 mCreatorUserID;
		internal DateTime mCreationDate;
		internal Int32 mModificatorUserID;
		internal DateTime mModificationDate;
		internal Int32 mLockingUserID;
		internal DateTime mTimeLocked;
		internal Int32 mSalesLeadID;
		internal Int32 mSalesLeadContactID;
		internal Boolean mIsWarehousing;
		internal Int32 mMainCriteriaID;
		internal Int32 mSubCriteriaID;
		internal Int32 mCustomerID;
		internal Int64 mCustomerContactID;
		internal Boolean mIsFleet;
		internal Int32 mTemplateID_Transport;
		internal Int32 mTemplateID_Clearance;
		internal String mTermsAndConditions_Transport;
		internal String mTermsAndConditions_Clearance;
		internal String mSubject_Transport;
		internal String mSubject_Clearance;
		#endregion

		#region "Methods"
		public Int32 CodeSerial
		{
			get { return mCodeSerial; }
			set { mIsChanges = true ;mCodeSerial = value; }
		}
		public String Code
		{
			get { return mCode; }
			set { mIsChanges = true ;mCode = value; }
		}
		public Int32 BranchID
		{
			get { return mBranchID; }
			set { mIsChanges = true ;mBranchID = value; }
		}
		public Int32 SalesmanID
		{
			get { return mSalesmanID; }
			set { mIsChanges = true ;mSalesmanID = value; }
		}
		public Int32 DirectionType
		{
			get { return mDirectionType; }
			set { mIsChanges = true ;mDirectionType = value; }
		}
		public String DirectionIconName
		{
			get { return mDirectionIconName; }
			set { mIsChanges = true ;mDirectionIconName = value; }
		}
		public String DirectionIconStyle
		{
			get { return mDirectionIconStyle; }
			set { mIsChanges = true ;mDirectionIconStyle = value; }
		}
		public Int32 TransportType
		{
			get { return mTransportType; }
			set { mIsChanges = true ;mTransportType = value; }
		}
		public String TransportIconName
		{
			get { return mTransportIconName; }
			set { mIsChanges = true ;mTransportIconName = value; }
		}
		public String TransportIconStyle
		{
			get { return mTransportIconStyle; }
			set { mIsChanges = true ;mTransportIconStyle = value; }
		}
		public Int32 ShipmentType
		{
			get { return mShipmentType; }
			set { mIsChanges = true ;mShipmentType = value; }
		}
		public Int32 ShipperID
		{
			get { return mShipperID; }
			set { mIsChanges = true ;mShipperID = value; }
		}
		public Int64 ShipperAddressID
		{
			get { return mShipperAddressID; }
			set { mIsChanges = true ;mShipperAddressID = value; }
		}
		public Int64 ShipperContactID
		{
			get { return mShipperContactID; }
			set { mIsChanges = true ;mShipperContactID = value; }
		}
		public Int32 ConsigneeID
		{
			get { return mConsigneeID; }
			set { mIsChanges = true ;mConsigneeID = value; }
		}
		public Int64 ConsigneeAddressID
		{
			get { return mConsigneeAddressID; }
			set { mIsChanges = true ;mConsigneeAddressID = value; }
		}
		public Int64 ConsigneeContactID
		{
			get { return mConsigneeContactID; }
			set { mIsChanges = true ;mConsigneeContactID = value; }
		}
		public Int32 AgentID
		{
			get { return mAgentID; }
			set { mIsChanges = true ;mAgentID = value; }
		}
		public Int64 AgentAddressID
		{
			get { return mAgentAddressID; }
			set { mIsChanges = true ;mAgentAddressID = value; }
		}
		public Int64 AgentContactID
		{
			get { return mAgentContactID; }
			set { mIsChanges = true ;mAgentContactID = value; }
		}
		public Int32 IncotermID
		{
			get { return mIncotermID; }
			set { mIsChanges = true ;mIncotermID = value; }
		}
		public Int32 CommodityID
		{
			get { return mCommodityID; }
			set { mIsChanges = true ;mCommodityID = value; }
		}
		public Int32 TransientTime
		{
			get { return mTransientTime; }
			set { mIsChanges = true ;mTransientTime = value; }
		}
		public Int32 Validity
		{
			get { return mValidity; }
			set { mIsChanges = true ;mValidity = value; }
		}
		public Int32 FreeTime
		{
			get { return mFreeTime; }
			set { mIsChanges = true ;mFreeTime = value; }
		}
		public DateTime OpenDate
		{
			get { return mOpenDate; }
			set { mIsChanges = true ;mOpenDate = value; }
		}
		public DateTime CloseDate
		{
			get { return mCloseDate; }
			set { mIsChanges = true ;mCloseDate = value; }
		}
		public DateTime ExpirationDate
		{
			get { return mExpirationDate; }
			set { mIsChanges = true ;mExpirationDate = value; }
		}
		public Boolean IncludePickup
		{
			get { return mIncludePickup; }
			set { mIsChanges = true ;mIncludePickup = value; }
		}
		public Int32 PickupCityID
		{
			get { return mPickupCityID; }
			set { mIsChanges = true ;mPickupCityID = value; }
		}
		public Int32 PickupAddressID
		{
			get { return mPickupAddressID; }
			set { mIsChanges = true ;mPickupAddressID = value; }
		}
		public Int32 POLCountryID
		{
			get { return mPOLCountryID; }
			set { mIsChanges = true ;mPOLCountryID = value; }
		}
		public Int32 POL
		{
			get { return mPOL; }
			set { mIsChanges = true ;mPOL = value; }
		}
		public Int32 PODCountryID
		{
			get { return mPODCountryID; }
			set { mIsChanges = true ;mPODCountryID = value; }
		}
		public Int32 POD
		{
			get { return mPOD; }
			set { mIsChanges = true ;mPOD = value; }
		}
		public Int32 ShippingLineID
		{
			get { return mShippingLineID; }
			set { mIsChanges = true ;mShippingLineID = value; }
		}
		public Int32 AirlineID
		{
			get { return mAirlineID; }
			set { mIsChanges = true ;mAirlineID = value; }
		}
		public Int32 TruckerID
		{
			get { return mTruckerID; }
			set { mIsChanges = true ;mTruckerID = value; }
		}
		public Boolean IncludeDelivery
		{
			get { return mIncludeDelivery; }
			set { mIsChanges = true ;mIncludeDelivery = value; }
		}
		public String DeliveryZipCode
		{
			get { return mDeliveryZipCode; }
			set { mIsChanges = true ;mDeliveryZipCode = value; }
		}
		public Int32 DeliveryCityID
		{
			get { return mDeliveryCityID; }
			set { mIsChanges = true ;mDeliveryCityID = value; }
		}
		public Int32 DeliveryCountryID
		{
			get { return mDeliveryCountryID; }
			set { mIsChanges = true ;mDeliveryCountryID = value; }
		}
		public Decimal GrossWeight
		{
			get { return mGrossWeight; }
			set { mIsChanges = true ;mGrossWeight = value; }
		}
		public Decimal Volume
		{
			get { return mVolume; }
			set { mIsChanges = true ;mVolume = value; }
		}
		public Decimal ChargeableWeight
		{
			get { return mChargeableWeight; }
			set { mIsChanges = true ;mChargeableWeight = value; }
		}
		public Int32 NumberOfPackages
		{
			get { return mNumberOfPackages; }
			set { mIsChanges = true ;mNumberOfPackages = value; }
		}
		public Boolean IsDangerousGoods
		{
			get { return mIsDangerousGoods; }
			set { mIsChanges = true ;mIsDangerousGoods = value; }
		}
		public String DescriptionOfGoods
		{
			get { return mDescriptionOfGoods; }
			set { mIsChanges = true ;mDescriptionOfGoods = value; }
		}
		public Int32 TemplateID
		{
			get { return mTemplateID; }
			set { mIsChanges = true ;mTemplateID = value; }
		}
		public String Subject
		{
			get { return mSubject; }
			set { mIsChanges = true ;mSubject = value; }
		}
		public String TermsAndConditions
		{
			get { return mTermsAndConditions; }
			set { mIsChanges = true ;mTermsAndConditions = value; }
		}
		public String Notes
		{
			get { return mNotes; }
			set { mIsChanges = true ;mNotes = value; }
		}
		public Int32 QuotationStageID
		{
			get { return mQuotationStageID; }
			set { mIsChanges = true ;mQuotationStageID = value; }
		}
		public Int32 CreatorUserID
		{
			get { return mCreatorUserID; }
			set { mIsChanges = true ;mCreatorUserID = value; }
		}
		public DateTime CreationDate
		{
			get { return mCreationDate; }
			set { mIsChanges = true ;mCreationDate = value; }
		}
		public Int32 ModificatorUserID
		{
			get { return mModificatorUserID; }
			set { mIsChanges = true ;mModificatorUserID = value; }
		}
		public DateTime ModificationDate
		{
			get { return mModificationDate; }
			set { mIsChanges = true ;mModificationDate = value; }
		}
		public Int32 LockingUserID
		{
			get { return mLockingUserID; }
			set { mIsChanges = true ;mLockingUserID = value; }
		}
		public DateTime TimeLocked
		{
			get { return mTimeLocked; }
			set { mIsChanges = true ;mTimeLocked = value; }
		}
		public Int32 SalesLeadID
		{
			get { return mSalesLeadID; }
			set { mIsChanges = true ;mSalesLeadID = value; }
		}
		public Int32 SalesLeadContactID
		{
			get { return mSalesLeadContactID; }
			set { mIsChanges = true ;mSalesLeadContactID = value; }
		}
		public Boolean IsWarehousing
		{
			get { return mIsWarehousing; }
			set { mIsChanges = true ;mIsWarehousing = value; }
		}
		public Int32 MainCriteriaID
		{
			get { return mMainCriteriaID; }
			set { mIsChanges = true ;mMainCriteriaID = value; }
		}
		public Int32 SubCriteriaID
		{
			get { return mSubCriteriaID; }
			set { mIsChanges = true ;mSubCriteriaID = value; }
		}
		public Int32 CustomerID
		{
			get { return mCustomerID; }
			set { mIsChanges = true ;mCustomerID = value; }
		}
		public Int64 CustomerContactID
		{
			get { return mCustomerContactID; }
			set { mIsChanges = true ;mCustomerContactID = value; }
		}
		public Boolean IsFleet
		{
			get { return mIsFleet; }
			set { mIsChanges = true ;mIsFleet = value; }
		}
		public Int32 TemplateID_Transport
		{
			get { return mTemplateID_Transport; }
			set { mIsChanges = true ;mTemplateID_Transport = value; }
		}
		public Int32 TemplateID_Clearance
		{
			get { return mTemplateID_Clearance; }
			set { mIsChanges = true ;mTemplateID_Clearance = value; }
		}
		public String TermsAndConditions_Transport
		{
			get { return mTermsAndConditions_Transport; }
			set { mIsChanges = true ;mTermsAndConditions_Transport = value; }
		}
		public String TermsAndConditions_Clearance
		{
			get { return mTermsAndConditions_Clearance; }
			set { mIsChanges = true ;mTermsAndConditions_Clearance = value; }
		}
		public String Subject_Transport
		{
			get { return mSubject_Transport; }
			set { mIsChanges = true ;mSubject_Transport = value; }
		}
		public String Subject_Clearance
		{
			get { return mSubject_Clearance; }
			set { mIsChanges = true ;mSubject_Clearance = value; }
		}
		#endregion

		#region Functions
		public Boolean GetIsChange()
		{
			return mIsChanges;
		}
		public void SetIsChange(Boolean IsChange)
		{
			mIsChanges = IsChange;
		}
		#endregion
	}

	public partial class CQuotations
	{
		#region "variables"
		/*If "App.Config" isnot exist add it to your Application
		Add this code after <Configuration> tag
		-------------------------------------------------------
		<appsettings>
		<add key="ConnectionString" value="............"/>
		</appsettings>
		-------------------------------------------------------
		where ".........." is connection string to database server*/
		private SqlTransaction tr;
		public List<CVarQuotations> lstCVarQuotations= new List<CVarQuotations>();
		public List<CPKQuotations> lstDeletedCPKQuotations = new List<CPKQuotations>();
		#endregion

		#region "Select Methods"
		public Exception GetList(string WhereClause)
		{
			return DataFill(WhereClause,true);
		}
		public Exception GetListPaging(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotalRecords)
		{
			return DataFill(PageSize, PageNumber, WhereClause, OrderBy, out TotalRecords);
		}
		public Exception GetItem(Int64 ID)
		{
			return DataFill(Convert.ToString(ID), false);
		}
		private Exception DataFill(string Param , Boolean IsList)
		{
			Exception Exp = null;
			SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
			SqlCommand Com;
			SqlDataReader dr;
			lstCVarQuotations.Clear();

			try
			{
				Con.Open();
				tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
				Com = new SqlCommand();
				Com.CommandType = CommandType.StoredProcedure;
				if (IsList == true)
				{
					Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
					Com.CommandText = "[dbo].GetListQuotations";
					Com.Parameters[0].Value = Param;
				}
				else
				{
					Com.CommandText = "[dbo].GetItemQuotations";
					Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
					 Com.Parameters[0].Value = Convert.ToInt64(Param);
				}
				Com.Transaction = tr;
				Com.Connection = Con;
				dr = Com.ExecuteReader();
				try
				{
					while (dr.Read())
					{
						/*Start DataReader*/
						CVarQuotations ObjCVarQuotations = new CVarQuotations();
						ObjCVarQuotations.ID = Convert.ToInt64(dr["ID"].ToString());
						ObjCVarQuotations.mCodeSerial = Convert.ToInt32(dr["CodeSerial"].ToString());
						ObjCVarQuotations.mCode = Convert.ToString(dr["Code"].ToString());
						ObjCVarQuotations.mBranchID = Convert.ToInt32(dr["BranchID"].ToString());
						ObjCVarQuotations.mSalesmanID = Convert.ToInt32(dr["SalesmanID"].ToString());
						ObjCVarQuotations.mDirectionType = Convert.ToInt32(dr["DirectionType"].ToString());
						ObjCVarQuotations.mDirectionIconName = Convert.ToString(dr["DirectionIconName"].ToString());
						ObjCVarQuotations.mDirectionIconStyle = Convert.ToString(dr["DirectionIconStyle"].ToString());
						ObjCVarQuotations.mTransportType = Convert.ToInt32(dr["TransportType"].ToString());
						ObjCVarQuotations.mTransportIconName = Convert.ToString(dr["TransportIconName"].ToString());
						ObjCVarQuotations.mTransportIconStyle = Convert.ToString(dr["TransportIconStyle"].ToString());
						ObjCVarQuotations.mShipmentType = Convert.ToInt32(dr["ShipmentType"].ToString());
						ObjCVarQuotations.mShipperID = Convert.ToInt32(dr["ShipperID"].ToString());
						ObjCVarQuotations.mShipperAddressID = Convert.ToInt64(dr["ShipperAddressID"].ToString());
						ObjCVarQuotations.mShipperContactID = Convert.ToInt64(dr["ShipperContactID"].ToString());
						ObjCVarQuotations.mConsigneeID = Convert.ToInt32(dr["ConsigneeID"].ToString());
						ObjCVarQuotations.mConsigneeAddressID = Convert.ToInt64(dr["ConsigneeAddressID"].ToString());
						ObjCVarQuotations.mConsigneeContactID = Convert.ToInt64(dr["ConsigneeContactID"].ToString());
						ObjCVarQuotations.mAgentID = Convert.ToInt32(dr["AgentID"].ToString());
						ObjCVarQuotations.mAgentAddressID = Convert.ToInt64(dr["AgentAddressID"].ToString());
						ObjCVarQuotations.mAgentContactID = Convert.ToInt64(dr["AgentContactID"].ToString());
						ObjCVarQuotations.mIncotermID = Convert.ToInt32(dr["IncotermID"].ToString());
						ObjCVarQuotations.mCommodityID = Convert.ToInt32(dr["CommodityID"].ToString());
						ObjCVarQuotations.mTransientTime = Convert.ToInt32(dr["TransientTime"].ToString());
						ObjCVarQuotations.mValidity = Convert.ToInt32(dr["Validity"].ToString());
						ObjCVarQuotations.mFreeTime = Convert.ToInt32(dr["FreeTime"].ToString());
						ObjCVarQuotations.mOpenDate = Convert.ToDateTime(dr["OpenDate"].ToString());
						ObjCVarQuotations.mCloseDate = Convert.ToDateTime(dr["CloseDate"].ToString());
						ObjCVarQuotations.mExpirationDate = Convert.ToDateTime(dr["ExpirationDate"].ToString());
						ObjCVarQuotations.mIncludePickup = Convert.ToBoolean(dr["IncludePickup"].ToString());
						ObjCVarQuotations.mPickupCityID = Convert.ToInt32(dr["PickupCityID"].ToString());
						ObjCVarQuotations.mPickupAddressID = Convert.ToInt32(dr["PickupAddressID"].ToString());
						ObjCVarQuotations.mPOLCountryID = Convert.ToInt32(dr["POLCountryID"].ToString());
						ObjCVarQuotations.mPOL = Convert.ToInt32(dr["POL"].ToString());
						ObjCVarQuotations.mPODCountryID = Convert.ToInt32(dr["PODCountryID"].ToString());
						ObjCVarQuotations.mPOD = Convert.ToInt32(dr["POD"].ToString());
						ObjCVarQuotations.mShippingLineID = Convert.ToInt32(dr["ShippingLineID"].ToString());
						ObjCVarQuotations.mAirlineID = Convert.ToInt32(dr["AirlineID"].ToString());
						ObjCVarQuotations.mTruckerID = Convert.ToInt32(dr["TruckerID"].ToString());
						ObjCVarQuotations.mIncludeDelivery = Convert.ToBoolean(dr["IncludeDelivery"].ToString());
						ObjCVarQuotations.mDeliveryZipCode = Convert.ToString(dr["DeliveryZipCode"].ToString());
						ObjCVarQuotations.mDeliveryCityID = Convert.ToInt32(dr["DeliveryCityID"].ToString());
						ObjCVarQuotations.mDeliveryCountryID = Convert.ToInt32(dr["DeliveryCountryID"].ToString());
						ObjCVarQuotations.mGrossWeight = Convert.ToDecimal(dr["GrossWeight"].ToString());
						ObjCVarQuotations.mVolume = Convert.ToDecimal(dr["Volume"].ToString());
						ObjCVarQuotations.mChargeableWeight = Convert.ToDecimal(dr["ChargeableWeight"].ToString());
						ObjCVarQuotations.mNumberOfPackages = Convert.ToInt32(dr["NumberOfPackages"].ToString());
						ObjCVarQuotations.mIsDangerousGoods = Convert.ToBoolean(dr["IsDangerousGoods"].ToString());
						ObjCVarQuotations.mDescriptionOfGoods = Convert.ToString(dr["DescriptionOfGoods"].ToString());
						ObjCVarQuotations.mTemplateID = Convert.ToInt32(dr["TemplateID"].ToString());
						ObjCVarQuotations.mSubject = Convert.ToString(dr["Subject"].ToString());
						ObjCVarQuotations.mTermsAndConditions = Convert.ToString(dr["TermsAndConditions"].ToString());
						ObjCVarQuotations.mNotes = Convert.ToString(dr["Notes"].ToString());
						ObjCVarQuotations.mQuotationStageID = Convert.ToInt32(dr["QuotationStageID"].ToString());
						ObjCVarQuotations.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
						ObjCVarQuotations.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
						ObjCVarQuotations.mModificatorUserID = Convert.ToInt32(dr["ModificatorUserID"].ToString());
						ObjCVarQuotations.mModificationDate = Convert.ToDateTime(dr["ModificationDate"].ToString());
						ObjCVarQuotations.mLockingUserID = Convert.ToInt32(dr["LockingUserID"].ToString());
						ObjCVarQuotations.mTimeLocked = Convert.ToDateTime(dr["TimeLocked"].ToString());
						ObjCVarQuotations.mSalesLeadID = Convert.ToInt32(dr["SalesLeadID"].ToString());
						ObjCVarQuotations.mSalesLeadContactID = Convert.ToInt32(dr["SalesLeadContactID"].ToString());
						ObjCVarQuotations.mIsWarehousing = Convert.ToBoolean(dr["IsWarehousing"].ToString());
						ObjCVarQuotations.mMainCriteriaID = Convert.ToInt32(dr["MainCriteriaID"].ToString());
						ObjCVarQuotations.mSubCriteriaID = Convert.ToInt32(dr["SubCriteriaID"].ToString());
						ObjCVarQuotations.mCustomerID = Convert.ToInt32(dr["CustomerID"].ToString());
						ObjCVarQuotations.mCustomerContactID = Convert.ToInt64(dr["CustomerContactID"].ToString());
						ObjCVarQuotations.mIsFleet = Convert.ToBoolean(dr["IsFleet"].ToString());
						ObjCVarQuotations.mTemplateID_Transport = Convert.ToInt32(dr["TemplateID_Transport"].ToString());
						ObjCVarQuotations.mTemplateID_Clearance = Convert.ToInt32(dr["TemplateID_Clearance"].ToString());
						ObjCVarQuotations.mTermsAndConditions_Transport = Convert.ToString(dr["TermsAndConditions_Transport"].ToString());
						ObjCVarQuotations.mTermsAndConditions_Clearance = Convert.ToString(dr["TermsAndConditions_Clearance"].ToString());
						ObjCVarQuotations.mSubject_Transport = Convert.ToString(dr["Subject_Transport"].ToString());
						ObjCVarQuotations.mSubject_Clearance = Convert.ToString(dr["Subject_Clearance"].ToString());
						lstCVarQuotations.Add(ObjCVarQuotations);
					}
				}
				catch (Exception ex)
				{
					Exp = ex;
				}
				finally
				{
					if (dr != null)
					{
						dr.Close();
						dr.Dispose();
					}
				}
				tr.Commit();
			}
			catch ( Exception ex)
			{
				Exp = ex;
			}
			finally
			{
				Con.Close();
				Con.Dispose();
			}
			return Exp;
		}

		private Exception DataFill(Int32 PageSize, Int32 PageNumber, string WhereClause, string OrderBy, out Int32 TotRecs)
		{
			Exception Exp = null;
			TotRecs = 0;
			SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
			SqlCommand Com;
			SqlDataReader dr;
			lstCVarQuotations.Clear();

			try
			{
				Con.Open();
				tr = Con.BeginTransaction(IsolationLevel.ReadCommitted);
				Com = new SqlCommand();
				Com.CommandType = CommandType.StoredProcedure;
				Com.Parameters.Add(new SqlParameter("@PageSize", SqlDbType.Int));
				Com.Parameters.Add(new SqlParameter("@PageNumber", SqlDbType.Int));
				Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
				Com.Parameters.Add(new SqlParameter("@OrderBy", SqlDbType.VarChar));
				Com.CommandText = "[dbo].GetListPagingQuotations";
				Com.Parameters[0].Value = PageSize;
				Com.Parameters[1].Value = PageNumber;
				Com.Parameters[2].Value = WhereClause;
				Com.Parameters[3].Value = OrderBy;
				Com.Transaction = tr;
				Com.Connection = Con;
				dr = Com.ExecuteReader();
				try
				{
					while (dr.Read())
					{
						/*Start DataReader*/
						CVarQuotations ObjCVarQuotations = new CVarQuotations();
						ObjCVarQuotations.ID = Convert.ToInt64(dr["ID"].ToString());
						ObjCVarQuotations.mCodeSerial = Convert.ToInt32(dr["CodeSerial"].ToString());
						ObjCVarQuotations.mCode = Convert.ToString(dr["Code"].ToString());
						ObjCVarQuotations.mBranchID = Convert.ToInt32(dr["BranchID"].ToString());
						ObjCVarQuotations.mSalesmanID = Convert.ToInt32(dr["SalesmanID"].ToString());
						ObjCVarQuotations.mDirectionType = Convert.ToInt32(dr["DirectionType"].ToString());
						ObjCVarQuotations.mDirectionIconName = Convert.ToString(dr["DirectionIconName"].ToString());
						ObjCVarQuotations.mDirectionIconStyle = Convert.ToString(dr["DirectionIconStyle"].ToString());
						ObjCVarQuotations.mTransportType = Convert.ToInt32(dr["TransportType"].ToString());
						ObjCVarQuotations.mTransportIconName = Convert.ToString(dr["TransportIconName"].ToString());
						ObjCVarQuotations.mTransportIconStyle = Convert.ToString(dr["TransportIconStyle"].ToString());
						ObjCVarQuotations.mShipmentType = Convert.ToInt32(dr["ShipmentType"].ToString());
						ObjCVarQuotations.mShipperID = Convert.ToInt32(dr["ShipperID"].ToString());
						ObjCVarQuotations.mShipperAddressID = Convert.ToInt64(dr["ShipperAddressID"].ToString());
						ObjCVarQuotations.mShipperContactID = Convert.ToInt64(dr["ShipperContactID"].ToString());
						ObjCVarQuotations.mConsigneeID = Convert.ToInt32(dr["ConsigneeID"].ToString());
						ObjCVarQuotations.mConsigneeAddressID = Convert.ToInt64(dr["ConsigneeAddressID"].ToString());
						ObjCVarQuotations.mConsigneeContactID = Convert.ToInt64(dr["ConsigneeContactID"].ToString());
						ObjCVarQuotations.mAgentID = Convert.ToInt32(dr["AgentID"].ToString());
						ObjCVarQuotations.mAgentAddressID = Convert.ToInt64(dr["AgentAddressID"].ToString());
						ObjCVarQuotations.mAgentContactID = Convert.ToInt64(dr["AgentContactID"].ToString());
						ObjCVarQuotations.mIncotermID = Convert.ToInt32(dr["IncotermID"].ToString());
						ObjCVarQuotations.mCommodityID = Convert.ToInt32(dr["CommodityID"].ToString());
						ObjCVarQuotations.mTransientTime = Convert.ToInt32(dr["TransientTime"].ToString());
						ObjCVarQuotations.mValidity = Convert.ToInt32(dr["Validity"].ToString());
						ObjCVarQuotations.mFreeTime = Convert.ToInt32(dr["FreeTime"].ToString());
						ObjCVarQuotations.mOpenDate = Convert.ToDateTime(dr["OpenDate"].ToString());
						ObjCVarQuotations.mCloseDate = Convert.ToDateTime(dr["CloseDate"].ToString());
						ObjCVarQuotations.mExpirationDate = Convert.ToDateTime(dr["ExpirationDate"].ToString());
						ObjCVarQuotations.mIncludePickup = Convert.ToBoolean(dr["IncludePickup"].ToString());
						ObjCVarQuotations.mPickupCityID = Convert.ToInt32(dr["PickupCityID"].ToString());
						ObjCVarQuotations.mPickupAddressID = Convert.ToInt32(dr["PickupAddressID"].ToString());
						ObjCVarQuotations.mPOLCountryID = Convert.ToInt32(dr["POLCountryID"].ToString());
						ObjCVarQuotations.mPOL = Convert.ToInt32(dr["POL"].ToString());
						ObjCVarQuotations.mPODCountryID = Convert.ToInt32(dr["PODCountryID"].ToString());
						ObjCVarQuotations.mPOD = Convert.ToInt32(dr["POD"].ToString());
						ObjCVarQuotations.mShippingLineID = Convert.ToInt32(dr["ShippingLineID"].ToString());
						ObjCVarQuotations.mAirlineID = Convert.ToInt32(dr["AirlineID"].ToString());
						ObjCVarQuotations.mTruckerID = Convert.ToInt32(dr["TruckerID"].ToString());
						ObjCVarQuotations.mIncludeDelivery = Convert.ToBoolean(dr["IncludeDelivery"].ToString());
						ObjCVarQuotations.mDeliveryZipCode = Convert.ToString(dr["DeliveryZipCode"].ToString());
						ObjCVarQuotations.mDeliveryCityID = Convert.ToInt32(dr["DeliveryCityID"].ToString());
						ObjCVarQuotations.mDeliveryCountryID = Convert.ToInt32(dr["DeliveryCountryID"].ToString());
						ObjCVarQuotations.mGrossWeight = Convert.ToDecimal(dr["GrossWeight"].ToString());
						ObjCVarQuotations.mVolume = Convert.ToDecimal(dr["Volume"].ToString());
						ObjCVarQuotations.mChargeableWeight = Convert.ToDecimal(dr["ChargeableWeight"].ToString());
						ObjCVarQuotations.mNumberOfPackages = Convert.ToInt32(dr["NumberOfPackages"].ToString());
						ObjCVarQuotations.mIsDangerousGoods = Convert.ToBoolean(dr["IsDangerousGoods"].ToString());
						ObjCVarQuotations.mDescriptionOfGoods = Convert.ToString(dr["DescriptionOfGoods"].ToString());
						ObjCVarQuotations.mTemplateID = Convert.ToInt32(dr["TemplateID"].ToString());
						ObjCVarQuotations.mSubject = Convert.ToString(dr["Subject"].ToString());
						ObjCVarQuotations.mTermsAndConditions = Convert.ToString(dr["TermsAndConditions"].ToString());
						ObjCVarQuotations.mNotes = Convert.ToString(dr["Notes"].ToString());
						ObjCVarQuotations.mQuotationStageID = Convert.ToInt32(dr["QuotationStageID"].ToString());
						ObjCVarQuotations.mCreatorUserID = Convert.ToInt32(dr["CreatorUserID"].ToString());
						ObjCVarQuotations.mCreationDate = Convert.ToDateTime(dr["CreationDate"].ToString());
						ObjCVarQuotations.mModificatorUserID = Convert.ToInt32(dr["ModificatorUserID"].ToString());
						ObjCVarQuotations.mModificationDate = Convert.ToDateTime(dr["ModificationDate"].ToString());
						ObjCVarQuotations.mLockingUserID = Convert.ToInt32(dr["LockingUserID"].ToString());
						ObjCVarQuotations.mTimeLocked = Convert.ToDateTime(dr["TimeLocked"].ToString());
						ObjCVarQuotations.mSalesLeadID = Convert.ToInt32(dr["SalesLeadID"].ToString());
						ObjCVarQuotations.mSalesLeadContactID = Convert.ToInt32(dr["SalesLeadContactID"].ToString());
						ObjCVarQuotations.mIsWarehousing = Convert.ToBoolean(dr["IsWarehousing"].ToString());
						ObjCVarQuotations.mMainCriteriaID = Convert.ToInt32(dr["MainCriteriaID"].ToString());
						ObjCVarQuotations.mSubCriteriaID = Convert.ToInt32(dr["SubCriteriaID"].ToString());
						ObjCVarQuotations.mCustomerID = Convert.ToInt32(dr["CustomerID"].ToString());
						ObjCVarQuotations.mCustomerContactID = Convert.ToInt64(dr["CustomerContactID"].ToString());
						ObjCVarQuotations.mIsFleet = Convert.ToBoolean(dr["IsFleet"].ToString());
						ObjCVarQuotations.mTemplateID_Transport = Convert.ToInt32(dr["TemplateID_Transport"].ToString());
						ObjCVarQuotations.mTemplateID_Clearance = Convert.ToInt32(dr["TemplateID_Clearance"].ToString());
						ObjCVarQuotations.mTermsAndConditions_Transport = Convert.ToString(dr["TermsAndConditions_Transport"].ToString());
						ObjCVarQuotations.mTermsAndConditions_Clearance = Convert.ToString(dr["TermsAndConditions_Clearance"].ToString());
						ObjCVarQuotations.mSubject_Transport = Convert.ToString(dr["Subject_Transport"].ToString());
						ObjCVarQuotations.mSubject_Clearance = Convert.ToString(dr["Subject_Clearance"].ToString());
						TotRecs = Convert.ToInt32(dr["TotalRecords"].ToString());
						lstCVarQuotations.Add(ObjCVarQuotations);
					}
				}
				catch (Exception ex)
				{
					Exp = ex;
				}
				finally
				{
					if (dr != null)
					{
						dr.Close();
						dr.Dispose();
					}
				}
				tr.Commit();
			}
			catch ( Exception ex)
			{
				Exp = ex;
			}
			finally
			{
				Con.Close();
				Con.Dispose();
			}
			return Exp;
		}

		#endregion
			#region "Common Methods"
			private void BeginTrans(SqlCommand Com,SqlConnection Con)
				{

					tr = Con.BeginTransaction(IsolationLevel.Serializable);
					Com.CommandType = CommandType.StoredProcedure;
				}

			private void EndTrans(SqlCommand Com,SqlConnection Con)
				{

					Com.Transaction = tr;
					Com.Connection = Con;
					Com.ExecuteNonQuery();
					tr.Commit();
				}

			#endregion
			#region "Set List Method"
			private Exception SetList(string WhereClause,Boolean IsDelete)
				{

					Exception Exp = null;
					SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
					SqlCommand Com;
					try
						{
							Con.Open();
							Com = new SqlCommand();
							if(IsDelete == true)
							Com.CommandText = "[dbo].DeleteListQuotations";
							else
							Com.CommandText = "[dbo].UpdateListQuotations";
								Com.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar));
									BeginTrans(Com,Con);
								Com.Parameters[0].Value = WhereClause;
									EndTrans(Com,Con);
						}
					catch ( Exception ex)
						{
							Exp = ex;
						}
					finally
						{
							Con.Close();
							Con.Dispose();
						}
					return Exp;
				}

			#endregion
			#region "Delete Methods"
			public Exception DeleteItem(List<CPKQuotations> DeleteList)
				{

					Exception Exp = null;
					SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
					SqlCommand Com;
					try
						{
							Con.Open();
							Com = new SqlCommand();
							Com.CommandText = "[dbo].DeleteItemQuotations";
							Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt));
							foreach (CPKQuotations ObjCPKQuotations in DeleteList)
								{
									BeginTrans(Com,Con);
									 Com.Parameters[0].Value = Convert.ToInt64(ObjCPKQuotations.ID);
									EndTrans(Com,Con);
								}
						}
					catch ( Exception ex)
						{
							Exp =ex;
						}
					finally
						{
							Con.Close();
							Con.Dispose();
							DeleteList.Clear();
						}
					return Exp;
				}

			public Exception DeleteList(string WhereClause)
				{

					return SetList(WhereClause,true);
				}

			#endregion
			#region "Save Methods"
			public Exception SaveMethod(List<CVarQuotations> SaveList)
				{
					Exception Exp = null;
					SqlConnection Con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
					SqlCommand Com;
					try
						{
							Con.Open();
							Com = new SqlCommand();
							Com.Parameters.Add(new SqlParameter("@CodeSerial", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@Code", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@BranchID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@SalesmanID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@DirectionType", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@DirectionIconName", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@DirectionIconStyle", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@TransportType", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@TransportIconName", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@TransportIconStyle", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@ShipmentType", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@ShipperID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@ShipperAddressID", SqlDbType.BigInt));
							Com.Parameters.Add(new SqlParameter("@ShipperContactID", SqlDbType.BigInt));
							Com.Parameters.Add(new SqlParameter("@ConsigneeID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@ConsigneeAddressID", SqlDbType.BigInt));
							Com.Parameters.Add(new SqlParameter("@ConsigneeContactID", SqlDbType.BigInt));
							Com.Parameters.Add(new SqlParameter("@AgentID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@AgentAddressID", SqlDbType.BigInt));
							Com.Parameters.Add(new SqlParameter("@AgentContactID", SqlDbType.BigInt));
							Com.Parameters.Add(new SqlParameter("@IncotermID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@CommodityID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@TransientTime", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@Validity", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@FreeTime", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@OpenDate", SqlDbType.DateTime));
							Com.Parameters.Add(new SqlParameter("@CloseDate", SqlDbType.DateTime));
							Com.Parameters.Add(new SqlParameter("@ExpirationDate", SqlDbType.DateTime));
							Com.Parameters.Add(new SqlParameter("@IncludePickup", SqlDbType.Bit));
							Com.Parameters.Add(new SqlParameter("@PickupCityID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@PickupAddressID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@POLCountryID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@POL", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@PODCountryID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@POD", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@ShippingLineID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@AirlineID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@TruckerID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@IncludeDelivery", SqlDbType.Bit));
							Com.Parameters.Add(new SqlParameter("@DeliveryZipCode", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@DeliveryCityID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@DeliveryCountryID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@GrossWeight", SqlDbType.Decimal));
							Com.Parameters.Add(new SqlParameter("@Volume", SqlDbType.Decimal));
							Com.Parameters.Add(new SqlParameter("@ChargeableWeight", SqlDbType.Decimal));
							Com.Parameters.Add(new SqlParameter("@NumberOfPackages", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@IsDangerousGoods", SqlDbType.Bit));
							Com.Parameters.Add(new SqlParameter("@DescriptionOfGoods", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@TemplateID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@Subject", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@TermsAndConditions", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@QuotationStageID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@CreatorUserID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@CreationDate", SqlDbType.DateTime));
							Com.Parameters.Add(new SqlParameter("@ModificatorUserID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@ModificationDate", SqlDbType.DateTime));
							Com.Parameters.Add(new SqlParameter("@LockingUserID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@TimeLocked", SqlDbType.DateTime));
							Com.Parameters.Add(new SqlParameter("@SalesLeadID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@SalesLeadContactID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@IsWarehousing", SqlDbType.Bit));
							Com.Parameters.Add(new SqlParameter("@MainCriteriaID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@SubCriteriaID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@CustomerID", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@CustomerContactID", SqlDbType.BigInt));
							Com.Parameters.Add(new SqlParameter("@IsFleet", SqlDbType.Bit));
							Com.Parameters.Add(new SqlParameter("@TemplateID_Transport", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@TemplateID_Clearance", SqlDbType.Int));
							Com.Parameters.Add(new SqlParameter("@TermsAndConditions_Transport", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@TermsAndConditions_Clearance", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@Subject_Transport", SqlDbType.NVarChar));
							Com.Parameters.Add(new SqlParameter("@Subject_Clearance", SqlDbType.NVarChar));
								SqlParameter paraID = Com.Parameters.Add(new SqlParameter("@ID", SqlDbType.BigInt , 0,ParameterDirection.Input,false,0,0,"ID",DataRowVersion.Default,null));
							foreach (CVarQuotations ObjCVarQuotations in SaveList)
								{
							if(ObjCVarQuotations.mIsChanges == true)
								{
									if(ObjCVarQuotations.ID == 0)
									{
										Com.CommandText = "[dbo].InsertItemQuotations";
								paraID.Direction = ParameterDirection.Output;
									}
								else if(ObjCVarQuotations.ID!=0)
									{
										Com.CommandText = "[dbo].UpdateItemQuotations";
								paraID.Direction = ParameterDirection.Input;
									}
										BeginTrans(Com,Con);
								if(ObjCVarQuotations.ID!=0)
									{
								Com.Parameters["@ID"].Value =ObjCVarQuotations.ID;
									}
								Com.Parameters["@CodeSerial"].Value =ObjCVarQuotations.CodeSerial;
								Com.Parameters["@Code"].Value =ObjCVarQuotations.Code;
								Com.Parameters["@BranchID"].Value =ObjCVarQuotations.BranchID;
								Com.Parameters["@SalesmanID"].Value =ObjCVarQuotations.SalesmanID;
								Com.Parameters["@DirectionType"].Value =ObjCVarQuotations.DirectionType;
								Com.Parameters["@DirectionIconName"].Value =ObjCVarQuotations.DirectionIconName;
								Com.Parameters["@DirectionIconStyle"].Value =ObjCVarQuotations.DirectionIconStyle;
								Com.Parameters["@TransportType"].Value =ObjCVarQuotations.TransportType;
								Com.Parameters["@TransportIconName"].Value =ObjCVarQuotations.TransportIconName;
								Com.Parameters["@TransportIconStyle"].Value =ObjCVarQuotations.TransportIconStyle;
								Com.Parameters["@ShipmentType"].Value =ObjCVarQuotations.ShipmentType;
								Com.Parameters["@ShipperID"].Value =ObjCVarQuotations.ShipperID;
								Com.Parameters["@ShipperAddressID"].Value =ObjCVarQuotations.ShipperAddressID;
								Com.Parameters["@ShipperContactID"].Value =ObjCVarQuotations.ShipperContactID;
								Com.Parameters["@ConsigneeID"].Value =ObjCVarQuotations.ConsigneeID;
								Com.Parameters["@ConsigneeAddressID"].Value =ObjCVarQuotations.ConsigneeAddressID;
								Com.Parameters["@ConsigneeContactID"].Value =ObjCVarQuotations.ConsigneeContactID;
								Com.Parameters["@AgentID"].Value =ObjCVarQuotations.AgentID;
								Com.Parameters["@AgentAddressID"].Value =ObjCVarQuotations.AgentAddressID;
								Com.Parameters["@AgentContactID"].Value =ObjCVarQuotations.AgentContactID;
								Com.Parameters["@IncotermID"].Value =ObjCVarQuotations.IncotermID;
								Com.Parameters["@CommodityID"].Value =ObjCVarQuotations.CommodityID;
								Com.Parameters["@TransientTime"].Value =ObjCVarQuotations.TransientTime;
								Com.Parameters["@Validity"].Value =ObjCVarQuotations.Validity;
								Com.Parameters["@FreeTime"].Value =ObjCVarQuotations.FreeTime;
								Com.Parameters["@OpenDate"].Value =ObjCVarQuotations.OpenDate;
								Com.Parameters["@CloseDate"].Value =ObjCVarQuotations.CloseDate;
								Com.Parameters["@ExpirationDate"].Value =ObjCVarQuotations.ExpirationDate;
								Com.Parameters["@IncludePickup"].Value =ObjCVarQuotations.IncludePickup;
								Com.Parameters["@PickupCityID"].Value =ObjCVarQuotations.PickupCityID;
								Com.Parameters["@PickupAddressID"].Value =ObjCVarQuotations.PickupAddressID;
								Com.Parameters["@POLCountryID"].Value =ObjCVarQuotations.POLCountryID;
								Com.Parameters["@POL"].Value =ObjCVarQuotations.POL;
								Com.Parameters["@PODCountryID"].Value =ObjCVarQuotations.PODCountryID;
								Com.Parameters["@POD"].Value =ObjCVarQuotations.POD;
								Com.Parameters["@ShippingLineID"].Value =ObjCVarQuotations.ShippingLineID;
								Com.Parameters["@AirlineID"].Value =ObjCVarQuotations.AirlineID;
								Com.Parameters["@TruckerID"].Value =ObjCVarQuotations.TruckerID;
								Com.Parameters["@IncludeDelivery"].Value =ObjCVarQuotations.IncludeDelivery;
								Com.Parameters["@DeliveryZipCode"].Value =ObjCVarQuotations.DeliveryZipCode;
								Com.Parameters["@DeliveryCityID"].Value =ObjCVarQuotations.DeliveryCityID;
								Com.Parameters["@DeliveryCountryID"].Value =ObjCVarQuotations.DeliveryCountryID;
								Com.Parameters["@GrossWeight"].Value =ObjCVarQuotations.GrossWeight;
								Com.Parameters["@Volume"].Value =ObjCVarQuotations.Volume;
								Com.Parameters["@ChargeableWeight"].Value =ObjCVarQuotations.ChargeableWeight;
								Com.Parameters["@NumberOfPackages"].Value =ObjCVarQuotations.NumberOfPackages;
								Com.Parameters["@IsDangerousGoods"].Value =ObjCVarQuotations.IsDangerousGoods;
								Com.Parameters["@DescriptionOfGoods"].Value =ObjCVarQuotations.DescriptionOfGoods;
								Com.Parameters["@TemplateID"].Value =ObjCVarQuotations.TemplateID;
								Com.Parameters["@Subject"].Value =ObjCVarQuotations.Subject;
								Com.Parameters["@TermsAndConditions"].Value =ObjCVarQuotations.TermsAndConditions;
								Com.Parameters["@Notes"].Value =ObjCVarQuotations.Notes;
								Com.Parameters["@QuotationStageID"].Value =ObjCVarQuotations.QuotationStageID;
								Com.Parameters["@CreatorUserID"].Value =ObjCVarQuotations.CreatorUserID;
								Com.Parameters["@CreationDate"].Value =ObjCVarQuotations.CreationDate;
								Com.Parameters["@ModificatorUserID"].Value =ObjCVarQuotations.ModificatorUserID;
								Com.Parameters["@ModificationDate"].Value =ObjCVarQuotations.ModificationDate;
								Com.Parameters["@LockingUserID"].Value =ObjCVarQuotations.LockingUserID;
								Com.Parameters["@TimeLocked"].Value =ObjCVarQuotations.TimeLocked;
								Com.Parameters["@SalesLeadID"].Value =ObjCVarQuotations.SalesLeadID;
								Com.Parameters["@SalesLeadContactID"].Value =ObjCVarQuotations.SalesLeadContactID;
								Com.Parameters["@IsWarehousing"].Value =ObjCVarQuotations.IsWarehousing;
								Com.Parameters["@MainCriteriaID"].Value =ObjCVarQuotations.MainCriteriaID;
								Com.Parameters["@SubCriteriaID"].Value =ObjCVarQuotations.SubCriteriaID;
								Com.Parameters["@CustomerID"].Value =ObjCVarQuotations.CustomerID;
								Com.Parameters["@CustomerContactID"].Value =ObjCVarQuotations.CustomerContactID;
								Com.Parameters["@IsFleet"].Value =ObjCVarQuotations.IsFleet;
								Com.Parameters["@TemplateID_Transport"].Value =ObjCVarQuotations.TemplateID_Transport;
								Com.Parameters["@TemplateID_Clearance"].Value =ObjCVarQuotations.TemplateID_Clearance;
								Com.Parameters["@TermsAndConditions_Transport"].Value =ObjCVarQuotations.TermsAndConditions_Transport;
								Com.Parameters["@TermsAndConditions_Clearance"].Value =ObjCVarQuotations.TermsAndConditions_Clearance;
								Com.Parameters["@Subject_Transport"].Value =ObjCVarQuotations.Subject_Transport;
								Com.Parameters["@Subject_Clearance"].Value =ObjCVarQuotations.Subject_Clearance;
										EndTrans(Com,Con);
								if(ObjCVarQuotations.ID==0)
										{
								ObjCVarQuotations.ID = Convert.ToInt64(Com.Parameters["@ID"].Value);
										}
									ObjCVarQuotations.mIsChanges = false;
									}
								}
						}
					catch ( Exception ex)
						{
							Exp = ex;
							if (tr != null)
								tr.Rollback();
						}
					finally
						{
							Con.Close();
							Con.Dispose();
						}
					return Exp;
				}
			#endregion
			#region "Update Methods"
			public Exception UpdateList(string UpdateClause)
				{

					return SetList(UpdateClause,false);
				}

			#endregion
		}
}
